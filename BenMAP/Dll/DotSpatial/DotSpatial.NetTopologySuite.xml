<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotSpatial.NetTopologySuite</name>
    </assembly>
    <members>
        <member name="T:NetTopologySuite.Algorithm.IBoundaryNodeRule">
            <summary>
             An interface for rules which determine whether node points
             which are in boundaries of <see cref="T:GeoAPI.Geometries.ILineal"/> geometry components
             are in the boundary of the parent geometry collection.
             The SFS specifies a single kind of boundary node rule,
             the <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryNodeRule"/> rule.
             However, other kinds of Boundary Node Rules are appropriate
             in specific situations (for instance, linear network topology
             usually follows the <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.EndPointBoundaryNodeRule"/>.)
             Some JTS operations  
             (such as <see cref="T:NetTopologySuite.Operation.Relate.RelateOp"/>, <see cref="T:NetTopologySuite.Operation.BoundaryOp"/> and <see cref="T:NetTopologySuite.Operation.IsSimpleOp"/>)
             allow the BoundaryNodeRule to be specified,
             and respect the supplied rule when computing the results of the operation.
             <para/>
             An example use case for a non-SFS-standard Boundary Node Rule is
             that of checking that a set of <see cref="T:GeoAPI.Geometries.ILineString"/>s have 
             valid linear network topology, when turn-arounds are represented
             as closed rings.  In this situation, the entry road to the
             turn-around is only valid when it touches the turn-around ring
             at the single (common) endpoint.  This is equivalent 
             to requiring the set of <tt>LineString</tt>s to be 
             <b>simple</b> under the <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.EndPointBoundaryNodeRule"/>.
             The SFS-standard <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryNodeRule"/> is not 
             sufficient to perform this test, since it
             states that closed rings have <b>no</b> boundary points.
             <para/>
             This interface and its subclasses follow the <tt>Strategy</tt> design pattern.
            </summary>
             <author>Martin Davis</author>
             <seealso cref="T:NetTopologySuite.Operation.Relate.RelateOp"/>
             <seealso cref="T:NetTopologySuite.Operation.BoundaryOp"/>
             <seealso cref="T:NetTopologySuite.Operation.IsSimpleOp"/>
             <seealso cref="T:NetTopologySuite.Algorithm.PointLocator"/>
        </member>
        <member name="M:NetTopologySuite.Algorithm.IBoundaryNodeRule.IsInBoundary(System.Int32)">
            <summary>
             Tests whether a point that lies in <c>boundaryCount</c>
             geometry component boundaries is considered to form part of the boundary
             of the parent geometry.
            </summary>
             <param name="boundaryCount">boundaryCount the number of component boundaries that this point occurs in</param>
            <returns>true if points in this number of boundaries lie in the parent boundary</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.BoundaryNodeRules">
            <summary>
            Provides access to static instances of common <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/>s.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryRule">
            <summary>
             The Mod-2 Boundary Node Rule (which is the rule specified in the OGC SFS).
            </summary>
             <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryNodeRule"/>
        </member>
        <member name="F:NetTopologySuite.Algorithm.BoundaryNodeRules.EndpointBoundaryRule">
            <summary>The Endpoint Boundary Node Rule.</summary>
             <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.EndPointBoundaryNodeRule"/>
        </member>
        <member name="F:NetTopologySuite.Algorithm.BoundaryNodeRules.MultivalentEndpointBoundaryRule">
            <summary>The MultiValent Endpoint Boundary Node Rule.</summary>
            <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.MultiValentEndPointBoundaryNodeRule"/>
        </member>
        <member name="F:NetTopologySuite.Algorithm.BoundaryNodeRules.MonoValentEndpointBoundaryRule">
            <summary>The Monovalent Endpoint Boundary Node Rule.</summary>
            <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.MonoValentEndPointBoundaryNodeRule"/>
        </member>
        <member name="F:NetTopologySuite.Algorithm.BoundaryNodeRules.OgcSfsBoundaryRule">
            <summary>
             The Boundary Node Rule specified by the OGC Simple Features Specification,
             which is the same as the Mod-2 rule.
             </summary>
             <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryNodeRule"/>
        </member>
        <member name="T:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryNodeRule">
            <summary>
             A <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> specifies that points are in the
             boundary of a lineal geometry iff
             the point lies on the boundary of an odd number
             of components.
             Under this rule <see cref="T:GeoAPI.Geometries.ILinearRing"/>s and closed
             <see cref="T:GeoAPI.Geometries.ILineString"/>s have an empty boundary.
            </summary>
             <remarks>
             This is the rule specified by the <i>OGC SFS</i>,
             and is the default rule used in JTS.
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Algorithm.BoundaryNodeRules.EndPointBoundaryNodeRule">
            <summary>
            A <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule" /> which specifies that any points which are endpoints
            of lineal components are in the boundary of the
            parent geometry.
            This corresponds to the "intuitive" topological definition
            of boundary.
            Under this rule <see cref="T:NetTopologySuite.Geometries.LinearRing" />s have a non-empty boundary
            (the common endpoint of the underlying LineString).
            </summary>
            <remarks>
            This rule is useful when dealing with linear networks.
            For example, it can be used to check
            whether linear networks are correctly noded.
            The usual network topology constraint is that linear segments may touch only at endpoints.
            In the case of a segment touching a closed segment (ring) at one point,
            the Mod2 rule cannot distinguish between the permitted case of touching at the
            node point and the invalid case of touching at some other interior (non-node) point.
            The EndPoint rule does distinguish between these cases,
            so is more appropriate for use.
            </remarks>
            <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Algorithm.BoundaryNodeRules.MultiValentEndPointBoundaryNodeRule">
            <summary>
             A <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> which determines that only
             endpoints with valency greater than 1 are on the boundary.
             This corresponds to the boundary of a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>
             being all the "attached" endpoints, but not
             the "unattached" ones.
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Algorithm.BoundaryNodeRules.MonoValentEndPointBoundaryNodeRule">
            <summary>
             A <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> which determines that only
             endpoints with valency of exactly 1 are on the boundary.
             This corresponds to the boundary of a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>
             being all the "unattached" endpoints.
             </summary>
             <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Algorithm.CentralEndpointIntersector">
            <summary>
            Computes an approximate intersection of two line segments
            by taking the most central of the endpoints of the segments.
            This is effective in cases where the segments are nearly parallel
            and should intersect at an endpoint.
            It is also a reasonable strategy for cases where the 
            endpoint of one segment lies on or almost on the interior of another one.
            Taking the most central endpoint ensures that the computed intersection
            point lies in the envelope of the segments.
            Also, by always returning one of the input points, this should result 
            in reducing segment fragmentation.
            Intended to be used as a last resort for 
            computing ill-conditioned intersection situations which 
            cause other methods to fail.
            </summary>
            <remarks>
            WARNING: in some cases this algorithm makes a poor choice of endpoint.
            It has been replaced by a better heuristic in <see cref="T:NetTopologySuite.Algorithm.RobustLineIntersector" />.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentralEndpointIntersector.GetIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes an approximate intersection of two line segments
            by taking the most central of the endpoints of the segments.
            This is effective in cases where the segments are nearly parallel
            and should intersect at an endpoint.
            </summary>
            <param name="p00">The 1st coordinate of the 1st line segement.</param>
            <param name="p01">The 2nd coordinate of the 1st line segemen.</param>
            <param name="p10">The 1st coordinate of the 2nd line segement.</param>
            <param name="p11">The 2nd coordinate of the 2nd line segement.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentralEndpointIntersector.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an instance of this class using the provided input coordinates
            </summary>
            <param name="p00">The 1st coordinate of the 1st line segement.</param>
            <param name="p01">The 2nd coordinate of the 1st line segemen.</param>
            <param name="p10">The 1st coordinate of the 2nd line segement.</param>
            <param name="p11">The 2nd coordinate of the 2nd line segement.</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.CentralEndpointIntersector.Intersection">
            <summary>
            Gets the intersection point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentralEndpointIntersector.FindNearestPoint(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Determines a point closest to the given point.
            </summary>        
        </member>
        <member name="T:NetTopologySuite.Algorithm.Centroid">
            <summary>
            Computes the centroid of a <see cref="T:GeoAPI.Geometries.IGeometry"/> of any dimension.
            If the geometry is nominally of higher dimension, 
            but has lower <i>effective</i> dimension 
            (i.e. contains only components
            having zero length or area), 
            the centroid will be computed as for the equivalent lower-dimension geometry.
            If the input geometry is empty, a
            <c>null</c> Coordinate is returned.
            
            <h2>Algorithm</h2>
            <list type="Bullet">
            <item><b>Dimension 2</b> - the centroid ic computed
            as a weighted sum of the centroids
            of a decomposition of the area into (possibly overlapping) triangles.
            Holes and multipolygons are handled correctly.
            See <c>http://www.faqs.org/faqs/graphics/algorithms-faq/</c>
            for further details of the basic approach.</item>
            <item><b>Dimension 1</b> - Computes the average of the midpoints
            of all line segments weighted by the segment length.
            Zero-length lines are treated as points.
            </item>
            <item><b>Dimension 0</b> - Compute the average coordinate over all points.
            Repeated points are all included in the average
            </item>
            </list>
            If the input geometries are empty, a <c>null</c> Coordinate is returned.
            </summary>
            <version>1.7</version>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.GetCentroid(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the centroid point of a geometry.
            </summary>
            <param name="geom">The geometry to use</param>
            <returns>
            The centroid point, or null if the geometry is empty
            </returns>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Centroid._areaBasePt">
            <summary>
            the point all triangles are based at
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Centroid._triangleCent3">
            <summary>
            temporary variable to hold centroid of triangle
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Centroid._areasum2">
            <summary>
            Partial area sum
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Centroid._cg3">
            <summary>
            partial centroid sum
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new instance for computing the centroid of a geometry
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a <see cref="T:GeoAPI.Geometries.IGeometry"/> to the centroid total.
            </summary>
            <param name="geom">>The <see cref="T:GeoAPI.Geometries.IGeometry"/> to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.GetCentroid">
            <summary>
            Gets the computed centroid.
            </summary>
            <returns>The computed centroid, or null if the input is empty</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.Centroid3(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes three times the centroid of the triangle p1-p2-p3.
            The factor of 3 is
            left in to permit division to be avoided until later.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.Area2(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns twice the signed area of the triangle p1-p2-p3.
            The area is positive if the triangle is oriented CCW, and negative if CW.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.AddLineSegments(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Adds the line segments defined by an array of coordinates
            to the linear centroid accumulators.
            </summary>
            <param name="pts">An array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Centroid.AddPoint(GeoAPI.Geometries.Coordinate)">
            <summary>
            Adds a point to the point centroid accumulator.
            </summary>
            <param name="pt">A <see cref="T:GeoAPI.Geometries.Coordinate"/></param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.CentroidArea">
             <summary> 
             Computes the centroid of an area point.
             </summary>
             <remarks>
             Algorithm:
             <para>
             Based on the usual algorithm for calculating
             the centroid as a weighted sum of the centroids
             of a decomposition of the area into (possibly overlapping) triangles.</para>
             <para>
             The algorithm has been extended to handle holes and multi-polygons.
             See <see href="http://www.faqs.org/faqs/graphics/algorithms-faq"/>
             for further details of the basic approach.
             </para>
             <para>
             The code has also be extended to handle degenerate (zero-area) polygons.
             In this case, the centroid of the line segments in the polygon 
             will be returned.
             </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Adds the area defined by a Geometry to the centroid total.
            If the point has no area it does not contribute to the centroid.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.Add(GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Adds the area defined by an array of
            coordinates.  The array must be a ring;
            i.e. end with the same coordinate as it starts with.
            </summary>
            <param name="ring">An array of Coordinates.</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.CentroidArea.Centroid">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.CentroidArea.BasePoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.Add(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.AddShell(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.AddHole(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.AddTriangle(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="isPositiveArea"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.Centroid3(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate@)">
            <summary> 
            Returns three times the centroid of the triangle p1-p2-p3.
            The factor of 3 is
            left in to permit division to be avoided until later.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.Area2(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns twice the signed area of the triangle p1-p2-p3,
            positive if a,b,c are oriented ccw, and negative if cw.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidArea.AddLinearSegments(GeoAPI.Geometries.Coordinate[])">
            <summary>
             Adds the linear segments defined by an array of coordinates
             to the linear centroid accumulators.
             This is done in case the polygon(s) have zero-area, 
             in which case the linear centroid is computed instead.
            </summary>
             <param name="pts">an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s</param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.CentroidLine">
            <summary> 
            Computes the centroid of a linear point.
            Algorithm:
            Compute the average of the midpoints
            of all line segments weighted by the segment length.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidLine.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Adds the linear components of by a Geometry to the centroid total.
            If the geometry has no linear components it does not contribute to the centroid.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.CentroidLine.Centroid">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidLine.Add(GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Adds the length defined by an array of coordinates.
            </summary>
            <param name="pts">An array of <c>Coordinate</c>s.</param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.CentroidPoint">
            <summary> 
            Computes the centroid of a point point.
            Algorithm:
            Compute the average of all points.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidPoint.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Adds the point(s) defined by a Geometry to the centroid total.
            If the point is not of dimension 0 it does not contribute to the centroid.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CentroidPoint.Add(GeoAPI.Geometries.Coordinate)">
            <summary> 
            Adds the length defined by a coordinate.
            </summary>
            <param name="pt">A coordinate.</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.CentroidPoint.Centroid">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Algorithm.CGAlgorithms3D">
             Basic computational geometry algorithms 
             for geometry and coordinates defined in 3-dimensional Cartesian space.
             
             @author mdavis
            
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms3D.DistanceSegmentSegment(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            Computes the distance between two 3D segments.
            
            @param A the start point of the first segment
            @param B the end point of the first segment
            @param C the start point of the second segment
            @param D the end point of the second segment
            @return the distance between the segments
        </member>
        <member name="T:NetTopologySuite.Algorithm.CGAlgorithmsDD">
            <summary>
            Implements basic computational geometry algorithms using <seealso cref="T:NetTopologySuite.Mathematics.DD"/> arithmetic.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithmsDD.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the index of the direction of the point <c>q</c> relative to
            a vector specified by <c>p1-p2</c>.
            </summary>
            <param name="p1">The origin point of the vector</param>
            <param name="p2">The final point of the vector</param>
            <param name="q">the point to compute the direction to</param>
            <returns>
            <list type="Bullet">
            <item>1 if q is counter-clockwise (left) from p1-p2</item>
            <item>-1 if q is clockwise (right) from p1-p2</item>
            <item>0 if q is collinear with p1-p2</item></list>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithmsDD.SignOfDet2x2(NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD)">
            <summary>
            Computes the sign of the determinant of the 2x2 matrix
            with the given entries.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns>
            <list type="Bullet">
            <item>-1 if the determinant is negative,</item>
            <item>1 if the determinant is positive,</item>
            <item>0 if the determinant is 0.</item>
            </list>
            </returns>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithmsDD.DoublePrecisionSafeEpsilon">
            <summary>
            A value which is safely greater than the
            relative round-off error in double-precision numbers
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithmsDD.OrientationIndexFilter(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            A filter for computing the orientation index of three coordinates.
            <para/>
            If the orientation can be computed safely using standard DP
            arithmetic, this routine returns the orientation index.
            Otherwise, a value i > 1 is returned.
            In this case the orientation index must 
            be computed using some other more robust method.
            The filter is fast to compute, so can be used to 
            avoid the use of slower robust methods except when they are really needed,
            thus providing better average performance.
            <para/>
            Uses an approach due to Jonathan Shewchuk, which is in the public domain.
            </summary>
            <returns>
            <list type="Bullet">
            <item>The orientation index if it can be computed safely</item>
            <item>&gt; 1 if the orientation index cannot be computed safely</item>>
            </list>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithmsDD.Intersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes an intersection point between two lines
            using DD arithmetic.
            Currently does not handle case of parallel lines.
            </summary>
            <param name="p1">A point of 1st segment</param>
            <param name="p2">Another point of 1st segment</param>
            <param name="q1">A point of 2nd segment</param>
            <param name="q2">Another point of 2nd segment</param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.CGAlgorithms">
            <summary>
            Specifies and implements various fundamental Computational Geometric algorithms.
            The algorithms supplied in this class are robust for double-precision floating point.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithms.Clockwise">
            <summary> 
            A value that indicates an orientation of clockwise, or a right turn.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithms.Right">
            <summary> 
            A value that indicates an orientation of clockwise, or a right turn.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithms.CounterClockwise">
            <summary>
            A value that indicates an orientation of counterclockwise, or a left turn.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithms.Left">
            <summary>
            A value that indicates an orientation of counterclockwise, or a left turn.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithms.Collinear">
            <summary>
            A value that indicates an orientation of collinear, or no turn (straight).
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.CGAlgorithms.Straight">
            <summary>
            A value that indicates an orientation of collinear, or no turn (straight).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Returns the index of the direction of the point <c>q</c>
            relative to a vector specified by <c>p1-p2</c>.
            </summary>
            <param name="p1">The origin point of the vector.</param>
            <param name="p2">The final point of the vector.</param>
            <param name="q">The point to compute the direction to.</param>
            <returns> 
            1 if q is counter-clockwise (left) from p1-p2,
            -1 if q is clockwise (right) from p1-p2,
            0 if q is collinear with p1-p2.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.IsPointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Tests whether a point lies inside or on a ring.
            </summary>
            <remarks>
            <para>The ring may be oriented in either direction.</para>
            <para>A point lying exactly on the ring boundary is considered to be inside the ring.</para>
            <para>This method does <i>not</i> first check the point against the envelope
            of the ring.</para>
            </remarks>
            <param name="p">Point to check for ring inclusion.</param>
            <param name="ring">An array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s representing the ring (which must have first point identical to last point)</param>
            <returns>true if p is inside ring.</returns>
            <see cref="T:NetTopologySuite.Algorithm.IPointInRing"/>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.IsPointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Tests whether a point lies inside or on a ring.
            </summary>
            <remarks>
            <para>The ring may be oriented in either direction.</para>
            <para>A point lying exactly on the ring boundary is considered to be inside the ring.</para>
            <para>This method does <i>not</i> first check the point against the envelope
            of the ring.</para>
            </remarks>
            <param name="p">Point to check for ring inclusion.</param>
            <param name="ring">A sequence of <see cref="T:GeoAPI.Geometries.Coordinate"/>s representing the ring (which must have first point identical to last point)</param>
            <returns>true if p is inside ring.</returns>
            <see cref="T:NetTopologySuite.Algorithm.IPointInRing"/>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.LocatePointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
             Determines whether a point lies in the interior, on the boundary, or in the exterior of a ring.
            </summary>
             <remarks>
             <para>The ring may be oriented in either direction.</para>
             <para>This method does <i>not</i> first check the point against the envelope of the ring.</para>
             </remarks>
             <param name="p">Point to check for ring inclusion</param>
             <param name="ring">An array of coordinates representing the ring (which must have first point identical to last point)</param>
             <returns>The <see cref="T:GeoAPI.Geometries.Location"/> of p relative to the ring</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.LocatePointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
             Determines whether a point lies in the interior, on the boundary, or in the exterior of a ring.
            </summary>
             <remarks>
             <para>The ring may be oriented in either direction.</para>
             <para>This method does <i>not</i> first check the point against the envelope of the ring.</para>
             </remarks>
             <param name="p">Point to check for ring inclusion</param>
             <param name="ring">A sequence of coordinates representing the ring (which must have first point identical to last point)</param>
             <returns>The <see cref="T:GeoAPI.Geometries.Location"/> of p relative to the ring</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.IsOnLine(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Tests whether a point lies on the line segments defined by a
            list of coordinates.
            </summary>
            <param name="p"></param>
            <param name="pt"></param>
            <returns>true if the point is a vertex of the line
            or lies in the interior of a line segment in the linestring
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.IsCCW(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes whether a ring defined by an array of <see cref="T:GeoAPI.Geometries.Coordinate" />s is oriented counter-clockwise.
            </summary>>
            <remarks>
            <list type="Bullet">
            <item>The list of points is assumed to have the first and last points equal.</item>
            <item>This will handle coordinate lists which contain repeated points.</item>
            </list>
            <para>This algorithm is only guaranteed to work with valid rings. If the ring is invalid (e.g. self-crosses or touches), the computed result may not be correct.</para>
            </remarks>
            <param name="ring">An array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s froming a ring</param>
            <returns>true if the ring is oriented <see cref="F:NetTopologySuite.Algorithm.Orientation.CounterClockwise"/></returns>
            <exception cref="T:System.ArgumentException">If there are too few points to determine orientation (&lt;4)</exception>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.IsCCW(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Computes whether a ring defined by a coordinate sequence is oriented counter-clockwise.
            </summary>>
            <remarks>
            <list type="Bullet">
            <item>The list of points is assumed to have the first and last points equal.</item>
            <item>This will handle coordinate lists which contain repeated points.</item>
            </list>
            <para>This algorithm is only guaranteed to work with valid rings. If the ring is invalid (e.g. self-crosses or touches), the computed result may not be correct.</para>
            </remarks>
            <param name="ring">A coordinate sequence froming a ring</param>
            <returns>true if the ring is oriented <see cref="F:NetTopologySuite.Algorithm.Orientation.CounterClockwise"/></returns>
            <exception cref="T:System.ArgumentException">If there are too few points to determine orientation (&lt;4)</exception>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.ComputeOrientation(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the orientation of a point q to the directed line segment p1-p2.
            The orientation of a point relative to a directed line segment indicates
            which way you turn to get to q after travelling from p1 to p2.
            </summary>
            <param name="p1">The first vertex of the line segment</param>
            <param name="p2">The second vertex of the line segment</param>
            <param name="q">The point to compute the relative orientation of</param>
            <returns> 
            1 if q is counter-clockwise from p1-p2,
            or -1 if q is clockwise from p1-p2,
            or 0 if q is collinear with p1-p2
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.DistancePointLine(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes the distance from a point p to a line segment AB.
            Note: NON-ROBUST!
            </summary>
            <param name="p">The point to compute the distance for.</param>
            <param name="A">One point of the line.</param>
            <param name="B">Another point of the line (must be different to A).</param>
            <returns> The distance from p to line segment AB.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.DistancePointLinePerpendicular(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes the perpendicular distance from a point p
            to the (infinite) line containing the points AB
            </summary>
            <param name="p">The point to compute the distance for.</param>
            <param name="A">One point of the line.</param>
            <param name="B">Another point of the line (must be different to A).</param>
            <returns>The perpendicular distance from p to line AB.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.DistancePointLine(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes the distance from a point to a sequence of line segments.
            </summary>
            <param name="p">A point</param>
            <param name="line">A sequence of contiguous line segments defined by their vertices</param>
            <returns>The minimum distance between the point and the line segments</returns>
            <exception cref="T:System.ArgumentException">If there are too few points to make up a line (at least one?)</exception>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.DistanceLineLine(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes the distance from a line segment AB to a line segment CD.
            Note: NON-ROBUST!
            </summary>
            <param name="A">A point of one line.</param>
            <param name="B">The second point of the line (must be different to A).</param>
            <param name="C">One point of the line.</param>
            <param name="D">Another point of the line (must be different to A).</param>
            <returns>The distance from line segment AB to line segment CD.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.SignedArea(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes the signed area for a ring.
            <remarks>
            <para>
            The signed area is
            </para>  
            <list type="Table">
            <item>positive</item><description>if the ring is oriented CW</description>
            <item>negative</item><description>if the ring is oriented CCW</description>
            <item>zero</item><description>if the ring is degenerate or flat</description>
            </list>
            </remarks>
            </summary>
            <param name="ring">The coordinates of the ring</param>
            <returns>The signed area of the ring</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.SignedArea(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Computes the signed area for a ring.
            <remarks>
            <para>
            The signed area is
            </para>  
            <list type="Table">
            <item>positive</item><description>if the ring is oriented CW</description>
            <item>negative</item><description>if the ring is oriented CCW</description>
            <item>zero</item><description>if the ring is degenerate or flat</description>
            </list>
            </remarks>
            </summary>
            <param name="ring">The coordinates forming the ring</param>
            <returns>The signed area of the ring</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.CGAlgorithms.Length(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Computes the length of a linestring specified by a sequence of points.
            </summary>
            <param name="pts">The points specifying the linestring</param>
            <returns>The length of the linestring</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.ConvexHull">
            <summary> 
            Computes the convex hull of a <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            The convex hull is the smallest convex Geometry that contains all the
            points in the input Geometry.
            Uses the Graham Scan algorithm.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Create a new convex hull construction for the input <c>Geometry</c>.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.#ctor(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a new convex hull construction for the input <see cref="T:GeoAPI.Geometries.Coordinate" /> array.
            </summary>
            <param name="pts"></param>
            <param name="geomFactory"></param>   
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.ExtractCoordinates(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.GetConvexHull">
            <summary> 
            Returns a <c>Geometry</c> that represents the convex hull of the input point.
            The point will contain the minimal number of points needed to
            represent the convex hull.  In particular, no more than two consecutive
            points will be collinear.
            </summary>
            <returns> 
            If the convex hull contains 3 or more points, a <c>Polygon</c>;
            2 points, a <c>LineString</c>;
            1 point, a <c>Point</c>;
            0 points, an empty <c>GeometryCollection</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.Reduce(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Uses a heuristic to reduce the number of points scanned to compute the hull.
            The heuristic is to find a polygon guaranteed to
            be in (or on) the hull, and eliminate all points inside it.
            A quadrilateral defined by the extremal points
            in the four orthogonal directions
            can be used, but even more inclusive is
            to use an octilateral defined by the points in the 8 cardinal directions.
            Note that even if the method used to determine the polygon vertices
            is not 100% robust, this does not affect the robustness of the convex hull.
            <para>
            To satisfy the requirements of the Graham Scan algorithm, 
            the returned array has at least 3 entries.
            </para>
            </summary>
            <param name="pts">The coordinates to reduce</param>
            <returns>The reduced array of coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.PreSort(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Pre sorts the coordinates
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.GrahamScan(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>        
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.IsBetween(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <returns>
            Whether the three coordinates are collinear 
            and c2 lies between c1 and c3 inclusive.
            </returns>        
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.ComputeOctRing(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="inputPts"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.ComputeOctPts(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="inputPts"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.LineOrPolygon(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="coordinates"> The vertices of a linear ring, which may or may not be flattened (i.e. vertices collinear).</param>
            <returns>A 2-vertex <c>LineString</c> if the vertices are collinear; 
            otherwise, a <c>Polygon</c> with unnecessary (collinear) vertices removed. </returns>       
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.CleanRing(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="original">The vertices of a linear ring, which may or may not be flattened (i.e. vertices collinear).</param>
            <returns>The coordinates with unnecessary (collinear) vertices removed.</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.ConvexHull.RadialComparator">
            <summary>
            Compares <see cref="T:GeoAPI.Geometries.Coordinate" />s for their angle and distance
            relative to an origin.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.RadialComparator.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Algorithm.ConvexHull.RadialComparator"/> class.
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.RadialComparator.Compare(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.ConvexHull.RadialComparator.PolarCompare(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Distance.DistanceToPoint">
            <summary>
             Computes the Euclidean distance (L2 metric) from a <see cref="T:GeoAPI.Geometries.Coordinate"/> to a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <remarks>
             Also computes two points on the geometry which are separated by the distance found.
             </remarks>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Distance.PointPairDistance">
            <summary>
            Contains a pair of points and the distance between them.
            </summary>
            <remarks>
            Provides methods to update with a new point pair with either maximum or minimum distance.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Distance.PointPairDistance.Initialize">
            <summary>
             Initializes to null.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Distance.PointPairDistance.Initialize(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Initializes the points.
            </summary>
             <param name="p0">1st coordinate</param>
             <param name="p1">2nd coordinate</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Distance.PointPairDistance.Initialize(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
             Initializes the points, avoiding recomputing the distance.
            </summary>
             <param name="p0">1st coordinate</param>
             <param name="p1">2nd coordinate</param>
             <param name="distance">the distance between <see paramref="p0"/> and <see paramref="p1"/></param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.Distance.PointPairDistance.Distance">
            <summary>
            The distance between the paired coordinates
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.Distance.PointPairDistance.Coordinates">
            <summary>
            Returns an array containing the paired points
            </summary>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance">
            <summary>
             An algorithm for computing a distance metric
             which is an approximation to the Hausdorff Distance
             based on a discretization of the input <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             </summary>
             <remarks>
             <para>
             The algorithm computes the Hausdorff distance restricted to discrete points
             for one of the geometries.
             The points can be either the vertices of the geometries (the default), 
             or the geometries with line segments densified by a given fraction.
             Also determines two points of the Geometries which are separated by the computed distance.
             </para>
             <para>
             This algorithm is an approximation to the standard Hausdorff distance.
             Specifically, 
             <code>
             for all geometries a, b:    DHD(a, b) &lt;= HD(a, b)
             </code>
             The approximation can be made as close as needed by densifying the input geometries.  
             In the limit, this value will approach the true Hausdorff distance:
             <code>
             DHD(A, B, densifyFactor) -> HD(A, B) as densifyFactor -> 0.0
             </code>
             The default approximation is exact or close enough for a large subset of useful cases.
             </para>
             <para>
             Examples of these are:
             <list type="Bullet">
             <item>
             computing distance between Linestrings that are roughly parallel to each other,
             and roughly equal in length.  This occurs in matching linear networks.
             </item>
             <item>Testing similarity of geometries.</item>
             </list>
             </para>
             <para>
             An example where the default approximation is not close is:
             <code>
             A = LINESTRING (0 0, 100 0, 10 100, 10 100)
             B = LINESTRING (0 100, 0 10, 80 10)
             
             DHD(A, B) = 22.360679774997898
             HD(A, B) ~= 47.8
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.Distance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the Discrete Hausdorff Distance of two <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            </summary>
            <param name="g0">A geometry</param>
            <param name="g1">A geometry</param>
            <returns>The Discrete Hausdorff Distance</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.Distance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the Discrete Hausdorff Distance of two <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            </summary>
            <param name="g0">A geometry</param>
            <param name="g1">A geometry</param>
            <param name="densifyFraction">The densify fraction. A value of 0 indicates, that no densification should take place</param>
            <returns>The Discrete Hausdorff Distance</returns>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance._densifyFrac">
            Value of 0.0 indicates that no densification should take place
        </member>
        <member name="P:NetTopologySuite.Algorithm.Distance.DiscreteHausdorffDistance.DensifyFraction">
            <summary>
             Gets/sets the fraction by which to densify each segment.
            </summary>
             <remarks>
             Each segment will be (virtually) split into a number of equal-length
             subsegments, whose fraction of the total length is closest
             to the given fraction.
             </remarks>
        </member>
        <member name="T:NetTopologySuite.Algorithm.HCoordinate">
            <summary> 
            Represents a homogeneous coordinate in a 2-D coordinate space.
            In NTS <see cref="T:NetTopologySuite.Algorithm.HCoordinate"/>s are used as a clean way
            of computing intersections between line segments.
            </summary>
            <author>David Skea</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.Intersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the (approximate) intersection point between two line segments using homogeneous coordinates.
             </summary>
             <remarks>
             Note that this algorithm is
             not numerically stable; i.e. it can produce intersection points which
             lie outside the envelope of the line segments themselves.  In order
             to increase the precision of the calculation input points should be normalized
             before passing them to this routine.
             </remarks>
             <param name="p1">1st Coordinate of 1st linesegment</param>
             <param name="p2">2nd Coordinate of 1st linesegment</param>
             <param name="q1">1st Coordinate of 2nd linesegment</param>
             <param name="q2">2nd Coordinate of 2nd linesegment</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.OldIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes the (approximate) intersection point between two line segments
            using homogeneous coordinates.
            Note that this algorithm is
            not numerically stable; i.e. it can produce intersection points which
            lie outside the envelope of the line segments themselves.  In order
            to increase the precision of the calculation input points should be normalized
            before passing them to this routine.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.HCoordinate.X">
            <summary>
            Direct access to x private field
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.HCoordinate.Y">
            <summary>
            Direct access to y private field
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.HCoordinate.W">
            <summary>
            Direct access to w private field
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.#ctor(NetTopologySuite.Algorithm.HCoordinate,NetTopologySuite.Algorithm.HCoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.GetX">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.GetY">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.HCoordinate.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.HCoordinate.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Constructs a homogeneous coordinate which is the intersection of the lines <see cref="P:NetTopologySuite.Algorithm.HCoordinate.Coordinate"/>s.
             define by the homogenous coordinates represented by two
            </summary>
             <param name="p1">A coordinate</param>
             <param name="p2">A coordinate</param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.InteriorPointArea">
            <summary> 
            Computes a point in the interior of an areal geometry.
            </summary>
            <remarks>
            <h2>Algorithm:</h2>
            <list type="Bullet">
            <item>Find a Y value which is close to the centre of 
            the geometry's vertical extent but is different
            to any of it's Y ordinates.</item>
            <item>Create a horizontal bisector line using the Y value
            and the geometry's horizontal extent</item>
            <item>Find the intersection between the geometry
            and the horizontal bisector line.
            The intersection is a collection of lines and points.</item>
            <item>Pick the midpoint of the largest intersection geometry</item>
            </list>
            <h3>KNOWN BUGS</h3>
            <list type="Bullet">
            <item>If a fixed precision model is used,
            in some cases this method may return a point
            which does not lie in the interior.</item></list></remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.Avg(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new interior point finder
            for an areal geometry.
            </summary>
            <param name="g">An areal geometry</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.InteriorPointArea.InteriorPoint">
            <summary>
            Gets the computed interior point.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Tests the interior vertices (if any)
            defined by an areal Geometry for the best inside point.
            If a component Geometry is not of dimension 2 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.AddPolygon(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Finds an interior point of a Polygon.
            </summary>
            <param name="geometry">The geometry to analyze.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.WidestGeometry(GeoAPI.Geometries.IGeometry)">
            <returns>
            If point is a collection, the widest sub-point; otherwise,
            the point itself.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.HorizontalBisector(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointArea.Centre(GeoAPI.Geometries.Envelope)">
            <summary> 
            Returns the centre point of the envelope.
            </summary>
            <param name="envelope">The envelope to analyze.</param>
            <returns> The centre of the envelope.</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.InteriorPointArea.SafeBisectorFinder">
            <summary>
            Finds a safe bisector Y ordinate
            by projecting to the Y axis
            and finding the Y-ordinate interval
            which contains the centre of the Y extent.
            The centre of this interval is returned as the bisector Y-ordinate.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Algorithm.InteriorPointLine">
            <summary>
            Computes a point in the interior of an linear point.
            Algorithm:
            Find an interior vertex which is closest to
            the centroid of the linestring.
            If there is no interior vertex, find the endpoint which is
            closest to the centroid.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.InteriorPointLine.InteriorPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointLine.AddInterior(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests the interior vertices (if any)
            defined by a linear Geometry for the best inside point.
            If a Geometry is not of dimension 1 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointLine.AddInterior(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointLine.AddEndpoints(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Tests the endpoint vertices
            defined by a linear Geometry for the best inside point.
            If a Geometry is not of dimension 1 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointLine.AddEndpoints(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointLine.Add(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.InteriorPointPoint">
            <summary> 
            Computes a point in the interior of an point point.
            Algorithm:
            Find a point which is closest to the centroid of the point.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointPoint.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointPoint.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Tests the point(s) defined by a Geometry for the best inside point.
            If a Geometry is not of dimension 0 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.InteriorPointPoint.Add(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.InteriorPointPoint.InteriorPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Algorithm.IPointInAreaLocator">
            <summary>
             An interface for classes which determine the <see cref="T:GeoAPI.Geometries.Location"/> of points in a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.IPointInAreaLocator.Locate(GeoAPI.Geometries.Coordinate)">
            <summary>
             Determines the  <see cref="T:GeoAPI.Geometries.Location"/> of a point in the <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             </summary>
             <param name="p">The point to test</param>
             <returns>the location of the point in the geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.LineIntersector">
            <summary> 
            A <c>LineIntersector</c> is an algorithm that can both test whether
            two line segments intersect and compute the intersection point(s)
            if they do.
            <para>
            There are three possible outcomes when determining whether two line segments intersect:
            <list type="bullet">
            <item><see cref="F:NetTopologySuite.Algorithm.LineIntersector.NoIntersection"/> - the segments do not intersect</item>
            <item><see cref="F:NetTopologySuite.Algorithm.LineIntersector.PointIntersection"/> - the segments intersect in a single point</item>
            <item><see cref="F:NetTopologySuite.Algorithm.LineIntersector.CollinearIntersection"/> - the segments are collinear and they intersect in a line segment</item>
            </list>
            </para>
            <para>
            For segments which intersect in a single point, the point may be either an endpoint
            or in the interior of each segment.  
            If the point lies in the interior of both segments, 
            this is termed a <i>proper intersection</i>.
            The property <see cref="P:NetTopologySuite.Algorithm.LineIntersector.IsProper"/> test for this situation.
            </para><para>
            The intersection point(s) may be computed in a precise or non-precise manner.
            Computing an intersection point precisely involves rounding it 
            via a supplied <see cref="P:NetTopologySuite.Algorithm.LineIntersector.PrecisionModel"/>.  
            </para><para>
            LineIntersectors do not perform an initial envelope intersection test 
            to determine if the segments are disjoint.
            This is because this class is likely to be used in a context where 
            envelope overlap is already known to occur (or be likely).
            </para>
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.LineIntersector.DontIntersect">
            These are deprecated, due to ambiguous naming
        </member>
        <member name="F:NetTopologySuite.Algorithm.LineIntersector.NoIntersection">
            <summary>
            Indicates that line segments do not intersect
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.LineIntersector.PointIntersection">
            <summary>
            Indicates that line segments intersect in a single point
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.LineIntersector.CollinearIntersection">
            <summary>
            Indicates that line segments intersect in a line segment
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.ComputeEdgeDistance(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes the "edge distance" of an intersection point p along a segment.
            The edge distance is a metric of the point along the edge.
            The metric used is a robust and easy to compute metric function.
            It is not equivalent to the usual Euclidean metric.
            It relies on the fact that either the x or the y ordinates of the
            points in the edge are unique, depending on whether the edge is longer in
            the horizontal or vertical direction.
            NOTE: This function may produce incorrect distances
            for inputs where p is not precisely on p1-p2
            (E.g. p = (139,9) p1 = (139,10), p2 = (280,1) produces distanct 0.0, which is incorrect.
            My hypothesis is that the function is safe to use for points which are the
            result of rounding points which lie on the line, but not safe to use for truncated points.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.NonRobustComputeEdgeDistance(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            This function is non-robust, since it may compute the square of large numbers.
            Currently not sure how to improve this.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.LineIntersector.IntersectionLineIndex">
            <summary> 
            The indexes of the endpoints of the intersection lines, in order along
            the corresponding line
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.Pa">
            <summary>
            Alias the <see cref="F:NetTopologySuite.Algorithm.LineIntersector.IntersectionPoint"/>[0] for ease of reference
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.Pb">
            <summary>
            Alias the <see cref="F:NetTopologySuite.Algorithm.LineIntersector.IntersectionPoint"/>[1] for ease of reference
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.LineIntersector._precisionModel">
            <summary> 
            If MakePrecise is true, computed intersection coordinates will be made precise
            using <c>Coordinate.MakePrecise</c>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.MakePrecise">
            <summary>
            Force computed intersection to be rounded to a given precision model
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.PrecisionModel">
            <summary> 
            Force computed intersection to be rounded to a given precision model.
            No getter is provided, because the precision model is not required to be specified.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.GetEndpoint(System.Int32,System.Int32)">
            <summary>
            Gets an endpoint of an input segment.
            </summary>
            <param name="segmentIndex">the index of the input segment (0 or 1)</param>
            <param name="ptIndex">the index of the endpoint (0 or 1)</param>
            <returns>The specified endpoint</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.ComputeIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Compute the intersection of a point p and the line p1-p2.
            This function computes the bool value of the hasIntersection test.
            The actual value of the intersection (if there is one)
            is equal to the value of <c>p</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.ComputeIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the intersection of the lines p1-p2 and p3-p4.
            This function computes both the bool value of the hasIntersection test
            and the (approximate) value of the intersection point itself (if there is one).
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.HasIntersection">
            <summary> 
            Tests whether the input geometries intersect.
            </summary>
            <returns><c>true</c> if the input geometries intersect.</returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.IntersectionNum">
            <summary>
            Returns the number of intersection points found.  This will be either 0, 1 or 2.
            </summary>
            <returns>The number of intersection points found (0, 1, or 2)</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.GetIntersection(System.Int32)">
            <summary> 
            Returns the intIndex'th intersection point.
            </summary>
            <param name="intIndex">is 0 or 1.</param>
            <returns>The intIndex'th intersection point.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.IsIntersection(GeoAPI.Geometries.Coordinate)">
            <summary> 
            Test whether a point is a intersection point of two line segments.
            Note that if the intersection is a line segment, this method only tests for
            equality with the endpoints of the intersection segment.
            It does not return true if the input point is internal to the intersection segment.
            </summary>
            <returns><c>true</c> if the input point is one of the intersection points.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.IsInteriorIntersection">
            <summary> 
            Tests whether either intersection point is an interior point of one of the input segments.
            </summary>
            <returns>
            <c>true</c> if either intersection point is in the interior of one of the input segment.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.IsInteriorIntersection(System.Int32)">
            <summary>
            Tests whether either intersection point is an interior point of the specified input segment.
            </summary>
            <returns> 
            <c>true</c> if either intersection point is in the interior of the input segment.
            </returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.LineIntersector.IsProper">
            <summary>
            Tests whether an intersection is proper.
            The intersection between two line segments is considered proper if
            they intersect in a single point in the interior of both segments
            (e.g. the intersection is a single point and is not equal to any of the endpoints). 
            The intersection between a point and a line segment is considered proper
            if the point lies in the interior of the segment (e.g. is not equal to either of the endpoints).
            </summary>
            <returns><c>true</c>  if the intersection is proper.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.GetIntersectionAlongSegment(System.Int32,System.Int32)">
            <summary> 
            Computes the intIndex'th intersection point in the direction of
            a specified input line segment.
            </summary>
            <param name="segmentIndex">is 0 or 1.</param>
            <param name="intIndex">is 0 or 1.</param>
            <returns>
            The intIndex'th intersection point in the direction of the specified input line segment.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.GetIndexAlongSegment(System.Int32,System.Int32)">
            <summary>
            Computes the index (order) of the intIndex'th intersection point in the direction of
            a specified input line segment.
            </summary>
            <param name="segmentIndex">is 0 or 1.</param>
            <param name="intIndex">is 0 or 1.</param>
            <returns>
            The index of the intersection point along the segment (0 or 1).
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.ComputeIntLineIndex(System.Int32)">
            <summary>
            Computes the intersection line index
            </summary>
            <param name="segmentIndex">The segment index</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.LineIntersector.GetEdgeDistance(System.Int32,System.Int32)">
            <summary> 
            Computes the "edge distance" of an intersection point along the specified input line segment.
            </summary>
            <param name="segmentIndex">is 0 or 1.</param>
            <param name="intIndex">is 0 or 1.</param>
            <returns>The edge distance of the intersection point.</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Locate.IndexedPointInAreaLocator">
            <summary>
             Determines the location of <see cref="T:GeoAPI.Geometries.Coordinate"/>s relative to
             a <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometry, using indexing for efficiency.
             This algorithm is suitable for use in cases where
             many points will be tested against a given area.
             <para/>
             Thread-safe and immutable.
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Locate.IndexedPointInAreaLocator.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
             Creates a new locator for a given <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="g">the Geometry to locate in</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Locate.IndexedPointInAreaLocator.Locate(GeoAPI.Geometries.Coordinate)">
            <summary>
             Determines the <see cref="T:GeoAPI.Geometries.Location"/> of a point in an areal <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="p">The point to test</param>
             <returns>The location of the point in the geometry
             </returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator">
            <summary>
             An interface for classes which determine the <see cref="T:GeoAPI.Geometries.Location"/> of
             points in areal geometries.
             </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator.Locate(GeoAPI.Geometries.Coordinate)">
            <summary>
             Determines the <see cref="T:GeoAPI.Geometries.Location"/> of a point in an areal <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="p">The point to test</param>
            <returns>The location of the point in the geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Locate.PointOnGeometryLocatorExtensions">
            <summary>
            Static methods for <see cref="T:NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator"/> classes
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Locate.PointOnGeometryLocatorExtensions.Intersects(NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Convenience method to test a point for intersection with a geometry
            <para/>
            The geometry is wrapped in a <see cref="T:NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator"/> class.
            </summary>
            <param name="locator">The locator to use.</param>
            <param name="coordinate">The coordinate to test.</param>
            <returns><c>true</c> if the point is in the interior or boundary of the geometry.</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Locate.SimplePointInAreaLocator">
            <summary>Computes the location of points relative to an areal <see cref="T:GeoAPI.Geometries.IGeometry"/>, using a simple O(n) algorithm.
             This algorithm is suitable for use in cases where only one or a few points will be tested against a given area.
            </summary>
             <remarks>The algorithm used is only guaranteed to return correct results for points which are <b>not</b> on the boundary of the Geometry.</remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Locate.SimplePointInAreaLocator.Locate(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
             Determines the <see cref="T:GeoAPI.Geometries.Location"/> of a point in an areal <see cref="T:GeoAPI.Geometries.IGeometry"/>. Currently this will never return a value of <see cref="F:GeoAPI.Geometries.Location.Boundary"/>.
            </summary>
             <param name="p">The point to test</param>
             <param name="geom">The areal geometry to test</param>
             <returns>The Location of the point in the geometry  </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Locate.SimplePointInAreaLocator.IsPointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.ILinearRing)">
            <summary>
             Determines whether a point lies in a LinearRing, using the ring envelope to short-circuit if possible.
            </summary>
             <param name="p">The point to test</param>
             <param name="ring">A linear ring</param>
             <returns><c>true</c> if the point lies inside the ring</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Match.AreaSimilarityMeasure">
            <summary>
            Measures the degree of similarity between two <see cref="T:GeoAPI.Geometries.IGeometry"/>s
            using the area of intersection between the geometries.
            The measure is normalized to lie in the range [0, 1].
            Higher measures indicate a great degree of similarity.
            </summary>
            <remarks>
            NOTE: Currently experimental and incomplete.
            </remarks>
            <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Match.HausdorffSimilarityMeasure">
            <summary>
            Measures the degree of similarity between two <see cref="T:GeoAPI.Geometries.IGeometry"/>s using the Hausdorff distance metric.
            </summary>
            <remarks>
            <para>
            The measure is normalized to lie in the range [0, 1]. Higher measures indicate a great degree of similarity.
            </para>
            <para>
            The measure is computed by computing the Hausdorff distance between the input geometries, and then normalizing
            this by dividing it by the diagonal distance across the envelope of the combined geometries.
            </para>
            </remarks>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Match.HausdorffSimilarityMeasure.DiagonalSize(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Match.ISimilarityMeasure">
            <summary>
            An interface for classes which measures the degree of similarity between two {@link Geometry}s.
            </summary>
            <remarks>
            The computed measure lies in the range [0, 1].
            Higher measures indicate a great degree of similarity.
            A measure of 1.0 indicates that the input geometries are identical
            A measure of 0.0 indicates that the geometries have essentially no similarity.
            The precise definition of "identical" and "no similarity" may depend on the  exact algorithm being used.
            </remarks>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Match.ISimilarityMeasure.Measure(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Function to measure the similarity between two <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            </summary>
            <param name="g1">A geometry</param>
            <param name="g2">A geometry</param>
            <returns>The similarity value between two <see cref="T:GeoAPI.Geometries.IGeometry"/>s</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Match.SimilarityMeasureCombiner">
            <summary>
             Provides methods to mathematically combine <see cref="T:NetTopologySuite.Algorithm.Match.ISimilarityMeasure"/> values.
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.Match.SimilarityMeasureCombiner.Combine(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="measure1"></param>
            <param name="measure2"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.MCPointInRing">
            <summary>
            Implements <c>IPointInRing</c>
            using a <c>MonotoneChain</c>s and a <c>BinTree</c> index to increase performance.
            </summary>
            <see cref="T:NetTopologySuite.Algorithm.Locate.IndexedPointInAreaLocator"/>
        </member>
        <member name="T:NetTopologySuite.Algorithm.MCPointInRing.MCSelecter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.MCSelecter.#ctor(NetTopologySuite.Algorithm.MCPointInRing,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="p"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.MCSelecter.Select(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="ls"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.BuildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.IsInside(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.TestMonotoneChain(GeoAPI.Geometries.Envelope,NetTopologySuite.Algorithm.MCPointInRing.MCSelecter,NetTopologySuite.Index.Chain.MonotoneChain)">
            <summary>
            
            </summary>
            <param name="rayEnv"></param>
            <param name="mcSelecter"></param>
            <param name="mc"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MCPointInRing.TestLineSegment(GeoAPI.Geometries.Coordinate,NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="seg"></param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.MinimumBoundingCircle">
            <summary>
            Computes the <b>Minimum Bounding Circle</b> (MBC) for the points in a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            The MBC is the smallest circle which <tt>cover</tt>s all the input points 
            (this is also sometimes known as the <b>Smallest Enclosing Circle</b>).
            This is equivalent to computing the Maximum Diameter of the input point set.
            </summary>
            <remarks>
            <para>
            The computed circle can be specified in two equivalent ways, 
            both of which are provide as output by this class:
            <list type="Bullet">
            <item>As a centre point and a radius</item>
            <item>By the set of points defining the circle.</item>
            
            Depending on the number of points in the input
            and their relative positions, this
            will be specified by anywhere from 0 to 3 points. 
            <list type="Bullet">
            <item>0 or 1 points indicate an empty or trivial input point arrangment.</item>
            <item>2 or 3 points define a circle which contains 
            all the input points.</item>
            </list>
            </list>
            </para>
            <para>
            The class can also output a <see cref="T:GeoAPI.Geometries.IGeometry"/> which approximates the
            shape of the MBC (although as an approximation it is <b>not</b>
            guaranteed to <tt>cover</tt> all the input points.)</para>
            </remarks>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Algorithm.MinimumBoundingCircle._input">
            The algorithm used is based on the one by Jon Rokne in 
            the article "An Easy Bounding Circle" in <i>Graphic Gems II</i>.
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new object for computing the minimum bounding circle for the
            point set defined by the vertices of the given geometry.
            </summary>
            <param name="geom">The geometry to use to obtain the point set </param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.GetCircle">
            <summary>
            Gets a geometry which represents the Minimum Bounding Circle.
            </summary>
            <remarks>
            <para>
            If the input is degenerate (empty or a single unique point),
            this method will return an empty geometry or a single Point geometry.
            Otherwise, a Polygon will be returned which approximates the 
            Minimum Bounding Circle. (Note that because the computed polygon is only an approximation, it may not precisely contain all the input points.)
            </para>
            </remarks>
            <returns>A Geometry representing the Minimum Bounding Circle.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.GetFarthestPoints">
            <summary>
             Gets a geometry representing a line between the two farthest points
             in the input.
             These points will be two of the extremal points of the Minimum Bounding Circle.
             They also lie on the convex hull of the input.
             </summary>
             <returns>A LineString between the two farthest points of the input</returns>
             <returns>An empty LineString if the input is empty</returns>
             <returns>A Point if the input is a point</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.GetDiameter">
            <summary>
            Gets a geometry representing the diameter of the computed Minimum Bounding Circle.
            </summary>
            <returns>
            <list type="Bullet">
            <item>the diameter line of the Minimum Bounding Circle</item>
            <item>an empty line if the input is empty</item>
            <item>a Point if the input is a point</item>
            </list>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.GetExtremalPoints">
            <summary>
            Gets the extremal points which define the computed Minimum Bounding Circle.
            </summary>
            <remarks>
            There may be zero, one, two or three of these points,
            depending on the number of points in the input
            and the geometry of those points.
            </remarks>
            <returns>The points defining the Minimum Bounding Circle</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.GetCentre">
            <summary>
            Gets the centre point of the computed Minimum Bounding Circle.
            </summary>
            <returns>the centre point of the Minimum Bounding Circle, null if the input is empty</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumBoundingCircle.GetRadius">
            <summary>
            Gets the radius of the computed Minimum Bounding Circle.
            </summary>
            <returns>The radius of the Minimum Bounding Circle</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.MinimumDiameter">
            <summary>
            Computes the minimum diameter of a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <remarks>
            <para>
            The minimum diameter is defined to be the
            width of the smallest band that contains the point,
            where a band is a strip of the plane defined
            by two parallel lines.
            This can be thought of as the smallest hole that the point can be
            moved through, with a single rotation.
            </para>
            <para>
            The first step in the algorithm is computing the convex hull of the Geometry.
            If the input Geometry is known to be convex, a hint can be supplied to
            avoid this computation.
            </para>
            <para>
            This class can also be used to compute a line segment representing 
            the minimum diameter, the supporting line segment of the minimum diameter,
            and a minimum rectangle enclosing the input geometry.
            This rectangle will
            have width equal to the minimum diameter, and have one side
            parallel to the supporting segment.
            </para>
            </remarks>
            <seealso cref="T:NetTopologySuite.Algorithm.ConvexHull"/>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.GetMinimumRectangle(GeoAPI.Geometries.IGeometry)">
            <summary>
             Gets the minimum rectangle enclosing a geometry.
             </summary>
             <param name="geom">The geometry</param>
             <returns>The minimum rectangle enclosing the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.GetMinimumDiameter(NetTopologySuite.Geometries.Geometry)">
            <summary>
             Gets the minimum diameter enclosing a geometry.
             </summary>
             <param name="geom">The geometry</param>
             <returns>The length of the minimum diameter of the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Compute a minimum diameter for a given <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="inputGeom">a Geometry.</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.#ctor(GeoAPI.Geometries.IGeometry,System.Boolean)">
            <summary> 
            Compute a minimum diameter for a giver <c>Geometry</c>,
            with a hint if
            the Geometry is convex
            (e.g. a convex Polygon or LinearRing,
            or a two-point LineString, or a Point).
            </summary>
            <param name="inputGeom">a Geometry which is convex.</param>
            <param name="isConvex"><c>true</c> if the input point is convex.</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.MinimumDiameter.Length">
            <summary> 
            Gets the length of the minimum diameter of the input Geometry.
            </summary>
            <returns>The length of the minimum diameter.</returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.MinimumDiameter.WidthCoordinate">
            <summary>
            Gets the <c>Coordinate</c> forming one end of the minimum diameter.
            </summary>
            <returns>A coordinate forming one end of the minimum diameter.</returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.MinimumDiameter.SupportingSegment">
            <summary>
            Gets the segment forming the base of the minimum diameter.
            </summary>
            <returns>The segment forming the base of the minimum diameter.</returns>
        </member>
        <member name="P:NetTopologySuite.Algorithm.MinimumDiameter.Diameter">
            <summary>
            Gets a <c>LineString</c> which is a minimum diameter.
            </summary>
            <returns>A <c>LineString</c> which is a minimum diameter.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.ComputeMinimumDiameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.ComputeWidthConvex(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="convexGeom"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.ComputeConvexRingMinDiameter(GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Compute the width information for a ring of <c>Coordinate</c>s.
            Leaves the width information in the instance variables.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.FindMaxPerpDistance(GeoAPI.Geometries.Coordinate[],NetTopologySuite.Geometries.LineSegment,System.Int32)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="seg"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.NextIndex(GeoAPI.Geometries.Coordinate[],System.Int32)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.MinimumDiameter.GetMinimumRectangle">
            <summary>
            Gets the minimum rectangular <see cref="T:GeoAPI.Geometries.IPolygon"/> which encloses the input geometry.
            </summary>
            <remarks>
            <para>
            The rectangle has width equal to the minimum diameter, and a longer length.
            If the convex hull of the input is degenerate (a line or point) a <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IPoint"/> is returned.
            </para>
            <para>
            The minimum rectangle can be used as an extremely generalized representation for the given geometry.
            </para>
            </remarks>
            <returns>The minimum rectangle enclosing the input (or a line or point if degenerate)</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.NonRobustCGAlgorithms">
            <summary> 
            Non-robust versions of various fundamental Computational Geometric algorithms,
            FOR TESTING PURPOSES ONLY!.
            The non-robustness is due to rounding error in floating point computation.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustCGAlgorithms.IsPointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustCGAlgorithms.IsCCW(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes whether a ring defined by an array of <c>Coordinate</c> is
            oriented counter-clockwise.
            This will handle coordinate lists which contain repeated points.
            </summary>
            <param name="ring">an array of coordinates forming a ring.</param>
            <returns>
            <c>true</c> if the ring is oriented counter-clockwise.
            throws <c>ArgumentException</c> if the ring is degenerate (does not contain 3 different points)
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustCGAlgorithms.ComputeOrientation(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the orientation of a point q to the directed line segment p1-p2.
            The orientation of a point relative to a directed line segment indicates
            which way you turn to get to q after travelling from p1 to p2.
            </summary>
            <returns>1 if q is counter-clockwise from p1-p2</returns>
            <returns>-1 if q is clockwise from p1-p2</returns>
            <returns>0 if q is collinear with p1-p2</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustCGAlgorithms.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the index of the direction of the point <c>q</c> relative to
            a vector specified by <c>p1-p2</c>.
            </summary>
            <param name="p1">the origin point of the vector</param>
            <param name="p2">the final point of the vector</param>
            <param name="q">the point to compute the direction to</param>
            <returns> 1 if q is counter-clockwise (left) from p1-p2</returns>
            <returns>-1 if q is clockwise (right) from p1-p2</returns>
            <returns>0 if q is collinear with p1-p2</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustCGAlgorithms.DistanceLineLine(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes the distance from a line segment AB to a line segment CD.
            Note: NON-ROBUST!
            </summary>
            <param name="A">A point of one line.</param>
            <param name="B">The second point of the line (must be different to A).</param>
            <param name="C">One point of the line.</param>
            <param name="D">Another point of the line (must be different to A).</param>
            <returns>The distance from line segment AB to line segment CD.</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.NonRobustLineIntersector">
            <summary> 
            A non-robust version of <c>LineIntersector</c>.
            </summary>   
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustLineIntersector.IsSameSignAndNonZero(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns> 
            <c>true</c> if both numbers are positive or if both numbers are negative, 
            <c>false</c> if both numbers are zero.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustLineIntersector.ComputeIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustLineIntersector.ComputeIntersect(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustLineIntersector.ComputeCollinearIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NonRobustLineIntersector.RParameter(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            RParameter computes the parameter for the point p
            in the parameterized equation
            of the line from p1 to p2.
            This is equal to the 'distance' of p along p1-p2.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Algorithm.NotRepresentableException">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.NotRepresentableException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Algorithm.IPointInRing">
            <summary> 
            An interface for classes which test whether a <c>Coordinate</c> lies inside a ring.
            </summary>
            <see cref="T:NetTopologySuite.Algorithm.Locate.IPointOnGeometryLocator"/>
        </member>
        <member name="M:NetTopologySuite.Algorithm.IPointInRing.IsInside(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.PointLocator">
            <summary> 
            Computes the topological relationship (<see cref="T:GeoAPI.Geometries.Location"/>) of a single point to a Geometry.
            </summary>
            <remarks>
            A <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> may be specified to control the evaluation of whether the point lies on the boundary or not
            The default rule is to use the the <i>SFS Boundary Determination Rule</i>
            <para>
            Notes:
            <list Type="Bullet">
            <item><see cref="T:GeoAPI.Geometries.ILinearRing"/>s do not enclose any area - points inside the ring are still in the EXTERIOR of the ring.</item>
            </list>
            Instances of this class are not reentrant.
            </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Algorithm.PointLocator"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.Intersects(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry)">
            <summary> 
            Convenience method to test a point for intersection with a Geometry
            </summary>
            <param name="p">The coordinate to test.</param>
            <param name="geom">The Geometry to test.</param>
            <returns><c>true</c> if the point is in the interior or boundary of the Geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.Locate(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry)">
            <summary> 
            Computes the topological relationship ({Location}) of a single point to a Geometry.
            It handles both single-element and multi-element Geometries.
            The algorithm for multi-part Geometries takes into account the boundaryDetermination rule.
            </summary>
            <returns>The Location of the point relative to the input Geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.ComputeLocation(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="geom"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.UpdateLocationInfo(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.Locate(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.LocateInPolygonRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.PointLocator.Locate(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="poly"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.RayCrossingCounter">
            <summary>
             Counts the number of segments crossed by a horizontal ray extending to the right
             from a given point, in an incremental fashion.
             <para>This can be used to determine whether a point lies in a <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometry.</para>
             <para>The class determines the situation where the point lies exactly on a segment.</para>
             <para>When being used for Point-In-Polygon determination, this case allows short-circuiting the evaluation.</para>
             </summary>
             <remarks>
             This class handles polygonal geometries with any number of shells and holes.
             The orientation of the shell and hole rings is unimportant.
             In order to compute a correct location for a given polygonal geometry,
             it is essential that <b>all</b> segments are counted which
             <list type="Bullet">
             <item>touch the ray</item>
             <item>lie in in any ring which may contain the point</item>
             </list>
             <para>
             The only exception is when the point-on-segment situation is detected, in which
             case no further processing is required.
             The implication of the above rule is that segments which can be a priori determined to <i>not</i> touch the ray
             (i.e. by a test of their bounding box or Y-extent) do not need to be counted.  This allows for optimization by indexing.
             </para>
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RayCrossingCounter.LocatePointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
             Determines the <see cref="T:GeoAPI.Geometries.Location"/> of a point in a ring.
             This method is an exemplar of how to use this class.
            </summary>
             <param name="p">The point to test</param>
             <param name="ring">An array of Coordinates forming a ring</param>
             <returns>The location of the point in the ring</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RayCrossingCounter.LocatePointInRing(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Determines the <see cref="P:NetTopologySuite.Algorithm.RayCrossingCounter.Location"/> of a point in a ring.
            </summary>
            <param name="p">The point to test</param>
            <param name="ring">A coordinate sequence forming a ring</param>
            <returns>The location of the point in the ring</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RayCrossingCounter.CountSegment(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Counts a segment
            </summary>
             <param name="p1">An endpoint of the segment</param>
             <param name="p2">Another endpoint of the segment</param>
        </member>
        <member name="P:NetTopologySuite.Algorithm.RayCrossingCounter.IsOnSegment">
            <summary>
             Reports whether the point lies exactly on one of the supplied segments.
             <remarks>
             This method may be called at any time as segments are processed. If the result of this method is <c>true</c>, 
             no further segments need be supplied, since the result will never change again.
             </remarks>
            </summary>
        </member>
        <member name="P:NetTopologySuite.Algorithm.RayCrossingCounter.Location">
            <summary>
             Gets the <see cref="T:GeoAPI.Geometries.Location"/> of the point relative to  the ring, polygon
             or multipolygon from which the processed segments were provided.
            </summary>
             <remarks>This property only determines the correct location if <b>all</b> relevant segments have been processed</remarks>
        </member>
        <member name="P:NetTopologySuite.Algorithm.RayCrossingCounter.IsPointInPolygon">
            <summary>
             Tests whether the point lies in or on the ring, polygon
            </summary>
            <remarks>
             This property only determines the correct location if <b>all</b> relevant segments have been processed</remarks>
        </member>
        <member name="T:NetTopologySuite.Algorithm.RectangleLineIntersector">
            <summary>
            Computes whether a rectangle intersects line segments.
            </summary>
            <remarks>
            Rectangles contain a large amount of inherent symmetry
            (or to put it another way, although they contain four
            coordinates they only actually contain 4 ordinates
            worth of information).
            The algorithm used takes advantage of the symmetry of 
            the geometric situation 
            to optimize performance by minimizing the number
            of line intersection tests.
            </remarks>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RectangleLineIntersector.#ctor(GeoAPI.Geometries.Envelope)">
            <summary>
            Creates a new intersector for the given query rectangle,
            specified as an <see cref="T:GeoAPI.Geometries.Envelope"/>.
            </summary>
            <param name="rectEnv">The query rectangle, specified as an Envelope</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RectangleLineIntersector.Intersects(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the query rectangle intersects a given line segment.
            </summary>
            <param name="p0">The first endpoint of the segment</param>
            <param name="p1">The second endpoint of the segment</param>
            <returns><c>true</c> if the rectangle intersects the segment</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.RobustDeterminant">
            <summary> 
            Implements an algorithm to compute the
            sign of a 2x2 determinant for double precision values robustly.
            It is a direct translation of code developed by Olivier Devillers.
            
            The original code carries the following copyright notice:
            ************************************************************************
            Author : Olivier Devillers
            Olivier.Devillers@sophia.inria.fr
            http:/www.inria.fr:/prisme/personnel/devillers/anglais/determinant.html
            
            Olivier Devillers has allowed the code to be distributed under
            the LGPL (2012-02-16) saying "It is ok for LGPL distribution."
            
            *************************************************************************
            *************************************************************************
            Copyright (c) 1995  by  INRIA Prisme Project
            BP 93 06902 Sophia Antipolis Cedex, France.
            All rights reserved
            *************************************************************************
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustDeterminant.SignOfDet2x2(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the sign of the determinant of the 2x2 matrix with the given entries, in a robust way.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns>
            <list>
            <item>-1 if the determinant is negative,</item>
            <item>1 if the determinant is positive,</item>
            <item>0 if the determinant is null.</item>
            </list>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustDeterminant.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the index of the direction of the point <c>q</c> relative to
            a vector specified by <c>p1-p2</c>.
            </summary>
            <param name="p1">The origin point of the vector</param>
            <param name="p2">The final point of the vector</param>
            <param name="q">the point to compute the direction to</param>
            <returns>
            <list type="Bullet">
            <item>1 if q is counter-clockwise (left) from p1-p2</item>
            <item>-1 if q is clockwise (right) from p1-p2</item>
            <item>0 if q is collinear with p1-p2</item></list>
            </returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.RobustLineIntersector">
            <summary> 
            A robust version of <see cref="T:NetTopologySuite.Algorithm.LineIntersector"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.ComputeIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.ComputeCollinearIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.Intersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            This method computes the actual value of the intersection point.
            To obtain the maximum precision from the intersection calculation,
            the coordinates are normalized by subtracting the minimum
            ordinate values (in absolute value).  This has the effect of
            removing common significant digits from the calculation to
            maintain more bits of precision.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.SafeHCoordinateIntersection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Computes a segment intersection using homogeneous coordinates.
            Round-off error can cause the raw computation to fail, 
            (usually due to the segments being approximately parallel).
            If this happens, a reasonable approximation is computed instead.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.NormalizeToEnvCentre(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Normalize the supplied coordinates to
            so that the midpoint of their intersection envelope
            lies at the origin.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.IsInSegmentEnvelopes(GeoAPI.Geometries.Coordinate)">
            <summary> 
            Tests whether a point lies in the envelopes of both input segments.
            A correctly computed intersection point should return <c>true</c>
            for this test.
            Since this test is for debugging purposes only, no attempt is
            made to optimize the envelope test.
            </summary>
            <param name="intPoint"></param>
            <returns><c>true</c> if the input point lies within both input segment envelopes.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.RobustLineIntersector.NearestEndpoint(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds the endpoint of the segments P and Q which 
            is closest to the other segment.
            This is a reasonable surrogate for the true 
            intersection points in ill-conditioned cases
            (e.g. where two segments are nearly coincident,
            or where the endpoint of one segment lies almost on the other segment).
            </summary>
            <remarks>
            This replaces the older CentralEndpoint heuristic,
            which chose the wrong endpoint in some cases
            where the segments had very distinct slopes 
            and one endpoint lay almost on the other segment.
            </remarks>
            <param name="p1">an endpoint of segment P</param>
            <param name="p2">an endpoint of segment P</param>
            <param name="q1">an endpoint of segment Q</param>
            <param name="q2">an endpoint of segment Q</param>
            <returns>the nearest endpoint to the other segment</returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.SimplePointInRing">
            <summary> 
            Tests whether a <c>Coordinate</c> lies inside
            a ring, using a linear-time algorithm.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.SimplePointInRing.pts">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.SimplePointInRing.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.SimplePointInRing.IsInside(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Algorithm.SIRtreePointInRing">
            <summary> 
            Implements <c>PointInRing</c> using a <c>SIRtree</c> index to increase performance.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.SIRtreePointInRing.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.SIRtreePointInRing.BuildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.SIRtreePointInRing.IsInside(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.SIRtreePointInRing.TestLineSegment(GeoAPI.Geometries.Coordinate,NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="seg"></param>
        </member>
        <member name="T:NetTopologySuite.Algorithm.Orientation">
            <summary>
            Angle orientation
            </summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Orientation.None">
            <summary>Constant representing no orientation</summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Orientation.Straight">
            <summary>Constant representing straight orientation</summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Orientation.CounterClockwise">
            <summary>Constant representing counterclockwise orientation</summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Orientation.Left">
            <summary>Constant representing left orientation</summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Orientation.Clockwise">
            <summary>Constant representing clockwise orientation</summary>
        </member>
        <member name="F:NetTopologySuite.Algorithm.Orientation.Right">
            <summary>Constant representing right orientation</summary>
        </member>
        <member name="T:NetTopologySuite.Algorithm.AngleUtility">
            <summary>
             Utility functions for working with angles.
             Unless otherwise noted, methods in this class express angles in radians.
             </summary>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.ToDegrees(System.Double)">
            <summary>
             Converts from radians to degrees.
            </summary>
             <param name="radians">An angle in radians</param>
             <returns>The angle in degrees</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.ToRadians(System.Double)">
            <summary>
             Converts from degrees to radians.
            </summary>
             <param name="angleDegrees">An angle in degrees</param>
             <returns>The angle in radians</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.Angle(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Returns the angle of the vector from p0 to p1, relative to the positive X-axis.
             </summary>
             <remarks>The angle is normalized to be in the range [ -Pi, Pi ].</remarks>
             <param name="p0">The start-point</param>
             <param name="p1">The end-point</param>
             <returns>The normalized angle (in radians) that p0-p1 makes with the positive X-axis</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.Angle(GeoAPI.Geometries.Coordinate)">
            <summary>
             Returns the angle that the vector from (0,0) to p, relative to the positive X-axis.
            </summary>
             <remarks>
             The angle is normalized to be in the range ( -Pi, Pi ].
             </remarks>
             <param name="p">The point</param>
             <returns>The normalized angle (in radians) that (0,0)-p makes with the positive X-axis.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.IsAcute(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Tests whether the angle between p0-p1-p2 is acute.
            </summary>
             <remarks>
             <para>An angle is acute if it is less than 90 degrees.</para>
             <para>Note: this implementation is not precise (deterministic) for angles very close to 90 degrees.</para>    
             </remarks>
             <param name="p0">An endpoint of the angle</param>
             <param name="p1">The base of the angle</param>
             <param name="p2">Another endpoint of the angle</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.IsObtuse(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Tests whether the angle between p0-p1-p2 is obtuse
            </summary>
             <remarks>
             <para>An angle is obtuse if it is greater than 90 degrees.</para>
             <para>Note: this implementation is not precise (deterministic) for angles very close to 90 degrees.</para>    
             </remarks>
             <param name="p0">An endpoint of the angle</param>
             <param name="p1">The base of the angle</param>
             <param name="p2">Another endpoint of the angle</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.AngleBetween(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Returns the unoriented smallest angle between two vectors.
            </summary>
             <remarks>
             The computed angle will be in the range [0, Pi).
             </remarks>
             <param name="tip1">The tip of one vector</param>
             <param name="tail">The tail of each vector</param>
             <param name="tip2">The tip of the other vector</param>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.AngleBetweenOriented(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the oriented smallest angle between two vectors.
            The computed angle will be in the range (-Pi, Pi].
            A positive result corresponds to a <see cref="F:NetTopologySuite.Algorithm.Orientation.CounterClockwise"/> rotation (CCW) from v1 to v2;
            a negative result corresponds to a <see cref="F:NetTopologySuite.Algorithm.Orientation.Clockwise"/> (CW) rotation;
            a zero result corresponds to no rotation.
            </summary>
            <param name="tip1">The tip of v1</param>
            <param name="tail">The tail of each vector</param>
            <param name="tip2">The tip of v2</param>
            <returns>The angle between v1 and v2, relative to v1</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.InteriorAngle(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the interior angle between two segments of a ring.
             The ring is assumed to be oriented in a clockwise direction.
            </summary>
             <remarks>The computed angle will be in the range [0, 2Pi]</remarks>
             <param name="p0">A point of the ring</param>
             <param name="p1">The next point of the ring</param>
             <param name="p2">The next point of the ring</param>
             <returns>The interior angle based at <see paramref="p1"/>p1</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.GetTurn(System.Double,System.Double)">
            <summary>
             Returns whether an angle must turn clockwise or counterclockwise to overlap another angle.
            </summary>
             <param name="ang1">An angle (in radians)</param>
             <param name="ang2">An angle (in radians)</param>
             <returns>Whether a1 must turn <see cref="F:NetTopologySuite.Algorithm.Orientation.Clockwise"/>, <see cref="F:NetTopologySuite.Algorithm.Orientation.CounterClockwise"/> or <see cref="F:NetTopologySuite.Algorithm.Orientation.None"/> to overlap a2.</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.Normalize(System.Double)">
            <summary>
             Computes the normalized value of an angle, which is the equivalent angle in the range ( -Pi, Pi ].
            </summary>
             <param name="angle">The angle to normalize</param>
             <returns>An equivalent angle in the range (-Pi, Pi]</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.NormalizePositive(System.Double)">
            <summary>
             Computes the normalized positive value of an angle, which is the equivalent angle in the range [ 0, 2*Pi ).
             <para>
             E.g.
             <list>
             <item></item>
             <item>NormalizePositive(0.0) = 0.0</item>
             <item>NormalizePositive(-PI) = <see cref="F:System.Math.PI"/></item>
             <item>NormalizePositive(-2PI) = 0.0</item>
             <item>NormalizePositive(-3PI) = <see cref="F:System.Math.PI"/></item>
             <item>NormalizePositive(-4PI) = 0</item>
             <item>NormalizePositive(PI) = <see cref="F:System.Math.PI"/></item>
             <item>NormalizePositive(2PI) = 0.0</item>
             <item>NormalizePositive(3PI) = <see cref="F:System.Math.PI"/></item>
             <item>NormalizePositive(4PI) = 0.0</item>
             </list>
             </para>
            </summary>
             <remarks></remarks>
             <param name="angle">The angle to normalize, in radians.</param>
             <returns>An equivalent positive angle</returns>
        </member>
        <member name="M:NetTopologySuite.Algorithm.AngleUtility.Diff(System.Double,System.Double)">
            <summary>
             Computes the unoriented smallest difference between two angles.
            </summary>
            <remarks>
             <list type="Bulltet">
             <item>The angles are assumed to be normalized to the range [-Pi, Pi].</item>
             <item>The result will be in the range [0, Pi].</item>
             </list>
             </remarks>
             <param name="ang1">The angle of one vector (in [-Pi, Pi] )</param>
             <param name="ang2">The angle of the other vector (in range [-Pi, Pi] )</param>
             <returns>The angle (in radians) between the two vectors (in range [0, Pi] )</returns>
        </member>
        <member name="T:NetTopologySuite.CoordinateSystems.CRSBase">
            <summary>
            Base class for all ICRSObject implementing types
            </summary>
        </member>
        <member name="P:NetTopologySuite.CoordinateSystems.CRSBase.Type">
            <summary>
            Gets the type of the CRSBase object.
            </summary>
        </member>
        <member name="P:NetTopologySuite.CoordinateSystems.CRSBase.Properties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="T:NetTopologySuite.CoordinateSystems.CRSTypes">
            <summary>
            Defines the GeoJSON Coordinate Reference System Objects (CRS) types as defined in the <see href="http://geojson.org/geojson-spec.html#coordinate-reference-system-objects">geojson.org v1.0 spec</see>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.CoordinateSystems.CRSTypes.Name">
            <summary>
            Defines the <see href="http://geojson.org/geojson-spec.html#named-crs">Named</see> CRS type.
            </summary>
        </member>
        <member name="F:NetTopologySuite.CoordinateSystems.CRSTypes.Link">
            <summary>
            Defines the <see href="http://geojson.org/geojson-spec.html#linked-crs">Linked</see> CRS type.
            </summary>
        </member>
        <member name="T:NetTopologySuite.CoordinateSystems.ICRSObject">
            <summary>
            Base Interface for CRSBase Object types.
            </summary>
        </member>
        <member name="P:NetTopologySuite.CoordinateSystems.ICRSObject.Type">
            <summary>
            Gets the CRS type.
            </summary>
        </member>
        <member name="T:NetTopologySuite.CoordinateSystems.LinkedCRS">
            <summary>
            Defines the <see href="http://geojson.org/geojson-spec.html#linked-crs">Linked CRS type</see>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.LinkedCRS.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.CoordinateSystems.LinkedCRS"/> class.
            </summary>
            <param name="href">The mandatory <see href="http://geojson.org/geojson-spec.html#linked-crs">href</see> member must be a dereferenceable URI.</param>
            <param name="type">The optional type member will be put in the properties Dictionary as specified in the <see href="http://geojson.org/geojson-spec.html#linked-crs">GeoJSON spec</see>.</param>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.LinkedCRS.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.CoordinateSystems.LinkedCRS"/> class.
            </summary>
            <param name="href">The mandatory <see href="http://geojson.org/geojson-spec.html#linked-crs">href</see> member must be a dereferenceable URI.</param>
            <param name="type">The optional type member will be put in the properties Dictionary as specified in the <see href="http://geojson.org/geojson-spec.html#linked-crs">GeoJSON spec</see>.</param>
        </member>
        <member name="T:NetTopologySuite.CoordinateSystems.NamedCRS">
            <summary>
            Defines the <see href="http://geojson.org/geojson-spec.html#named-crs">Named CRS type</see>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.NamedCRS.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.CoordinateSystems.NamedCRS"/> class.
            </summary>
            <param name="name">
            The mandatory <see href="http://geojson.org/geojson-spec.html#named-crs">name</see>
            member must be a string identifying a coordinate reference system. OGC CRS URNs such as
            'urn:ogc:def:crs:OGC:1.3:CRS84' shall be preferred over legacy identifiers such as 'EPSG:4326'.
            </param>
        </member>
        <member name="T:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform">
            <summary>
            Helper class for transforming <see cref="T:NetTopologySuite.Geometries.Geometry" /> objects.
            </summary>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformBox(GeoAPI.Geometries.Envelope,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.Envelope" /> object.
            </summary>
            <param name="box"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformGeometry(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IGeometry,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.Geometry" /> object.
            </summary>
            <param name="factory"></param>
            <param name="g"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformPoint(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IPoint,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.Point" /> object.
            </summary>
            <param name="factory"></param>
            <param name="p"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformLineString(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.ILineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.LineString" /> object.
            </summary>
            <param name="factory"></param>
            <param name="l"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformLinearRing(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.ILinearRing,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.LinearRing" /> object.
            </summary>
            <param name="factory"></param>
            <param name="r"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformPolygon(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IPolygon,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.Polygon" /> object.
            </summary>
            <param name="factory"></param>
            <param name="p"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPoint(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IMultiPoint,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.MultiPoint" /> object.
            </summary>
            <param name="factory"></param>
            <param name="points"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformMultiLineString(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IMultiLineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:NetTopologySuite.Geometries.MultiLineString" /> object.
            </summary>
            <param name="factory"></param>
            <param name="lines"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPolygon(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IMultiPolygon,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IMultiPolygon" /> object.
            </summary>
            <param name="factory">The factory to create the new <see cref="T:GeoAPI.Geometries.IMultiPolygon"/></param>
            <param name="polys">The input <see cref="T:GeoAPI.Geometries.IMultiPolygon"/></param>
            <param name="transform">The <see cref="T:GeoAPI.CoordinateSystems.Transformations.IMathTransform"/></param>
            <returns>A transformed <see cref="T:GeoAPI.Geometries.IMultiPolygon"/></returns>
        </member>
        <member name="M:NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformGeometryCollection(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Geometries.IGeometryCollection,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IGeometryCollection" /> object.
            </summary>
            <param name="factory">The factory to create the new <see cref="T:GeoAPI.Geometries.IGeometryCollection"/></param>
            <param name="geoms">The input <see cref="T:GeoAPI.Geometries.IGeometryCollection"/></param>
            <param name="transform">The <see cref="T:GeoAPI.CoordinateSystems.Transformations.IMathTransform"/></param>
            <returns>A transformed <see cref="T:GeoAPI.Geometries.IGeometryCollection"/></returns>
        </member>
        <member name="T:NetTopologySuite.Dissolve.DissolveEdgeGraph">
            <summary>
            A graph containing <see cref="T:NetTopologySuite.Dissolve.DissolveHalfEdge"/>s.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Dissolve.DissolveHalfEdge">
            <summary>
            A HalfEdge which carries information
            required to support <see cref="T:NetTopologySuite.Dissolve.LineDissolver"/>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Dissolve.DissolveHalfEdge.IsStart">
            <summary>
            Tests whether this edge is the starting segment
            in a LineString being dissolved.
            </summary>
            <returns><c>true</c> if this edge is a start segment</returns>        
        </member>
        <member name="M:NetTopologySuite.Dissolve.DissolveHalfEdge.SetStart">
            <summary>
            Sets this edge to be the start segment of an input LineString.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Dissolve.LineDissolver">
             <summary>
             Dissolves the linear components 
             from a collection of <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
             into a set of maximal-length <see cref="T:GeoAPI.Geometries.ILineString"/>s
             in which every unique segment appears once only.
             The output linestrings run between node vertices
             of the input, which are vertices which have
             either degree 1, or degree 3 or greater.
             </summary>
             <remarks>
             Use cases for dissolving linear components
             include generalization 
             (in particular, simplifying polygonal coverages), 
             and visualization 
             (in particular, avoiding symbology conflicts when
             depicting shared polygon boundaries).
             </remarks>
             <remarks>
             This class does NOT node the input lines.
             If there are line segments crossing in the input, 
             they will still cross in the output.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.Dissolve(GeoAPI.Geometries.IGeometry)">
            <summary>
            Dissolves the linear components in a geometry.
            </summary>
            <param name="g">the geometry to dissolve</param>
            <returns>the dissolved lines</returns>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a <see cref="T:GeoAPI.Geometries.IGeometry"/> to be dissolved. 
            Any number of geometries may be adde by calling this method multiple times.
            Any type of Geometry may be added.  The constituent linework will be
            extracted to be dissolved.
            </summary>
            <param name="geometry">geometry to be line-merged</param>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.Add(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Adds a collection of Geometries to be processed. May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be
            extracted.
            </summary>
            <param name="geometries">the geometries to be line-merged</param>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.GetResult">
            <summary>
            Gets the dissolved result as a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <returns>the dissolved lines</returns>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.BuildLines">
            <summary>
            For each edge in stack
            (which must originate at a node)
            extracts the line it initiates.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.UpdateRingStartEdge(NetTopologySuite.Dissolve.DissolveHalfEdge)">
            <summary>
            Updates the tracked ringStartEdge
            if the given edge has a lower origin
            (using the standard <see cref="T:GeoAPI.Geometries.Coordinate"/> ordering).
            </summary>
            <remarks>
            Identifying the lowest starting node meets two goals:
            * It ensures that isolated input rings are created using the original node and orientation.
            * For isolated rings formed from multiple input linestrings, 
            it provides a canonical node and orientation for the output
            (rather than essentially random, and thus hard to test).
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.BuildLine(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Builds a line starting from the given edge.
            The start edge origin is a node (valence = 1 or >= 3), 
            unless it is part of a pure ring.
            </summary>
            <remarks>
            A pure ring has no other incident lines.
            In this case the start edge may occur anywhere on the ring.
            </remarks>
            <remarks>
            The line is built up to the next node encountered,
            or until the start edge is re-encountered
            (which happens if the edges form a ring).
            </remarks>
            <param name="eStart"></param>
        </member>
        <member name="M:NetTopologySuite.Dissolve.LineDissolver.StackEdges(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Adds edges around this node to the stack.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:NetTopologySuite.EdgeGraph.EdgeGraph">
            <summary>
            A graph comprised of <see cref="T:NetTopologySuite.EdgeGraph.HalfEdge"/>s.
            It supports tracking the vertices in the graph
            via edges incident on them, 
            to allow efficient lookup of edges and vertices.
            </summary>
            <remarks>
            This class may be subclassed to use a 
            different subclass of HalfEdge,
            by overriding <see cref="M:NetTopologySuite.EdgeGraph.EdgeGraph.CreateEdge(GeoAPI.Geometries.Coordinate)"/>.
            If additional logic is required to initialize
            edges then <see cref="M:NetTopologySuite.EdgeGraph.EdgeGraph.AddEdge(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
            can be overridden as well.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraph.CreateEdge(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a single HalfEdge.
            Override to use a different HalfEdge subclass.
            </summary>
            <param name="orig">the origin location</param>
            <returns>a new <see cref="T:NetTopologySuite.EdgeGraph.HalfEdge"/> with the given origin</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraph.AddEdge(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Adds an edge between the coordinates orig and dest
            to this graph.
            </summary>
            <remarks>
            Only valid edges can be added (in particular, zero-length segments cannot be added)
            </remarks>
            <param name="orig">the edge origin location</param>
            <param name="dest">the edge destination location</param>
            <returns>The created edge</returns>
            <returns><value>null</value> if the edge was invalid and not added</returns>
            <seealso cref="M:NetTopologySuite.EdgeGraph.EdgeGraph.IsValidEdge(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraph.IsValidEdge(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Test if an the coordinates for an edge form a valid edge (with non-zero length)
            </summary>
            <param name="orig">The start coordinate</param>
            <param name="dest">The end coordinate</param>
            <returns><value>true</value> of the edge formed is valid</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraph.Insert(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Inserts an edge not already present into the graph.
            </summary>
            <param name="orig">the edge origin location</param>
            <param name="dest">the edge destination location</param>
            <param name="eAdj">an existing edge with same orig (if any)</param>
            <returns>the created edge</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraph.FindEdge(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds an edge in this graph with the given origin
            and destination, if one exists.
            </summary>
            <param name="orig">the origin location</param>
            <param name="dest">the destination location</param>
            <returns>an edge with the given orig and dest, or null if none exists</returns>
        </member>
        <member name="T:NetTopologySuite.EdgeGraph.EdgeGraphBuilder">
            <summary>
            Builds an edge graph from geometries containing edges.
            </summary>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraphBuilder.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds the edges of a Geometry to the graph. 
            May be called multiple times.
            Any dimension of Geometry may be added; the constituent edges are extracted.
            </summary>
            <param name="geometry">geometry to be added</param>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.EdgeGraphBuilder.Add(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
             Adds the edges in a collection of <see cref="T:GeoAPI.Geometries.IGeometry"/>s to the graph. 
            May be called multiple times.
            Any dimension of <see cref="T:GeoAPI.Geometries.IGeometry"/> may be added.
            </summary>
            <param name="geometries">the geometries to be added</param>
        </member>
        <member name="T:NetTopologySuite.EdgeGraph.HalfEdge">
            <summary>
            Represents a directed component of an edge in an <see cref="T:NetTopologySuite.EdgeGraph.EdgeGraph"/>.
            HalfEdges link vertices whose locations are defined by <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            HalfEdges start at an <b>origin</b> vertex,
            and terminate at a <b>destination</b> vertex.
            HalfEdges always occur in symmetric pairs, with the <see cref="P:NetTopologySuite.EdgeGraph.HalfEdge.Sym"/> method
            giving access to the oppositely-oriented component.
            HalfEdges and the methods on them form an edge algebra,
            which can be used to traverse and query the topology
            of the graph formed by the edges.
            </summary>
            <remarks>
            By design HalfEdges carry minimal information
            about the actual usage of the graph they represent.
            They can be subclassed to carry more information if required.
            </remarks>
            <remarks>
            HalfEdges form a complete and consistent data structure by themselves,
            but an <see cref="T:NetTopologySuite.EdgeGraph.EdgeGraph"/> is useful to allow retrieving edges
            by vertex and edge location, as well as ensuring 
            edges are created and linked appropriately.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.Create(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Creates a HalfEdge pair representing an edge
            between two vertices located at coordinates p0 and p1.
            </summary>
            <param name="p0">a vertex coordinate</param>
            <param name="p1">a vertex coordinate</param>
            <returns>the HalfEdge with origin at p0</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.Init(NetTopologySuite.EdgeGraph.HalfEdge,NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Initialize a symmetric pair of HalfEdges.
            Intended for use by <see cref="T:NetTopologySuite.EdgeGraph.EdgeGraph"/> subclasses.
            The edges are initialized to have each other 
            as the <see cref="P:NetTopologySuite.EdgeGraph.HalfEdge.Sym"/> edge, and to have <see cref="P:NetTopologySuite.EdgeGraph.HalfEdge.Next"/> pointers
            which point to edge other.
            This effectively creates a graph containing a single edge.
            </summary>
            <param name="e0">a HalfEdge</param>
            <param name="e1">a symmetric HalfEdge</param>
            <returns>the initialized edge e0</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an edge originating from a given coordinate.
            </summary>
            <param name="orig">the origin coordinate</param>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.Orig">
            <summary>
            Gets the origin coordinate of this edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.Dest">
            <summary>
            Gets the destination coordinate of this edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.Sym">
            <summary>
            Gets the symmetric pair edge of this edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.Next">
            <summary>
            Gets the next edge CCW around the 
            destination vertex of this edge.
            If the vertex has degree 1 then this is the <b>sym</b> edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.Prev">
            <summary>
            Returns the edge previous to this one
            (with dest being the same as this orig).
            </summary>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.Find(GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds the edge starting at the origin of this edge
            with the given dest vertex, if any.
            </summary>
            <param name="dest">the dest vertex to search for</param>
            <returns>
            the edge with the required dest vertex, 
            if it exists, or null
            </returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.Equals(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether this edge has the given orig and dest vertices.
            </summary>
            <param name="p0">the origin vertex to test</param>
            <param name="p1">the destination vertex to test</param>
            <returns><c>true</c> if the vertices are equal to the ones of this edge</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.Insert(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Inserts an edge
            into the ring of edges around the origin vertex of this edge.
            The inserted edge must have the same origin as this edge.
            </summary>
            <param name="e">the edge to insert</param>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.InsertAfter(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Insert an edge with the same origin after this one.
            Assumes that the inserted edge is in the correct
            position around the ring.
            </summary>
            <param name="e">the edge to insert (with same origin)</param>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.CompareTo(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Compares edges which originate at the same vertex
            based on the angle they make at their origin vertex with the positive X-axis.
            This allows sorting edges around their origin vertex in CCW order.
            </summary>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.CompareAngularDirection(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Implements the total order relation.
            The angle of edge a is greater than the angle of edge b,
            where the angle of an edge is the angle made by 
            the first segment of the edge with the positive x-axis.       
            When applied to a list of edges originating at the same point,
            this produces a CCW ordering of the edges around the point.        
            Using the obvious algorithm of computing the angle is not robust,
            since the angle calculation is susceptible to roundoff error.
            </summary> 
            <remarks>
            A robust algorithm is:        
            1. compare the quadrants the edge vectors lie in.  
            If the quadrants are different, 
            it is trivial to determine which edge has a greater angle.
            2. If the vectors lie in the same quadrant, the 
            <see cref="M:NetTopologySuite.Algorithm.CGAlgorithms.ComputeOrientation(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/> function        
            can be used to determine the relative orientation of the vectors.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.DeltaX">
            <summary>
            The X component of the distance between the orig and dest vertices.
            </summary>
        </member>
        <member name="P:NetTopologySuite.EdgeGraph.HalfEdge.DeltaY">
            <summary>
            The Y component of the distance between the orig and dest vertices.
            </summary>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.ToString">
            <summary>
            Computes a string representation of a HalfEdge.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.Degree">
            <summary>
            Computes the degree of the origin vertex.
            The degree is the number of edges
            originating from the vertex.
            </summary>
            <returns>the degree of the origin vertex</returns>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.HalfEdge.PrevNode">
            <summary>
            Finds the first node previous to this edge, if any.
            If no such node exists (i.e the edge is part of a ring)
            then null is returned.
            </summary>
            <returns>
            an edge originating at the node prior to this edge, if any,
            or null if no node exists
            </returns>
        </member>
        <member name="T:NetTopologySuite.EdgeGraph.MarkHalfEdge">
            <summary>
            A <see cref="T:NetTopologySuite.EdgeGraph.HalfEdge"/> which supports
            marking edges with a boolean flag.
            Useful for algorithms which perform graph traversals.
            </summary>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.MarkHalfEdge.SetMarkBoth(NetTopologySuite.EdgeGraph.HalfEdge,System.Boolean)">
            <summary>
            Sets the mark for the given edge pair to a boolean value.
            </summary>
            <param name="e">an edge of the pair to update</param>
            <param name="isMarked">the mark value to set</param>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.MarkHalfEdge.MarkBoth(NetTopologySuite.EdgeGraph.HalfEdge)">
            <summary>
            Marks the edges in a pair.
            </summary>
            <param name="e">an edge of the pair to mark</param>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.MarkHalfEdge.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new marked edge.
            </summary>
            <param name="orig">the coordinate of the edge origin</param>
        </member>
        <member name="M:NetTopologySuite.EdgeGraph.MarkHalfEdge.Mark">
            <summary>
            Marks this edge.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Features.FeatureCollection">
            <summary>
             Represents a feature collection.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Features.FeatureCollection._boundingBox">
            <summary>
            The bounding box of this <see cref="T:NetTopologySuite.Features.FeatureCollection"/>
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.FeatureCollection.Features">
            <summary>
                Gets the features.
            </summary>
            <value>The features.</value>        
        </member>
        <member name="P:NetTopologySuite.Features.FeatureCollection.Type">
            <summary>
                Gets the (mandatory) type of the <see href = "http://geojson.org/geojson-spec.html#geojson-objects">GeoJSON Object</see>.
            </summary>
            <value>
                The type of the object.
            </value>        
        </member>
        <member name="P:NetTopologySuite.Features.FeatureCollection.CRS">
            <summary>
            Gets or sets the (optional) <see href="http://geojson.org/geojson-spec.html#coordinate-reference-system-objects">Coordinate Reference System Object</see>.
            </summary>
            <value>
            The Coordinate Reference System Objects.
            </value>        
        </member>
        <member name="P:NetTopologySuite.Features.FeatureCollection.Item(System.Int32)">
            <summary>
            Returns the indexTh element in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Features.FeatureCollection.Count">
            <summary>
            Returns the number of features contained by this <see cref="T:NetTopologySuite.Features.FeatureCollection" />.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureCollection.#ctor(System.Collections.ObjectModel.Collection{NetTopologySuite.Features.IFeature})">
            <summary>
                Initializes a new instance of the <see cref = "T:NetTopologySuite.Features.FeatureCollection" /> class.
            </summary>
            <param name = "features">The features.</param>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Features.FeatureCollection"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureCollection.Add(NetTopologySuite.Features.IFeature)">
            <summary>
            Adds the specified feature.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureCollection.Remove(NetTopologySuite.Features.IFeature)">
            <summary>
            Removes the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns 
            false if item was not found in the collection.</returns>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:NetTopologySuite.Features.FeatureCollection.BoundingBox">
            <summary>
            Gets or sets the (optional) <see href="http://geojson.org/geojson-spec.html#geojson-objects"> Bounding box (<c>bbox</c>) Object</see>.
            </summary>
            <value>
            A <see cref="T:GeoAPI.Geometries.Envelope"/> describing the bounding box or <value>null</value>.
            </value>        
        </member>
        <member name="M:NetTopologySuite.Features.FeatureCollection.ComputeBoundingBox">
            <summary>
            Function to compute the bounding box (when it isn't set)
            </summary>
            <returns>A bounding box for this <see cref="T:NetTopologySuite.Features.FeatureCollection"/></returns>
        </member>
        <member name="T:NetTopologySuite.Features.FeatureExtensions">
            <summary>
            Extension methods for <see cref="T:NetTopologySuite.Features.IFeature"/>s.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.FeatureExtensions.IdAttributeName">
            <summary>
            Gets or sets a name that is used to retrieve the ID of a feature from the attribute table
            </summary>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureExtensions.ID(NetTopologySuite.Features.IFeature)">
            <summary>
            Function to get a feature's ID
            </summary>
            <param name="feature">The feature</param>
            <returns>The feature's ID if one has been assigned, otherwise <value>null</value></returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="feature"/> is <valu>null</valu></exception>
        </member>
        <member name="M:NetTopologySuite.Features.FeatureExtensions.HasID(NetTopologySuite.Features.IFeature)">
            <summary>
            Function to evaluate if a feature has an ID
            </summary>
            <param name="feature">The feature</param>
            <returns><value>true</value> if <paramref name="feature"/> has an identifier assigned, otherwise <value>false</value></returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="feature"/> is <valu>null</valu></exception>
        </member>
        <member name="T:NetTopologySuite.Features.IFeature">
            <summary>
            Interface for feature classes
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.IFeature.Attributes">
            <summary>
            Gets or sets the attributes for the feature
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.IFeature.Geometry">
            <summary>
            Gets or sets the feature's geometry
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.IFeature.BoundingBox">
            <summary>
            Gets or sets the feature's geometry
            </summary>
        </member>
        <member name="T:NetTopologySuite.Features.AttributesTable">
            <summary>
            Stores all attributes associated with a single <c>Geometry</c> feature.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.AttributesTable.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.GetNames">
            <summary>
            Returns a <c>string</c> array containing 
            all names of present attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.GetValues">
            <summary>
            Returns a <c>object</c> array containing 
            all values of present attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.Exists(System.String)">
            <summary>
            Verifies if attribute specified already exists.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.AddAttribute(System.String,System.Object)">
            <summary>
            Build a field with the given value and add it to attributes table.        
            </summary>
            <param name="attributeName">Name of the new attribute.</param>        
            <param name="attributeValue">Value for attribute (can be null).</param>
            <exception cref="T:System.ArgumentException">If attribute already exists.</exception>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.DeleteAttribute(System.String)">
            <summary>
            Delete the specified attribute from the table.
            </summary>
            <param name="attributeName"></param>       
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.GetType(System.String)">
            <summary>
            Return the <c>System.Type</c> of the specified attribute, 
            useful for casting values retrieved with GetValue methods.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.GetValue(System.String)">
            <summary>
            Get the value of the specified attribute.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.AttributesTable.SetValue(System.String,System.Object)">
            <summary>
            Set the value of the specified attribute.
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="P:NetTopologySuite.Features.AttributesTable.Item(System.String)">
            <summary>
            Get / Set the value of the specified attribute.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Features.Feature">
            <summary>
             Feature class
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.Feature.ComputeBoundingBoxWhenItIsMissing">
            <summary>
            Gets or sets a value indicating how bounding box on <see cref="T:NetTopologySuite.Features.Feature"/> should be handled
            </summary>
            <remarks>Default is <value>false</value></remarks>
        </member>
        <member name="M:NetTopologySuite.Features.Feature.#ctor(GeoAPI.Geometries.IGeometry,NetTopologySuite.Features.IAttributesTable)">
            <summary>
            Creates an instace of this class
            </summary>
            <param name="geometry">The geometry</param>
            <param name="attributes">The attributes</param>
        </member>
        <member name="M:NetTopologySuite.Features.Feature.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.Feature.Geometry">
            <summary>
            Geometry representation of the feature.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.Feature.Attributes">
            <summary>
            Attributes table of the feature.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Features.Feature.BoundingBox">
            <summary>
            Gets or sets the (optional) <see href="http://geojson.org/geojson-spec.html#geojson-objects"> Bounding box (<c>bbox</c>) Object</see>.
            </summary>
            <value>
            A <see cref="T:GeoAPI.Geometries.Envelope"/> describing the bounding box or <value>null</value>.
            </value>        
        </member>
        <member name="T:NetTopologySuite.Features.IAttributesTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Features.IAttributesTable.AddAttribute(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetTopologySuite.Features.IAttributesTable.DeleteAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
        </member>
        <member name="M:NetTopologySuite.Features.IAttributesTable.GetType(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Features.IAttributesTable.Item(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.IAttributesTable.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Features.IAttributesTable.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Features.IAttributesTable.GetNames">
            <summary>
            Gets the names
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Features.IAttributesTable.GetValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Geometry">
            <summary>  
            A representation of a planar, linear vector geometry.
            </summary>
            <remarks>
            <para>
            <h3>Binary Predicates:</h3>
            Because it is not clear at this time what semantics for spatial
            analysis methods involving <c>GeometryCollection</c>s would be useful,
            <c>GeometryCollection</c>s are not supported as arguments to binary
            predicates or the <c>Relate</c> method.
            </para>
            <para>
            <h3>Overlay Methods:</h3> 
            The spatial analysis methods will
            return the most specific class possible to represent the result. If the
            result is homogeneous, a <c>Point</c>, <c>LineString</c>, or
            <c>Polygon</c> will be returned if the result contains a single
            element; otherwise, a <c>MultiPoint</c>, <c>MultiLineString</c>,
            or <c>MultiPolygon</c> will be returned. If the result is
            heterogeneous a <c>GeometryCollection</c> will be returned.
            </para>
            <para>
            Representation of Computed Geometries:  
            The SFS states that the result
            of a set-theoretic method is the "point-set" result of the usual
            set-theoretic definition of the operation (SFS 3.2.21.1). However, there are
            sometimes many ways of representing a point set as a <c>Geometry</c>.
            The SFS does not specify an unambiguous representation of a given point set
            returned from a spatial analysis method. One goal of NTS is to make this
            specification precise and unambiguous. NTS uses a canonical form for
            <c>Geometry</c>s returned from overlay methods. The canonical
            form is a <c>Geometry</c> which is simple and noded:
            Simple means that the Geometry returned will be simple according to
            the NTS definition of <c>IsSimple</c>.
            Noded applies only to overlays involving <c>LineString</c>s. It
            means that all intersection points on <c>LineString</c>s will be
            present as endpoints of <c>LineString</c>s in the result.
            This definition implies that non-simple geometries which are arguments to
            spatial analysis methods must be subjected to a line-dissolve process to
            ensure that the results are simple.
            </para>
            <para>
            Constructed Points And The Precision Model: 
            The results computed by the set-theoretic methods may
            contain constructed points which are not present in the input <c>Geometry</c>s. 
            These new points arise from intersections between line segments in the
            edges of the input <c>Geometry</c>s. In the general case it is not
            possible to represent constructed points exactly. This is due to the fact
            that the coordinates of an intersection point may contain twice as many bits
            of precision as the coordinates of the input line segments. In order to
            represent these constructed points explicitly, NTS must truncate them to fit
            the <c>PrecisionModel</c>. 
            Unfortunately, truncating coordinates moves them slightly. Line segments
            which would not be coincident in the exact result may become coincident in
            the truncated representation. This in turn leads to "topology collapses" --
            situations where a computed element has a lower dimension than it would in
            the exact result. 
            When NTS detects topology collapses during the computation of spatial
            analysis methods, it will throw an exception. If possible the exception will
            report the location of the collapse. 
            </para>
            <para>
            
            <h3>Geometry Equality</h3>
            There are two ways of comparing geometries for equality: 
            <b>structural equality</b> and <b>topological equality</b>.
            <h4>Structural Equality</h4>
            Structural Equality is provided by the 
            <see cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)"/> method.  
            This implements a comparison based on exact, structural pointwise
            equality. 
            The <see cref="M:NetTopologySuite.Geometries.Geometry.Equals(System.Object)"/> is a synonym for this method, 
            to provide structural equality semantics for
            use in collections.
            It is important to note that structural pointwise equality
            is easily affected by things like
            ring order and component order.  In many situations
            it will be desirable to normalize geometries before
            comparing them (using the <see cref="M:NetTopologySuite.Geometries.Geometry.Normalized"/> 
            or <see cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/> methods).
            <see cref="M:NetTopologySuite.Geometries.Geometry.EqualsNormalized(GeoAPI.Geometries.IGeometry)"/> is provided
            as a convenience method to compute equality over
            normalized geometries, but it is expensive to use.
            Finally, <see cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)"/>
            allows using a tolerance value for point comparison.
            
            <h4>Topological Equality</h4>
            Topological Equality is provided by the 
            <see cref="M:NetTopologySuite.Geometries.Geometry.EqualsTopologically(GeoAPI.Geometries.IGeometry)"/> method. 
            It implements the SFS definition of point-set equality
            defined in terms of the DE-9IM matrix. 
            To support the SFS naming convention, the method
            <see cref="M:NetTopologySuite.Geometries.Geometry.Equals(GeoAPI.Geometries.IGeometry)"/> is also provided as a synonym.  
            However, due to the potential for confusion with <see cref="M:NetTopologySuite.Geometries.Geometry.Equals(System.Object)"/>
            its use is discouraged.
            <para/>
            Since <see cref="M:NetTopologySuite.Geometries.Geometry.Equals(System.Object)"/> and <see cref="M:NetTopologySuite.Geometries.Geometry.GetHashCode"/> are overridden, 
            Geometries can be used effectively in .Net collections.
            </para>
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Geometries.Geometry._sortedClasses">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Factory">
            <summary> 
            Gets the factory which contains the context in which this point was created.
            </summary>
            <returns>The factory for this point.</returns>
        </member>
        <member name="F:NetTopologySuite.Geometries.Geometry._userData">
            An object reference which can be used to carry ancillary data defined
            by the client.
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.UserData">
            <summary> 
            Gets/Sets the user data object for this point, if any.
            </summary>
            <remarks>
            A simple scheme for applications to add their own custom data to a Geometry.
            An example use might be to add an object representing a Coordinate Reference System.
            Note that user data objects are not present in geometries created by
            construction methods.
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Geometries.Geometry._envelope">
            <summary>
            The bounding box of this <c>Geometry</c>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.SRID">
            <summary>  
            Sets the ID of the Spatial Reference System used by the <c>Geometry</c>.
            </summary>
            <remarks>
            <para>
            <b>NOTE:</b> This method should only be used for exceptional circumstances or 
            for backwards compatibility.  Normally the SRID should be set on the 
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> used to create the geometry.
            SRIDs set using this method will <i>not</i> be propagated to 
            geometries returned by constructive methods.</para>
            </remarks>
            <seealso cref="T:GeoAPI.Geometries.IGeometryFactory"/>  
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new <c>Geometry</c> via the specified GeometryFactory.
            </summary>
            <param name="factory">The factory</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.GeometryType">
            <summary>  
            Returns the name of this Geometry's actual class.
            </summary>
            <returns>The name of this <c>Geometry</c>s actual class.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.OgcGeometryType">
            <summary>
            Gets the OGC geometry type
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.HasNonEmptyElements(GeoAPI.Geometries.IGeometry[])">
            <summary>  
            Returns true if the array contains any non-empty <c>Geometry</c>s.
            </summary>
            <param name="geometries"> an array of <c>Geometry</c>s; no elements may be <c>null</c></param>
            <returns>            
            <c>true</c> if any of the <c>Geometry</c>s
            <c>IsEmpty</c> methods return <c>false</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.HasNullElements(System.Object[])">
            <summary>  
            Returns true if the array contains any <c>null</c> elements.
            </summary>
            <param name="array"> an array to validate.</param>
            <returns><c>true</c> if any of <c>array</c>s elements are <c>null</c>.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.PrecisionModel">
            <summary>  
            Returns the <c>PrecisionModel</c> used by the <c>Geometry</c>.
            </summary>
            <returns>    
            the specification of the grid of allowable points, for this
            <c>Geometry</c> and all other <c>Geometry</c>s.
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Coordinate">
            <summary>  
            Returns a vertex of this <c>Geometry</c>
            (usually, but not necessarily, the first one).
            </summary>
            <remarks>
            The returned coordinate should not be assumed to be an actual Coordinate object used in the internal representation. 
            </remarks>
            <returns>a Coordinate which is a vertex of this <c>Geometry</c>.</returns>
            <returns><c>null</c> if this Geometry is empty.
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Coordinates">
            <summary>
            Returns an array containing the values of all the vertices for 
            this geometry.
            </summary>
            <remarks>
            If the geometry is a composite, the array will contain all the vertices
            for the components, in the order in which the components occur in the geometry.
            <para>
            In general, the array cannot be assumed to be the actual internal 
            storage for the vertices.  Thus modifying the array
            may not modify the geometry itself. 
            Use the <see cref="M:GeoAPI.Geometries.ICoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)"/> method
            (possibly on the components) to modify the underlying data.
            If the coordinates are modified, 
            <see cref="M:GeoAPI.Geometries.IGeometry.GeometryChanged"/> must be called afterwards.
            </para> 
            </remarks>
            <returns>The vertices of this <c>Geometry</c>.</returns>
            <seealso cref="M:GeoAPI.Geometries.IGeometry.GeometryChanged"/>
            <seealso cref="M:GeoAPI.Geometries.ICoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.GetOrdinates(GeoAPI.Geometries.Ordinate)">
            <summary>
            Gets an array of <see cref="T:System.Double"/> ordinate values
            </summary>
            <param name="ordinate">The ordinate index</param>
            <returns>An array of ordinate values</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.NumPoints">
            <summary>  
            Returns the count of this <c>Geometry</c>s vertices. The <c>Geometry</c>
            s contained by composite <c>Geometry</c>s must be
            Geometry's; that is, they must implement <c>NumPoints</c>.
            </summary>
            <returns>The number of vertices in this <c>Geometry</c>.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.NumGeometries">
            <summary>
            Returns the number of Geometryes in a GeometryCollection,
            or 1, if the geometry is not a collection.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.GetGeometryN(System.Int32)">
            <summary>
            Returns an element Geometry from a GeometryCollection,
            or <code>this</code>, if the geometry is not a collection.
            </summary>
            <param name="n">The index of the geometry element.</param>
            <returns>The n'th geometry contained in this geometry.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.IsSimple">
            <summary>
            Tests whether this <see cref="T:GeoAPI.Geometries.IGeometry"/> is simple.
            <para/>
            The SFS definition of simplicity
            follows the general rule that a Geometry is simple if it has no points of
            self-tangency, self-intersection or other anomalous points.
            <para/>
            Simplicity is defined for each <see cref="T:GeoAPI.Geometries.IGeometry"/> subclass as follows:
            <list type="Bullet">
            <item>Valid polygonal geometries are simple, since their rings
            must not self-intersect. <c>IsSimple</c>
            tests for this condition and reports <code>false</code> if it is not met.
            (This is a looser test than checking for validity).</item>
            <item>Linear rings have the same semantics.</item>
            <item>Linear geometries are simple iff they do not self-intersect at points
            other than boundary points.</item>
            <item>Zero-dimensional geometries (points) are simple iff they have no
            repeated points.</item>
            <item>Empty <code>Geometry</code>s are always simple.</item>
            </list>
            </summary>
            <returns><c>true</c> if this <code>Geometry</code> is simple</returns>
            <seealso cref="P:NetTopologySuite.Geometries.Geometry.IsValid"/>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.IsValid">
            <summary>  
            Tests whether this <c>Geometry</c> is topologically 
            valid, according to the OGC SFS specification.<para/>
            For validity rules see the documentation for the specific geometry subclass.
            </summary>
            <returns><c>true</c> if this <c>Geometry</c> is valid.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.IsEmpty">
            <summary> 
            Tests whether the set of points covered in this <c>Geometry</c> is empty.
            </summary>
            <returns><c>true</c> if this <c>Geometry</c> does not cover any points.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Distance(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Returns the minimum distance between this <c>Geometry</c>
            and another <c>Geometry</c> g.
            </summary>
            <param name="g">The <c>Geometry</c> from which to compute the distance.</param>
            <returns>The distance between the geometries</returns>
            <returns>0 if either input geometry is empty</returns>
            <exception cref="T:System.ArgumentException">if g is null</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.IsWithinDistance(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary> 
            Tests whether the distance from this <c>Geometry</c>
            to another is less than or equal to a specified value.
            </summary>
            <param name="geom">the Geometry to check the distance to.</param>
            <param name="distance">the distance value to compare.</param>
            <returns><c>true</c> if the geometries are less than <c>distance</c> apart.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Area">
            <summary>  
            Returns the area of this <c>Geometry</c>.
            Areal Geometries have a non-zero area.
            They override this function to compute the area.
            Others return 0.0
            </summary>
            <returns>The area of the Geometry.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Length">
            <summary> 
            Returns the length of this <c>Geometry</c>.
            Linear geometries return their length.
            Areal geometries return their perimeter.
            They override this function to compute the length.
            Others return 0.0
            </summary>
            <returns>The length of the Geometry.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Centroid">
            <summary> 
            Computes the centroid of this <c>Geometry</c>.
            The centroid 
            is equal to the centroid of the set of component Geometries of highest
            dimension (since the lower-dimension geometries contribute zero 
            "weight" to the centroid).
            <para/>
            The centroid of an empty geometry is <c>POINT EMPTY</c>.
            </summary>
            <returns>A Point which is the centroid of this Geometry.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.InteriorPoint">
            <summary>
            Computes an interior point of this <c>Geometry</c>.
            </summary>
            <remarks>
            An interior point is guaranteed to lie in the interior of the Geometry,
            if it possible to calculate such a point exactly. Otherwise,
            the point may lie on the boundary of the point.
            <para/>
            The interior point of an empty geometry is <c>POINT EMPTY</c>.
            </remarks>
            <returns>A <c>Point</c> which is in the interior of this Geometry.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.PointOnSurface">
            <summary>
            <see cref="P:NetTopologySuite.Geometries.Geometry.InteriorPoint" />
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Dimension">
            <summary> 
            Returns the dimension of this geometry.
            </summary>
            <remarks>
            The dimension of a geometry is is the topological 
            dimension of its embedding in the 2-D Euclidean plane.
            In the NTS spatial model, dimension values are in the set {0,1,2}.
            <para>
            Note that this is a different concept to the dimension of 
            the vertex <see cref="P:NetTopologySuite.Geometries.Geometry.Coordinate"/>s.
            The geometry dimension can never be greater than the coordinate dimension.
            For example, a 0-dimensional geometry (e.g. a Point) 
            may have a coordinate dimension of 3 (X,Y,Z). 
            </para>
            </remarks>
            <returns>  
            The topological dimensions of this geometry
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Boundary">
            <summary>  
            Returns the boundary, or an empty geometry of appropriate dimension 
            if this <c>Geometry</c> is empty. 
            For a discussion of this function, see the OpenGIS Simple
            Features Specification. As stated in SFS Section 2.1.13.1, "the boundary
            of a Geometry is a set of Geometries of the next lower dimension."
            </summary>
            <returns>The closure of the combinatorial boundary of this <c>Geometry</c>.</returns>
            NOTE: make abstract, remove setter and change geoapi
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.BoundaryDimension">
            <summary> 
            Returns the dimension of this <c>Geometry</c>s inherent boundary.
            </summary>
            <returns>    
            The dimension of the boundary of the class implementing this
            interface, whether or not this object is the empty point. Returns
            <c>Dimension.False</c> if the boundary is the empty point.
            </returns>
            NOTE: make abstract, remove setter and change geoapi
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.Envelope">
            <summary>  
            Gets a geometry representing the envelope (bounding box) of this <c>Geometry</c>.
            </summary>
            <remarks>If this <c>Geometry</c> is
            <list type="Bullet">
            <item>empty, returns an empty <c>Point</c></item>
            <item>a point, returns a <c>Point</c></item>
            <item>a line parallel to an axis, a two-vertex <c>LineString</c>,</item>
            <item>otherwise, returns a 
            <c>Polygon</c> whose vertices are (minx, miny), (maxx, miny), (maxx,
            maxy), (minx, maxy), (minx, miny).</item>
            </list>
            </remarks>
            <returns>    
            A Geometry representing the envelope of this Geometry
            </returns>
            <seealso cref="M:GeoAPI.Geometries.IGeometryFactory.ToGeometry(GeoAPI.Geometries.Envelope)"/>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.EnvelopeInternal">
            <summary>
            Gets an <see cref="T:GeoAPI.Geometries.Envelope"/> containing 
            the minimum and maximum x and y values in this <c>Geometry</c>.
            If the geometry is empty, an empty <c>Envelope</c> 
            is returned.
            </summary>
            <remarks>
            The returned object is a copy of the one maintained internally,
            to avoid aliasing issues.  
            For best performance, clients which access this
            envelope frequently should cache the return value.</remarks>
            <returns>the envelope of this <c>Geometry</c>.</returns>
            <returns>An empty Envelope if this Geometry is empty</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.GeometryChanged">
            <summary>
            Notifies this geometry that its coordinates have been changed by an external
            party (for example, via a <see cref="T:GeoAPI.Geometries.ICoordinateFilter"/>). 
            </summary>
            <remarks>
            When this method is called the geometry will flush
            and/or update any derived information it has cached (such as its <see cref="T:GeoAPI.Geometries.Envelope"/> ).
            The operation is applied to all component Geometries.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.GeometryChangedAction">
            <summary> 
            Notifies this Geometry that its Coordinates have been changed by an external
            party. When GeometryChanged is called, this method will be called for
            this Geometry and its component Geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Disjoint(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Tests whether this geometry is disjoint from the argument geometry.
            </summary>
            <remarks>
            The <c>Disjoint</c> predicate has the following equivalent definitions:
            <list type="Bullet">
            <item>The DE-9IM intersection matrix for the two geometries matches <c>FF*FF****</c>.</item>
            <item><c>!g.intersects(this) == true</c><br/>(<c>Disjoint</c> is the inverse of <c>Intersects</c>)</item>
            </list>
            </remarks>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if the two <c>Geometry</c>s are disjoint.</returns>
            <see cref="M:NetTopologySuite.Geometries.Geometry.Intersects(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Touches(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Tests whether this geometry touches the argument geometry
            </summary>
            <remarks>
            The <c>Touches</c> predicate has the following equivalent definitions:
            <list type="Bullet">
            <item>The geometries have at least one point in common, 
            but their interiors do not intersect</item>
            <item>The DE-9IM Intersection Matrix for the two geometries matches  
            at least one of the following patterns
            <list type="Bullet">
            <item><c>FT*******</c>, </item>
            <item><c>F**T*****</c> or </item>
            <item><c>F***T****</c>.</item>
            </list></item>
            </list>
            If both geometries have dimension 0, the predicate returns <c>false</c>, 
            since points have only interiors.
            This predicate is symmetric.
            </remarks>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if the two <c>Geometry</c>s touch;
            Returns false if both <c>Geometry</c>s are points.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Intersects(GeoAPI.Geometries.IGeometry)">
             <summary>
             Tests whether this geometry intersects the argument geometry.
            </summary>
             <remarks>
             The <c>Intersects</c> predicate has the following equivalent definitions:
             <list type="Bullet">
             <item>The two geometries have at least one point in common</item>
             <item>The DE-9IM Intersection Matrix for the two geometries matches<br/>
             <c>[T********]</c> or<br/>
             <c>[*T*******]</c> or<br/>
             <c>[***T*****]</c> or<br/>
             <c>[****T****]</c></item>
             <item> <c>!g.disjoint(this)</c><br/>
             (<c>Intersects</c> is the inverse of <c>Disjoint</c>)</item>
             </list></remarks>
             <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
             <returns><c>true</c> if the two <c>Geometry</c>s intersect.</returns>
             <see cref="M:NetTopologySuite.Geometries.Geometry.Disjoint(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Crosses(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this geometry crosses the specified geometry.
            </summary>
             <remarks>
             The <c>Crosses</c> predicate has the following equivalent definitions:
             <list type="Bullet">
             <item>The geometries have some but not all interior points in common.</item>
             <item>The DE-9IM Intersection Matrix for the two geometries matches
             one of the following patterns:
             <list type="Table">
             <listheader><item>Code</item><description>Description</description></listheader>
             <item><c>[T*T******]</c></item><description>for P/L, P/A, and L/A situations</description>
             <item><c>[T*****T**]</c></item><description>for L/P, A/P, and A/L situations)</description>
             <item><c>[0********]</c></item><description>for L/L situations</description>
             </list>
             </item>
             </list>
             For any other combination of dimensions this predicate returns <code>false</code>.
             <para>
             The SFS defined this predicate only for P/L, P/A, L/L, and L/A situations.
             In order to make the relation symmetric,
             NTS extends the definition to apply to L/P, A/P and A/L situations as well.
             </para>
             </remarks>
             <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
             <returns><c>true</c> if the two <c>Geometry</c>s cross.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Within(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this geometry is within the specified geometry.
            </summary>
            <remarks>
            The <code>within</code> predicate has the following equivalent definitions:
            <list type="Bullet">
            <item>
            Every point of this geometry is a point of the other geometry,
            and the interiors of the two geometries have at least one point in common.
            </item>
            <item>The DE-9IM Intersection Matrix for the two geometries matches <c>[T*F**F***]</c></item>
            <item><c>g.contains(this) == true</c><br/>(<c>Within</c> is the converse of <see cref="M:NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)"/>)</item>
            </list>
            <para>
            An implication of the definition is that "The boundary of a geometry is not within the Polygon".
            In other words, if a geometry A is a subset of the points in the boundary of a geometry B, <c>A.within(B) == false</c>
            (As a concrete example, take A to be a LineString which lies in the boundary of a Polygon B.)
            For a predicate with similar behaviour but avoiding 
            this subtle limitation, see <see cref="M:NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)"/>.
            </para>
            </remarks>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if this <c>Geometry</c> is within <c>other</c>.</returns>
            <see cref="M:NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)"/>
            <see cref="M:NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)" -->
        <member name="M:NetTopologySuite.Geometries.Geometry.Overlaps(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this geometry overlaps the specified geometry.
            </summary>
            <remarks>
            The <c>Overlaps</c> predicate has the following equivalent definitions:
            <list type="Bullet">
            <item>The geometries have at least one point each not shared by the other (or equivalently neither covers the other),
            they have the same dimension,
            and the intersection of the interiors of the two geometries has
            the same dimension as the geometries themselves.</item>
            <item>The DE-9IM Intersection Matrix for the two geometries matches
             <c>[T*T***T**]</c> (for two points or two surfaces)
             or <c>[1*T***T**]</c> (for two curves)</item>
            </list>
            If the geometries are of different dimension this predicate returns <c>false</c>.
            </remarks>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if the two <c>Geometry</c>s overlap.
            For this function to return <c>true</c>, the <c>Geometry</c>
            s must be two points, two curves or two surfaces.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Covers(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this geometry covers the argument geometry
            </summary>
            <remarks>
            The <c>covers</c> predicate has the following equivalent definitions:
            <list>
            <item>Every point of the other geometry is a point of this geometry.</item>
            <item>The DE-9IM Intersection Matrix for the two geometries matches at least
            one of the following patterns:
            <list type="Bullet">
            <item><c>[T*****FF*]</c> or<br/></item>
            <item><c>[*T****FF*]</c> or<br/></item>
            <item><c>[***T**FF*]</c> or<br/></item>
            <item><c>[****T*FF*]</c></item>
            </list>
            </item>
            <item><c>g.CoveredBy(this) == true</c><br/>
            (<c>covers</c> is the converse of <see cref="M:NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)"/>)</item>
            </list>
            If either geometry is empty, the value of this predicate is <c>false</c>.
            <para>
            This predicate is similar to <see cref="M:NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)"/>,
            but is more inclusive (i.e. returns <c>true</c> for more cases).
            In particular, unlike <c>Contains</c> it does not distinguish between
            points in the boundary and in the interior of geometries.
            For most situations, <c>Covers</c> should be used in preference to <c>Contains</c>.
            As an added benefit, <c>Covers</c> is more amenable to optimization,
            and hence should be more performant.
            </para>
            </remarks>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns><c>true</c> if this <c>Geometry</c> covers <paramref name="g" /></returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)" />
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)" />
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)">
            <summary>Tests whether this geometry is covered by the specified geometry.</summary>
             <remarks>
             The <c>CoveredBy</c> predicate has the following equivalent definitions:
             <list>
             <item>Every point of this geometry is a point of the other geometry.
             </item>
             <item>The DE-9IM Intersection Matrix for the two geometries matches
             at least one of the following patterns:
             <list type="Bullet">
             <item><c>[T*F**F***]</c></item>
             <item><c>[*TF**F***]</c></item>
             <item><c>[**FT*F***]</c></item>
             <item><c>[**F*TF***]</c></item></list></item>
             <item><c>g.Covers(this) == true</c><br/>
             (<c>CoveredBy</c> is the converse of <see cref="M:NetTopologySuite.Geometries.Geometry.Covers(GeoAPI.Geometries.IGeometry)"/>)
             </item>
             </list>
             If either geometry is empty, the value of this predicate is <c>false</c>.
             <para>
             This predicate is similar to <see cref="M:NetTopologySuite.Geometries.Geometry.Within(GeoAPI.Geometries.IGeometry)"/>, 
             but is more inclusive (i.e. returns <c>true</c> for more cases).
             </para>
            </remarks>
            <param name="g">the <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns><c>true</c> if this <c>Geometry</c> is covered by <c>g</c></returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Within(GeoAPI.Geometries.IGeometry)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Covers(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Relate(GeoAPI.Geometries.IGeometry,System.String)">
            <summary>
             Tests whether the elements in the DE-9IM
             <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> for the two <c>Geometry</c>s match the elements in <c>intersectionPattern</c>.
             </summary>
             <remarks>
             The pattern is a 9-character string, with symbols drawn from the following set:
             <list>
            <item>0 (dimension 0)</item>
            <item>1 (dimension 1)</item>
            <item>2 (dimension 2)</item>
            <item>T ( matches 0, 1 or 2)</item>
            <item>F ( matches FALSE)</item>
            <item>* ( matches any value)</item>
             </list> For more information on the DE-9IM, see the <i>OpenGIS Simple Features 
             Specification</i>.
             </remarks>
             <param name="g">the <c>Geometry</c> with which to compare this <c>Geometry</c></param>
             <param name="intersectionPattern">the pattern against which to check the 
             intersection matrix for the two <c>Geometry</c>s</param>
             <returns><c>true</c> if the DE-9IM intersection 
             matrix for the two <c>Geometry</c>s match <c>intersectionPattern</c></returns>
             <seealso cref="T:GeoAPI.Geometries.IntersectionMatrix"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Relate(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns the DE-9IM intersection matrix for the two <c>Geometry</c>s.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns>
            A matrix describing the intersections of the interiors,
            boundaries and exteriors of the two <c>Geometry</c>s.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Equals(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this geometry is 
            topologically equal to the argument geometry.
            <para/>
            This method is included for backward compatibility reasons.
            It has been superseded by the <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsTopologically(GeoAPI.Geometries.IGeometry)"/> method,
            which has been named to clearly denote its functionality.
            <para/>
            This method should <b>NOT</b> be confused with the method 
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Equals(System.Object)"/>, which implements 
            an exact equality comparison.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns><c>true</c> if the two <c>Geometry</c>s are topologically equal.</returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsTopologically(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.EqualsTopologically(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this geometry is topologically equal to the argument geometry
            as defined by the SFS <c>Equals</c> predicate.
            </summary>
            <remarks>
            The SFS <code>equals</code> predicate has the following equivalent definitions:
            <list type="Bullet">
            <item>The two geometries have at least one point in common,
            and no point of either geometry lies in the exterior of the other geometry.</item>
            <item>The DE-9IM Intersection Matrix for the two geometries matches
            the pattern <tt>T*F**FFF*</tt> 
            <pre>
            T*F
            **F
            FF*
            </pre></item>
            </list>
            <b>Note</b> that this method computes <b>topologically equality</b>. 
            For structural equality, see {@link #equalsExact(Geometry)}.
            </remarks>
            <param name="g">the <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns><c>true</c> if the two <code>Geometry</code>s are topologically equal</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Equals(System.Object)">
            <summary>
            Tests whether this geometry is structurally and numerically equal
            to a given <tt>Object</tt>.
            </summary>
            <remarks>
            If the argument <tt>Object</tt> is not a <c>Geometry</c>, 
            the result is <c>false</c>.
            Otherwise, the result is computed using
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)"/>.
            <para/>
            This method is provided to fulfill the Java contract
            for value-based object equality. 
            In conjunction with <seealso cref="M:NetTopologySuite.Geometries.Geometry.GetHashCode"/> 
            it provides semantics which are most useful 
            for using
            <c>Geometry</c>s as keys and values in Java collections.
            <para/>
            Note that to produce the expected result the input geometries
            should be in normal form.  It is the caller's 
            responsibility to perform this where required
            (using <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalized"/>
            or <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/> as appropriate).
            </remarks>
            <param name="o">The object to compare</param>
            <returns><c>true</c> if this geometry is exactly equal to the argument</returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.GetHashCode"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalized"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CompareGeometryCollections(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.op_Equality(NetTopologySuite.Geometries.Geometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.op_Inequality(NetTopologySuite.Geometries.Geometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.GetHashCode">
            <summary>
            Gets a hash code for the Geometry.
            </summary>
            <returns>
            An integer value suitable for use as a hashcode
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ToString">
            <summary>
            Returns the Well-known Text representation of this <c>Geometry</c>.
            For a definition of the Well-known Text format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>
            The Well-known Text representation of this <c>Geometry</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ToText">
            <summary>
            Returns the Well-known Text representation of this <c>Geometry</c>.
            For a definition of the Well-known Text format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>
            The Well-known Text representation of this <c>Geometry</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.AsText">
            <summary>
            <see cref="M:NetTopologySuite.Geometries.Geometry.ToText" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ToBinary">
            <summary>
            Returns the Well-known Binary representation of this <c>Geometry</c>.
            For a definition of the Well-known Binary format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>The Well-known Binary representation of this <c>Geometry</c>.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.AsBinary">
            <summary>
            <see cref="M:NetTopologySuite.Geometries.Geometry.ToBinary" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ToGMLFeature">
            <summary>
            Returns the feature representation as GML 2.1.1 XML document.
            This XML document is based on <c>Geometry.xsd</c> schema.
            NO features or XLink are implemented here!
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double)">
            <summary>
            Computes a buffer area around this geometry having the given width. The
            buffer of a Geometry is the Minkowski sum or difference of the geometry
            with a disc of radius <c>Abs(distance)</c>.
            </summary>
            <remarks><para>Mathematically-exact buffer area boundaries can contain circular arcs. 
            To represent these arcs using linear geometry they must be approximated with line segments.
            The buffer geometry is constructed using 8 segments per quadrant to approximate 
            the circular arcs.</para>
            <para>The end cap style is <c>BufferStyle.CapRound</c>.</para>
            <para>
            The buffer operation always returns a polygonal result. The negative or
            zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygonal"/>.
            This is also the result for the buffers of degenerate (zero-area) polygons.
            </para>
            </remarks>
            <param name="distance">
            The width of the buffer (may be positive, negative or 0), interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <returns>
            a polygonal geometry representing the buffer region (which may be empty)
            </returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If a robustness error occurs</exception>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.EndCapStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.BufferStyle)">
            <summary>
            Computes a buffer region around this <c>Geometry</c> having the given width.
            The buffer of a Geometry is the Minkowski sum or difference of the geometry
            with a disc of radius <c>Abs(distance)</c>.
            </summary>
            <remarks>
            <para>The end cap style specifies the buffer geometry that will be
            created at the ends of linestrings.  The styles provided are:
            <ul>
            <li><see cref="F:GeoAPI.Operation.Buffer.BufferStyle.CapRound" /> - (default) a semi-circle</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.BufferStyle.CapButt" /> - a straight line perpendicular to the end segment</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.BufferStyle.CapSquare" /> - a half-square</li>
            </ul></para>
            <para>The buffer operation always returns a polygonal result. The negative or
            zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygonal"/>.</para>
            </remarks>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>
            a polygonal geometry representing the buffer region (which may be empty)
            </returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If a robustness error occurs</exception>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.EndCapStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.BufferStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.EndCapStyle)">
            <summary>
            Computes a buffer region around this <c>Geometry</c> having the given width.
            The buffer of a Geometry is the Minkowski sum or difference of the geometry
            with a disc of radius <c>Abs(distance)</c>.
            </summary>
            <remarks>
            <para>The end cap style specifies the buffer geometry that will be
            created at the ends of linestrings.  The styles provided are:
            <ul>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Round" /> - (default) a semi-circle</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Flat" /> - a straight line perpendicular to the end segment</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Square" /> - a half-square</li>
            </ul></para>
            <para>The buffer operation always returns a polygonal result. The negative or
            zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygonal"/>.</para>
            </remarks>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>
            a polygonal geometry representing the buffer region (which may be empty)
            </returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If a robustness error occurs</exception>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)">
            <summary>
            Computes a buffer region around this <c>Geometry</c> having the given
            width and with a specified accuracy of approximation for circular arcs.
            The buffer of a Geometry is the Minkowski sum of the Geometry with
            a disc of radius <c>distance</c>.  Curves in the buffer polygon are
            approximated with line segments.  This method allows specifying the
            accuracy of that approximation.
            </summary>
            <remarks><para>Mathematically-exact buffer area boundaries can contain circular arcs. 
            To represent these arcs using linear geometry they must be approximated with line segments.
            The <c>quadrantSegments</c> argument allows controlling the accuracy of
            the approximation by specifying the number of line segments used to
            represent a quadrant of a circle</para>
            <para>The buffer operation always returns a polygonal result. The negative or
            zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygonal"/>.
            This is also the result for the buffers of degenerate (zero-area) polygons.
            </para>
            </remarks>
            <param name="distance">
            The width of the buffer (may be positive, negative or 0), interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle.</param>
            <returns>
            a polygonal geometry representing the buffer region (which may be empty)
            </returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If a robustness error occurs</exception>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.EndCapStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.BufferStyle)">
            <summary>
            Computes a buffer region around this <c>Geometry</c> having the given
            width and with a specified number of segments used to approximate curves.
            The buffer of a Geometry is the Minkowski sum of the Geometry with
            a disc of radius <c>distance</c>.  Curves in the buffer polygon are
            approximated with line segments.  This method allows specifying the
            accuracy of that approximation.
            </summary>
            <remarks><para>Mathematically-exact buffer area boundaries can contain circular arcs. 
            To represent these arcs using linear geometry they must be approximated with line segments.
            The <c>quadrantSegments</c> argument allows controlling the accuracy of
            the approximation by specifying the number of line segments used to
            represent a quadrant of a circle</para>
            <para>The end cap style specifies the buffer geometry that will be
            created at the ends of linestrings.  The styles provided are:
            <ul>
            <li><see cref="F:GeoAPI.Operation.Buffer.BufferStyle.CapRound" /> - (default) a semi-circle</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.BufferStyle.CapButt" /> - a straight line perpendicular to the end segment</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.BufferStyle.CapSquare" /> - a half-square</li>
            </ul></para>
            <para>The buffer operation always returns a polygonal result. The negative or
            zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygonal"/>.
            This is also the result for the buffers of degenerate (zero-area) polygons.
            </para>
            </remarks>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle.</param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>
            a polygonal geometry representing the buffer region (which may be empty)
            </returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If a robustness error occurs</exception>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.BufferStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.EndCapStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)">
            <summary>
            Computes a buffer region around this <c>Geometry</c> having the given
            width and with a specified number of segments used to approximate curves.
            The buffer of a Geometry is the Minkowski sum of the Geometry with
            a disc of radius <c>distance</c>.  Curves in the buffer polygon are
            approximated with line segments.  This method allows specifying the
            accuracy of that approximation.
            </summary>
            <remarks><para>Mathematically-exact buffer area boundaries can contain circular arcs. 
            To represent these arcs using linear geometry they must be approximated with line segments.
            The <c>quadrantSegments</c> argument allows controlling the accuracy of
            the approximation by specifying the number of line segments used to
            represent a quadrant of a circle</para>
            <para>The end cap style specifies the buffer geometry that will be
            created at the ends of linestrings.  The styles provided are:
            <ul>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Round" /> - (default) a semi-circle</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Flat" /> - a straight line perpendicular to the end segment</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Square" /> - a half-square</li>
            </ul></para>
            <para>The buffer operation always returns a polygonal result. The negative or
            zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygonal"/>.
            This is also the result for the buffers of degenerate (zero-area) polygons.
            </para>
            </remarks>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle.</param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>
            a polygonal geometry representing the buffer region (which may be empty)
            </returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If a robustness error occurs</exception>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.EndCapStyle)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operation.Buffer.IBufferParameters)">
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ConvexHull">
            <summary>
            Returns the smallest convex <c>Polygon</c> that contains all the
            points in the <c>Geometry</c>. This obviously applies only to <c>Geometry</c>
            s which contain 3 or more points.
            </summary>
            <returns>the minimum-area convex polygon containing this <c>Geometry</c>'s points.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Reverse">
            <summary>
             Computes a new geometry which has all component coordinate sequences
             in reverse order (opposite orientation) to this one.
            </summary>
             <returns>A reversed geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Intersection(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a <c>Geometry</c> representing the point-set which is
            common to both this <c>Geometry</c> and the <c>other</c> Geometry.
            <para/>
            The intersection of two geometries of different dimension produces a result
            geometry of dimension less than or equal to the minimum dimension of the input
            geometries. 
            The result geometry may be a heterogenous <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>.
            If the result is empty, it is an atomic geometry
            with the dimension of the lowest input dimension.
            <para/>
            Intersection of <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>s is supported
            only for homogeneous collection types. 
            <para/>
            Non-empty heterogeneous <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> arguments are not supported.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the intersection.</param>
            <returns>A geometry representing the point-set common to the two <c>Geometry</c>s.</returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">if a robustness error occurs.</exception>
            <exception cref="T:System.ArgumentException">if the argument is a non-empty heterogenous <c>GeometryCollection</c></exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Union(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a <c>Geometry</c> representing  the point-set 
            which is contained in both this
            <c>Geometry</c> and the <c>other</c> Geometry.
            </summary>
            <remarks>
            The method may be used on arguments of different dimension, but it does not
            support <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> arguments.
            <para/>
            The union of two geometries of different dimension produces a result
            geometry of dimension equal to the maximum dimension of the input
            geometries. 
            The result geometry may be a heterogenous
            <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>.  
            If the result is empty, it is an atomic geometry
            with the dimension of the highest input dimension.
            <para/>
            Unioning <see cref="T:GeoAPI.Geometries.ILineString"/>s has the effect of
            <b>noding</b> and <b>dissolving</b> the input linework. In this context
            "noding" means that there will be a node or endpoint in the result for
            every endpoint or line segment crossing in the input. "Dissolving" means
            that any duplicate (i.e. coincident) line segments or portions of line
            segments will be reduced to a single line segment in the result. 
            If <b>merged</b> linework is required, the <see cref="T:NetTopologySuite.Operation.Linemerge.LineMerger"/>
            class can be used.
            <para/>
            Non-empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> arguments are not supported.</remarks>
            <param name="other">the <c>Geometry</c> with which to compute the union</param>
            <returns>A point-set combining the points of this <c>Geometry</c> and the
            points of <c>other</c></returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">Thrown if a robustness error occurs</exception>
            <exception cref="T:System.ArgumentException">Thrown if either input is a non-empty GeometryCollection</exception>
            <seealso cref="T:NetTopologySuite.Operation.Linemerge.LineMerger"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Difference(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a <c>Geometry</c> representing the closure of the point-set
            of the points contained in this <c>Geometry</c> that are not contained in 
            the <c>other</c> Geometry. 
            <para/>
            If the result is empty, it is an atomic geometry
            with the dimension of the left-hand input.
            <para/>
            Non-empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> arguments are not supported.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the difference.</param>
            <returns>A Geometry representing the point-set difference of this <c>Geometry</c> with <c>other</c>.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.SymmetricDifference(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a <c>Geometry </c> representing the closure of the point-set 
            which is the union of the points in this <c>Geometry</c> which are not 
            contained in the <c>other</c> Geometry,
            with the points in the <c>other</c> Geometry not contained in this
            <c>Geometry</c>. 
            If the result is empty, it is an atomic geometry
            with the dimension of the highest input dimension.
            <para/>
            Non-empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> arguments are not supported.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the symmetric difference.</param>
            <returns>a Geometry representing the point-set symmetric difference of this <c>Geometry</c> with <c>other</c>.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Union">
            <summary> 
            Computes the union of all the elements of this geometry.
            </summary>
            <remarks>
            This method supports <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>s (which the other overlay operations currently do not).</remarks>
            <remarks>
            The result obeys the following contract:
            <list type="Bullet">
            <item>Unioning a set of <see cref="T:GeoAPI.Geometries.ILineString"/>s has the effect of fully noding and dissolving the linework.</item>
            <item>Unioning a set of <see cref="T:GeoAPI.Geometries.IPolygon"/>s always returns a <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometry 
            (unlike <see cref="M:NetTopologySuite.Geometries.Geometry.Union(GeoAPI.Geometries.IGeometry)"/>), which may return geometries of lower dimension if a topology 
            collapse occurred).</item>
            </list>
            </remarks>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">Thrown if a robustness error occurs</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Returns true if the two <c>Geometry</c>s are exactly equal,
            up to a specified tolerance.
            Two Geometries are exactly within a tolerance equal if:
            <list type="Bullet">
            <item>they have the same class,</item>
            <item>they have the same values of Coordinates,
            within the given tolerance distance, in their internal
            Coordinate lists, in exactly the same order.</item>
            </list>
            This method does <i>not</i>
            test the values of the <c>GeometryFactory</c>, the <c>SRID</c>, 
            or the <c>UserData</c> fields.
            <para/>
            To properly test equality between different geometries,
            it is usually necessary to <see cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/> them first.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compare this <c>Geometry</c>
            have identical structure and point values, up to the distance tolerance.</param>
            <param name="tolerance">Distance at or below which two Coordinates will be considered equal.</param>
            <returns>
            <c>true</c> if this and the other <c>Geometry</c>
            are of the same class and have equal internal data.
            </returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalized"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns true if the two <c>Geometry</c>s are exactly equal.
            Two Geometries are exactly equal if:
            <list type="Bullet">
            <item>they have the same class,</item>
            <item>they have the same values of Coordinates in their internal
            Coordinate lists, in exactly the same order.</item>
            </list>
            This provides a stricter test of equality than
            <see cref="M:NetTopologySuite.Geometries.Geometry.EqualsTopologically(GeoAPI.Geometries.IGeometry)"/>, which is more useful
            in certain situations
            (such as using geometries as keys in collections).
            <para/>
            This method does <i>not</i>
            test the values of the <c>GeometryFactory</c>, the <c>SRID</c>, 
            or the <c>UserData</c> fields.
            <para/>
            To properly test equality between different geometries,
            it is usually necessary to <see cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/> them first.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if this and the other <c>Geometry</c> have identical structure and point values.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.EqualsNormalized(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether two geometries are exactly equal
            in their normalized forms.
            <remarks>
            This is a convenience method which creates normalized
            versions of both geometries before computing
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)"/>.<para/>
            This method is relatively expensive to compute.  
            For maximum performance, the client 
            should instead perform normalization  on the individual geometries
            at an appropriate point during processing.
            </remarks>
            </summary>
            <param name="g">A geometry</param>
            <returns>true if the input geometries are exactly equal in their normalized form</returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            Performs an operation with or on this <c>Geometry</c>'s coordinates. 
            </summary>
            <remarks>
            If this method modifies any coordinate values,
            <see cref="M:NetTopologySuite.Geometries.Geometry.GeometryChanged"/> must be called to update the geometry state. 
            Note that you cannot use this method to
            modify this Geometry if its underlying CoordinateSequence's #get method
            returns a copy of the Coordinate, rather than the actual Coordinate stored
            (if it even stores Coordinate objects at all).
            </remarks>
            <param name="filter">The filter to apply to this <c>Geometry</c>'s coordinates</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.ICoordinateSequenceFilter)">
            <summary>
             Performs an operation on the coordinates in this <c>Geometry</c>'s <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s.
             </summary>
             <remarks>
             If the filter reports that a coordinate value has been changed, 
             <see cref="M:NetTopologySuite.Geometries.Geometry.GeometryChanged"/> will be called automatically.
            </remarks>
             <param name="filter">The filter to apply</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            Performs an operation with or on this <c>Geometry</c> and its
            subelement <c>Geometry</c>s (if any).
            Only GeometryCollections and subclasses
            have subelement Geometry's.
            </summary>
            <param name="filter">
            The filter to apply to this <c>Geometry</c> (and
            its children, if it is a <c>GeometryCollection</c>).
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            Performs an operation with or on this Geometry and its
            component Geometry's. Only GeometryCollections and
            Polygons have component Geometry's; for Polygons they are the LinearRings
            of the shell and holes.
            </summary>
            <param name="filter">The filter to apply to this <c>Geometry</c>.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Normalize">
            <summary>
            Converts this <c>Geometry</c> to normal form (or canonical form ).
            </summary>
            <remarks>
            <para>
            Normal form is a unique representation for <c>Geometry</c>s. 
            It can be used to test whether two <c>Geometry</c>s are equal
            in a way that is independent of the ordering of the coordinates within
            them. Normal form equality is a stronger condition than topological
            equality, but weaker than pointwise equality.</para>
            <para>
            The definitions for normal
            form use the standard lexicographical ordering for coordinates. "Sorted in
            order of coordinates" means the obvious extension of this ordering to
            sequences of coordinates.
            </para>
            <para>
            <b>NOTE</b> that this method mutates the value of this geometry in-place.
            If this is not safe and/or wanted, the geometry should be
            cloned prior to normalization.
            </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Normalized">
            <summary>
            Creates a new Geometry which is a normalized copy of this Geometry. 
            </summary>
            <returns>A normalized copy of this geometry.</returns>
            <seealso cref="M:NetTopologySuite.Geometries.Geometry.Normalize"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CompareTo(System.Object)">
            <summary>
            Returns whether this <c>Geometry</c> is greater than, equal to,
            or less than another <c>Geometry</c>.</summary>
            <remarks>
            If their classes are different, they are compared using the following
            ordering:
            <list>
            <item>Point (lowest),</item>
            <item>MultiPoint,</item>
            <item>LineString,</item>
            <item>LinearRing,</item>
            <item>MultiLineString,</item>
            <item>Polygon,</item>
            <item>MultiPolygon,</item>
            <item>GeometryCollection (highest).</item>
            </list>
            If the two <c>Geometry</c>s have the same class, their first
            elements are compared. If those are the same, the second elements are
            compared, etc.
            </remarks>
            <param name="o">A <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns>
            A positive number, 0, or a negative number, depending on whether
            this object is greater than, equal to, or less than <c>o</c>, as
            defined in "Normal Form For Geometry" in the NTS Technical
            Specifications.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CompareTo(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns whether this <c>Geometry</c> is greater than, equal to,
            or less than another <c>Geometry</c>.</summary>
            <remarks>
            If their classes are different, they are compared using the following
            ordering:
            <list>
            <item>Point (lowest),</item>
            <item>MultiPoint,</item>
            <item>LineString,</item>
            <item>LinearRing,</item>
            <item>MultiLineString,</item>
            <item>Polygon,</item>
            <item>MultiPolygon,</item>
            <item>GeometryCollection (highest).</item>
            </list>
            If the two <c>Geometry</c>s have the same class, their first
            elements are compared. If those are the same, the second elements are
            compared, etc.
            </remarks>
            <param name="geom">A <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns>
            A positive number, 0, or a negative number, depending on whether
            this object is greater than, equal to, or less than <c>o</c>, as
            defined in "Normal Form For Geometry" in the NTS Technical
            Specifications.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CompareTo(System.Object,System.Collections.Generic.IComparer{GeoAPI.Geometries.ICoordinateSequence})">
            <summary>
            Returns whether this <c>Geometry</c> is greater than, equal to,
            or less than another <c>Geometry</c>, using the given <see paramref="IComparer{ICoordinateSequence}"/>.</summary>
            <remarks>
            If their classes are different, they are compared using the following
            ordering:
            <list>
            <item>Point (lowest),</item>
            <item>MultiPoint,</item>
            <item>LineString,</item>
            <item>LinearRing,</item>
            <item>MultiLineString,</item>
            <item>Polygon,</item>
            <item>MultiPolygon,</item>
            <item>GeometryCollection (highest).</item>
            </list>
            If the two <c>Geometry</c>s have the same class, their first
            elements are compared. If those are the same, the second elements are
            compared, etc.
            </remarks>
            <param name="o">A <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <param name="comp">A <c>IComparer&lt;ICoordinateSequence&gt;</c></param>
            <returns>
            A positive number, 0, or a negative number, depending on whether
            this object is greater than, equal to, or less than <c>o</c>, as
            defined in "Normal Form For Geometry" in the NTS Technical
            Specifications.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.IsEquivalentClass(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns whether the two <c>Geometry</c>s are equal, from the point
            of view of the <c>EqualsExact</c> method. Called by <c>EqualsExact</c>
            . In general, two <c>Geometry</c> classes are considered to be
            "equivalent" only if they are the same class. An exception is <c>LineString</c>
            , which is considered to be equivalent to its subclasses.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compare this <c>Geometry</c> for equality.</param>
            <returns>
            <c>true</c> if the classes of the two <c>Geometry</c>
            s are considered to be equal by the <c>equalsExact</c> method.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CheckNotGeometryCollection(GeoAPI.Geometries.IGeometry)">
            <summary>
            Throws an exception if <c>g</c>'s class is <c>GeometryCollection</c>. 
            (its subclasses do not trigger an exception).
            </summary>
            <param name="g">The <c>Geometry</c> to check.</param>
            <exception cref="T:System.ArgumentException">
            if <c>g</c> is a <c>GeometryCollection</c>, but not one of its subclasses.
            </exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.IsNonHomogenousGeometryCollection(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if <c>g</c>'s class is <c>GeometryCollection</c>. 
            (its subclasses do not trigger an exception).
            </summary>
            <param name="g">The <c>Geometry</c> to check.</param>
            <exception cref="T:System.ArgumentException">
            If <c>g</c> is a <c>GeometryCollection</c>, but not one of its subclasses.
            </exception>        
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ComputeEnvelopeInternal">
            <summary>
            Returns the minimum and maximum x and y values in this <c>Geometry</c>,
            or a null <c>Envelope</c> if this <c>Geometry</c> is empty.
            Unlike <c>EnvelopeInternal</c>, this method calculates the <c>Envelope</c>
            each time it is called; <c>EnvelopeInternal</c> caches the result
            of this method.        
            </summary>
            <returns>
            This <c>Geometry</c>s bounding box; if the <c>Geometry</c>
            is empty, <c>Envelope.IsNull</c> will return <c>true</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CompareToSameClass(System.Object)">
            <summary>
            Returns whether this <c>Geometry</c> is greater than, equal to,
            or less than another <c>Geometry</c> having the same class.
            </summary>
            <param name="o">A <c>Geometry</c> having the same class as this <c>Geometry</c>.</param>
            <returns>
            A positive number, 0, or a negative number, depending on whether
            this object is greater than, equal to, or less than <c>o</c>, as
            defined in "Normal Form For Geometry" in the NTS Technical
            Specifications.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CompareToSameClass(System.Object,System.Collections.Generic.IComparer{GeoAPI.Geometries.ICoordinateSequence})">
            <summary>
             Returns whether this <c>Geometry</c> is greater than, equal to,
             or less than another <c>Geometry</c> of the same class.
             using the given <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
             <param name="o">A <c>Geometry</c> having the same class as this <c>Geometry</c></param>
             <param name="comp">The comparer</param>
             <returns>A positive number, 0, or a negative number, depending on whether
                  this object is greater than, equal to, or less than <code>o</code>, as
                  defined in "Normal Form For Geometry" in the JTS Technical
                  Specifications
             </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Compare(System.Collections.Generic.List{GeoAPI.Geometries.IGeometry},System.Collections.Generic.List{GeoAPI.Geometries.IGeometry})">
            <summary>
            Returns the first non-zero result of <c>CompareTo</c> encountered as
            the two <c>Collection</c>s are iterated over. If, by the time one of
            the iterations is complete, no non-zero result has been encountered,
            returns 0 if the other iteration is also complete. If <c>b</c>
            completes before <c>a</c>, a positive number is returned; if a
            before b, a negative number.
            </summary>
            <param name="a">A <c>Collection</c> of <c>IComparable</c>s.</param>
            <param name="b">A <c>Collection</c> of <c>IComparable</c>s.</param>
            <returns>The first non-zero <c>compareTo</c> result, if any; otherwise, zero.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.Equal(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.ClassSortIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.CreatePointFromInternalCoord(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="exemplar"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Geometry.IsRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetTopologySuite.Geometries.Geometry.DefaultFactory">
            <summary>
            A predefined <see cref="T:NetTopologySuite.Geometries.GeometryFactory" /> with <see cref="P:NetTopologySuite.Geometries.Geometry.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Fixed" />.
            </summary>
            <seealso cref="F:NetTopologySuite.Geometries.GeometryFactory.Default" />
            <seealso cref="F:NetTopologySuite.Geometries.GeometryFactory.Fixed"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.UpdateEnvelope">
            <summary>
            Forces the cached envelope to be re-calculated using the coordinates.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Geometry.ClearEnvelope">
            <summary>
            Clears any cached envelopes
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.GeometryEx">
            <summary>
            Extension Methods for geometries
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryEx.AsBinary(GeoAPI.Geometries.IGeometry,GeoAPI.IO.IBinaryGeometryWriter)">
            <summary>
            Function to encode <paramref name="self"/> to an array of <see cref="T:System.Byte"/>s. If assigned, <paramref name="writer"/> is used.
            </summary>
            <param name="self">The geometry to encode</param>
            <param name="writer">The writer to use</param>
            <returns>An array of <see cref="T:System.Byte"/>s, that represent <paramref name="self"/></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.FilterMethod">
            <summary>
            Delegate function declaration to handle filter operation
            </summary>
            <param name="geom">The geometry to filter</param>
        </member>
        <member name="T:NetTopologySuite.Geometries.GeometryComponentFilter">
            <summary>
            An <see cref="T:GeoAPI.Geometries.IGeometryComponentFilter"/> implementation that applies filtering with the provided <see cref="T:NetTopologySuite.Geometries.FilterMethod"/>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryComponentFilter.#ctor(NetTopologySuite.Geometries.FilterMethod)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="filterMethod">The filter method to be used</param>
        </member>
        <member name="T:NetTopologySuite.Geometries.OgcCompliantGeometryFactory">
            <summary>
            OGC compliant geometry factory
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.#ctor">
            <summary>
            Creates an instance of this class using the default 
            values for <see cref="P:NetTopologySuite.Geometries.GeometryFactory.SRID"/>, 
            <see cref="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel"/> and
            <see cref="P:NetTopologySuite.Geometries.GeometryFactory.CoordinateSequenceFactory"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.#ctor(GeoAPI.Geometries.ICoordinateSequenceFactory)">
            <summary>
            Creates an instance of this class using the default 
            values for <see cref="P:NetTopologySuite.Geometries.GeometryFactory.SRID"/>, 
            <see cref="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel"/>, 
            but the specified <paramref name="factory"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            Creates an instance of this class using the default 
            values for <see cref="P:NetTopologySuite.Geometries.GeometryFactory.SRID"/>, 
            <see cref="P:NetTopologySuite.Geometries.GeometryFactory.CoordinateSequenceFactory"/> but the
            specified <paramref name="pm"/>.
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.ToGeometry(GeoAPI.Geometries.Envelope)">
            <inheritdoc/>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.CreatePolygon(GeoAPI.Geometries.Coordinate[])">
            <inheritdoc/>
            <remarks>
            The <see cref="P:GeoAPI.Geometries.IPolygon.ExteriorRing"/> is guaranteed to be orientated counter-clockwise.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.CreatePolygon(GeoAPI.Geometries.ICoordinateSequence)">
            <inheritdoc/>
            <remarks>
            The <see cref="P:GeoAPI.Geometries.IPolygon.ExteriorRing"/> is guaranteed to be orientated counter-clockwise.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.CreatePolygon(GeoAPI.Geometries.ILinearRing)">
            <inheritdoc/>
            <remarks>
            The <see cref="P:GeoAPI.Geometries.IPolygon.ExteriorRing"/> is guaranteed to be orientated counter-clockwise.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.OgcCompliantGeometryFactory.CreatePolygon(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[])">
            <inheritdoc/>
            <remarks>
            The <see cref="P:GeoAPI.Geometries.IPolygon.ExteriorRing"/> is guaranteed to be orientated counter-clockwise.
            <br/>The <see cref="P:GeoAPI.Geometries.IPolygon.InteriorRings"/> are guaranteed to be orientated clockwise.
            </remarks>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryMapper">
            <summary>
            Methods to map various collections
            of <see cref="T:GeoAPI.Geometries.IGeometry"/>s
            via defined mapping functions.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryMapper.Map(GeoAPI.Geometries.IGeometry,System.Func{GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry})">
            <summary>
            Maps the members of a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            (which may be atomic or composite)
            into another <tt>Geometry</tt> of most specific type.
            <tt>null</tt> results are skipped.
            In the case of hierarchical <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>s,
            only the first level of members are mapped.
            </summary>
            <param name="geom">The input atomic or composite geometry</param>
            <param name="op">The mapping operation delegate</param>
            <returns>A result collection or geometry of most specific type</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryMapper.Map(GeoAPI.Geometries.IGeometry,NetTopologySuite.Geometries.Utilities.GeometryMapper.IMapOp)">
            <summary>
            Maps the members of a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            (which may be atomic or composite)
            into another <tt>Geometry</tt> of most specific type.
            <tt>null</tt> results are skipped.
            In the case of hierarchical <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>s,
            only the first level of members are mapped.
            </summary>
            <param name="geom">The input atomic or composite geometry</param>
            <param name="op">The mapping operation</param>
            <returns>A result collection or geometry of most specific type</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryMapper.IMapOp">
            <summary>
            An interface for geometry functions used for mapping.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryMapper.IMapOp.Map(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a new geometry value.
            </summary>
            <param name="g">The input geometry</param>
            <returns>A result geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.AffineTransformation">
            <summary>
            Represents an affine transformation on the 2D Cartesian plane.
            </summary>
            <remarks>
            <para>
            It can be used to transform a <see cref="T:GeoAPI.Geometries.Coordinate"/> or <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            An affine transformation is a mapping of the 2D plane into itself
            via a series of transformations of the following basic types:
            <ul>
            <li>reflection (through a line)</li>
            <li>rotation (around the origin)</li>
            <li>scaling (relative to the origin)</li>
            <li>shearing (in both the X and Y directions)</li>
            <li>translation</li>
            </ul>
            </para>
            <para>
            In general, affine transformations preserve straightness and parallel lines,
            but do not preserve distance or shape.
            </para>
            <para>
            An affine transformation can be represented by a 3x3
            matrix in the following form:
            <blockquote><pre>
            T = | m00 m01 m02 |
                | m10 m11 m12 |
                |  0   0   1  |
            </pre></blockquote>
            A coordinate P = (x, y) can be transformed to a new coordinate P' = (x', y')
            by representing it as a 3x1 matrix and using matrix multiplication to compute:
            <blockquote><pre>
            | x' |  = T x | x |
            | y' |        | y |
            | 1  |        | 1 |
            </pre></blockquote>
            </para>
            <h3>Transformation Composition</h3>
            <para>
            Affine transformations can be composed using the <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Compose(NetTopologySuite.Geometries.Utilities.AffineTransformation)"/> method.
            Composition is computed via multiplication of the
            transformation matrices, and is defined as:
            <blockquote><pre>
            A.compose(B) = T<sub>B</sub> x T<sub>A</sub>
            </pre></blockquote>
            </para>
            <para>
            This produces a transformation whose effect is that of A followed by B.
            The methods <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Reflect(System.Double,System.Double,System.Double,System.Double)"/>, <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Rotate(System.Double)"/>,
            <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Scale(System.Double,System.Double)"/>, <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Shear(System.Double,System.Double)"/>, and <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Translate(System.Double,System.Double)"/>
            have the effect of composing a transformation of that type with
            the transformation they are invoked on.
            The composition of transformations is in general <i>not</i> commutative.
            </para>
            <h3>Transformation Inversion</h3>
            <para>
            Affine transformations may be invertible or non-invertible.
            If a transformation is invertible, then there exists
            an inverse transformation which when composed produces
            the identity transformation.
            The <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.GetInverse"/> method
            computes the inverse of a transformation, if one exists.
            </para>
            <para>
            @author Martin Davis
            </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ReflectionInstance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a transformation for a reflection about the
            line (x0,y0) - (x1,y1).
            </summary>
            <param name="x0"> the x-ordinate of a point on the reflection line</param>
            <param name="y0"> the y-ordinate of a point on the reflection line</param>
            <param name="x1"> the x-ordinate of a another point on the reflection line</param>
            <param name="y1"> the y-ordinate of a another point on the reflection line</param>
            <returns> a transformation for the reflection</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ReflectionInstance(System.Double,System.Double)">
            <summary>
            Creates a transformation for a reflection about the
            line (0,0) - (x,y).
            </summary>
            <param name="x"> the x-ordinate of a point on the reflection line</param>
            <param name="y"> the y-ordinate of a point on the reflection line</param>
            <returns> a transformation for the reflection</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.RotationInstance(System.Double)">
            <summary>
            Creates a transformation for a rotation
            about the origin
            by an angle <i>theta</i>.
            </summary>
            <remarks>
            Positive angles correspond to a rotation
            in the counter-clockwise direction.
            </remarks>
            <param name="theta"> the rotation angle, in radians</param>
            <returns> a transformation for the rotation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.RotationInstance(System.Double,System.Double)">
            <summary>
            Creates a transformation for a rotation
            by an angle <i>theta</i>,
            specified by the sine and cosine of the angle.
            </summary>
            <remarks>
            This allows providing exact values for sin(theta) and cos(theta)
            for the common case of rotations of multiples of quarter-circles.
            </remarks>
            <param name="sinTheta"> the sine of the rotation angle</param>
            <param name="cosTheta"> the cosine of the rotation angle</param>
            <returns> a transformation for the rotation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.RotationInstance(System.Double,System.Double,System.Double)">
            <summary>
            Creates a transformation for a rotation
            about the point (x,y) by an angle <i>theta</i>.
            </summary>
            <remarks>
            Positive angles correspond to a rotation
            in the counter-clockwise direction.
            </remarks>
            <param name="theta"> the rotation angle, in radians</param>
            <param name="x"> the x-ordinate of the rotation point</param>
            <param name="y"> the y-ordinate of the rotation point</param>
            <returns> a transformation for the rotation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.RotationInstance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a transformation for a rotation
            about the point (x,y) by an angle <i>theta</i>,
            specified by the sine and cosine of the angle.
            </summary>
            <remarks>
            This allows providing exact values for sin(theta) and cos(theta)
            for the common case of rotations of multiples of quarter-circles.
            </remarks>
            <param name="sinTheta"> the sine of the rotation angle</param>
            <param name="cosTheta"> the cosine of the rotation angle</param>
            <param name="x"> the x-ordinate of the rotation point</param>
            <param name="y"> the y-ordinate of the rotation point</param>
            <returns> a transformation for the rotation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ScaleInstance(System.Double,System.Double)">
            <summary>
            Creates a transformation for a scaling relative to the origin.
            </summary>
            <param name="xScale"> the value to scale by in the x direction</param>
            <param name="yScale"> the value to scale by in the y direction</param>
            <returns> a transformation for the scaling</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ScaleInstance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a transformation for a scaling relative to the point (x,y).
            </summary>
            <param name="xScale">The value to scale by in the x direction</param>
            <param name="yScale">The value to scale by in the y direction</param>
            <param name="x">The x-ordinate of the point to scale around</param>
            <param name="y">The y-ordinate of the point to scale around</param>
            <returns>A transformation for the scaling</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ShearInstance(System.Double,System.Double)">
            <summary>
            Creates a transformation for a shear.
            </summary>
            <param name="xShear"> the value to shear by in the x direction</param>
            <param name="yShear"> the value to shear by in the y direction</param>
            <returns> a tranformation for the shear</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.TranslationInstance(System.Double,System.Double)">
            <summary>
            Creates a transformation for a translation.
            </summary>
            <param name="x"> the value to translate by in the x direction</param>
            <param name="y"> the value to translate by in the y direction</param>
            <returns> a tranformation for the translation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.#ctor">
            <summary>
            Constructs a new identity transformation
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.#ctor(System.Double[])">
            <summary>
            Constructs a new transformation whose
            matrix has the specified values.
            </summary>
            <param name="matrix"> an array containing the 6 values { m00, m01, m02, m10, m11, m12 }</param>
            <exception cref="T:System.NullReferenceException"> if matrix is null</exception>
            <exception cref="T:System.IndexOutOfRangeException"> if matrix is too small</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new transformation whose
            matrix has the specified values.
            </summary>
            <param name="m00"> the entry for the [0, 0] element in the transformation matrix</param>
            <param name="m01"> the entry for the [0, 1] element in the transformation matrix</param>
            <param name="m02"> the entry for the [0, 2] element in the transformation matrix</param>
            <param name="m10"> the entry for the [1, 0] element in the transformation matrix</param>
            <param name="m11"> the entry for the [1, 1] element in the transformation matrix</param>
            <param name="m12"> the entry for the [1, 2] element in the transformation matrix</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.#ctor(NetTopologySuite.Geometries.Utilities.AffineTransformation)">
            <summary>
            Constructs a transformation which is
            a copy of the given one.
            </summary>
            <param name="trans"> the transformation to copy</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Constructs a transformation
            which maps the given source
            points into the given destination points.
            </summary>
            <param name="src0"> source point 0</param>
            <param name="src1"> source point 1</param>
            <param name="src2"> source point 2</param>
            <param name="dest0"> the mapped point for source point 0</param>
            <param name="dest1"> the mapped point for source point 1</param>
            <param name="dest2"> the mapped point for source point 2</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToIdentity">
            <summary>
            Sets this transformation to be the identity transformation.
            </summary>
            <remarks>
            The identity transformation has the matrix:
            <blockquote><pre>
            | 1 0 0 |
            | 0 1 0 |
            | 0 0 1 |
            </pre></blockquote>
            </remarks>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetTransformation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this transformation's matrix to have the given values.
            </summary>
            <param name="m00"> the entry for the [0, 0] element in the transformation matrix</param>
            <param name="m01"> the entry for the [0, 1] element in the transformation matrix</param>
            <param name="m02"> the entry for the [0, 2] element in the transformation matrix</param>
            <param name="m10"> the entry for the [1, 0] element in the transformation matrix</param>
            <param name="m11"> the entry for the [1, 1] element in the transformation matrix</param>
            <param name="m12"> the entry for the [1, 2] element in the transformation matrix</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetTransformation(NetTopologySuite.Geometries.Utilities.AffineTransformation)">
            <summary>
            Sets this transformation to be a copy of the given one
            </summary>
            <param name="trans"> a transformation to copy</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.AffineTransformation.MatrixEntries">
            <summary>
            Gets an array containing the entries
            of the transformation matrix.
            </summary>
            <remarks>
            Only the 6 non-trivial entries are returned,
            in the sequence:
            <pre>
            m00, m01, m02, m10, m11, m12
            </pre>
            </remarks>
            <returns> an array of length 6</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.AffineTransformation.Determinant">
             <summary>
             Computes the determinant of the transformation matrix.
             </summary>
             <remarks>
             <para>
             The determinant is computed as:
             <blockquote><pre>
             | m00 m01 m02 |
             | m10 m11 m12 | = m00 * m11 - m01 * m10
             |  0   0   1  |
             </pre></blockquote>
             </para>
             <para>
             If the determinant is zero,
             the transform is singular (not invertible),
             and operations which attempt to compute
             an inverse will throw a <see cref="T:NetTopologySuite.Geometries.Utilities.NoninvertibleTransformationException"/>.
             </para>
             </remarks>
             <returns> the determinant of the transformation</returns>
             <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.GetInverse" />
            
             <returns>The determinant of the transformation</returns>
             <see cref="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.GetInverse"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.GetInverse">
            <summary>
            Computes the inverse of this transformation, if one
            exists.
            </summary>
            <remarks>
            <para>
            * The inverse is the transformation which when
            * composed with this one produces the identity
            * transformation.
            * A transformation has an inverse if and only if it
            * is not singular (i.e. its
            * determinant is non-zero).
            * Geometrically, an transformation is non-invertible
            * if it maps the plane to a line or a point.
            * If no inverse exists this method
            * will throw a <see cref="T:NetTopologySuite.Geometries.Utilities.NoninvertibleTransformationException"/>.
            </para>
            <para>
            * The matrix of the inverse is equal to the
            * inverse of the matrix for the transformation.
            * It is computed as follows:
            * <blockquote><pre>
            *                 1
            * inverse(A)  =  ---   x  adjoint(A)
            *                det
            *
            *
            *             =   1       |  m11  -m01   m01*m12-m02*m11  |
            *                ---   x  | -m10   m00  -m00*m12+m10*m02  |
            *                det      |  0     0     m00*m11-m10*m01  |
            *
            *
            *
            *             = |  m11/det  -m01/det   m01*m12-m02*m11/det |
            *               | -m10/det   m00/det  -m00*m12+m10*m02/det |
            *               |   0           0          1               |
            *
            * </pre></blockquote>
            </para>
            </remarks>
            <returns>A new inverse transformation</returns>
            <see cref="P:NetTopologySuite.Geometries.Utilities.AffineTransformation.Determinant"/>
            <exception cref="T:NetTopologySuite.Geometries.Utilities.NoninvertibleTransformationException"></exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToReflectionBasic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Explicitly computes the math for a reflection.  May not work.
             </summary>
             <param name="x0">The x-ordinate of one point on the reflection line</param>
             <param name="y0">The y-ordinate of one point on the reflection line</param>
             <param name="x1">The x-ordinate of another point on the reflection line</param>
             <param name="y1">The y-ordinate of another point on the reflection line</param>
             <returns>This transformation with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToReflection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this transformation to be a reflection about the line defined by a line <tt>(x0,y0) - (x1,y1)</tt>.
            </summary>
            <param name="x0">The x-ordinate of one point on the reflection line</param>
            <param name="y0">The y-ordinate of one point on the reflection line</param>
            <param name="x1">The x-ordinate of another point on the reflection line</param>
            <param name="y1">The y-ordinate of another point on the reflection line</param>
            <returns>This transformation with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToReflection(System.Double,System.Double)">
            <summary>
            Sets this transformation to be a reflection
            about the line defined by vector (x,y).
            </summary>
            <remarks>
            The transformation for a reflection
            is computed by:
            <blockquote><pre>
            d = sqrt(x<sup>2</sup> + y<sup>2</sup>)
            sin = x / d;
            cos = x / d;
            T<sub>ref</sub> = T<sub>rot(sin, cos)</sub> x T<sub>scale(1, -1)</sub> x T<sub>rot(-sin, cos)</sub>
            </pre></blockquote>
            </remarks>
            <param name="x"> the x-component of the reflection line vector</param>
            <param name="y"> the y-component of the reflection line vector</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToRotation(System.Double)">
            <summary>
            Sets this transformation to be a rotation around the orign.
            </summary>
            <remarks>
            A positive rotation angle corresponds
            to a counter-clockwise rotation.
            The transformation matrix for a rotation
            by an angle <code>theta</code>
            has the value:
            <blockquote><pre>
            |  cos(theta)  -sin(theta)   0 |
            |  sin(theta)   cos(theta)   0 |
            |           0            0   1 |
            </pre></blockquote>
            </remarks>
            <param name="theta"> the rotation angle, in radians</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToRotation(System.Double,System.Double)">
            <summary>
            Sets this transformation to be a rotation around the origin
            by specifying the sin and cos of the rotation angle directly.
            </summary>
            <remarks>
            The transformation matrix for the rotation
            has the value:
            <blockquote><pre>
            |  cosTheta  -sinTheta   0 |
            |  sinTheta   cosTheta   0 |
            |         0          0   1 |
            </pre></blockquote>
            </remarks>
            <param name="sinTheta"> the sine of the rotation angle</param>
            <param name="cosTheta"> the cosine of the rotation angle</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToRotation(System.Double,System.Double,System.Double)">
            <summary>
            Sets this transformation to be a rotation
            around a given point (x,y).
            </summary>
            <remarks>
            A positive rotation angle corresponds
            to a counter-clockwise rotation.
            The transformation matrix for a rotation
            by an angle <paramref name="theta" />
            has the value:
            <blockquote><pre>
            |  cosTheta  -sinTheta   x-x*cos+y*sin |
            |  sinTheta   cosTheta   y-x*sin-y*cos |
            |           0            0   1 |
            </pre></blockquote>
            </remarks>
            <param name="theta"> the rotation angle, in radians</param>
            <param name="x"> the x-ordinate of the rotation point</param>
            <param name="y"> the y-ordinate of the rotation point</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToRotation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this transformation to be a rotation
            around a given point (x,y)
            by specifying the sin and cos of the rotation angle directly.
            </summary>
            <remarks>
            The transformation matrix for the rotation
            has the value:
            <blockquote><pre>
            |  cosTheta  -sinTheta   x-x*cos+y*sin |
            |  sinTheta   cosTheta   y-x*sin-y*cos |
            |         0          0         1       |
            </pre></blockquote>
            </remarks>
            <param name="sinTheta"> the sine of the rotation angle</param>
            <param name="cosTheta"> the cosine of the rotation angle</param>
            <param name="x"> the x-ordinate of the rotation point</param>
            <param name="y"> the y-ordinate of the rotation point</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToScale(System.Double,System.Double)">
            <summary>
            Sets this transformation to be a scaling.
            </summary>
            <remarks>
            The transformation matrix for a scale
            has the value:
            <blockquote><pre>
            |  xScale      0  dx |
            |  1      yScale  dy |
            |  0           0   1 |
            </pre></blockquote>
            </remarks>
            <param name="xScale"> the amount to scale x-ordinates by</param>
            <param name="yScale"> the amount to scale y-ordinates by</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToShear(System.Double,System.Double)">
            <summary>
            Sets this transformation to be a shear.
            </summary>
            <remarks>
            The transformation matrix for a shear
            has the value:
            <blockquote><pre>
            |  1      xShear  0 |
            |  yShear      1  0 |
            |  0           0  1 |
            </pre></blockquote>
            Note that a shear of (1, 1) is <i>not</i>
            equal to shear(1, 0) composed with shear(0, 1).
            Instead, shear(1, 1) corresponds to a mapping onto the
            line x = y.
            </remarks>
            <param name="xShear"> the x component to shear by</param>
            <param name="yShear"> the y component to shear by</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.SetToTranslation(System.Double,System.Double)">
            <summary>
            Sets this transformation to be a translation.
            </summary>
            <remarks>
            For a translation by the vector (x, y)
            the transformation matrix has the value:
            <blockquote><pre>
            |  1  0  dx |
            |  1  0  dy |
            |  0  0   1 |
            </pre></blockquote>
            </remarks>
            <param name="dx"> the x component to translate by</param>
            <param name="dy"> the y component to translate by</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Reflect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a reflection transformation composed
            with the current value.
            </summary>
            <param name="x0"> the x-ordinate of a point on the line to reflect around</param>
            <param name="y0"> the y-ordinate of a point on the line to reflect around</param>
            <param name="x1"> the x-ordinate of a point on the line to reflect around</param>
            <param name="y1"> the y-ordinate of a point on the line to reflect around</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Reflect(System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a reflection transformation composed
            with the current value.
            </summary>
            <param name="x"> the x-ordinate of the line to reflect around</param>
            <param name="y"> the y-ordinate of the line to reflect around</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Rotate(System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a rotation transformation composed
            with the current value.
            </summary>
            <remarks>
            Positive angles correspond to a rotation
            in the counter-clockwise direction.
            </remarks>
            <param name="theta"> the angle to rotate by in radians</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Rotate(System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a rotation around the origin composed
            with the current value,
            with the sin and cos of the rotation angle specified directly.
            </summary>
            <param name="sinTheta"> the sine of the angle to rotate by</param>
            <param name="cosTheta"> the cosine of the angle to rotate by</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a rotation around a given point composed
            with the current value.
            </summary>
            <remarks>
            Positive angles correspond to a rotation
            in the counter-clockwise direction.
            </remarks>
            <param name="theta"> the angle to rotate by, in radians</param>
            <param name="x"> the x-ordinate of the rotation point</param>
            <param name="y"> the y-ordinate of the rotation point</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Rotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a rotation around a given point composed
            with the current value,
            with the sin and cos of the rotation angle specified directly.
            </summary>
            <param name="sinTheta"> the sine of the angle to rotate by</param>
            <param name="cosTheta"> the cosine of the angle to rotate by</param>
            <param name="x"> the x-ordinate of the rotation point</param>
            <param name="y"> the y-ordinate of the rotation point</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Scale(System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a scale transformation composed
            with the current value.
            </summary>
            <param name="xScale"> the value to scale by in the x direction</param>
            <param name="yScale"> the value to scale by in the y direction</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Shear(System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a shear transformation composed
            with the current value.
            </summary>
            <param name="xShear"> the value to shear by in the x direction</param>
            <param name="yShear"> the value to shear by in the y direction</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Translate(System.Double,System.Double)">
            <summary>
            Updates the value of this transformation
            to that of a translation transformation composed
            with the current value.
            </summary>
            <param name="x"> the value to translate by in the x direction</param>
            <param name="y"> the value to translate by in the y direction</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Compose(NetTopologySuite.Geometries.Utilities.AffineTransformation)">
            <summary>
            Updates this transformation to be
            the composition of this transformation with the given <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation" />.
            </summary>
            <remarks>
            This produces a transformation whose effect
            is equal to applying this transformation
            followed by the argument transformation.
            Mathematically,
            <blockquote><pre>
            A.compose(B) = T<sub>B</sub> x T<sub>A</sub>
            </pre></blockquote>
            </remarks>
            <param name="trans"> an affine transformation</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ComposeBefore(NetTopologySuite.Geometries.Utilities.AffineTransformation)">
            <summary>
            Updates this transformation to be the composition
            of a given <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation" /> with this transformation.
            </summary>
            <remarks>
            This produces a transformation whose effect
            is equal to applying the argument transformation
            followed by this transformation.
            Mathematically,
            <blockquote><pre>
            A.composeBefore(B) = T<sub>A</sub> x T<sub>B</sub>
            </pre></blockquote>
            </remarks>
            <param name="trans"> an affine transformation</param>
            <returns> this transformation, with an updated matrix</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Transform(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
             <summary>
             Applies this transformation to the <paramref name="src" /> coordinate
             and places the results in the <paramref name="dest" /> coordinate
             (which may be the same as the source).
             </summary>
             <param name="src"> the coordinate to transform</param>
             <param name="dest"> the coordinate to accept the results</param>
             <returns> the <code>dest</code> coordinate</returns>
            
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Transform(GeoAPI.Geometries.IGeometry)">
            <summary>
            Cretaes a new <see cref="T:GeoAPI.Geometries.IGeometry"/> which is the result of this transformation applied to the input Geometry.
            </summary>
            <param name="g">A <c>Geometry</c></param>
            <returns>The transformed Geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Transform(GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
             <summary>
             Applies this transformation to the i'th coordinate
             in the given CoordinateSequence.
             </summary>
            <param name="seq"> a <code>CoordinateSequence</code></param>
            <param name="i"> the index of the coordinate to transform</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Filter(GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
            <summary>
             Transforms the i'th coordinate in the input sequence
            </summary>
             <param name="seq">A <c>CoordinateSequence</c></param>
             <param name="i">The index of the coordinate to transform</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.AffineTransformation.Done">
            <summary>
            Reports that this filter should continue to be executed until
            all coordinates have been transformed.
            </summary>
            <returns> false</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.AffineTransformation.IsIdentity">
            <summary>Tests if this transformation is the identity transformation.</summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Equals(System.Object)">
            <summary>
             Tests if an object is an <c>AffineTransformation</c> and has the same matrix as this transformation.
            </summary>
             <param name="obj">An object to test</param>
             <returns>true if the given object is equal to this object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.ToString">
            <summary>
             Gets a text representation of this transformation.
             The string is of the form:
             <code>
             AffineTransformation[[m00, m01, m02], [m10, m11, m12]]
             </code>
             </summary>
            <returns>A string representing this transformation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformation.Clone">
            <summary>
             Clones this transformation
            </summary>
             <returns>A copy of this transformation</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder">
            <summary>
             Builds an <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation"/> defined by a set of control vectors.
            </summary>
             <remarks>
             <para>
             A control vector consists of a source point and a destination point,
             which is the image of the source point under the desired transformation.
             </para>
             <para>
             A transformation is well-defined
             by a set of three control vectors
             if and only if the source points are not collinear.
             (In particular, the degenerate situation
             where two or more source points are identical will not produce a well-defined transformation).
             A well-defined transformation exists and is unique.
             If the control vectors are not well-defined, the system of equations
             defining the transformation matrix entries is not solvable,
             and no transformation can be determined.</para>
             <para>
             No such restriction applies to the destination points.
             However, if the destination points are collinear or non-unique,
             a non-invertible transformations will be generated.
             </para>
             <para>
             This technique of recovering a transformation
             from its effect on known points is used in the Bilinear Interpolated Triangulation
             algorithm for warping planar surfaces.
             </para>
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Constructs a new builder for the transformation defined by the given set of control point mappings.
            </summary>
             <param name="src0">A control point</param>
             <param name="src1">A control point</param>
             <param name="src2">A control point</param>
             <param name="dest0">The image of <paramref name="src0"/> under the required transformation</param>
             <param name="dest1">The image of <paramref name="src1"/> under the required transformation</param>
             <param name="dest2">The image of <paramref name="src2"/> under the required transformation</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder.GetTransformation">
            <summary>
             Computes the <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation"/>
             determined by the control point mappings,
             or <c>null</c> if the control vectors do not determine a well-defined transformation.
            </summary>
             <returns>
             <list>
             <item>An affine transformation</item>
             <item><c>null</c> if the control vectors do not determine a well-defined transformation.</item>
             </list>
             </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder.Compute">
            <summary>
             Computes the transformation matrix by
             solving the two systems of linear equations
             defined by the control point mappings,
             if this is possible.
             </summary>
             <returns>True if the transformation matrix is solvable</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationBuilder.Solve(System.Double[])">
            <summary>
             Solves the transformation matrix system of linear equations
             for the given right-hand side vector.
            </summary>
             <param name="b">The vector for the right-hand side of the system</param>
             <returns>The solution vector, if it can be determinated, otherwise null</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.AffineTransformationFactory">
            <summary>
            Supports creating <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation"/>s defined by various kinds of inputs and transformation mapping rules.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.CreateFromControlVectors(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a tranformation from a set of three control vectors. A control
            vector consists of a source point and a destination point, which is the
            image of the source point under the desired transformation. Three control
            vectors allows defining a fully general affine transformation.
            </summary>
            <param name="src0"></param>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dest0"></param>
            <param name="dest1"></param>
            <param name="dest2"></param>
            <returns>The computed transformation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.CreateFromControlVectors(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an AffineTransformation defined by a pair of control vectors. A
            control vector consists of a source point and a destination point, which is
            the image of the source point under the desired transformation. The
            computed transformation is a combination of one or more of a uniform scale,
            a rotation, and a translation (i.e. there is no shear component and no
            reflection)
            </summary>
            <param name="src0"></param>
            <param name="src1"></param>
            <param name="dest0"></param>
            <param name="dest1"></param>
            <returns>The computed transformation</returns>
            <returns><c>null</c> if the control vectors do not determine a well-defined transformation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.CreateFromControlVectors(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an AffineTransformation defined by a single control vector. A
            control vector consists of a source point and a destination point, which is
            the image of the source point under the desired transformation. This
            produces a translation.
            </summary>
            <param name="src0">The start point of the control vector</param>
            <param name="dest0">The end point of the control vector</param>
            <returns>The computed transformation</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.CreateFromControlVectors(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Creates an AffineTransformation defined by a set of control vectors.
            Between one and three vectors must be supplied.
            </summary>
            <param name="src">The source points of the vectors</param>
            <param name="dest">The destination points of the vectors</param>
            <returns>The computed transformation</returns>
            <exception cref="T:System.ArgumentException">if the control vector arrays are too short, long or of different lengths</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.AffineTransformationFactory.CreateFromBaseLines(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an AffineTransformation defined by a maping between two baselines.
            The computed transformation consists of:
            <list type="Bullet">
            <item>a translation from the start point of the source baseline to the start point of the destination baseline,</item>
            <item>a rotation through the angle between the baselines about the destination start point,</item>
            <item>and a scaling equal to the ratio of the baseline lengths.</item>
            </list>
            If the source baseline has zero length, an identity transformation is returned.
            </summary>
            <param name="src0">The start point of the source baseline</param>
            <param name="src1">The end point of the source baseline</param>
            <param name="dest0">The start point of the destination baseline</param>
            <param name="dest1">The end point of the destination baseline</param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.ComponentCoordinateExtracter">
            <summary>
             Extracts a single representative <see cref="T:GeoAPI.Geometries.Coordinate"/> from each connected component of a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <version>1.9</version>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.ComponentCoordinateExtracter.GetCoordinates(GeoAPI.Geometries.IGeometry)">
            <summary>
             Extracts the linear components from a single geometry.
             If more than one geometry is to be processed, it is more
             efficient to create a single <see cref="T:NetTopologySuite.Geometries.Utilities.ComponentCoordinateExtracter"/> instance
             and pass it to multiple geometries.
            </summary>
             <param name="geom">The Geometry from which to extract</param>
             <returns>A list of Coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.ComponentCoordinateExtracter.#ctor(System.Collections.Generic.List{GeoAPI.Geometries.Coordinate})">
            <summary>
             Constructs a LineExtracterFilter with a list in which to store LineStrings found.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryCollectionMapper">
            <summary>
            Maps the members of a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>
            into another <tt>GeometryCollection</tt> via a defined
            mapping function.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCollectionMapper.Map(GeoAPI.Geometries.IGeometryCollection,System.Func{GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry})">
             <summary>
            
             </summary>
             <param name="gc"></param>
             <param name="op"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCollectionMapper.#ctor(System.Func{GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="mapOp"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCollectionMapper.Map(GeoAPI.Geometries.IGeometryCollection)">
             <summary>
            
             </summary>
             <param name="gc"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryCombiner">
            <summary>
             Combines <see cref="T:GeoAPI.Geometries.IGeometry"/>s to produce a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> of the most appropriate type.
            </summary>
             <remarks>
             <para>Input geometries which are already collections will have their elements extracted first.</para>
             <para>No validation of the result geometry is performed. 
             (The only case where invalidity is possible is where <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometries are combined and result in a self-intersection).</para>
             </remarks>
             <author>mbdavis</author>
             <seealso cref="M:GeoAPI.Geometries.IGeometryFactory.BuildGeometry(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.Combine(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>Combines a collection of geometries.</summary>
             <param name="geoms">The geometries to combine</param>
             <returns>The combined geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.Combine(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Combines two geometries.
             </summary>
             <param name="g0">A geometry to combine</param>
             <param name="g1">A geometry to combine</param>
             <returns>The combined geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.Combine(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Combines three geometries.
             </summary>
             <param name="g0">A geometry to combine</param>
             <param name="g1">A geometry to combine</param>
             <param name="g2">A geometry to combine</param>
             <returns>The combined geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.CreateList(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a list from two items
            </summary>
            <param name="obj0"></param>
            <param name="obj1"></param>
            <returns>A list from two geometries</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.CreateList(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a list from three items
            </summary>
            <param name="obj0"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns>A list from three geometries</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.GeometryCombiner.SkipEmpty">
            <summary>
            Value indicating whether empty geometries should be skipped
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.#ctor(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
             Creates a new combiner for a collection of geometries
            </summary>
             <param name="geoms">The geometries to combine</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.ExtractFactory(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
             Extracts the GeometryFactory used by the geometries in a collection
            </summary>
             <param name="geoms"></param>
             <returns>a GeometryFactory</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryCombiner.Combine">
            <summary>
             Computes the combination of the input geometries to produce the most appropriate <see cref="T:GeoAPI.Geometries.IGeometry"/> or <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>
            </summary>
             <returns>A Geometry which is the combination of the inputs</returns>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditor">
            <summary>
            A class which supports creating new <see cref="T:GeoAPI.Geometries.IGeometry"/>s
            which are modifications of existing ones,
            maintaining the same type structure.
            </summary>
            <remarks>
            Geometry objects are intended to be treated as immutable.
            This class allows you to "modifies" a Geometrys
            by traversing them, applying a user-defined
            <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/>, <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateSequenceOperation"/> or <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation"/>
            and creating a new Geometrys with the same structure but
            (possibly) modified components.
            <para>
            Examples of the kinds of modifications which can be made are:
            <list type="Bullet">
            <item>
            The values of the coordinates may be changed.
            The editor does not check whether changing coordinate values makes the result Geometry invalid
            </item>
            <item>
            The coordinate lists may be changed (e.g. by adding, deleting or modifying coordinates).
            The modifed coordinate lists must be consistent with their original parent component
            (e.g. a <tt>LinearRing</tt> must always have at least 4 coordinates, and the first and last
            coordinate must be equal).
            </item>
            <item>
            Components of the original point may be deleted
            (e.g. holes may be removed from a Polygon, or LineStrings removed from a MultiLineString).
            Deletions will be propagated up the component tree appropriately.
            </item></list>
            </para>
            <para>
            All changes must be consistent with the original Geometry's structure
            (e.g. a <code>Polygon</code> cannot be collapsed into a <code>LineString</code>).
            If changing the structure is required, use a <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryTransformer"/>.
            </para>
            <para>
            This class supports creating an edited Geometry 
            using a different <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> via the <see cref="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.#ctor(GeoAPI.Geometries.IGeometryFactory)"/>
            constructor.
            Examples of situations where this is required is if the geometry is
            transformed to a new SRID and/or a new PrecisionModel.</para>
            <para>
            Usage notes
            <list type="Bullet">
            <item>The resulting Geometry is not checked for validity.
            If validity needs to be enforced, the new Geometry's 
            <see cref="P:GeoAPI.Geometries.IGeometry.IsValid"/> method should be called.</item>
            <item>By default the UserData of the input geometry is not copied to the result. </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:NetTopologySuite.Geometries.Utilities.GeometryTransformer"/>
            <seealso cref="P:GeoAPI.Geometries.IGeometry.IsValid"/>
        </member>
        <member name="F:NetTopologySuite.Geometries.Utilities.GeometryEditor._factory">
            <summary>
            The factory used to create the modified Geometry.
            </summary>
            <remarks>
            If <tt>null</tt> the GeometryFactory of the input is used.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.#ctor">
            <summary>
            Creates a new GeometryEditor object which will create
            edited <see cref="T:GeoAPI.Geometries.IGeometry"/> with the same <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> as the input Geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new GeometryEditor object which will create
            edited <see cref="T:GeoAPI.Geometries.IGeometry"/>s with the given <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
            <param name="factory">The GeometryFactory to create the edited Geometry with.</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.GeometryEditor.CopyUserData">
            <summary>
            Gets or sets a value indicating if the User Data is copied to the edit result.
            If so, only the object reference is copied.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.Edit(GeoAPI.Geometries.IGeometry,NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation)">
            <summary>
            Edit the input <c>Geometry</c> with the given edit operation.
            Clients can create subclasses of GeometryEditorOperation or
            CoordinateOperation to perform required modifications.
            </summary>
            <param name="geometry">The Geometry to edit.</param>
            <param name="operation">The edit operation to carry out.</param>
            <returns>A new <c>Geometry</c> which is the result of the editing (which may be empty).</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation">
            <summary>
            A interface which specifies an edit operation for Geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation.Edit(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Edits a Geometry by returning a new Geometry with a modification.
            The returned Geometry may be the input geometry itself.
            It may be <code>null</code> if the geometry is to be deleted.
            </summary>
            <param name="geometry">The Geometry to modify.</param>
            <param name="factory">
            The factory with which to construct the modified Geometry
            (may be different to the factory of the input point).
            </param>
            <returns>A new Geometry which is a modification of the input Geometry.</returns>
            <returns><value>null</value> if the Geometry is to be deleted completely</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.NoOpGeometryOperation">
            <summary>
            A GeometryEditorOperation which does not modify
            the input geometry.
            This can be used for simple changes of
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> (including PrecisionModel and SRID).
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation">
            <summary>
            A GeometryEditorOperation which edits the coordinate list of a <c>Geometry</c>.
            Operates on Geometry subclasses which contains a single coordinate list.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation.Edit(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometryFactory)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <param name="factory"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation.Edit(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.IGeometry)">
            <summary>
            Edits the array of <c>Coordinate</c>s from a <c>Geometry</c>.
            </summary>
            <param name="coordinates">The coordinate array to operate on.</param>
            <param name="geometry">The point containing the coordinate list.</param>
            <returns>An edited coordinate array (which may be the same as the input).</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateSequenceOperation">
            <summary>
            A <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/> which edits the <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> 
            of a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            <para/>
            Operates on Geometry subclasses which contains a single coordinate list.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateSequenceOperation.EditSequence">
            <returns>An edited coordinate sequence (which may be the same as the input)</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryExtracter">
            <summary>
            Extracts the components of a given type from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryExtracter.Extract``1(GeoAPI.Geometries.IGeometry,System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry})">
            <summary>
             Extracts the <c>T</c> components from an <see cref="T:GeoAPI.Geometries.IGeometry"/> and adds them to the provided <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
             <param name="geom">the geometry from which to extract</param>
             <param name="list">the list to add the extracted elements to</param>
             <typeparam name="T">The geometry type to extract</typeparam>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryExtracter.Extract``1(GeoAPI.Geometries.IGeometry)">
            <summary>
             Extracts the <code>T</code> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> and returns them in a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="geom">the geometry from which to extract</param>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryExtracter`1">
            <summary>
             Extracts the components of type <c>T</c> from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryExtracter`1.#ctor(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry})">
            <summary>
             Constructs a filter with a list in which to store the elements found.
            </summary>
             <param name="comps">The list to extract into</param>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryTransformer">
            <summary>
            A framework for processes which transform an input <c>Geometry</c> into
            an output <see cref="T:GeoAPI.Geometries.IGeometry"/>, possibly changing its structure and type(s).
            </summary>
            <remarks>
            <para>
            This class is a framework for implementing subclasses
            which perform transformations on
            various different Geometry subclasses.
            </para>
            <para>
            It provides an easy way of applying specific transformations
            to given point types, while allowing unhandled types to be simply copied.
            Also, the framework handles ensuring that if subcomponents change type
            the parent geometries types change appropriately to maintain valid structure.
            Subclasses will override whichever <c>TransformX</c> methods
            they need to to handle particular Geometry types.
            </para>
            <para>
            A typically usage would be a transformation that may transform <c>Polygons</c> into
            <c>Polygons</c>, <c>LineStrings</c> or <c>Points</c>, depending on the geometry of the input
            (For instance, a simplification operation).
            This class would likely need to override the <see cref="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.Geometries.IGeometry)"/>
            method to ensure that if input Polygons change type the result is a <c>GeometryCollection</c>,
            not a <c>MultiPolygon</c>.</para>
            <para>
            The default behaviour of this class is simply to recursively transform
            each Geometry component into an identical object by deep copying down
            to the level of, but not including, coordinates.
            </para>
            <para>
            Note that all <c>Transform<i>XXX</i></c> methods may return <c>null</c>,
            to avoid creating empty point objects. This will be handled correctly
            by the transformer. <c>Transform<i>XXX</i></c> methods should always return valid
            geometry - if they cannot do this they should return <c>null</c>
            (for instance, it may not be possible for a transformLineString implementation
            to return at least two points - in this case, it should return <c>null</c>).
            The <see cref="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.Transform(GeoAPI.Geometries.IGeometry)"/> method itself will always
            return a non-null Geometry object (but this may be empty).</para>
            </remarks>>
        </member>
        <member name="F:NetTopologySuite.Geometries.Utilities.GeometryTransformer.Factory">
             <summary>
            
             </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Utilities.GeometryTransformer.pruneEmptyGeometry">
            <summary>
            <c>true</c> if empty geometries should not be included in the result.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Utilities.GeometryTransformer.preserveGeometryCollectionType">
            <summary>
            <c>true</c> if a homogenous collection result
            from a <c>GeometryCollection</c> should still
            be a general GeometryCollection.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Utilities.GeometryTransformer._preserveType">
            <summary>
            <c>true</c> if the type of the input should be preserved.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.GeometryTransformer.InputGeometry">
            <summary>
            Makes the input geometry available
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.Transform(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="inputGeom"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.CreateCoordinateSequence(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Convenience method which provides standard way of
            creating a <c>CoordinateSequence</c>.
            </summary>
            <param name="coords">The coordinate array to copy.</param>
            <returns>A coordinate sequence for the array.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.Copy(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Convenience method which provides statndard way of copying {CoordinateSequence}s
            </summary>
            <param name="seq">The sequence to copy.</param>
            <returns>A deep copy of the sequence.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            This method should always return a valid coordinate list for
            the desired result type.  (E.g. a coordinate list for a LineString
            must have 0 or at least 2 points).
            If this is not possible, return an empty sequence -
            this will be pruned out.
            </summary>
            <param name="coords">The coordinates to transform</param>
            <param name="parent">The parent geometry</param>
            <returns>The transformed coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformPoint(GeoAPI.Geometries.IPoint,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiPoint(GeoAPI.Geometries.IMultiPoint,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformLinearRing(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformLineString(GeoAPI.Geometries.ILineString,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiLineString(GeoAPI.Geometries.IMultiLineString,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformGeometryCollection(GeoAPI.Geometries.IGeometryCollection,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter">
            <summary> 
            Extracts all the 1-dimensional (<see cref="T:GeoAPI.Geometries.ILineString"/>) components from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            For polygonal geometries, this will extract all the component <see cref="T:GeoAPI.Geometries.ILinearRing"/>s.
            If desired, <see cref="T:GeoAPI.Geometries.ILinearRing"/>s can be forced to be returned as <see cref="T:GeoAPI.Geometries.ILineString"/>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Extracts the linear components from a <see cref="T:System.Collections.Generic.ICollection`1"/>
            and adds them to the provided <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="geoms">The geometry from which to extract linear components</param>
            <param name="lines">The Collection to add the extracted linear components to</param>
            <returns>The Collection of linear components (LineStrings or LinearRings)</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},System.Boolean)">
            <summary>
            Extracts the linear components from a <see cref="T:System.Collections.Generic.ICollection`1"/>
            and adds them to the provided <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="geoms">The geometry from which to extract linear components</param>
            <param name="lines">The Collection to add the extracted linear components to</param>
            <param name="forceToLineString"></param>
            <returns>The Collection of linear components (LineStrings or LinearRings)</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(GeoAPI.Geometries.IGeometry,System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Extracts the linear components from a single <see cref="T:GeoAPI.Geometries.IGeometry"/>
            and adds them to the provided <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="geom">The geometry from which to extract linear components</param>
            <param name="lines">The Collection to add the extracted linear components to</param>
            <returns>The Collection of linear components (LineStrings or LinearRings)</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(GeoAPI.Geometries.IGeometry,System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},System.Boolean)">
            <summary>
            Extracts the linear components from a single <see cref="T:GeoAPI.Geometries.IGeometry"/>
            and adds them to the provided <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="geom">The geometry from which to extract linear components</param>
            <param name="lines">The Collection to add the extracted linear components to</param>
            <param name="forceToLineString"></param>
            <returns>The Collection of linear components (LineStrings or LinearRings)</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Extracts the linear components from a single point.
            If more than one point is to be processed, it is more
            efficient to create a single <c>LineExtracterFilter</c> instance
            and pass it to multiple geometries.
            </summary>
            <param name="geom">The point from which to extract linear components.</param>
            <returns>The list of linear components.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(GeoAPI.Geometries.IGeometry,System.Boolean)">
            <summary>
            Extracts the linear components from a single geometry.
            If more than one geometry is to be processed, it is more
            efficient to create a single <see cref="T:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter"/> instance
            and pass it to multiple geometries.
            </summary>
            <param name="geom">The geometry from which to extract linear components</param>
            <param name="forceToLineString"><c>true</c> if <see cref="T:GeoAPI.Geometries.ILinearRing"/>s should be converted to <see cref="T:GeoAPI.Geometries.ILineString"/>s</param>
            <returns>The list of linear components</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetGeometry(GeoAPI.Geometries.IGeometry)">
            <summary>
            Extracts the linear components from a single <see cref="T:GeoAPI.Geometries.IGeometry"/>
            and returns them as either a <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="geom">The geometry from which to extract</param>
            <returns>A linear geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetGeometry(GeoAPI.Geometries.IGeometry,System.Boolean)">
            <summary>
            Extracts the linear components from a single <see cref="T:GeoAPI.Geometries.IGeometry"/>
            and returns them as either a <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="geom">The geometry from which to extract</param>
            <param name="forceToLineString"><c>true</c> if <see cref="T:GeoAPI.Geometries.ILinearRing"/>s should be converted to <see cref="T:GeoAPI.Geometries.ILineString"/>s</param>
            <returns>A linear geometry</returns>                
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.#ctor(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary> 
            Constructs a LineExtracterFilter with a list in which to store LineStrings found.
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.#ctor(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},System.Boolean)">
            <summary> 
            Constructs a LineExtracterFilter with a list in which to store LineStrings found.
            </summary>
            <param name="lines"></param>
            <param name="isForcedToLineString"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.IsForcedToLineString">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.LineStringExtracter">
            <summary>
             Extracts all the <see cref="T:GeoAPI.Geometries.ILineString"/> elements from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             </summary>
            <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryExtracter"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LineStringExtracter.GetLines(GeoAPI.Geometries.IGeometry,System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
             Extracts the <see cref="T:GeoAPI.Geometries.ILineString"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> 
             and adds them to the<see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
             <param name="geom">The geometry from which to extract</param>
             <param name="lines">The list to add the extracted elements to</param>
             <returns>The <paramref name="lines"/> list argument</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LineStringExtracter.GetLines(GeoAPI.Geometries.IGeometry)">
            <summary>
             Extracts the <see cref="T:GeoAPI.Geometries.ILineString"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> 
             and returns them in a <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
             <param name="geom">The geometry from which to extract</param>
             <returns>A list containing the linear elements</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LineStringExtracter.GetGeometry(GeoAPI.Geometries.IGeometry)">
            <summary>
            Extracts the <see cref="T:GeoAPI.Geometries.ILineString"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/>
            and returns them as either a <see cref="T:GeoAPI.Geometries.ILineString"/> or <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="geom">The geometry from which to extract</param>
            <returns>A linear geometry</returns>         
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.LineStringExtracter.#ctor(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
             Constructs a filter with a list in which to store the elements found.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.Matrix">
            <summary>
            Implements some 2D matrix operations (in particular, solving systems of linear equations).
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.Matrix.Solve(System.Double[][],System.Double[])">
            <summary>
             Solves a system of equations using Gaussian Elimination.<br/>
             In order to avoid overhead the algorithm runs in-place
             on A - if A should not be modified the client must supply a copy.
            </summary>
             <param name="a">A an nxn matrix in row/column order )modified by this method)</param>
             <param name="b">A vector of length n</param>
             <exception cref="T:System.ArgumentException">if the matrix is the wrong size</exception>
             <returns>
             <list type="Bullet">
             <item>A vector containing the solution (if any)</item>
             <item><c>null</c> if the system has no or no unique solution</item>
             </list>
             </returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.NoninvertibleTransformationException">
            <summary>
             Indicates that an <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation"/> is non-invertible.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.PointExtracter">
            <summary> 
            Extracts all the 0-dimensional (<c>Point</c>) components from a <c>Geometry</c>.    
            </summary>
            <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryExtracter"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PointExtracter.GetPoints(GeoAPI.Geometries.IGeometry,System.Collections.Generic.List{GeoAPI.Geometries.IGeometry})">
            <summary>
            Extracts the <see cref="T:GeoAPI.Geometries.IPoint"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> and adds them to the provided <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="geom">The geometry from which to extract</param>
            <param name="list">The list to add the extracted elements to</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PointExtracter.GetPoints(GeoAPI.Geometries.IGeometry)">
            <summary>
            Extracts the <see cref="T:GeoAPI.Geometries.IPoint"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> and returns them in a <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="geom">the geometry from which to extract</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PointExtracter.#ctor(System.Collections.Generic.List{GeoAPI.Geometries.IGeometry})">
            <summary> 
            Constructs a PointExtracterFilter with a list in which to store Points found.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PointExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.PolygonExtracter">
            <summary> 
            Extracts all the <see cref="T:GeoAPI.Geometries.IPolygon"/> elements from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryExtracter"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PolygonExtracter.GetPolygons(GeoAPI.Geometries.IGeometry,System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry})">
            <summary>
            Extracts the <see cref="T:GeoAPI.Geometries.IPolygon"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> and adds them to the provided <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="geom">The geometry from which to extract</param>
            <param name="list">The list to add the extracted elements to</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PolygonExtracter.GetPolygons(GeoAPI.Geometries.IGeometry)">
            <summary>
            Extracts the <see cref="T:GeoAPI.Geometries.IPolygon"/> elements from a single <see cref="T:GeoAPI.Geometries.IGeometry"/> and returns them in a <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="geom">The geometry from which to extract</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PolygonExtracter.#ctor(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry})">
            <summary> 
            Constructs a PolygonExtracterFilter with a list in which to store Polygons found.
            </summary>
            <param name="comps"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.PolygonExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor">
            <summary>
            A visitor to <see cref="T:GeoAPI.Geometries.IGeometry"/> elements which  componets, which 
            allows short-circuiting when a defined condition holds.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.ApplyTo(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.SineStarFactory">
            <summary>
             Creates geometries which are shaped like multi-armed stars with each arm shaped like a sine wave.
             These kinds of geometries are useful as a more complex geometry for testing algorithms.
            </summary>
             <author>
             Martin Davis
             </author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.SineStarFactory.#ctor">
            <summary>
             Creates a factory which will create sine stars using the default <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.SineStarFactory.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
             Creates a factory which will create sine stars using the given <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>
            </summary>
             <param name="geomFact">The factory to use</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.SineStarFactory.NumArms">
            <summary>Gets/Sets the number of arms in the star</summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.SineStarFactory.ArmLengthRatio">
            <summary>
             Sets the ration of the length of each arm to the distance from the tip of the arm to the centre of the star.
            </summary>
             <remarks>Value should be between 0.0 and 1.0</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.SineStarFactory.CreateSineStar">
            <summary>
             Generates the geometry for the sine star
            </summary>
             <returns>The geometry representing the sine star</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.CoordinateArrays">
            <summary>
            Useful utility functions for handling Coordinate arrays.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.IsRing(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Tests whether an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s forms a ring, by checking length and closure.
            Self-intersection is not checked.
            </summary>
            <param name="pts">An array of Coordinates</param>
            <returns>true if the coordinate form a ring.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.PointNotInList(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Finds a <see cref="T:GeoAPI.Geometries.Coordinate"/> in a list of <see cref="T:GeoAPI.Geometries.Coordinate"/>s 
            which is not contained in another list of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="testPts">The <see cref="T:GeoAPI.Geometries.Coordinate" />s to test.</param>
            <param name="pts">An array of <see cref="T:GeoAPI.Geometries.Coordinate" />s to test the input points against.</param>
            <returns>
            A <see cref="T:GeoAPI.Geometries.Coordinate" /> from <paramref name="testPts" /> 
            which is not in <paramref name="pts" />, or <c>null</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Compare(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Compares two <see cref="T:GeoAPI.Geometries.Coordinate" /> arrays
            in the forward direction of their coordinates,
            using lexicographic ordering.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.IncreasingDirection(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Determines which orientation of the <see cref="T:GeoAPI.Geometries.Coordinate" /> array is (overall) increasing.
            In other words, determines which end of the array is "smaller"
            (using the standard ordering on <see cref="T:GeoAPI.Geometries.Coordinate" />).
            Returns an integer indicating the increasing direction.
            If the sequence is a palindrome, it is defined to be
            oriented in a positive direction.
            </summary>
            <param name="pts">The array of Coordinates to test.</param>
            <returns>
            <c>1</c> if the array is smaller at the start or is a palindrome,
            <c>-1</c> if smaller at the end.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.IsEqualReversed(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Determines whether two <see cref="T:GeoAPI.Geometries.Coordinate" /> arrays of equal length
            are equal in opposite directions.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.CopyDeep(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Creates a deep copy of the argument <c>Coordinate</c> array.
            </summary>
            <param name="coordinates">Array of Coordinates.</param>
            <returns>Deep copy of the input.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.CopyDeep(GeoAPI.Geometries.Coordinate[],System.Int32,GeoAPI.Geometries.Coordinate[],System.Int32,System.Int32)">
            <summary>
            Creates a deep copy of a given section of a source <see cref="T:GeoAPI.Geometries.Coordinate"/> array into a destination Coordinate array.
            The destination array must be an appropriate size to receive the copied coordinates.
            </summary>
            <param name="src">An array of Coordinates</param>
            <param name="srcStart">The index to start copying from</param>
            <param name="dest">The array to receive the deep-copied coordinates</param>
            <param name="destStart">The destination index to start copying to</param>
            <param name="length">The number of items to copy</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.ToCoordinateArray(System.Collections.ICollection)">
            <summary>
            Converts the given <see cref="T:System.Collections.ICollection" /> of 
            <see cref="T:GeoAPI.Geometries.Coordinate" />s into a <see cref="T:GeoAPI.Geometries.Coordinate" /> array.
            </summary>
            <param name="coordList"><see cref="T:System.Collections.ICollection" /> of coordinates.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">
            If <paramref name="coordList"/> contains not only <see cref="T:GeoAPI.Geometries.Coordinate" />s.
            </exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.ToCoordinateArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})">
            <summary>
            Converts the given <see cref="T:System.Collections.Generic.ICollection`1" /> of 
            <see cref="T:GeoAPI.Geometries.Coordinate" />s into a <see cref="T:GeoAPI.Geometries.Coordinate" /> array.
            </summary>
            <param name="coordList"><see cref="T:System.Collections.Generic.ICollection`1"/> of coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.HasRepeatedPoints(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns whether Equals returns true for any two consecutive
            coordinates in the given array.
            </summary>
            <param name="coord">Array of Coordinates.</param>
            <returns>true if coord has repeated points; false otherwise.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.AtLeastNCoordinatesOrNothing(System.Int32,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns either the given coordinate array if its length is greater than
            the given amount, or an empty coordinate array.
            </summary>
            <param name="n">Length amount.</param>
            <param name="c">Array of Coordinates.</param>
            <returns>New Coordinate array.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.RemoveRepeatedPoints(GeoAPI.Geometries.Coordinate[])">
            <summary>
            If the coordinate array argument has repeated points,
            constructs a new array containing no repeated points.
            Otherwise, returns the argument.
            </summary>
            <param name="coord"></param>
            <returns></returns>        
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.RemoveNull(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Collapses a coordinate array to remove all null elements.
            </summary>
            <param name="coord">The coordinate array to collapse</param>
            <returns>An Array containing only non-null elements</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Reverse(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Reverses the coordinates in an array in-place.
            </summary>
            <param name="coord">Array of Coordinates.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Equals(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns <c>true</c> if the two arrays are identical, both <c>null</c>, or pointwise
            equal (as compared using Coordinate.Equals).
            </summary>
            <param name="coord1">First array of Coordinates.</param>
            <param name="coord2">Second array of Coordinates.</param>
            <returns><c>true</c> if two Coordinates array are equals; false otherwise</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.CoordinateArrays.ForwardComparator">
            <summary>
            Compares two <see cref="T:GeoAPI.Geometries.Coordinate" /> arrays
            in the forward direction of their coordinates,
            using lexicographic ordering.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.ForwardComparator.Compare(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Compares the specified <see cref="T:GeoAPI.Geometries.Coordinate" />s arrays.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.CoordinateArrays.BidirectionalComparator">
            <summary>
            A comparator for <see cref="T:GeoAPI.Geometries.Coordinate" /> arrays modulo their directionality.
            E.g. if two coordinate arrays are identical but reversed
            they will compare as equal under this ordering.
            If the arrays are not equal, the ordering returned
            is the ordering in the forward direction.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Equals(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[],System.Collections.Generic.IComparer{GeoAPI.Geometries.Coordinate[]})">
            <summary>
            Returns <c>true</c> if the two arrays are identical, both <c>null</c>, or pointwise
            equal, using a user-defined <see cref="T:System.Collections.IComparer" /> 
            for <see cref="T:GeoAPI.Geometries.Coordinate" />s.
            </summary>
            <param name="coord1">An array of <see cref="T:GeoAPI.Geometries.Coordinate" />s.</param>
            <param name="coord2">Another array of <see cref="T:GeoAPI.Geometries.Coordinate" />s.</param>
            <param name="coordinateComparer">
            A <see cref="T:System.Collections.IComparer" /> for <see cref="T:GeoAPI.Geometries.Coordinate" />s.
            </param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.MinCoordinate(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns the minimum coordinate, using the usual lexicographic comparison.
            </summary>
            <param name="coordinates">Array to search.</param>
            <returns>The minimum coordinate in the array, found using <c>CompareTo</c>.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Scroll(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate)">
            <summary>
            Shifts the positions of the coordinates until <c>firstCoordinate</c> is first.
            </summary>
            <param name="coordinates">Array to rearrange.</param>
            <param name="firstCoordinate">Coordinate to make first.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.IndexOf(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns the index of <paramref name="coordinate" /> in <paramref name="coordinates" />.
            The first position is 0; the second is 1; etc.
            </summary>
            <param name="coordinate">A <see cref="T:GeoAPI.Geometries.Coordinate" /> to search for.</param>
            <param name="coordinates">A <see cref="T:GeoAPI.Geometries.Coordinate" /> array to search.</param>
            <returns>The position of <c>coordinate</c>, or -1 if it is not found.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Extract(GeoAPI.Geometries.Coordinate[],System.Int32,System.Int32)">
            <summary>
            Extracts a subsequence of the input <see cref="T:GeoAPI.Geometries.Coordinate" /> array
            from indices <paramref name="start" /> to <paramref name="end"/> (inclusive).
            The input indices are clamped to the array size;
            If the end index is less than the start index,
            the extracted array will be empty.
            </summary>
            <param name="pts">The input array.</param>
            <param name="start">The index of the start of the subsequence to extract.</param>
            <param name="end">The index of the end of the subsequence to extract.</param>
            <returns>A subsequence of the input array.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Envelope(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes the <see cref="M:NetTopologySuite.Geometries.CoordinateArrays.Envelope(GeoAPI.Geometries.Coordinate[])"/> of the coordinates.
            </summary>
            <param name="coordinates">the <see cref="T:GeoAPI.Geometries.Coordinate"/> array to scan.</param>
            <returns>the <see cref="M:NetTopologySuite.Geometries.CoordinateArrays.Envelope(GeoAPI.Geometries.Coordinate[])"/> of the <paramref name="coordinates"/>.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateArrays.Intersection(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Envelope)">
            Extracts the coordinates which intersect an {@link Envelope}.
            
            @param coordinates the coordinates to scan
            @param env the envelope to intersect with
            @return an array of the coordinates which intersect the envelope
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence">
            <summary>
            A <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> backed by an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            This is the implementation that <see cref="T:GeoAPI.Geometries.IGeometry"/>s use by default.
            <para/>
            Coordinates returned by <see cref="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.ToCoordinateArray"/>, <see cref="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetCoordinate(System.Int32)"/> and <see cref="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetCoordinate(System.Int32,GeoAPI.Geometries.Coordinate)"/> are live --
            modifications to them are actually changing the
            CoordinateSequence's underlying data.
            A dimension may be specified for the coordinates in the sequence,
            which may be 2 or 3.
            The actual coordinates will always have 3 ordinates,
            but the dimension is useful as metadata in some situations. 
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence._dimension">
            The actual dimension of the coordinates in the sequence.
            Allowable values are 2, 3 and 4.
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Constructs a sequence based on the given array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            The coordinate dimension is 4
            </summary>
            <remarks>
            The array is not copied.
            </remarks>
            <param name="coordinates">The coordinate array that will be referenced.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.#ctor(GeoAPI.Geometries.Coordinate[],System.Int32)">
            <summary>
            Constructs a sequence based on the given array 
            of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <remarks>The Array is not copied</remarks>
            <param name="coordinates">The coordinate array that will be referenced.</param>
            <param name="dimension">The dimension of the coordinates</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.#ctor(System.Int32)">
            <summary>
            Constructs a sequence of a given size, populated with new Coordinates.
            </summary>
            <param name="size">The size of the sequence to create.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a sequence of a given <paramref name="size"/>, populated 
            with new <see cref="T:GeoAPI.Geometries.Coordinate"/>s of the given <paramref name="dimension"/>.
            </summary>
            <param name="size">The size of the sequence to create.</param>
            <param name="dimension">the dimension of the coordinates</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.#ctor(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a new sequence based on a deep copy of the given <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            </summary>
            <param name="coordSeq">The coordinate sequence that will be copied</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) for this sequence.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetCoordinate(System.Int32)">
            <summary>
            Get the Coordinate with index i.
            </summary>
            <param name="i">The index of the coordinate.</param>
            <returns>The requested Coordinate instance.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetCoordinateCopy(System.Int32)">
            <summary>
            Get a copy of the Coordinate with index i.
            </summary>
            <param name="i">The index of the coordinate.</param>
            <returns>A copy of the requested Coordinate.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetCoordinate(System.Int32,GeoAPI.Geometries.Coordinate)">
            <summary>
            Copies the i'th coordinate in the sequence to the supplied Coordinate.
            </summary>
            <param name="index">The index of the coordinate to copy.</param>
            <param name="coord">A Coordinate to receive the value.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetX(System.Int32)">
            <summary>
            Returns ordinate X (0) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the X ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetY(System.Int32)">
            <summary>
            Returns ordinate Y (1) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the Y ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinate indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.GetClonedCoordinates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.Count">
            <summary>
            Returns the length of the coordinate sequence.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)">
            <summary>
            Sets the value for a given ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <param name="value">The new ordinate value.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.ToCoordinateArray">
             <summary>
            This method exposes the internal Array of Coordinate Objects.       
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.ExpandEnvelope(GeoAPI.Geometries.Envelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequence.ToString">
            <summary>
            Returns the string representation of the coordinate array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory">
            <summary>
            Creates CoordinateSequences represented as an array of Coordinates.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory.Instance">
            <summary>
            Returns the singleton instance of CoordinateArraySequenceFactory.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory.Create(GeoAPI.Geometries.Coordinate[])">
            <summary>
             Returns a CoordinateArraySequence based on the given array (the array is not copied).
            </summary>
            <param name="coordinates">the coordinates, which may not be null nor contain null elements.</param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence">
            <summary>
            A coordinate sequence that follows the dotspatial shape range
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.#ctor(System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="coordinates">The</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a sequence of a given size, populated with new Coordinates.
            </summary>
            <param name="size">The size of the sequence to create.</param>
            <param name="dimension">The number of dimensions.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.#ctor(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Constructs a sequence of a given size, populated with new Coordinates.
            </summary>
            <param name="size">The size of the sequence to create.</param>
            <param name="ordinates">The kind of ordinates.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a sequence based on the given coordinate sequence.
            </summary>
            <param name="coordSeq">The coordinate sequence.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.#ctor(System.Double[],System.Double[])">
            <summary>
            
            </summary>
            <param name="xy"></param>
            <param name="z"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.#ctor(System.Double[],System.Double[],System.Double[])">
            <summary>
            
            </summary>
            <param name="xy"></param>
            <param name="z"></param>
            <param name="m"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.GetCachedCoords">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.Reversed">
            <summary>
            Creates a reversed version of this coordinate sequence with cloned <see cref="T:GeoAPI.Geometries.Coordinate"/>s
            </summary>
            <returns>A reversed version of this sequence</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.XY">
            <summary>
            Gets the vector with x- and y-ordinate values;
            </summary>
            <remarks>If you modify the values of this vector externally, you need to call <see cref="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.ReleaseCoordinateArray"/>!</remarks>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.Z">
            <summary>
            Gets the vector with z-ordinate values
            </summary>
            <remarks>If you modify the values of this vector externally, you need to call <see cref="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.ReleaseCoordinateArray"/>!</remarks>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.M">
            <summary>
            Gets the vector with measure values
            </summary>
            <remarks>If you modify the values of this vector externally, you need to call <see cref="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.ReleaseCoordinateArray"/>!</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.ReleaseCoordinateArray">
            <summary>
            Releases the weak reference to the weak referenced coordinate array
            </summary>
            <remarks>This is necessary if you modify the values of the <see cref="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.XY"/>, <see cref="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.Z"/>, <see cref="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequence.M"/> arrays externally.</remarks>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory">
            <summary>
            A coordinate sequence factory class that creates DotSpatial's Shape/ShapeRange like coordinate sequences.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Instance">
            <summary>
            Returns the singleton instance of DotSpatialAffineCoordinateSequenceFactory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Create(GeoAPI.Geometries.Coordinate[])">
            <summary>
             Returns a CoordinateArraySequence based on the given array (the array is not copied).
            </summary>
            <param name="coordinates">the coordinates, which may not be null nor contain null elements.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Create(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.ICoordinateSequence" />  which is a copy
            of the given <see cref="T:GeoAPI.Geometries.ICoordinateSequence" />.
            This method must handle null arguments by creating an empty sequence.
            </summary>
            <param name="coordSeq"></param>
            <returns>A coordinate sequence</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Create(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.ICoordinateSequence" /> of the specified size and dimension.
            For this to be useful, the <see cref="T:GeoAPI.Geometries.ICoordinateSequence" /> implementation must be mutable.
            </summary>
            <param name="size"></param>
            <param name="dimension">the dimension of the coordinates in the sequence 
            (if user-specifiable, otherwise ignored)</param>
            <returns>A coordinate sequence</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Create(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.ICoordinateSequence" /> of the specified size and ordinates.
            For this to be useful, the <see cref="T:GeoAPI.Geometries.ICoordinateSequence" /> implementation must be mutable.
            </summary>
            <param name="size">The number of coordinates.</param>
            <param name="ordinates">
            The ordinates each coordinate has. <see cref="F:GeoAPI.Geometries.Ordinates.XY"/> is fix, 
            <see cref="F:GeoAPI.Geometries.Ordinates.Z"/> and <see cref="F:GeoAPI.Geometries.Ordinates.M"/> can be set.
            </param>
            <returns>A coordinate sequence.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.DotSpatialAffineCoordinateSequenceFactory.Ordinates">
            <summary>
            Gets the Ordinate flags that sequences created by this factory can cope with.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence">
            <summary>
            A <c>CoordinateSequence</c> implementation based on a packed arrays.
            A <c>CoordinateSequence</c> implementation based on a packed arrays.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.CoordRef">
            <summary>
            A soft reference to the Coordinate[] representation of this sequence.
            Makes repeated coordinate array accesses more efficient.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence._dimension">
            <summary>
            The dimensions of the coordinates hold in the packed array
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence._ordinates">
            <summary>
            The ordinates
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) for this sequence.
            </summary>
            <value></value>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.Count">
            <summary>
            Returns the number of coordinates in this sequence.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetCoordinate(System.Int32)">
            <summary>
            Returns (possibly a copy of) the ith Coordinate in this collection.
            Whether or not the Coordinate returned is the actual underlying
            Coordinate or merely a copy depends on the implementation.
            Note that in the future the semantics of this method may change
            to guarantee that the Coordinate returned is always a copy. Callers are
            advised not to assume that they can modify a CoordinateSequence by
            modifying the Coordinate returned by this method.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetCoordinateCopy(System.Int32)">
            <summary>
            Returns a copy of the i'th coordinate in this sequence.
            This method optimizes the situation where the caller is
            going to make a copy anyway - if the implementation
            has already created a new Coordinate object, no further copy is needed.
            </summary>
            <param name="i">The index of the coordinate to retrieve.</param>
            <returns>
            A copy of the i'th coordinate in the sequence
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetCoordinate(System.Int32,GeoAPI.Geometries.Coordinate)">
            <summary>
            Copies the i'th coordinate in the sequence to the supplied Coordinate.  
            Only the first two dimensions are copied.        
            </summary>
            <param name="i">The index of the coordinate to copy.</param>
            <param name="c">A Coordinate to receive the value.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.ToCoordinateArray">
            <summary>
            Returns (possibly copies of) the Coordinates in this collection.
            Whether or not the Coordinates returned are the actual underlying
            Coordinates or merely copies depends on the implementation. 
            Note that if this implementation does not store its data as an array of Coordinates,
            this method will incur a performance penalty because the array needs to
            be built from scratch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetCachedCoords">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetX(System.Int32)">
            <summary>
            Returns ordinate X (0) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the X ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetY(System.Int32)">
            <summary>
            Returns ordinate Y (1) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the Y ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinate indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.SetX(System.Int32,System.Double)">
            <summary>
            Sets the first ordinate of a coordinate in this sequence.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.SetY(System.Int32,System.Double)">
            <summary>
            Sets the second ordinate of a coordinate in this sequence.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)">
            <summary>
            Sets the ordinate of a coordinate in this sequence.
            </summary>              
            <param name="index">The coordinate index.</param>
            <param name="ordinate">The ordinate index in the coordinate, 0 based, 
            smaller than the number of dimensions.</param>
            <param name="value">The new ordinate value.</param>
            <remarks>
            Warning: for performance reasons the ordinate index is not checked.
            If it is larger than the dimension a meaningless value may be returned.
            </remarks> 
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.GetCoordinateInternal(System.Int32)">
            <summary>
            Returns a Coordinate representation of the specified coordinate, by always
            building a new Coordinate object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.Envelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence">
            <summary>
            Packed coordinate sequence implementation based on doubles.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence._coords">
            <summary>
            The packed coordinate array
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coords"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.#ctor(System.Single[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.#ctor(GeoAPI.Geometries.Coordinate[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="size"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.GetCoordinateInternal(System.Int32)">
            <summary>
            Returns a Coordinate representation of the specified coordinate, by always
            building a new Coordinate object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.GetRawCoordinates">
            <summary>
            Gets the underlying array containing the coordinate values.
            </summary>
            <returns>The array of coordinate values</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.Count">
            <summary>
            Returns the number of coordinates in this sequence.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinate indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)">
            <summary>
            Sets the ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index.</param>
            <param name="ordinate">The ordinate index in the coordinate, 0 based,
            smaller than the number of dimensions.</param>
            <param name="value">The new ordinate value.</param>
            <remarks>
            Warning: for performance reasons the ordinate index is not checked.
            If it is larger than the dimension a meaningless value may be returned.
            </remarks> 
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedDoubleCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.Envelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence">
            <summary>
            Packed coordinate sequence implementation based on floats.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence._coords">
            <summary>
            The packed coordinate array
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.#ctor(System.Single[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="coords"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.#ctor(GeoAPI.Geometries.Coordinate[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="size"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.GetCoordinateInternal(System.Int32)">
            <summary>
            Returns a Coordinate representation of the specified coordinate, by always
            building a new Coordinate object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.GetRawCoordinates">
            <summary>
            Gets the underlying array containing the coordinate values.
            </summary>
            <returns>The array of coordinate values</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.Count">
            <summary>
            Returns the number of coordinates in this sequence.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinate indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)">
            <summary>
            Sets the ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index.</param>
            <param name="ordinate">The ordinate index in the coordinate, 0 based,
            smaller than the number of dimensions.</param>
            <param name="value">The new ordinate value.</param>
            <remarks>
            Warning: for performance reasons the ordinate index is not checked:
            if it is over dimensions you may not get an exception but a meaningless value.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedFloatCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.Envelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory">
            <summary>
            Builds packed array coordinate sequences. The array data type can be either
            double or float, and defaults to double.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType.Float">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory"/> class, 
            using double values.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.#ctor(NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.#ctor(NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.PackedType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory"/> class.
            </summary>
            <param name="type"></param>
            <param name="dimension"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Create(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns a CoordinateSequence based on the given array; whether or not the
            array is copied is implementation-dependent.
            </summary>
            <param name="coordinates">Coordinates array, which may not be null nor contain null elements</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Create(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Returns a CoordinateSequence based on the given coordinate sequence; whether or not the
            array is copied is implementation-dependent.
            </summary>
            <param name="coordSeq"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Create(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.ICoordinateSequence" /> of the specified size and ordinates.
            For this to be useful, the <see cref="T:GeoAPI.Geometries.ICoordinateSequence" /> implementation must be mutable.
            </summary>
            <param name="size">The number of coordinates</param>
            <param name="ordinates">
            The ordinates each coordinate has. <see cref="F:GeoAPI.Geometries.Ordinates.XY"/> is fix, <see cref="F:GeoAPI.Geometries.Ordinates.Z"/> and <see cref="F:GeoAPI.Geometries.Ordinates.M"/> can be set.
            </param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Create(System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="packedCoordinates"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Create(System.Single[],System.Int32)">
            <summary>
            
            </summary>
            <param name="packedCoordinates"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Implementation.PackedCoordinateSequenceFactory.Create(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.CoordinateList">
            <summary>
            A list of Coordinates, which may
            be set to prevent repeated coordinates from occuring in the list.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.#ctor">
            <summary>
            Constructs a new list without any coordinates
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Constructs a new list from an array of Coordinates, allowing repeated points.
            (I.e. this constructor produces a <see cref="T:NetTopologySuite.Geometries.CoordinateList"/> with exactly the same set of points
            as the input array.)
            </summary>
            <param name="coord">Initial coordinates</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.#ctor(System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate})">
            <summary>
            Constructs a new list from a collection of Coordinates,
            allows repeated points.
            </summary>
            <param name="coordList">Collection of coordinates to load into the list.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.#ctor(System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate},System.Boolean)">
            <summary>
            Constructs a new list from a collection of Coordinates,
            allowing caller to specify if repeated points are to be removed.
            </summary>
            <param name="coordList">Collection of coordinates to load into the list.</param>
            <param name="allowRepeated">If <c>false</c>, repeated points are removed.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.#ctor(GeoAPI.Geometries.Coordinate[],System.Boolean)">
            <summary>
            Constructs a new list from an array of Coordinates,
            allowing caller to specify if repeated points are to be removed.
            </summary>
            <param name="coord">Array of coordinates to load into the list.</param>
            <param name="allowRepeated">If <c>false</c>, repeated points are removed.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.GetCoordinate(System.Int32)">
            <summary>
            Returns the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>Coordinate specified.</return>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.Coordinate[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Adds a section of an array of coordinates to the list.
            </summary>
            <param name="coord">The coordinates</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed</param>
            <param name="start">The index to start from</param>
            <param name="end">The index to add up to but not including</param>
            <returns>true (as by general collection contract)</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.Coordinate[],System.Boolean,System.Boolean)">
            <summary>
            Adds an array of coordinates to the list.
            </summary>
            <param name="coord">Coordinates to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <param name="direction">If false, the array is added in reverse order.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.Coordinate[],System.Boolean)">
            <summary>
            Adds an array of coordinates to the list.
            </summary>
            <param name="coord">Coordinates to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Add(System.Object,System.Boolean)">
            <summary>
            Adds a coordinate to the list.
            </summary>
            <param name="obj">Coordinate to be inserted, as object.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Adds a coordinate to the end of this list.
            </summary>
            <param name="coord">Coordinate to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true if all ok.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Add(System.Int32,GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Inserts the specified coordinate at the specified position in this list.
            </summary>
            <param name="i">The position at which to insert</param>
            <param name="coord">the coordinate to insert</param>
            <param name="allowRepeated">if set to false, repeated coordinates are collapsed</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.AddAll(System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate},System.Boolean)">
            <summary>
            Add an array of coordinates.
            </summary>
            <param name="coll">Coordinates collection to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true if at least one element has added (IList not empty).</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.CloseRing">
            <summary>
            Ensure this coordList is a ring, by adding the start point if necessary.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.ToCoordinateArray">
            <summary>
            Returns the Coordinates in this collection.
            </summary>
            <returns>Coordinater as <c>Coordinate[]</c> array.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateList.Clone">
            <summary>
            Returns a deep copy of this collection.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.CoordinateSequenceComparator">
            <summary>
             Compares two <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s.
             </summary><remarks>
             <para>
             For sequences of the same dimension, the ordering is lexicographic.
             Otherwise, lower dimensions are sorted before higher.
             The dimensions compared can be limited; if this is done
             ordinate dimensions above the limit will not be compared.
             </para>
             <para>
             If different behaviour is required for comparing size, dimension, 
             or coordinate values, any or all methods can be overridden.</para>
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequenceComparator.Compare(System.Double,System.Double)">
            <summary>
             Compare two <code>double</code>s, allowing for NaN values.
             NaN is treated as being less than any valid number.
            </summary>
             <param name="a">A <code>double</code></param>
             <param name="b">A <code>double</code></param>
             <returns>-1, 0, or 1 depending on whether a is less than, equal to or greater than b</returns>
        </member>
        <member name="F:NetTopologySuite.Geometries.CoordinateSequenceComparator.DimensionLimit">
            The number of dimensions to test
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequenceComparator.#ctor">
            Creates a comparator which will test all dimensions.
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequenceComparator.#ctor(System.Int32)">
             
            
             @param dimensionLimit 
            <summary>Creates a comparator which will test only the specified number of dimensions.</summary>
             <param name="dimensionLimit">The number of dimensions to test</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequenceComparator.Compare(System.Object,System.Object)">
            <summary>
             Compares two <see cref="T:GeoAPI.Geometries.ICoordinateSequence" />s for relative order.
            </summary>
             <param name="o1">A coordinate sequence</param>
             <param name="o2">A coordinate sequence</param>
             <returns>-1, 0, or 1 depending on whether o1 is less than, equal to, or greater than o2</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequenceComparator.CompareCoordinate(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Int32)">
            <summary>
             Compares the same coordinate of two <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s
            </summary>
             <param name="s1">A coordinate sequence</param>
             <param name="s2">A coordinate sequence</param>
             <param name="i">The index of the coordinate to test</param>
             <param name="dimension">the number of dimensiosn to test</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequenceComparator.Compare(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Compares two <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s for relative order.
            </summary>
            <param name="s1">A coordinate sequence</param>
            <param name="s2">A coordinate sequence</param>
            <returns>-1, 0, or 1 depending on whether s1 is less than, equal to, or greater than s2</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.CoordinateSequences">
            <summary>
            Utility functions for manipulating <see cref="T:GeoAPI.Geometries.ICoordinateSequence" />s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.Reverse(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Reverses the coordinates in a sequence in-place.
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.Swap(GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Int32)">
            <summary>
            Swaps two coordinates in a sequence.
            </summary>
            <param name="seq">seq the sequence to modify</param>
            <param name="i">the index of a coordinate to swap</param>
            <param name="j">the index of a coordinate to swap</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.Copy(GeoAPI.Geometries.ICoordinateSequence,System.Int32,GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Int32)">
            <summary>
             Copies a section of a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to another <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
             The sequences may have different dimensions;
             in this case only the common dimensions are copied.
            </summary>
             <param name="src">The sequence to copy coordinates from</param>
             <param name="srcPos">The starting index of the coordinates to copy</param>
             <param name="dest">The sequence to which the coordinates should be copied to</param>
             <param name="destPos">The starting index of the coordinates in <see paramref="dest"/></param>
             <param name="length">The number of coordinates to copy</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.CopyCoord(GeoAPI.Geometries.ICoordinateSequence,System.Int32,GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
            <summary>
             Copies a coordinate of a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to another <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
             The sequences may have different dimensions;
             in this case only the common dimensions are copied.
            </summary>
             <param name="src">The sequence to copy coordinate from</param>
             <param name="srcPos">The index of the coordinate to copy</param>
             <param name="dest">The sequence to which the coordinate should be copied to</param>
             <param name="destPos">The index of the coordinate in <see paramref="dest"/></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.IsRing(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Tests whether a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> forms a valid <see cref="T:GeoAPI.Geometries.ILinearRing"/>,
            by checking the sequence length and closure
            (whether the first and last points are identical in 2D). 
            Self-intersection is not checked.
            </summary>
            <param name="seq">The sequence to test</param>
            <returns>True if the sequence is a ring</returns>
            <seealso cref="T:GeoAPI.Geometries.ILinearRing"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.EnsureValidRing(GeoAPI.Geometries.ICoordinateSequenceFactory,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Ensures that a CoordinateSequence forms a valid ring, 
            returning a new closed sequence of the correct length if required.
            If the input sequence is already a valid ring, it is returned 
            without modification.
            If the input sequence is too short or is not closed, 
            it is extended with one or more copies of the start point.
            </summary>
            <param name="fact">The CoordinateSequenceFactory to use to create the new sequence</param>
            <param name="seq">The sequence to test</param>
            <returns>The original sequence, if it was a valid ring, or a new sequence which is valid.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.IsEqual(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Tests whether two <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s are equal.
            To be equal, the sequences must be the same length.
            They do not need to be of the same dimension, 
            but the ordinate values for the smallest dimension of the two
            must be equal.
            Two <c>NaN</c> ordinates values are considered to be equal. 
            </summary>
            <param name="cs1">a CoordinateSequence</param>
            <param name="cs2">a CoordinateSequence</param>
            <returns><c>true</c> if the sequences are equal in the common dimensions</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.CoordinateSequences.ToString(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a string representation of a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            The format is:
            <para>
             ( ord0,ord1.. ord0,ord1,...  ... )
            </para>
            </summary>
            <param name="cs">the sequence to output</param>
            <returns>the string representation of the sequence</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.DefaultCoordinateSequence">
            <summary>
            The CoordinateSequence implementation that Geometries use by default. In
            this implementation, Coordinates returned by ToArray and GetCoordinates are live --
            parties that change them are actually changing the
            DefaultCoordinateSequence's underlying data.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Constructs a DefaultCoordinateSequence based on the given array (the
            array is not copied).
            </summary>
            <param name="coordinates">Coordinate array that will be assimilated.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a new sequence based on a deep copy of the given <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            </summary>
            <param name="coordSeq">The coordinate sequence that will be copied</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.#ctor(System.Int32)">
            <summary>
            Constructs a sequence of a given size, populated with new Coordinates.
            </summary>
            <param name="size">The size of the sequence to create.</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.DefaultCoordinateSequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) for this sequence.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.GetCoordinate(System.Int32)">
            <summary>
            Returns the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>Coordinate specified.</return>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.GetCoordinateCopy(System.Int32)">
            <summary>
            Returns a copy of the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>The copy of the coordinate specified.</return>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.GetCoordinate(System.Int32,GeoAPI.Geometries.Coordinate)">
            <summary>
            Copies the i'th coordinate in the sequence to the supplied Coordinate.
            Only the first two dimensions are copied.
            </summary>
            <param name="index">The index of the coordinate to copy.</param>
            <param name="coord">A Coordinate to receive the value.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.GetX(System.Int32)">
            <summary>
            Returns ordinate X (0) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the X ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.GetY(System.Int32)">
            <summary>
            Returns ordinate Y (1) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the Y ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinate indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)">
            <summary>
            Sets the value for a given ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <param name="value">The new ordinate value.</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.DefaultCoordinateSequence.Item(System.Int32)">
            <summary>
            Returns the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>Coordinate specified.</return>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.Envelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.Reversed">
            <summary>
            Creates a reversed version of this coordinate sequence with cloned <see cref="T:GeoAPI.Geometries.Coordinate"/>s
            </summary>
            <returns>A reversed version of this sequence</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.Clone">
            <summary>
            Returns a deep copy of the object passed.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.DefaultCoordinateSequence.Count">
            <summary>
            Returns the elements number of the coordinate sequence.
            </summary>
            <value></value>
        </member>
        <member name="P:NetTopologySuite.Geometries.DefaultCoordinateSequence.Length">
            <summary>
            Returns the elements number of the coordinate sequence.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.ToCoordinateArray">
            <summary>
            This method exposes the internal Array of Coordinate Objects.
            </summary>
            <returns>Coordinate[] array.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequence.ToString">
            <summary>
            Returns the string Representation of the coordinate array
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory">
            <summary>
            Creates CoordinateSequences internally represented
            as an array of x's and an array of y's.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory.Instance">
            <summary>
            Returns the singleton instance of DefaultCoordinateSequenceFactory.
            </summary>
            <returns>Singleton instance of DefaultCoordinateSequenceFactory.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory.Create(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Returns a DefaultCoordinateSequence based on the given array
            (the array is not copied).
            </summary>
            <param name="coordinates">Coordinates array, which may not be null
            nor contain null elements</param>
            <returns>Singleton instance of DefaultCoordinateSequenceFactory.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.GeometryCollection">
            <summary>
            Basic implementation of <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollection.Empty">
            <summary>
            Represents an empty <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollection._geometries">
            <summary>
            Internal representation of this <c>GeometryCollection</c>.        
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.#ctor(GeoAPI.Geometries.IGeometry[])">
            <summary>
            
            </summary>
            <param name="geometries">
            The <c>Geometry</c>s for this <c>GeometryCollection</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>Geometry</c>s,
            but not <c>null</c>s.
            </param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.#ctor(GeoAPI.Geometries.IGeometry[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometries">
            The <c>Geometry</c>s for this <c>GeometryCollection</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>Geometry</c>s,
            but not <c>null</c>s.
            </param>
            <param name="factory"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Coordinates">
            <summary>
            Collects all coordinates of all subgeometries into an Array.
            Note that while changes to the coordinate objects themselves
            may modify the Geometries in place, the returned Array as such 
            is only a temporary container which is not synchronized back.
            </summary>
            <returns>The collected coordinates.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.NumGeometries">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.GetGeometryN(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Geometries">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>"GeometryCollection"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.OgcGeometryType">
            <summary>
            Gets the OGC geometry type
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Area">
            <summary>  
            Returns the area of this <c>GeometryCollection</c>.
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Length">
            <summary>  
            Returns the length of this <c>GeometryCollection</c>.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.IsHomogeneous">
            <summary>
            Return <c>true</c> if all features in collection are of the same type.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.GetEnumerator">
            <summary>
            Returns a <c>GeometryCollectionEnumerator</c>:
            this IEnumerator returns the parent geometry as first element.
            In most cases is more useful the code
            <c>geometryCollectionInstance.Geometries.GetEnumerator()</c>: 
            this returns an IEnumerator over geometries composing GeometryCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Item(System.Int32)">
            <summary>
            Returns the iTh element in the collection.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollection.Reverse">
            <summary>
             Creates a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> with
             every component reversed.
             The order of the components in the collection are not reversed.
            </summary>
             <returns>A <see cref="T:GeoAPI.Geometries.IGeometryCollection"/></returns> in the reverse order
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollection.Count">
            <summary>
            Returns the number of geometries contained by this <see cref="T:NetTopologySuite.Geometries.GeometryCollection" />.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.GeometryCollectionEnumerator">
            <summary>
            Iterates over all <c>Geometry</c>'s in a <c>GeometryCollection</c>. 
            Implements a pre-order depth-first traversal of the <c>GeometryCollection</c>
            (which may be nested). The original <c>GeometryCollection</c> is
            returned as well (as the first object), as are all sub-collections. It is
            simple to ignore the <c>GeometryCollection</c> objects if they are not
            needed.
            </summary>    
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollectionEnumerator._parent">
            <summary>
            The <c>GeometryCollection</c> being iterated over.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollectionEnumerator._atStart">
            <summary>
            Indicates whether or not the first element (the <c>GeometryCollection</c>)
            has been returned.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollectionEnumerator._max">
            <summary>
            The number of <c>Geometry</c>s in the the <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollectionEnumerator._index">
            <summary>
            The index of the <c>Geometry</c> that will be returned when <c>next</c>
            is called.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryCollectionEnumerator._subcollectionEnumerator">
            <summary>
            The iterator over a nested <c>GeometryCollection</c>, or <c>null</c>
            if this <c>GeometryCollectionIterator</c> is not currently iterating
            over a nested <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollectionEnumerator.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs an iterator over the given <c>GeometryCollection</c>.
            </summary>
            <param name="parent">
            The collection over which to iterate; also, the first
            element returned by the iterator.
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollectionEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
            <remarks> The parent GeometryCollection is the first object returned!</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollectionEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollectionEnumerator.GetEnumerator">
            <summary>
            Gibt einen Enumerator zurück, der die Auflistung durchläuft.
            </summary>
            <returns>
            Ein <see cref="T:System.Collections.Generic.IEnumerator`1"/>, der zum Durchlaufen der Auflistung verwendet werden kann.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryCollectionEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gibt einen Enumerator zurück, der eine Auflistung durchläuft.
            </summary>
            <returns>
            Ein <see cref="T:System.Collections.IEnumerator"/>-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:NetTopologySuite.Geometries.GeometryFactory">
            <summary>
            Supplies a set of utility methods for building Geometry objects 
            from lists of Coordinates.
            </summary>            
            <remarks>
            Note that the factory constructor methods do <b>not</b> change the input coordinates in any way.
            In particular, they are not rounded to the supplied <c>PrecisionModel</c>.
            It is assumed that input Coordinates meet the given precision.
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryFactory.Default">
            <summary>
            A predefined <see cref="T:NetTopologySuite.Geometries.GeometryFactory" /> with <see cref="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel" /> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating" />.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryFactory.Floating">
            <summary>
            A predefined <see cref="T:NetTopologySuite.Geometries.GeometryFactory" /> with <see cref="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel" /> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating" />.
            </summary>
            <remarks>A shortcut for <see cref="F:NetTopologySuite.Geometries.GeometryFactory.Default" />.</remarks>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryFactory.FloatingSingle">
            <summary>
            A predefined <see cref="T:NetTopologySuite.Geometries.GeometryFactory" /> with <see cref="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel" /> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.FloatingSingle" />.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.GeometryFactory.Fixed">
            <summary>
            A predefined <see cref="T:NetTopologySuite.Geometries.GeometryFactory" /> with <see cref="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel" /> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Fixed" />.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryFactory.PrecisionModel">
            <summary>
            Returns the PrecisionModel that Geometries created by this factory
            will be associated with.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryFactory.CoordinateSequenceFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.GeometryFactory.SRID">
            <summary>
            The SRID value defined for this factory.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePointFromInternalCoord(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="exemplar"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.IPrecisionModel,System.Int32,GeoAPI.Geometries.ICoordinateSequenceFactory)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            PrecisionModel, spatial-reference ID, and CoordinateSequence implementation.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.ICoordinateSequenceFactory)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            CoordinateSequence implementation, a double-precision floating PrecisionModel and a
            spatial-reference ID of 0.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            {PrecisionModel} and the default CoordinateSequence
            implementation.
            </summary>
            <param name="precisionModel">The PrecisionModel to use.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.IPrecisionModel,System.Int32)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            <c>PrecisionModel</c> and spatial-reference ID, and the default CoordinateSequence
            implementation.
            </summary>
            <param name="precisionModel">The PrecisionModel to use.</param>
            <param name="srid">The SRID to use.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.#ctor">
            <summary>
            Constructs a GeometryFactory that generates Geometries having a floating
            PrecisionModel and a spatial-reference ID of 0.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToPointArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="points">The <c>ICollection</c> of Points to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToGeometryArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="geometries">The <c>ICollection</c> of <c>Geometry</c>'s to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToLineStringArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="lineStrings">The <c>ICollection</c> of LineStrings to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToLinearRingArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="linearRings">The <c>ICollection</c> of LinearRings to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToPolygonArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="polygons">The <c>ICollection</c> of Polygons to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToMultiPointArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="multiPoints">The <c>ICollection</c> of MultiPoints to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToMultiLineStringArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="multiLineStrings">The <c>ICollection</c> of MultiLineStrings to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToMultiPolygonArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="multiPolygons">The <c>ICollection</c> of MultiPolygons to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.ToGeometry(GeoAPI.Geometries.Envelope)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IGeometry"/> with the same extent as the given envelope.
            </summary>
            <remarks>
            <para>
            The Geometry returned is guaranteed to be valid. 
            To provide this behaviour, the following cases occur:
            </para>
            <para>
            If the <c>Envelope</c> is:
            <ul>
            <li>null returns an empty <see cref="T:GeoAPI.Geometries.IPoint"/></li>
            <li>a point returns a non-empty <see cref="T:GeoAPI.Geometries.IPoint"/></li>
            <li>a line returns a two-point <see cref="T:GeoAPI.Geometries.ILineString"/></li>
            <li>a rectangle returns a <see cref="T:GeoAPI.Geometries.IPolygon"/> whose points are (minx, maxy), (minx, maxy), (maxx, maxy), (maxx, miny).</li>
            </ul>
            </para>
            </remarks>
            <param name="envelope">The <c>Envelope</c></param>       
            <returns>
            An empty <c>Point</c> (for null <c>Envelope</c>s), a <c>Point</c> (when min x = max x and min y = max y) or a <c>Polygon</c> (in all other cases)
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePoint(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a Point using the given Coordinate.
            A <c>null</c> coordinate creates an empty Geometry.
            </summary>
            <param name="coordinate">a Coordinate, or null</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPoint"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePoint(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a <c>Point</c> using the given <c>CoordinateSequence</c>; a null or empty
            CoordinateSequence will create an empty Point.
            </summary>
            <param name="coordinates">a CoordinateSequence (possibly empty), or null</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPoint"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateLineString(GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Creates a LineString using the given Coordinates.
            A null or empty array creates an empty LineString.
            </summary>
            <param name="coordinates">An array without null elements, or an empty array, or null.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILineString"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateLineString(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a LineString using the given CoordinateSequence.
            A null or empty CoordinateSequence creates an empty LineString.
            </summary>
            <param name="coordinates">A CoordinateSequence (possibly empty), or null.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILineString"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateLinearRing(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Creates a <c>LinearRing</c> using the given <c>Coordinates</c>; a null or empty array 
            creates an empty LinearRing. The points must form a closed and simple
            linestring. Consecutive points must not be equal.
            </summary>
            <param name="coordinates">An array without null elements, or an empty array, or null.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILinearRing"/> object</returns>
            <exception cref="T:System.ArgumentException"> If the ring is not closed, or has too few points</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateLinearRing(GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Creates a <c>LinearRing</c> using the given <c>CoordinateSequence</c>; a null or empty CoordinateSequence
            creates an empty LinearRing. The points must form a closed and simple
            linestring. Consecutive points must not be equal.
            </summary>
            <param name="coordinates">A CoordinateSequence (possibly empty), or null.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILinearRing"/> object</returns>
            <exception cref="T:System.ArgumentException"> If the ring is not closed, or has too few points</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePolygon(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[])">
            <summary> 
            Constructs a <c>Polygon</c> with the given exterior boundary and
            interior boundaries.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>, or
            <c>null</c> or an empty <c>LinearRing</c> if
            the empty point is to be created.
            </param>
            <param name="holes">
            The inner boundaries of the new <c>Polygon</c>, or
            <c>null</c> or empty <c>LinearRing</c> s if
            the empty point is to be created.        
            </param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPolygon"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePolygon(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="coordinates">the outer boundary of the new <c>Polygon</c>, or
            <c>null</c> or an empty <c>LinearRing</c> if
            the empty geometry is to be created.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPolygon"/> object</returns>
            <exception cref="T:System.ArgumentException">If the boundary ring is invalid</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePolygon(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="coordinates">the outer boundary of the new <c>Polygon</c>, or
            <c>null</c> or an empty <c>LinearRing</c> if
            the empty geometry is to be created.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPolygon"/> object</returns>
            <exception cref="T:System.ArgumentException">If the boundary ring is invalid</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreatePolygon(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="shell">the outer boundary of the new <c>Polygon</c>, or
            <c>null</c> or an empty <c>LinearRing</c> if
            the empty geometry is to be created.</param>
            <returns>the created Polygon</returns>
            <exception cref="T:System.ArgumentException">If the boundary ring is invalid</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateMultiPoint(GeoAPI.Geometries.IPoint[])">
            <summary> 
            Creates a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> using the given Points.
            A null or empty array will  create an empty MultiPoint.
            </summary>
            <param name="point">An array (without null elements), or an empty array, or <c>null</c>.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiPoint"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateMultiPoint(GeoAPI.Geometries.Coordinate[])">
            <summary> 
            Creates a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> using the given Coordinates.
            A null or empty array will create an empty MultiPoint.
            </summary>
            <param name="coordinates">An array (without null elements), or an empty array, or <c>null</c></param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiPoint"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateMultiPoint(GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Creates a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> using the given CoordinateSequence.
            A null or empty CoordinateSequence will create an empty MultiPoint.
            </summary>
            <param name="coordinates">A CoordinateSequence (possibly empty), or <c>null</c>.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiPoint"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateMultiLineString(GeoAPI.Geometries.ILineString[])">
            <summary>
            Creates a <c>MultiLineString</c> using the given <c>LineStrings</c>; a null or empty
            array will create an empty MultiLineString.
            </summary>
            <param name="lineStrings">LineStrings, each of which may be empty but not null-</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiLineString"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateMultiPolygon(GeoAPI.Geometries.IPolygon[])">
            <summary>
            Creates a <c>MultiPolygon</c> using the given <c>Polygons</c>; a null or empty array
            will create an empty Polygon. The polygons must conform to the
            assertions specified in the <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features
            Specification for SQL.
            </summary>
            <param name="polygons">Polygons, each of which may be empty but not null.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiPolygon"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateGeometryCollection(GeoAPI.Geometries.IGeometry[])">
            <summary>
            Creates a <c>GeometryCollection</c> using the given <c>Geometries</c>; a null or empty
            array will create an empty GeometryCollection.
            </summary>
            <param name="geometries">an array of Geometries, each of which may be empty but not null, or null</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> object</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.BuildGeometry(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>  
            Build an appropriate <c>Geometry</c>, <c>MultiGeometry</c>, or
            <c>GeometryCollection</c> to contain the <c>Geometry</c>s in
            it.
            </summary>
            <remarks>
             If <c>geomList</c> contains a single <c>Polygon</c>,
            the <c>Polygon</c> is returned.<br/>
             If <c>geomList</c> contains several <c>Polygon</c>s, a
            <c>MultiPolygon</c> is returned.<br/>
             If <c>geomList</c> contains some <c>Polygon</c>s and
            some <c>LineString</c>s, a <c>GeometryCollection</c> is
            returned.<br/>
             If <c>geomList</c> is empty, an empty <c>GeometryCollection</c>
            is returned.
            Note that this method does not "flatten" Geometries in the input, and hence if
            any MultiGeometries are contained in the input a GeometryCollection containing
            them will be returned.
            </remarks>
            <param name="geomList">The <c>Geometry</c> to combine.</param>
            <returns>
            A <see cref="T:GeoAPI.Geometries.IGeometry"/> of the "smallest", "most type-specific" 
            class that can contain the elements of <c>geomList</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.GeometryFactory.CreateGeometry(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a deep copy of the input <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            The <see cref="T:GeoAPI.Geometries.ICoordinateSequenceFactory"/> defined for this factory
            is used to copy the <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s
            of the input geometry.
            <para/>
            This is a convenient way to change the <tt>CoordinateSequence</tt>
            used to represent a geometry, or to change the 
            factory used for a geometry.
            <para/>
            <see cref="!:IGeometry.Clone()"/> can also be used to make a deep copy,
            but it does not allow changing the CoordinateSequence type.
            </summary>
            <param name="g">The geometry</param>
            <returns>A deep copy of the input geometry, using the CoordinateSequence type of this factory</returns>
            <seealso cref="!:IGeometry.Clone"/>
        </member>
        <member name="T:NetTopologySuite.Geometries.LinearRing">
            <summary>
            Models an OGC SFS <c>LinearRing</c>.
            </summary>
            <remarks>
            A <c>LinearRing</c> is a <see cref="T:NetTopologySuite.Geometries.LineString"/> which is both closed and simple.
            In other words,
            the first and last coordinate in the ring must be equal,
            and the interior of the ring must not self-intersect.
            Either orientation of the ring is allowed.
            <para>
            A ring must have either 0 or 4 or more points.
            The first and last points must be equal (in 2D).
            If these conditions are not met, the constructors throw
            an <see cref="T:System.ArgumentException"/></para>
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Geometries.LinearRing.MinimumValidSize">
            <summary>
            The minimum number of vertices allowed in a valid non-empty ring (= 4).
            Empty rings with 0 vertices are also valid.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LinearRing.#ctor(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>LinearRing</c> with the given points.
            </summary>
            <param name="points">
            Points forming a closed and simple linestring, or
            <c>null</c> or an empty array to create the empty point.
            This array must not contain <c>null</c> elements.
            </param>
            <param name="factory"></param>
            <exception cref="T:System.ArgumentException">If the ring is not closed, or has too few points</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.LinearRing.ValidateConstruction">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LinearRing.BoundaryDimension">
            <summary>
            Returns <c>Dimensions.False</c>, since by definition LinearRings do not have a boundary.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LinearRing.GeometryType">
            <summary>
            Returns the name of this object's interface.
            </summary>
            <returns>"LinearRing"</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LinearRing.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.LinearRing"/> class.
            </summary>
            <param name="points">The points used for create this instance.</param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/>
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">If the ring is not closed, or has too few points</exception>
        </member>
        <member name="T:NetTopologySuite.Geometries.LineSegment">
            <summary>
            Represents a line segment defined by two <c>Coordinate</c>s.
            Provides methods to compute various geometric properties
            and relationships of line segments.
            This class is designed to be easily mutable (to the extent of
            having its contained points public).
            This supports a common pattern of reusing a single LineSegment
            object as a way of computing segment properties on the
            segments defined by arrays or lists of <c>Coordinate</c>s.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.P1">
            <summary>
            The end-point
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.P0">
            <summary>
            The start-point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an instance of this class using two coordinates
            </summary>
            <param name="p0">The start-point</param>
            <param name="p1">The end-point</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.#ctor(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Creates an instance of this class using another instance
            </summary>
            <param name="ls"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.GetCoordinate(System.Int32)">
             <summary>
            
             </summary>
             <param name="i"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.SetCoordinates(NetTopologySuite.Geometries.LineSegment)">
             <summary>
            
             </summary>
             <param name="ls"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.SetCoordinates(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="p0"></param>
             <param name="p1"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.MinX">
            <summary>
            Gets the minimum X ordinate
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.MaxX">
            <summary>
            Gets the maximum X ordinate
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.MinY">
            <summary>
            Gets the minimum Y ordinate
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.MaxY">
            <summary>
            Gets the maximum Y ordinate
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.Length">
            <summary>
            Computes the length of the line segment.
            </summary>
            <returns>The length of the line segment.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.IsHorizontal">
            <summary>
            Tests whether the segment is horizontal.
            </summary>
            <returns><c>true</c> if the segment is horizontal.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.IsVertical">
            <summary>
            Tests whether the segment is vertical.
            </summary>
            <returns><c>true</c> if the segment is vertical.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.OrientationIndex(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Determines the orientation of a LineSegment relative to this segment.
            The concept of orientation is specified as follows:
            Given two line segments A and L,
            A is to the left of a segment L if A lies wholly in the
            closed half-plane lying to the left of L
            A is to the right of a segment L if A lies wholly in the
            closed half-plane lying to the right of L
            otherwise, A has indeterminate orientation relative to L. This
            happens if A is collinear with L or if A crosses the line determined by L.
            </summary>
            <param name="seg">The <c>LineSegment</c> to compare.</param>
            <returns>
            1 if <c>seg</c> is to the left of this segment,
            -1 if <c>seg</c> is to the right of this segment,
            0 if <c>seg</c> is collinear to or crosses this segment.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.OrientationIndex(GeoAPI.Geometries.Coordinate)">
            
            
            
             @param seg the LineSegment to compare
            
             @return
             @return
             @return
            
             @see CGAlgorithms#computeOrientation(Coordinate, Coordinate, Coordinate)
            <summary>
             Determines the orientation index of a <see cref="T:GeoAPI.Geometries.Coordinate"/> relative to this segment.
             The orientation index is as defined in <see cref="M:NetTopologySuite.Algorithm.CGAlgorithms.ComputeOrientation(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>.
            </summary>
            
             <returns>
             <list>
             <item>1 if <c>p</c> is to the left of this segment</item>
             <item>-1 if <c>p</c> is to the right of this segment</item>
             <item>0 if <c>p</c> is collinear with this segment</item>
             </list>"
             </returns>
            
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Reverse">
            <summary>
            Reverses the direction of the line segment.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Normalize">
            <summary>
            Puts the line segment into a normalized form.
            This is useful for using line segments in maps and indexes when
            topological equality rather than exact equality is desired.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.Angle">
            <returns>
            The angle this segment makes with the x-axis (in radians).
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineSegment.MidPoint">
            <summary>The midpoint of the segment</summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Distance(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Computes the distance between this line segment and another one.
            </summary>
            <param name="ls"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Distance(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the distance between this line segment and a point.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.DistancePerpendicular(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the perpendicular distance between the (infinite) line defined
            by this line segment and a point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.PointAlong(System.Double)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.Coordinate" /> that lies a given
            fraction along the line defined by this segment.
            </summary>
            <remarks>
            A fraction of <code>0.0</code> returns the start point of the segment;
            A fraction of <code>1.0</code> returns the end point of the segment.
            If the fraction is &lt; 0.0 or &gt; 1.0 the point returned
            will lie before the start or beyond the end of the segment.
            </remarks>
            <param name="segmentLengthFraction"> the fraction of the segment length along the line</param>
            <returns> the point at that distance</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.PointAlongOffset(System.Double,System.Double)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.Coordinate" /> that lies a given
            </summary>
            <remarks>
            A fraction along the line defined by this segment and offset from
            the segment by a given distance.
            A fraction of <code>0.0</code> offsets from the start point of the segment;
            A fraction of <code>1.0</code> offsets from the end point of the segment.
            The computed point is offset to the left of the line if the offset distance is
            positive, to the right if negative.
            </remarks>
            <param name="segmentLengthFraction"> the fraction of the segment length along the line</param>
            <param name="offsetDistance"> the distance the point is offset from the segment</param>
            (positive is to the left, negative is to the right)
            <returns> the point at that distance and offset</returns>
            <exception cref="T:System.ApplicationException"> if the segment has zero length</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.ProjectionFactor(GeoAPI.Geometries.Coordinate)">
            <summary>Computes the Projection Factor for the projection of the point p
            onto this LineSegment.  The Projection Factor is the constant r
            by which the vector for this segment must be multiplied to
            equal the vector for the projection of <tt>p</tt> on the line
            defined by this segment.
            <para/>
            The projection factor will lie in the range <tt>(-inf, +inf)</tt>,
            or be <c>NaN</c> if the line segment has zero length.
            </summary>
            <param name="p">The point to compute the factor for</param>
            <returns>The projection factor for the point</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.SegmentFraction(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the fraction of distance (in [0.0, 1.0])
            that the projection of a point occurs along this line segment.
            If the point is beyond either ends of the line segment,
            the closest fractional value (0.0 or 1.0) is returned.
            </summary>
            <remarks>
            Essentially, this is the <see cref="M:NetTopologySuite.Geometries.LineSegment.ProjectionFactor(GeoAPI.Geometries.Coordinate)" /> clamped to
            the range [0.0, 1.0].
            </remarks>
            <param name="inputPt"> the point</param>
            <returns> the fraction along the line segment the projection of the point occurs</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Project(GeoAPI.Geometries.Coordinate)">
            <summary>
            Compute the projection of a point onto the line determined
            by this line segment.
            Note that the projected point  may lie outside the line segment.
            If this is the case,  the projection factor will lie outside the range [0.0, 1.0].
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Project(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Project a line segment onto this line segment and return the resulting
            line segment.  The returned line segment will be a subset of
            the target line line segment.  This subset may be null, if
            the segments are oriented in such a way that there is no projection.
            Note that the returned line may have zero length (i.e. the same endpoints).
            This can happen for instance if the lines are perpendicular to one another.
            </summary>
            <param name="seg">The line segment to project.</param>
            <returns>The projected line segment, or <c>null</c> if there is no overlap.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.ClosestPoint(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the closest point on this line segment to another point.
            </summary>
            <param name="p">The point to find the closest point to.</param>
            <returns>
            A Coordinate which is the closest point on the line segment to the point p.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.ClosestPoints(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Computes the closest points on a line segment.
            </summary>
            <param name="line"></param>
            <returns>
            A pair of Coordinates which are the closest points on the line segments.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Intersection(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Computes an intersection point between two segments, if there is one.
            There may be 0, 1 or many intersection points between two segments.
            If there are 0, null is returned. If there is 1 or more, a single one
            is returned (chosen at the discretion of the algorithm).  If
            more information is required about the details of the intersection,
            the {RobustLineIntersector} class should be used.
            </summary>
            <param name="line">A line segment</param>
            <returns> An intersection point, or <c>null</c> if there is none.</returns>
            <see cref="T:NetTopologySuite.Algorithm.RobustLineIntersector"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.LineIntersection(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Computes the intersection point of the lines defined by two segments, if there is one.
            </summary>
            <remarks>
            There may be 0, 1 or an infinite number of intersection points between two lines.
            If there is a unique intersection point, it is returned.
            Otherwise, <c>null</c> is returned.
            If more information is required about the details of the intersection,
            the <see cref="T:NetTopologySuite.Algorithm.RobustLineIntersector"/> class should be used.
            </remarks>
            <param name="line">A line segment defining a straight line</param>
            <returns>An intersection point, or <c>null</c> if there is none or an infinite number</returns>
            <seealso cref="T:NetTopologySuite.Algorithm.RobustLineIntersector"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.ToGeometry(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a LineString with the same coordinates as this segment
            </summary>
            <param name="geomFactory">the geometery factory to use</param>
            <returns>A LineString with the same geometry as this segment</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if <c>o</c> has the same values for its points.
            </summary>
            <param name="o">A <c>LineSegment</c> with which to do the comparison.</param>
            <returns>
            <c>true</c> if <c>o</c> is a <c>LineSegment</c>
            with the same values for the x and y ordinates.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.op_Equality(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment)">
             <summary>
            
             </summary>
             <param name="obj1"></param>
             <param name="obj2"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.op_Inequality(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment)">
             <summary>
            
             </summary>
             <param name="obj1"></param>
             <param name="obj2"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.CompareTo(System.Object)">
            <summary>
            Compares this object with the specified object for order.
            Uses the standard lexicographic ordering for the points in the LineSegment.
            </summary>
            <param name="o">
            The <c>LineSegment</c> with which this <c>LineSegment</c>
            is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>LineSegment</c>
            is less than, equal to, or greater than the specified <c>LineSegment</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.EqualsTopologically(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Returns <c>true</c> if <c>other</c> is
            topologically equal to this LineSegment (e.g. irrespective
            of orientation).
            </summary>
            <param name="other">
            A <c>LineSegment</c> with which to do the comparison.
            </param>
            <returns>
            <c>true</c> if <c>other</c> is a <c>LineSegment</c>
            with the same values for the x and y ordinates.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.ToString">
             <summary>
            
             </summary>
             <returns></returns>
            
        </member>
        <member name="M:NetTopologySuite.Geometries.LineSegment.GetHashCode">
            <summary>
            Return HashCode.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.LineString">
            <summary>
            Models an OGC-style <code>LineString</code>
            </summary>
            <remarks>
            A LineString consists of a sequence of two or more vertices,
            along with all points along the linearly-interpolated curves
            (line segments) between each
            pair of consecutive vertices.
            Consecutive vertices may be equal.
            The line segments in the line may intersect each other (in other words,
            the linestring may "curl back" in itself and self-intersect.
            Linestrings with exactly two identical points are invalid.
            <para>A linestring must have either 0 or 2 or more points.
            If these conditions are not met, the constructors throw an <see cref="T:System.ArgumentException"/>.
            </para>
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Geometries.LineString.Empty">
            <summary>
            Represents an empty <c>LineString</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.LineString._points">
            <summary>
            The points of this <c>LineString</c>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Coordinates">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.CoordinateSequence">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.GetCoordinateN(System.Int32)">
             <summary>
            
             </summary>
             <param name="n"></param>
             <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Coordinate">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Dimension">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.BoundaryDimension">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.IsEmpty">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.NumPoints">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.GetPointN(System.Int32)">
             <summary>
            
             </summary>
             <param name="n"></param>
             <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.StartPoint">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.EndPoint">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.IsClosed">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.IsRing">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.GeometryType">
            <summary>
            Returns the name of this object's interface.
            </summary>
            <returns>"LineString"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Length">
            <summary>
            Returns the length of this <c>LineString</c>
            </summary>
            <returns>The length of the polygon.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.Reverse">
            <summary>
            Creates a <see cref="T:NetTopologySuite.Geometries.LineString" /> whose coordinates are in the reverse order of this objects.
            </summary>
            <returns>A <see cref="T:NetTopologySuite.Geometries.LineString" /> with coordinates in the reverse order.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.IsCoordinate(GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns true if the given point is a vertex of this <c>LineString</c>.
            </summary>
            <param name="pt">The <c>Coordinate</c> to check.</param>
            <returns><c>true</c> if <c>pt</c> is one of this <c>LineString</c>'s vertices.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.ComputeEnvelopeInternal">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <param name="tolerance"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.Apply(GeoAPI.Geometries.ICoordinateFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.Apply(GeoAPI.Geometries.IGeometryFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.Clone">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.Normalize">
            <summary>
            Normalizes a <c>LineString</c>.  A normalized linestring
            has the first point which is not equal to it's reflected point
            less than the reflected point.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.CompareToSameClass(System.Object)">
             <summary>
            
             </summary>
             <param name="o"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.LineString"/> class.
            </summary>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/>
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
            <param name="points">The coordinates used for create this <see cref="T:NetTopologySuite.Geometries.LineString" />.</param>
            <exception cref="T:System.ArgumentException">If too few points are provided</exception>
        </member>
        <member name="M:NetTopologySuite.Geometries.LineString.#ctor(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.LineString"/> class.
            </summary>
            <param name="points">
            The points of the linestring, or <c>null</c>
            to create the empty point. Consecutive points may not be equal.
            </param>
            <param name="factory"></param>
            <exception cref="T:System.ArgumentException">If too few points are provided</exception>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Item(System.Int32)">
             <summary>
            
             </summary>
             <param name="n"></param>
             <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Count">
             <summary>
            
             </summary>
             <value></value>
        </member>
        <member name="P:NetTopologySuite.Geometries.LineString.Angle">
            <summary>
            Returns the value of the angle between the <see cref="P:NetTopologySuite.Geometries.LineString.StartPoint" />
            and the <see cref="P:NetTopologySuite.Geometries.LineString.EndPoint" />.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.MultiLineString">
            <summary>
            Basic implementation of <c>MultiLineString</c>.
            </summary>    
        </member>
        <member name="F:NetTopologySuite.Geometries.MultiLineString.Empty">
            <summary>
            Represents an empty <c>MultiLineString</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiLineString.#ctor(GeoAPI.Geometries.ILineString[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>MultiLineString</c>.
            </summary>
            <param name="lineStrings">
            The <c>LineString</c>s for this <c>MultiLineString</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>LineString</c>s,
            but not <c>null</c>s.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiLineString.#ctor(GeoAPI.Geometries.ILineString[])">
            <summary>
            Constructs a <c>MultiLineString</c>.
            </summary>
            <param name="lineStrings">
            The <c>LineString</c>s for this <c>MultiLineString</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>LineString</c>s,
            but not <c>null</c>s.
            </param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiLineString.Dimension">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiLineString.BoundaryDimension">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiLineString.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>"MultiLineString"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiLineString.OgcGeometryType">
            <summary>
            Gets the OGC geometry type
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiLineString.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiLineString.Reverse">
            <summary>
            Creates a <see cref="T:NetTopologySuite.Geometries.MultiLineString" /> in the reverse order to this object.
            Both the order of the component LineStrings
            and the order of their coordinate sequences are reversed.
            </summary>
            <returns>a <see cref="T:NetTopologySuite.Geometries.MultiLineString" /> in the reverse order.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiLineString.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.MultiPoint">
            <summary>  
            Models a collection of <c>Point</c>s.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.MultiPoint.Empty">
            <summary>
            Represents an empty <c>MultiPoint</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPoint.#ctor(GeoAPI.Geometries.IPoint[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>MultiPoint</c>.
            </summary>
            <param name="points">
            The <c>Point</c>s for this <c>MultiPoint</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Point</c>s, but not <c>null</c>s.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPoint.#ctor(GeoAPI.Geometries.IPoint[])">
            <summary>
            Constructs a <c>MultiPoint</c>.
            </summary>
            <param name="points">
            The <c>Point</c>s for this <c>MultiPoint</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Point</c>s, but not <c>null</c>s.
            </param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPoint.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPoint.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPoint.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>"MultiPoint"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPoint.Boundary">
            <summary>
             Gets the boundary of this geometry.
             Zero-dimensional geometries have no boundary by definition,
             so an empty GeometryCollection is returned.
             </summary> 
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPoint.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPoint.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPoint.GetCoordinate(System.Int32)">
            <summary>
            Returns the <c>Coordinate</c> at the given position.
            </summary>
            <param name="n">The index of the <c>Coordinate</c> to retrieve, beginning at 0.
            </param>
            <returns>The <c>n</c>th <c>Coordinate</c>.</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.MultiPolygon">
            <summary>
            Basic implementation of <c>MultiPolygon</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.MultiPolygon.Empty">
            <summary>
            Represents an empty <c>MultiPolygon</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPolygon.#ctor(GeoAPI.Geometries.IPolygon[])">
            <summary>
            Constructs a <c>MultiPolygon</c>.
            </summary>
            <param name="polygons">
            The <c>Polygon</c>s for this <c>MultiPolygon</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Polygon</c>s, but not <c>null</c>
            s. The polygons must conform to the assertions specified in the 
            <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features
            Specification for SQL.        
            </param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPolygon.#ctor(GeoAPI.Geometries.IPolygon[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>MultiPolygon</c>.
            </summary>
            <param name="polygons">
            The <c>Polygon</c>s for this <c>MultiPolygon</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Polygon</c>s, but not <c>null</c>
            s. The polygons must conform to the assertions specified in the 
            <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features
            Specification for SQL.        
            </param>
            <param name="factory"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPolygon.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPolygon.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPolygon.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>"MultiPolygon"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.MultiPolygon.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPolygon.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.MultiPolygon.Reverse">
            <summary>Creates a {@link MultiPolygon} with every component reversed.
            </summary>
             <remarks>The order of the components in the collection are not reversed.</remarks>
             <returns>An <see cref="T:GeoAPI.Geometries.IMultiPolygon"/> in the reverse order</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.OctagonalEnvelope">
            <summary>
            A bounding container for a <see cref="T:GeoAPI.Geometries.IGeometry"/> which is in the shape of a general octagon.
            </summary>
            <remarks>
            The OctagonalEnvelope of a geometric object
            is a geometry which is tight bound along the (up to) four extremal rectilineal parallels
            and along the (up to) four extremal diagonal parallels.
            Depending on the shape of the contained
            geometry, the octagon may be degenerate to any extreme
            (e.g. it may be a rectangle, a line, or a point).
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.GetOctagonalEnvelope(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the octagonal envelope of a geometry
            </summary>
            <param name="geom">The geometry</param>
            <returns>The octagonal envelope of the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.#ctor">
            <summary>
            Creates a new null bounding octagon
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new null bounding octagon bounding a <see cref="T:GeoAPI.Geometries.Coordinate" />
            </summary>
            <param name="p">The coordinate to bound</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new null bounding octagon bounding a pair of <see cref="T:GeoAPI.Geometries.Coordinate" />s
            </summary>
            <param name="p0">A coordinate to bound</param>
            <param name="p1">A coordinate to bound</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.#ctor(GeoAPI.Geometries.Envelope)">
            <summary>
            Creates a new null bounding octagon bounding an <see cref="T:GeoAPI.Geometries.Envelope" />
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.#ctor(NetTopologySuite.Geometries.OctagonalEnvelope)">
            <summary>
            Creates a new null bounding octagon bounding an <see cref="T:NetTopologySuite.Geometries.OctagonalEnvelope" />
            (the copy constructor).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.OctagonalEnvelope.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new null bounding octagon bounding a <see cref="T:GeoAPI.Geometries.IGeometry" />
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.OctagonalEnvelope.IsNull">
            
              Sets the value of this object to the null value
            
        </member>
        <member name="P:NetTopologySuite.Geometries.OctagonalEnvelope.IsValid">
            
             Tests if the extremal values for this octagon are valid.
            
             @return <code>true</code> if this object has valid values
            
        </member>
        <member name="T:NetTopologySuite.Geometries.Point">
            <summary>
            Represents a single point.
            <para/>
            A <c>Point</c> is topologically valid if and only if:
            <list type="Bullet">
            <item>The coordinate which defines it if any) is a valid coordinate 
            (i.e. does not have an <c>NaN</c> X- or Y-ordinate</item>
            </list>
            </summary>
            
        </member>
        <member name="F:NetTopologySuite.Geometries.Point.Empty">
            <summary>
            Represents an empty <c>Point</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Point._coordinates">
            <summary>  
            The <c>Coordinate</c> wrapped by this <c>Point</c>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.CoordinateSequence">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Point"/> class.
            </summary>
            <param name="coordinate">The coordinate used for create this <see cref="T:NetTopologySuite.Geometries.Point" />.</param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.#ctor(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>Point</c> with the given coordinate.
            </summary>
            <param name="coordinates">
            Contains the single coordinate on which to base this <c>Point</c>,
            or <c>null</c> to create the empty point.
            </param>
            <param name="factory"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.X">
            <summary>
            
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.Y">
            <summary>
            
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>"Point"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.OgcGeometryType">
            <summary>
            Gets the OGC geometry type
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.Boundary">
             <summary>
            Gets the boundary of this geometry.
            Zero-dimensional geometries have no boundary by definition,
            so an empty GeometryCollection is returned.
             </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.CompareToSameClass(System.Object,System.Collections.Generic.IComparer{GeoAPI.Geometries.ICoordinateSequence})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Point"/> class.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            /// <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> set to </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Point"/> class.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            /// <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> set to </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.Z">
            <summary>
            
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Geometries.Point.M">
            <summary>
            
            </summary>        
        </member>
        <member name="T:NetTopologySuite.Geometries.Polygon">
            <summary> 
            Represents a polygon with linear edges, which may include holes.
            The outer boundary (shell) 
            and inner boundaries (holes) of the polygon are represented by {@link LinearRing}s.
            The boundary rings of the polygon may have any orientation.
            Polygons are closed, simple geometries by definition.
            <para/>
            The polygon model conforms to the assertions specified in the 
            <a href="http://www.opengis.org/techno/specs.htm">OpenGIS Simple Features
            Specification for SQL</a>.
            <para/>
            A <c>Polygon</c> is topologically valid if and only if:
            <list type="Bullet">
            <item>the coordinates which define it are valid coordinates</item>
            <item>the linear rings for the shell and holes are valid
            (i.e. are closed and do not self-intersect)</item>
            <item>holes touch the shell or another hole at at most one point
            (which implies that the rings of the shell and holes must not cross)</item>
            <item>the interior of the polygon is connected,  
            or equivalently no sequence of touching holes 
            makes the interior of the polygon disconnected
            (i.e. effectively split the polygon into two pieces).</item>
            </list>
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Polygon.Empty">
            <summary>
            Represents an empty <c>Polygon</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Polygon._shell">
            <summary>
            The exterior boundary, or <c>null</c> if this <c>Polygon</c>
            is the empty point.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Polygon._holes">
            <summary>
            The interior boundaries, if any.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.#ctor(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Geometries.Polygon"/> class.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            point is to be created.
            </param>
            <param name="holes">
            The inner boundaries of the new <c>Polygon</c>
            , or <c>null</c> or empty <c>LinearRing</c>s if the empty
            point is to be created.
            </param>
            <remarks>
            For create this <see cref="T:NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.#ctor(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary and
            interior boundaries.
            </summary>       
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            point is to be created.
            </param>
            <param name="holes">
            The inner boundaries of the new <c>Polygon</c>
            , or <c>null</c> or empty <c>LinearRing</c>s if the empty
            point is to be created.
            </param>
            <param name="factory"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Coordinate">
            <summary>  
            Returns a vertex of this <c>Geometry</c>
            (usually, but not necessarily, the first one).
            </summary>
            <remarks>
            The returned coordinate should not be assumed to be an actual Coordinate object used in the internal representation. 
            </remarks>
            <returns>a Coordinate which is a vertex of this <c>Geometry</c>.</returns>
            <returns><c>null</c> if this Geometry is empty.
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Coordinates">
            <summary>
            Returns an array containing the values of all the vertices for 
            this geometry.
            </summary>
            <remarks>
            If the geometry is a composite, the array will contain all the vertices
            for the components, in the order in which the components occur in the geometry.
            <para>
            In general, the array cannot be assumed to be the actual internal 
            storage for the vertices.  Thus modifying the array
            may not modify the geometry itself. 
            Use the <see cref="M:GeoAPI.Geometries.ICoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)"/> method
            (possibly on the components) to modify the underlying data.
            If the coordinates are modified, 
            <see cref="M:GeoAPI.Geometries.IGeometry.GeometryChanged"/> must be called afterwards.
            </para> 
            </remarks>
            <returns>The vertices of this <c>Geometry</c>.</returns>
            <seealso cref="M:GeoAPI.Geometries.IGeometry.GeometryChanged"/>
            <seealso cref="M:GeoAPI.Geometries.ICoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinate,System.Double)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.GetOrdinates(GeoAPI.Geometries.Ordinate)">
            <summary>
            Gets an array of <see cref="T:System.Double"/> ordinate values
            </summary>
            <param name="ordinate">The ordinate index</param>
            <returns>An array of ordinate values</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.NumPoints">
            <summary>  
            Returns the count of this <c>Geometry</c>s vertices. The <c>Geometry</c>
            s contained by composite <c>Geometry</c>s must be
            Geometry's; that is, they must implement <c>NumPoints</c>.
            </summary>
            <returns>The number of vertices in this <c>Geometry</c>.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Dimension">
            <summary> 
            Returns the dimension of this geometry.
            </summary>
            <remarks>
            The dimension of a geometry is is the topological 
            dimension of its embedding in the 2-D Euclidean plane.
            In the NTS spatial model, dimension values are in the set {0,1,2}.
            <para>
            Note that this is a different concept to the dimension of 
            the vertex <see cref="P:NetTopologySuite.Geometries.Polygon.Coordinate"/>s.
            The geometry dimension can never be greater than the coordinate dimension.
            For example, a 0-dimensional geometry (e.g. a Point) 
            may have a coordinate dimension of 3 (X,Y,Z). 
            </para>
            </remarks>
            <returns>  
            The topological dimensions of this geometry
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.BoundaryDimension">
            <summary> 
            Returns the dimension of this <c>Geometry</c>s inherent boundary.
            </summary>
            <returns>    
            The dimension of the boundary of the class implementing this
            interface, whether or not this object is the empty point. Returns
            <c>Dimension.False</c> if the boundary is the empty point.
            </returns>
            NOTE: make abstract, remove setter and change geoapi
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.ExteriorRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.NumInteriorRings">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.InteriorRings">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.GetInteriorRingN(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>"Polygon"</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Area">
            <summary> 
            Returns the area of this <c>Polygon</c>
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Length">
            <summary>
            Returns the perimeter of this <c>Polygon</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.ConvexHull">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.CompareToSameClass(System.Object,System.Collections.Generic.IComparer{GeoAPI.Geometries.ICoordinateSequence})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.Normalize(GeoAPI.Geometries.ILinearRing,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ring"></param>
            <param name="clockwise"></param>        
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.IsRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.#ctor(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            polygon is to be created.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            polygon is to be created.
            </param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Shell">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Polygon.Holes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Polygon.ClearEnvelope">
            <summary>
            Clears any cached envelopes
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.PrecisionModel">
            <summary>
            Specifies the precision model of the <c>Coordinate</c>s in a <c>Geometry</c>.
            In other words, specifies the grid of allowable
            points for all <c>Geometry</c>s.
            </summary>
            <remarks>
            The <c>MakePrecise</c> method allows rounding a coordinate to
            a "precise" value; that is, one whose
            precision is known exactly.
            Coordinates are assumed to be precise in geometries.
            That is, the coordinates are assumed to be rounded to the
            precision model given for the point.
            NTS input routines automatically round coordinates to the precision model
            before creating Geometries.
            All internal operations
            assume that coordinates are rounded to the precision model.
            Constructive methods (such as bool operations) always round computed
            coordinates to the appropriate precision model.
            Currently three types of precision model are supported:
            <para>
            Floating: represents full double precision floating point.
            This is the default precision model used in NTS
            FloatingSingle: represents single precision floating point.
            Fixed: represents a model with a fixed number of decimal places.
            </para>
            A Fixed Precision Model is specified by a scale factor.
            The scale factor specifies the size of the grid which numbers are rounded to.
            Input coordinates are mapped to fixed coordinates according to the following
            equations:
            <list>
            <item>jtsPt.x = round( (inputPt.x * scale ) / scale</item>
            <item>jtsPt.y = round( (inputPt.y * scale ) / scale</item>
            </list>
            <para>
            For example, to specify 3 decimal places of precision, use a scale factor
            of 1000. To specify -3 decimal places of precision (i.e. rounding to
            the nearest 1000), use a scale factor of 0.001.
            </para>
            Coordinates are represented internally as Java double-precision values.
            Since .NET uses the IEEE-394 floating point standard, this
            provides 53 bits of precision. (Thus the maximum precisely representable
            <i>integer</i> is 9,007,199,254,740,992 - or almost 16 decimal digits of precision).
            <para/>
            NTS binary methods currently do not handle inputs which have different precision models.
            The precision model of any constructed geometric value is undefined.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.MostPrecise(GeoAPI.Geometries.IPrecisionModel,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
             Determines which of two <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>s is the most precise
            </summary>
             <param name="pm1">A precision model</param>
             <param name="pm2">A precision model</param>
             <returns>The PrecisionModel which is most precise</returns>
        </member>
        <member name="F:NetTopologySuite.Geometries.PrecisionModel.MaximumPreciseValue">
            <summary>
            The maximum precise value representable in a double. Since IEE754
            double-precision numbers allow 53 bits of mantissa, the value is equal to
            2^53 - 1.  This provides <i>almost</i> 16 decimal digits of precision.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.PrecisionModel._modelType">
            <summary>
            The type of PrecisionModel this represents.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.PrecisionModel._scale">
            <summary>
            The scale factor which determines the number of decimal places in fixed precision.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.#ctor">
            <summary>
            Creates a <c>PrecisionModel</c> with a default precision
            of Floating.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.#ctor(GeoAPI.Geometries.PrecisionModels)">
            <summary>
            Creates a <c>PrecisionModel</c> that specifies
            an explicit precision model type.
            If the model type is Fixed the scale factor will default to 1.
            </summary>
            <param name="modelType">
            The type of the precision model.
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <c>PrecisionModel</c> that specifies Fixed precision.
            Fixed-precision coordinates are represented as precise internal coordinates,
            which are rounded to the grid defined by the scale factor.
            </summary>
            <param name="scale">
            Amount by which to multiply a coordinate after subtracting
            the offset, to obtain a precise coordinate
            </param>
            <param name="offsetX">Not used.</param>
            <param name="offsetY">Not used.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.#ctor(System.Double)">
            <summary>
            Creates a <c>PrecisionModel</c> that specifies Fixed precision.
            Fixed-precision coordinates are represented as precise internal coordinates,
            which are rounded to the grid defined by the scale factor.
            </summary>
            <param name="scale">
            Amount by which to multiply a coordinate after subtracting
            the offset, to obtain a precise coordinate.
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.#ctor(NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            Copy constructor to create a new <c>PrecisionModel</c>
            from an existing one.
            </summary>
            <param name="pm"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.GetHashCode">
            <summary>
            Return HashCode.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.PrecisionModel.IsFloating">
            <summary>
            Tests whether the precision model supports floating point.
            </summary>
            <returns><c>true</c> if the precision model supports floating point.</returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.PrecisionModel.MaximumSignificantDigits">
            <summary>
            Returns the maximum number of significant digits provided by this
            precision model.
            Intended for use by routines which need to print out precise values.
            </summary>
            <returns>
            The maximum number of decimal places provided by this precision model.
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.PrecisionModel.Scale">
            <summary>
            Returns the scale factor used to specify a fixed precision model.
            </summary>
            <remarks>
            The number of decimal places of precision is
            equal to the base-10 logarithm of the scale factor.
            Non-integral and negative scale factors are supported.
            Negative scale factors indicate that the places
            of precision is to the left of the decimal point.
            </remarks>
            <returns>
            The scale factor for the fixed precision model
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.PrecisionModel.PrecisionModelType">
            <summary>
            Gets the type of this PrecisionModel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.PrecisionModel.OffsetX">
            <summary>
            Returns the x-offset used to obtain a precise coordinate.
            </summary>
            <returns>
            The amount by which to subtract the x-coordinate before
            multiplying by the scale.
            </returns>
        </member>
        <member name="P:NetTopologySuite.Geometries.PrecisionModel.OffsetY">
            <summary>
            Returns the y-offset used to obtain a precise coordinate.
            </summary>
            <returns>
            The amount by which to subtract the y-coordinate before
            multiplying by the scale
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.ToInternal(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Sets <c>internal</c> to the precise representation of <c>external</c>.
            </summary>
            <param name="cexternal">The original coordinate.</param>
            <param name="cinternal">
            The coordinate whose values will be changed to the
            precise representation of <c>external</c>.
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.ToInternal(GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the precise representation of <c>external</c>.
            </summary>
            <param name="cexternal">The original coordinate.</param>
            <returns>
            The coordinate whose values will be changed to the precise
            representation of <c>external</c>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.ToExternal(GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the external representation of <c>internal</c>.
            </summary>
            <param name="cinternal">The original coordinate.</param>
            <returns>
            The coordinate whose values will be changed to the
            external representation of <c>internal</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.ToExternal(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Sets <c>external</c> to the external representation of <c>internal</c>.
            </summary>
            <param name="cinternal">The original coordinate.</param>
            <param name="cexternal">
            The coordinate whose values will be changed to the
            external representation of <c>internal</c>.
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.MakePrecise(System.Double)">
            <summary>
            Rounds a numeric value to the PrecisionModel grid.
            Symmetric Arithmetic Rounding is used, to provide
            uniform rounding behaviour no matter where the number is
            on the number line.
            </summary>
            <remarks>
            This method has no effect on NaN values
            </remarks>
            <param name="val"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.MakePrecise(GeoAPI.Geometries.Coordinate)">
            <summary>
            Rounds a Coordinate to the PrecisionModel grid.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.ToString">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.Equals(System.Object)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.Equals(GeoAPI.Geometries.IPrecisionModel)">
             <summary>
            
             </summary>
             <param name="otherPrecisionModel"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.op_Equality(NetTopologySuite.Geometries.PrecisionModel,NetTopologySuite.Geometries.PrecisionModel)">
             <summary>
            
             </summary>
             <param name="obj1"></param>
             <param name="obj2"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.op_Inequality(NetTopologySuite.Geometries.PrecisionModel,NetTopologySuite.Geometries.PrecisionModel)">
             <summary>
            
             </summary>
             <param name="obj1"></param>
             <param name="obj2"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.CompareTo(System.Object)">
            <summary>
            Compares this <c>PrecisionModel</c> object with the specified object for order.
            A PrecisionModel is greater than another if it provides greater precision.
            The comparison is based on the value returned by the
            {getMaximumSignificantDigits) method.
            This comparison is not strictly accurate when comparing floating precision models
            to fixed models; however, it is correct when both models are either floating or fixed.
            </summary>
            <param name="o">
            The <c>PrecisionModel</c> with which this <c>PrecisionModel</c>
            is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>PrecisionModel</c>
            is less than, equal to, or greater than the specified <c>PrecisionModel</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.PrecisionModel.CompareTo(GeoAPI.Geometries.IPrecisionModel)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.AbstractPreparedPolygonContains">
            <summary>
             A base class containing the logic for computes the <i>contains</i>
             and <i>covers</i> spatial relationship predicates
             for a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/> relative to all other <see cref="T:GeoAPI.Geometries.IGeometry"/> classes.
             Uses short-circuit tests and indexing to improve performance.
            </summary>
             <remarks>
             <para>
             Contains and covers are very similar, and differ only in how certain
             cases along the boundary are handled.  These cases require
             full topological evaluation to handle, so all the code in
             this class is common to both predicates.
             </para>
             <para>
             It is not possible to short-circuit in all cases, in particular
             in the case where line segments of the test geometry touches the polygon linework.
             In this case full topology must be computed.
             (However, if the test geometry consists of only points, this
             <i>can</i> be evaluated in an optimized fashion.
             </para>
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Geometries.Prepared.AbstractPreparedPolygonContains.RequireSomePointInInterior">
             This flag controls a difference between contains and covers.
            
             For contains the value is true.
             For covers the value is false.
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.AbstractPreparedPolygonContains.#ctor(NetTopologySuite.Geometries.Prepared.PreparedPolygon)">
            <summary>
             Creates an instance of this operation.
             </summary>
             <param name="prepPoly">The PreparedPolygon to evaluate</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.AbstractPreparedPolygonContains.Eval(GeoAPI.Geometries.IGeometry)">
            <summary>
             Evaluate the <i>contains</i> or <i>covers</i> relationship
             for the given geometry.
            </summary>
             <param name="geom">the test geometry</param>
             <returns>true if the test geometry is contained</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.AbstractPreparedPolygonContains.IsSingleShell(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether a geometry consists of a single polygon with no holes.
            </summary>
            <returns>True if the geometry is a single polygon with no holes</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.AbstractPreparedPolygonContains.FullTopologicalPredicate(GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the full topological predicate.
             Used when short-circuit tests are not conclusive.
            </summary>
             <param name="geom">The test geometry</param>
             <returns>true if this prepared polygon has the relationship with the test geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry">
            <summary>
             A base class for <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/> subclasses.
            </summary>
             <remarks>
             <para>Contains default implementations for methods, which simply delegate to the equivalent <see cref="T:GeoAPI.Geometries.IGeometry"/> methods.</para>
             <para>This class may be used as a "no-op" class for Geometry types which do not have a corresponding <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/> implementation.</para>
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="P:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.RepresentativePoints">
            <summary>
             Gets the list of representative points for this geometry. 
             One vertex is included for every component of the geometry
             (i.e. including one for every ring of polygonal geometries).
             <para/>
             Do not modify the returned list!
             </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.IsAnyTargetComponentInTest(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether any representative of the target geometry intersects the test geometry.
             This is useful in A/A, A/L, A/P, L/P, and P/P cases.
            </summary>
             <param name="testGeom">The test geometry</param>
             <returns>true if any component intersects the areal test geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.EnvelopesIntersect(GeoAPI.Geometries.IGeometry)">
            <summary>
             Determines whether a Geometry g interacts with this geometry by testing the geometry envelopes.
            </summary>
             <param name="g">A geometry</param>
             <returns>true if the envelopes intersect</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.EnvelopeCovers(GeoAPI.Geometries.IGeometry)">
            <summary>
             Determines whether the envelope of this geometry covers the Geometry g.
            </summary>
             <param name="g">A geometry</param>
             <returns>true if g is contained in this envelope</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Contains(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> contains a given geometry.
            </summary>
             <param name="g">The Geometry to test</param>
             <returns>true if this Geometry contains the given Geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Contains(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.ContainsProperly(GeoAPI.Geometries.IGeometry)" -->
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.CoveredBy(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> is covered by a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry is covered by the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.CoveredBy(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Covers(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> covers a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry covers the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Covers(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Crosses(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> crosses a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry crosses the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Crosses(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Disjoint(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> is disjoint from given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry is disjoint from the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Disjoint(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> intersects a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry intersects the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Intersects(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Overlaps(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> overlaps a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry overlaps the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Overlaps(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Touches(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> touches a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry touches the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Touches(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.BasicPreparedGeometry.Within(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether the base <see cref="T:GeoAPI.Geometries.IGeometry"/> is within a given geometry.
            </summary>
             <param name="g">The geometry to test</param>
             <returns>true if this geometry is within the given geometry</returns>
             <see cref="M:GeoAPI.Geometries.IGeometry.Within(GeoAPI.Geometries.IGeometry)"/>
             <remarks>Default implementation.</remarks>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedGeometryFactory">
            <summary>
             A factory for creating <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/>s. It chooses an appropriate implementation of PreparedGeometry
             based on the geoemtric type of the input geometry.
            </summary>
             <remarks>
             In the future, the factory may accept hints that indicate
             special optimizations which can be performed.
            </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedGeometryFactory.Prepare(GeoAPI.Geometries.IGeometry)">
            <summary>
             Creates a new <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/> appropriate for the argument <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="geom">The geometry to prepare</param>
             <returns>
             the prepared geometry
             </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedGeometryFactory.Create(GeoAPI.Geometries.IGeometry)">
            <summary>
             Creates a new <see cref="T:GeoAPI.Geometries.Prepared.IPreparedGeometry"/> appropriate for the argument <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="geom">The geometry to prepare</param>
             <returns>
             the prepared geometry
             </returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedLineString">
            <summary>
             A prepared version for <see cref="T:GeoAPI.Geometries.ILineal"/> geometries.
             <para>Instances of this class are thread-safe</para>.
            </summary>
             <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedLineStringIntersects">
            <summary>
             Computes the <i>intersects</i> spatial relationship predicate
             for a target <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedLineString"/> relative to other <see cref="T:GeoAPI.Geometries.IGeometry"/> classes.
            </summary>
             <remarks>
             Uses short-circuit tests and indexing to improve performance.
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedLineStringIntersects.Intersects(NetTopologySuite.Geometries.Prepared.PreparedLineString,GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the intersects predicate between a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedLineString"/>
             and a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="prep">The prepared linestring</param>
             <param name="geom">A test geometry</param>
             <returns>true if the linestring intersects the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedLineStringIntersects.#ctor(NetTopologySuite.Geometries.Prepared.PreparedLineString)">
            <summary>
             Creates an instance of this operation.
             </summary>
             <param name="prepLine">The target PreparedLineString</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedLineStringIntersects.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this geometry intersects a given geometry.
            </summary>
             <param name="geom">The test geometry</param>
             <returns>true if the test geometry intersects</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedLineStringIntersects.IsAnyTestPointInTarget(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether any representative point of the test Geometry intersects
             the target geometry.
            </summary>
             <remarks>
             Only handles test geometries which are Puntal (dimension 0)
             </remarks>
             <param name="testGeom">A Puntal geometry to test</param>
             <returns>true if any point of the argument intersects the prepared geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPoint">
            <summary>
             A prepared version for <see cref="T:GeoAPI.Geometries.IPuntal"/> geometries.
             <para>Instances of this class are thread-safe.</para>
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPoint.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this point intersects a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <remarks>
             The optimization here is that computing topology for the test geometry
             is avoided. This can be significant for large geometries.
             </remarks>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon">
            <summary>
            A prepared version for <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometries.
            This class supports both <see cref="T:GeoAPI.Geometries.IPolygon"/>s and <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>s.
            <para>This class does <b>not</b> support MultiPolygons which are non-valid
            (e.g. with overlapping elements).
            </para>
            <para/>
            Instances of this class are thread-safe and immutable.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPolygonContains">
            <summary>
             Computes the <c>contains</c> spatial relationship predicate for a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/> relative to all other <see cref="T:GeoAPI.Geometries.IGeometry"/> classes.
             Uses short-circuit tests and indexing to improve performance.
             </summary>
             <remarks>
             <para>
             It is not possible to short-circuit in all cases, in particular
             in the case where the test geometry touches the polygon linework.
             In this case full topology must be computed.
             </para>
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContains.Contains(NetTopologySuite.Geometries.Prepared.PreparedPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the <c>contains</c> spatial relationship predicate between a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/> and a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="prep">The prepared polygon</param>
             <param name="geom">A test geometry</param>
             <returns>true if the polygon contains the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContains.#ctor(NetTopologySuite.Geometries.Prepared.PreparedPolygon)">
            <summary>
             Creates an instance of this operation.
            </summary>
             <param name="prepPoly">the PreparedPolygon to evaluate</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContains.Contains(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this PreparedPolygon <c>contains</c> a given geometry.
            </summary>
             <param name="geom">The test geometry</param>
             <returns>true if the test geometry is contained</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContains.FullTopologicalPredicate(GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the full topological <c>contains</c> predicate.<br/>
             Used when short-circuit tests are not conclusive.
            </summary>
             <param name="geom">The test geometry </param>
             <returns>true if this prepared polygon contains the test geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPolygonContainsProperly">
            <summary>
             Computes the <c>containsProperly</c> spatial relationship predicate for <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon" />s relative to all other {@link Geometry} classes.<br/>
             Uses short-circuit tests and indexing to improve performance.
            </summary>
            <remarks>
             <para>
             A Geometry A <c>containsProperly</c> another Geometry B iff
             all points of B are contained in the Interior of A.
             Equivalently, B is contained in A AND B does not intersect
             the Boundary of A.
             </para>
             <para>
             The advantage to using this predicate is that it can be computed
             efficiently, with no need to compute topology at individual points.
             In a situation with many geometries intersecting the boundary
             of the target geometry, this can make a performance difference.
             </para>
            </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContainsProperly.ContainsProperly(NetTopologySuite.Geometries.Prepared.PreparedPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>Computes the <c>containsProperly</c> predicate between a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/> and a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="prep">The prepared polygon</param>
            <param name="geom">A test geometry</param>
             <returns>true if the polygon properly contains the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContainsProperly.#ctor(NetTopologySuite.Geometries.Prepared.PreparedPolygon)">
            <summary>
             Creates an instance of this operation.
            </summary>
             <param name="prepPoly">The PreparedPolygon to evaluate</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonContainsProperly.ContainsProperly(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this PreparedPolygon containsProperly a given geometry.
            </summary>
            <param name="geom">The test geometry</param>
             <returns>true if the polygon properly contains the geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPolygonCovers">
            <summary>
             Computes the <c>Covers</c> spatial relationship predicate for a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/> relative to all other <see cref="T:GeoAPI.Geometries.IGeometry"/> classes.
            </summary>
             <remarks>
             Uses short-circuit tests and indexing to improve performance.
             <para>
             It is not possible to short-circuit in all cases, in particular in the case where the test geometry touches the polygon linework.
             In this case full topology must be computed.
             </para></remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonCovers.Covers(NetTopologySuite.Geometries.Prepared.PreparedPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the <c>Covers</c> spatial relationship predicate for a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/> relative to all other <see cref="T:GeoAPI.Geometries.IGeometry"/> classes.
            </summary>
             <param name="prep">The prepared polygon</param>
             <param name="geom">A test geometry</param>
             <returns>true if the polygon covers the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonCovers.#ctor(NetTopologySuite.Geometries.Prepared.PreparedPolygon)">
            <summary>
             Creates an instance of this operation.
            </summary>
             <param name="prepPoly">The PreparedPolygon to evaluate</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonCovers.Covers(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this PreparedPolygon <c>covers</c> a given geometry.
            </summary>
             <param name="geom">The test geometry</param>
             <returns>true if the test geometry is covered</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonCovers.FullTopologicalPredicate(GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the full topological <c>covers</c> predicate. Used when short-circuit tests are not conclusive.
            </summary>
             <param name="geom">The test geometry</param>
             <returns>true if this prepared polygon covers the test geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPolygonIntersects">
            <summary>
             Computes the <i>intersects</i> spatial relationship predicate
             for <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/>s relative to all other <see cref="T:GeoAPI.Geometries.IGeometry"/> classes.
            </summary>
             <remarks>Uses short-circuit tests and indexing to improve performance.</remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonIntersects.Intersects(NetTopologySuite.Geometries.Prepared.PreparedPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the intersects predicate between a <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/>
             and a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="prep">The prepared polygon</param>
             <param name="geom">A test geometry</param>
             <returns>true if the polygon intersects the geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonIntersects.#ctor(NetTopologySuite.Geometries.Prepared.PreparedPolygon)">
            <summary>
             Creates an instance of this operation.
            </summary>
             <param name="prepPoly">The prepared polygon</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonIntersects.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether this PreparedPolygon intersects a given geometry.
            </summary>
             <param name="geom">The test geometry</param>
             <returns>true if the test geometry intersects</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate">
            <summary>
             A base class for predicate operations on <see cref="T:NetTopologySuite.Geometries.Prepared.PreparedPolygon"/>s.
            </summary>
             <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate.#ctor(NetTopologySuite.Geometries.Prepared.PreparedPolygon)">
            <summary>
             Creates an instance of this operation.
            </summary>
             <param name="prepPoly">the PreparedPolygon to evaluate</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate.IsAllTestComponentsInTarget(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether all components of the test Geometry are contained in the target geometry.
            </summary>
             <remarks>Handles both linear and point components.</remarks>
             <param name="testGeom">A geometry to test</param>
             <returns>
             true if all componenta of the argument are contained in the target geometry
             </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate.IsAllTestComponentsInTargetInterior(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether all components of the test Geometry are contained in the interior of the target geometry.
            </summary>
             <remarks>Handles both linear and point components.</remarks>
             <param name="testGeom">A geometry to test</param>
             <returns>true if all componenta of the argument are contained in the target geometry interior</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate.IsAnyTestComponentInTarget(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether any component of the test Geometry intersects the area of the target geometry.
            </summary>
             <remarks>Handles test geometries with both linear and point components.</remarks>
             <param name="testGeom">A geometry to test</param>
             <returns>true if any component of the argument intersects the prepared area geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate.IsAnyTestComponentInTargetInterior(GeoAPI.Geometries.IGeometry)">
            <summary>
             Tests whether any component of the test Geometry intersects the interior of the target geometry.
            </summary>
             <remarks>Handles test geometries with both linear and point components.</remarks>
             <param name="testGeom">A geometry to test</param>
             <returns>true if any component of the argument intersects the prepared area geometry interior</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Prepared.PreparedPolygonPredicate.IsAnyTargetComponentInAreaTest(GeoAPI.Geometries.IGeometry,System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate})">
            <summary>
             Tests whether any component of the target geometry intersects the test geometry (which must be an areal geometry)
            </summary>
             <param name="testGeom">The test geometry</param>
             <param name="targetRepPts">The representative points of the target geometry</param>
             <returns>true if any component intersects the areal test geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.TopologyException">
            <summary> 
            Indicates an invalid or inconsistent topological situation encountered during processing
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.TopologyException.MsgWithCoord(System.String,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.TopologyException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:NetTopologySuite.Geometries.TopologyException.#ctor(System.String,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="pt"></param>
        </member>
        <member name="P:NetTopologySuite.Geometries.TopologyException.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.Triangle">
            <summary> 
            Represents a planar triangle, and provides methods for calculating various
            properties of triangles.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Triangle._p0">
            The coordinates of the vertices of the triangle
        </member>
        <member name="F:NetTopologySuite.Geometries.Triangle._p1">
            The coordinates of the vertices of the triangle
        </member>
        <member name="F:NetTopologySuite.Geometries.Triangle._p2">
            The coordinates of the vertices of the triangle
        </member>
        <member name="P:NetTopologySuite.Geometries.Triangle.P0">
            <summary>
            A corner point of the triangle
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Triangle.P1">
            <summary>
            A corner point of the triangle
            </summary>
        </member>
        <member name="P:NetTopologySuite.Geometries.Triangle.P2">
            <summary>
            A corner point of the triangle
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.IsAcute(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether a triangle is acute. A triangle is acute iff all interior
            angles are acute. This is a strict test - right triangles will return
            <tt>false</tt> A triangle which is not acute is either right or obtuse.
            <para/>
            Note: this implementation is not robust for angles very close to 90 degrees.
            </summary>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <returns>True if the triangle is acute.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.PerpendicularBisector(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the line which is the perpendicular bisector of the
            </summary>
             <param name="a">A point</param>
             <param name="b">Another point</param>
             <returns>The perpendicular bisector, as an HCoordinate line segment a-b.</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Circumcentre(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>Computes the circumcentre of a triangle.</summary>
             <remarks>
             The circumcentre is the centre of the circumcircle, 
             the smallest circle which encloses the triangle.
             It is also the common intersection point of the
             perpendicular bisectors of the sides of the triangle,
             and is the only point which has equal distance to all three
             vertices of the triangle.
             <para>
             The circumcentre does not necessarily lie within the triangle. For example,
             the circumcentre of an obtuse isoceles triangle lies outside the triangle.
             </para>
             <para>This method uses an algorithm due to J.R.Shewchuk which uses normalization
             to the origin to improve the accuracy of computation. (See <i>Lecture Notes
             on Geometric Robustness</i>, Jonathan Richard Shewchuk, 1999).
             </para>
             </remarks>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The circumcentre of the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Det(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the determinant of a 2x2 matrix. Uses standard double-precision
            arithmetic, so is susceptible to round-off error.
            </summary>
            <param name="m00">the [0,0] entry of the matrix</param>
            <param name="m01">the [0,1] entry of the matrix</param>
            <param name="m10">the [1,0] entry of the matrix</param>
            <param name="m11">the [1,1] entry of the matrix</param>
            <returns>The determinant</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.InCentre(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the incentre of a triangle.
            </summary>
             <remarks>
             The <c>InCentre</c> of a triangle is the point which is equidistant
             from the sides of the triangle.
             It is also the point at which the bisectors of the triangle's angles meet.
             It is the centre of the triangle's <c>InCircle</c>, which is the unique circle 
             that is tangent to each of the triangle's three sides.
             </remarks>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The point which is the incentre of the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Centroid(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>Computes the centroid (centre of mass) of a triangle.</summary>
             <remarks>
             This is also the point at which the triangle's three
             medians intersect (a triangle median is the segment from a vertex of the triangle to the
             midpoint of the opposite side).
             The centroid divides each median in a ratio of 2:1.
             The centroid always lies within the triangle.
             </remarks>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
            <returns>The centroid of the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.LongestSideLength(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>Computes the length of the longest side of a triangle</summary>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The length of the longest side of the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.AngleBisector(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>Computes the point at which the bisector of the angle ABC cuts the segment AC.</summary>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The angle bisector cut point</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Area(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the 2D area of a triangle.
             The area value is always non-negative.
            </summary>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The area of the triangle</returns>
             <seealso cref="M:NetTopologySuite.Geometries.Triangle.SignedArea(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.SignedArea(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the signed 2D area of a triangle.
            </summary>
             <remarks>
             <para>
             The area value is positive if the triangle is oriented CW,
             and negative if it is oriented CCW.
             </para>
             <para>
             The signed area value can be used to determine point orientation, but 
             the implementation in this method is susceptible to round-off errors.  
             Use <see cref="M:NetTopologySuite.Algorithm.CGAlgorithms.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/> for robust orientation
             calculation.
             </para>
             </remarks>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The area of the triangle</returns>
             <seealso cref="M:NetTopologySuite.Geometries.Triangle.Area(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
             <seealso cref="M:NetTopologySuite.Algorithm.CGAlgorithms.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Area3D(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Computes the 3D area of a triangle. 
             The value computed is alway non-negative.
            </summary>
             <param name="a">A vertex of the triangle</param>
             <param name="b">A vertex of the triangle</param>
             <param name="c">A vertex of the triangle</param>
             <returns>The 3D area of the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.InterpolateZ(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the Z-value (elevation) of an XY point 
            on a three-dimensional plane defined by a triangle
            whose vertices have Z-values.
            The defining triangle must not be degenerate
            (in other words, the triangle must enclose a 
            non-zero area),
            and must not be parallel to the Z-axis.
            <para/>
            This method can be used to interpolate
            the Z-value of a point inside a triangle
            (for example, of a TIN facet with elevations on the vertices).
            </summary>
            <param name="p">The point to compute the Z-value of</param>
            <param name="v0">A vertex of a triangle, with a Z ordinate</param>
            <param name="v1">A vertex of a triangle, with a Z ordinate</param>
            <param name="v2">A vertex of a triangle, with a Z ordinate</param>
            <returns>The computed Z-value (elevation) of the point</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new triangle with the given vertices.
            </summary>
            <param name="p0">A vertex</param>
            <param name="p1">A vertex</param>
            <param name="p2">A vertex</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.InCentre">
            <summary>
            Computes the <c>InCentre</c> of this triangle
            </summary>
            <remarks>The <c>InCentre</c> of a triangle is the point which is equidistant
            from the sides of the triangle.
            This is also the point at which the bisectors of the angles meet.
            It is the centre of the triangle's <c>InCircle</c>,
            which is the unique circle that is tangent to each of the triangle's three sides.
            </remarks>
            <returns>
            The point which is the InCentre of the triangle.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.IsAcute">
            <summary>
            Tests whether this triangle is acute. A triangle is acute iff all interior
            angles are acute. This is a strict test - right triangles will return
            <tt>false</tt> A triangle which is not acute is either right or obtuse.
            <para/>
            Note: this implementation is not robust for angles very close to 90
            degrees.
            </summary>
            <returns><c>true</c> if this triangle is acute</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Circumcentre">
            <summary>
            Computes the circumcentre of this triangle. The circumcentre is the centre
            of the circumcircle, the smallest circle which encloses the triangle. It is
            also the common intersection point of the perpendicular bisectors of the
            sides of the triangle, and is the only point which has equal distance to
            all three vertices of the triangle.
            <para/>
            The circumcentre does not necessarily lie within the triangle.
            <para/>
            This method uses an algorithm due to J.R.Shewchuk which uses normalization
            to the origin to improve the accuracy of computation. (See <i>Lecture Notes
            on Geometric Robustness</i>, Jonathan Richard Shewchuk, 1999).
            </summary>
            <returns>The circumcentre of this triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Centroid">
            <summary>
            Computes the centroid (centre of mass) of this triangle. This is also the
            point at which the triangle's three medians intersect (a triangle median is
            the segment from a vertex of the triangle to the midpoint of the opposite
            side). The centroid divides each median in a ratio of 2:1.
            <para/>
            The centroid always lies within the triangle.
            </summary>
            <returns>The centroid of this triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.LongestSideLength">
            <summary>
            Computes the length of the longest side of this triangle
            </summary>
            <returns>The length of the longest side of this triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Area">
            <summary>
            Computes the 2D area of this triangle. The area value is always
            non-negative.
            </summary>
            <returns>The area of this triangle</returns>
            <seealso cref="M:NetTopologySuite.Geometries.Triangle.SignedArea"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.SignedArea">
            <summary>
            Computes the signed 2D area of this triangle. The area value is positive if
            the triangle is oriented CW, and negative if it is oriented CCW.
            <para/>
            The signed area value can be used to determine point orientation, but the
            implementation in this method is susceptible to round-off errors. Use
            <see cref="M:NetTopologySuite.Algorithm.CGAlgorithms.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
            for robust orientation calculation.
            </summary>
            <returns>The signed 2D area of this triangle</returns>
            <seealso cref="M:NetTopologySuite.Algorithm.CGAlgorithms.OrientationIndex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.Area3D">
            <summary>
            Computes the 3D area of this triangle. The value computed is alway
            non-negative.
            </summary>
            <returns>The 3D area of this triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Geometries.Triangle.InterpolateZ(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the Z-value (elevation) of an XY point on a three-dimensional
            plane defined by this triangle (whose vertices must have Z-values). This
            triangle must not be degenerate (in other words, the triangle must enclose
            a non-zero area), and must not be parallel to the Z-axis.
            <para/>
            This method can be used to interpolate the Z-value of a point inside this
            triangle (for example, of a TIN facet with elevations on the vertices).
            </summary>
            <param name="p">The point to compute the Z-value of</param>
            <returns>The computed Z-value (elevation) of the point</returns>
        </member>
        <member name="T:NetTopologySuite.Index.Bintree.Interval">
            <summary> 
            Represents an (1-dimensional) closed interval on the Real number line.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Interval.Min">
            <summary>
            Gets or sets a value indicating the minimum value of the closed interval.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Interval.Max">
            <summary>
            Gets or sets a value indicating the maximum value of the closed interval.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Interval.Width">
            <summary>
            Gets the width of the interval (<see cref="P:NetTopologySuite.Index.Bintree.Interval.Max"/> - <see cref="P:NetTopologySuite.Index.Bintree.Interval.Min"/>)
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Interval.Centre">
            <summary>
            Gets the centre of the interval (<see cref="P:NetTopologySuite.Index.Bintree.Interval.Min"/> + <see cref="P:NetTopologySuite.Index.Bintree.Interval.Width"/> * 0.5d)
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.#ctor">
            <summary>
            Creates a new interval instance, setting <see cref="P:NetTopologySuite.Index.Bintree.Interval.Min"/>=<see cref="P:NetTopologySuite.Index.Bintree.Interval.Max"/>=0d;
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new interval instance, setting <see cref="P:NetTopologySuite.Index.Bintree.Interval.Min"/>=<paramref name="min"/> and <see cref="P:NetTopologySuite.Index.Bintree.Interval.Max"/>=<paramref name="max"/>;
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.#ctor(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Creates a new interval instance, setting <see cref="P:NetTopologySuite.Index.Bintree.Interval.Min"/>=<paramref name="interval.Min.Min"/> and <see cref="P:NetTopologySuite.Index.Bintree.Interval.Max"/>=<paramref name="interval.Max.Max"/>.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.Init(System.Double,System.Double)">
            <summary>
            Method to initialize the interval with the given <paramref name="min"/> and <paramref name="max"/> values. <br/>
            If <paramref name="max"/> &lt; <paramref name="min"/>, their values are exchanged.
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.ExpandToInclude(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Method to expand this interval to contain <paramref name="interval"/>.
            </summary>
            <param name="interval">The interval to contain.</param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.Overlaps(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Function to test if this <see cref="T:NetTopologySuite.Index.Bintree.Interval"/> overlaps <paramref name="interval"/>.
            </summary>
            <param name="interval">The interval to test</param>
            <returns><c>true</c> if this interval overlaps <paramref name="interval"/></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.Overlaps(System.Double,System.Double)">
            <summary>
            Function to test if this <see cref="T:NetTopologySuite.Index.Bintree.Interval"/> overlaps the interval R[<paramref name="min"/>, <paramref name="max"/>].
            </summary>
            <param name="min">The mimimum value of the interval</param>
            <param name="max">The maximum value of the interval</param>
            <returns><c>true</c> if this interval overlaps the interval R[<paramref name="min"/>, <paramref name="max"/>]</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.Contains(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Function to test if this <see cref="T:NetTopologySuite.Index.Bintree.Interval"/> contains <paramref name="interval"/>.
            </summary>
            <remarks>This is more rigid than <see cref="M:NetTopologySuite.Index.Bintree.Interval.Overlaps(NetTopologySuite.Index.Bintree.Interval)"/></remarks>
            <param name="interval">The interval to test</param>
            <returns><c>true</c> if this interval contains <paramref name="interval"/></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.Contains(System.Double,System.Double)">
            <summary>
            Function to test if this <see cref="T:NetTopologySuite.Index.Bintree.Interval"/> contains the interval R[<paramref name="min"/>, <paramref name="max"/>].
            </summary>
            <remarks>This is more rigid than <see cref="M:NetTopologySuite.Index.Bintree.Interval.Overlaps(System.Double,System.Double)"/></remarks>
            <param name="min">The mimimum value of the interval</param>
            <param name="max">The maximum value of the interval</param>
            <returns><c>true</c> if this interval contains the interval R[<paramref name="min"/>, <paramref name="max"/>]</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Interval.Contains(System.Double)">
            <summary>
            Function to test if this <see cref="T:NetTopologySuite.Index.Bintree.Interval"/> contains the value <paramref name="p"/>.
            </summary>
            <param name="p">The value to test</param>
            <returns><c>true</c> if this interval contains the value <paramref name="p"/></returns>
        </member>
        <member name="T:NetTopologySuite.Index.Bintree.Bintree`1">
            <summary>
            An <c>BinTree</c> (or "Binary Interval Tree")
            is a 1-dimensional version of a quadtree.
            It indexes 1-dimensional intervals (which may
            be the projection of 2-D objects on an axis).
            It supports range searching
            (where the range may be a single point).
            </summary>
            <remarks>
            <para>
            This structure is dynamic - 
            new items can be added at any time,   
            and it will support deletion of items 
            (although this is not currently implemented).
            </para>
            <para>
            This implementation does not require specifying the extent of the inserted
            items beforehand.  It will automatically expand to accomodate any extent
            of dataset.</para>
            <para>This index is different to the Interval Tree of Edelsbrunner
            or the Segment Tree of Bentley.</para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.EnsureExtent(NetTopologySuite.Index.Bintree.Interval,System.Double)">
            <summary>
            Ensure that the Interval for the inserted item has non-zero extents.
            Use the current minExtent to pad it, if necessary.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Bintree`1.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Bintree`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Bintree`1.NodeSize">
            <summary>
            Compute the total number of nodes in the tree.
            </summary>
            <returns>The number of nodes in the tree.</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.Insert(NetTopologySuite.Index.Bintree.Interval,`0)">
            <summary>
            
            </summary>
            <param name="itemInterval"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.Remove(NetTopologySuite.Index.Bintree.Interval,`0)">
            <summary>
            Removes a single item from the tree.
            </summary>
            <param name="itemInterval">itemEnv the Envelope of the item to be removed</param>
            <param name="item">the item to remove</param>
            <returns><c>true</c> if the item was found (and thus removed)</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.Query(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.Query(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Queries the tree to find all candidate items which 
            may overlap the query interval.
            If the query interval is <tt>null</tt>, all items in the tree are found.
            <c>min</c> and <c>max</c> may be the same value.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.Query(NetTopologySuite.Index.Bintree.Interval,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds items in the tree which potentially overlap the query interval
            to the given collection.
            If the query interval is <c>null</c>, add all items in the tree.
            </summary>
            <param name="interval">A query interval, or <c>null</c></param>
            <param name="foundItems">The candidate items found</param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Bintree`1.CollectStats(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Bintree.Key">
            <summary>
            A Key is a unique identifier for a node in a tree.
            It contains a lower-left point and a level number. The level number
            is the power of two for the size of the node envelope.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Key.ComputeLevel(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Key.#ctor(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Key.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Key.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Key.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Key.ComputeKey(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Return a square envelope containing the argument envelope,
            whose extent is a power of two and which is based at a power of 2.
            </summary>
            <param name="itemInterval"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Key.ComputeInterval(System.Int32,NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="itemInterval"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Bintree.Node`1">
            <summary>
            A node of a <c>Bintree</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.CreateNode(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Creates a node
            </summary>
            <param name="itemInterval">The interval of the node item</param>
            <returns>A new node</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.CreateExpanded(NetTopologySuite.Index.Bintree.Node{`0},NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Creates a larger node, that contains both <paramref name="node.Interval.Interval"/> and <paramref name="addInterval"/>
            If <paramref name="node"/> is <c>null</c>, a node for <paramref name="addInterval"/> is created.
            </summary>
            <param name="node">The original node</param>
            <param name="addInterval">The additional interval</param>
            <returns>A new node</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.#ctor(NetTopologySuite.Index.Bintree.Interval,System.Int32)">
            <summary>
            Creates a new node instance
            </summary>
            <param name="interval">The node's interval</param>
            <param name="level">The node's level</param>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.Node`1.Interval">
            <summary>
            Gets the node's <see cref="P:NetTopologySuite.Index.Bintree.Node`1.Interval"/>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.IsSearchMatch(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="itemInterval"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.GetNode(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Returns the subnode containing the envelope.
            Creates the node if
            it does not already exist.
            </summary>
            <param name="searchInterval"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.Find(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Returns the smallest existing
            node containing the envelope.
            </summary>
            <param name="searchInterval"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.Insert(NetTopologySuite.Index.Bintree.Node{`0})">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.GetSubnode(System.Int32)">
            <summary>
            Get the subnode for the index.
            If it doesn't exist, create it.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Node`1.CreateSubnode(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Index.Bintree.NodeBase`1">
            <summary> 
            The base class for nodes in a <c>Bintree</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.NodeBase`1.GetSubnodeIndex(NetTopologySuite.Index.Bintree.Interval,System.Double)">
            <summary> 
            Returns the index of the subnode that wholely contains the given interval.
            If none does, returns -1.
            </summary>
            <param name="interval"></param>
            <param name="centre"></param>
        </member>
        <member name="F:NetTopologySuite.Index.Bintree.NodeBase`1._items">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Bintree.NodeBase`1.Subnode">
            <summary>
            Subnodes are numbered as follows:
            0 | 1        
            .
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.NodeBase`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.NodeBase`1.AddAllItems(System.Collections.Generic.IList{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.NodeBase`1.IsSearchMatch(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.NodeBase`1.AddAllItemsFromOverlapping(NetTopologySuite.Index.Bintree.Interval,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds items in the tree which potentially overlap the query interval
            to the given collection.
            If the query interval is <tt>null</tt>, add all items in the tree.
            </summary>
            <param name="interval">A query interval, or <c>null</c></param>
            <param name="resultItems">The candidate items found</param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.NodeBase`1.Remove(NetTopologySuite.Index.Bintree.Interval,`0)">
            <summary>
            Removes a single item from this subtree.
            </summary>
            <param name="itemInterval">The envelope containing the item</param>
            <param name="item">The item to remove</param>
            <returns><c>true</c> if the item was found and removed</returns>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.IsPrunable">
            <summary>
            Gets whether this node is prunable
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.HasChildren">
            <summary>
            Gets whether this node has any children
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.HasItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.Depth">
            <summary>
            Gets whether this node has any subnodes
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Bintree.NodeBase`1.NodeCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Bintree.Root`1">
            <summary> 
            The root node of a single <c>Bintree</c>.
            It is centred at the origin,
            and does not have a defined extent.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Root`1.Insert(NetTopologySuite.Index.Bintree.Interval,`0)">
            <summary> 
            Insert an item into the tree this is the root of.
            </summary>
            <param name="itemInterval"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Root`1.InsertContained(NetTopologySuite.Index.Bintree.Node{`0},NetTopologySuite.Index.Bintree.Interval,`0)">
            <summary> 
            Insert an item which is known to be contained in the tree rooted at
            the given Node.  Lower levels of the tree will be created
            if necessary to hold the item.
            </summary>
            <param name="tree"></param>
            <param name="itemInterval"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Bintree.Root`1.IsSearchMatch(NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            The root node matches all searches.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="T:NetTopologySuite.Index.KdTree.IKdNodeVisitor`1">
            <summary>
            A visitor for <see cref="T:NetTopologySuite.Index.KdTree.KdNode`1"/>s in a <see cref="T:NetTopologySuite.Index.KdTree.KdTree`1"/> index.
            </summary>
            <version>1.7</version>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.IKdNodeVisitor`1.Visit(NetTopologySuite.Index.KdTree.KdNode{`0})">
            <summary>
            Visits a node.
            </summary>
            <param name="node">The node to visit</param>
        </member>
        <member name="T:NetTopologySuite.Index.KdTree.KdNode`1">
            <summary>
            A node of a <see cref="T:NetTopologySuite.Index.KdTree.KdTree`1"/>, which represents one or more points in the same location.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <author>dskea</author>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdNode`1.#ctor(System.Double,System.Double,`0)">
            <summary>
            Creates a new KdNode.
            </summary>
            <param name="x">coordinate of point</param>
            <param name="y">coordinate of point</param>
            <param name="data">A data objects to associate with this node</param>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdNode`1.#ctor(GeoAPI.Geometries.Coordinate,`0)">
            <summary>
            Creates a new KdNode.
            </summary>
            <param name="p">The point location of new node</param>
            <param name="data">A data objects to associate with this node</param>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.X">
            <summary>
            Gets x-ordinate of this node
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.Y">
            <summary>
            Gets y-ordinate of this node
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.Coordinate">
            <summary>
            Gets the location of this node
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.Data">
            <summary>
            Gets the user data object associated with this node.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.Left">
            <summary>
            Gets or sets the left node of the tree
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.Right">
            <summary>
            Gets or sets the right node of the tree
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.Count">
            <summary>
            Gets the number of inserted points that are coincident at this location.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdNode`1.IsRepeated">
            <summary>
            Gets whether more than one point with this value have been inserted (up to the tolerance)
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Index.KdTree.KdTree`1">
            <summary>
            An implementation of a 2-D KD-Tree. KD-trees provide fast range searching on point data.
            </summary>
            <remarks>
            This implementation supports detecting and snapping points which are closer
            than a given distance tolerance. 
            If the same point (up to tolerance) is inserted
            more than once , it is snapped to the existing node.
            In other words, if a point is inserted which lies within the tolerance of a node already in the index,
            it is snapped to that node.
            When a point is snapped to a node then a new node is not created but the count of the existing node
            is incremented.
            If more than one node in the tree is within tolerance of an inserted point, 
            the closest and then lowest node is snapped to.
            </remarks>
            <typeparam name="T">The type of the user data object</typeparam>
            <author>David Skea</author>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.ToCoordinates(System.Collections.Generic.ICollection{NetTopologySuite.Index.KdTree.KdNode{`0}})">
            <summary>
             Converts a collection of<see cref= "T:NetTopologySuite.Index.KdTree.KdNode`1" /> s to an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
             </summary>
             <param name="kdnodes">A collection of nodes</param>
             <returns>An array of the coordinates represented by the nodes</returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.ToCoordinates(System.Collections.Generic.ICollection{NetTopologySuite.Index.KdTree.KdNode{`0}},System.Boolean)">
            <summary>
             Converts a collection of <see cref="T:NetTopologySuite.Index.KdTree.KdNode`1"/>{@link KdNode}s 
             to an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s,
             specifying whether repeated nodes should be represented
             by multiple coordinates.
             </summary>
             <param name="kdnodes">a collection of nodes</param>
             <param name="includeRepeated">true if repeated nodes should 
             be included multiple times</param>
             <returns>An array of the coordinates represented by the nodes</returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.#ctor">
            <summary>
            Creates a new instance of a KdTree with a snapping tolerance of 0.0.
            (I.e. distinct points will <i>not</i> be snapped)
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.#ctor(System.Double)">
            <summary>
            Creates a new instance of a KdTree with a snapping distance 
            tolerance. Points which lie closer than the tolerance to a point already 
            in the tree will be treated as identical to the existing point.
            </summary>
            <param name="tolerance">The tolerance distance for considering two points equal</param>
        </member>
        <member name="P:NetTopologySuite.Index.KdTree.KdTree`1.IsEmpty">
            <summary>
            Tests whether the index contains any items.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.Insert(GeoAPI.Geometries.Coordinate)">
            <summary>
            Inserts a new point in the kd-tree, with no data.
            </summary>
            <param name="p">The point to insert</param>
            <returns>The kdnode containing the point</returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.Insert(GeoAPI.Geometries.Coordinate,`0)">
            <summary>
            Inserts a new point into the kd-tree.
            </summary>
            <param name="p">The point to insert</param>
            <param name="data">A data item for the point</param>
            <returns>
            A new KdNode if a new point is inserted, else an existing
            node is returned with its counter incremented. This can be checked
            by testing returnedNode.getCount() > 1.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.FindBestMatchNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds the node in the tree which is the best match for a point
            being inserted.
            The match is made deterministic by returning the lowest of any nodes which
            lie the same distance from the point.
            There may be no match if the point is not within the distance tolerance of any
            existing node.
            </summary>
            <param name="p">The point being inserted</param>
            <returns>
            <list type="Bullet">
            <item>the best matching node</item>
            <item>null if no match was found</item>
            </list>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.InsertExact(GeoAPI.Geometries.Coordinate,`0)">
            <summary>
            Inserts a point known to be beyond the distance tolerance of any existing node.
            The point is inserted at the bottom of the exact splitting path, 
            so that tree shape is deterministic.
            </summary>
            <param name="p">The point to insert</param>
            <returns>
            <list type="Bullet">
            <item>The data for the point</item>
            <item>The created node</item>
            </list>
            </returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.Query(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.KdTree.IKdNodeVisitor{`0})">
            <summary>
            Performs a range search of the points in the index. 
            </summary>
            <param name="queryEnv">The range rectangle to query</param>
            <param name="visitor"></param>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.Query(GeoAPI.Geometries.Envelope)">
            <summary>
            Performs a range search of the points in the index. 
            </summary>
            <param name="queryEnv">The range rectangle to query</param>
            <returns>A collection of the KdNodes found</returns>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.Query(GeoAPI.Geometries.Envelope,System.Collections.Generic.IList{NetTopologySuite.Index.KdTree.KdNode{`0}})">
            <summary>
            Performs a range search of the points in the index.
            </summary>
            <param name="queryEnv">The range rectangle to query</param>
            <param name="result">A collection to accumulate the result nodes into</param>
        </member>
        <member name="M:NetTopologySuite.Index.KdTree.KdTree`1.NearestNeighbor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Performs a nearest neighbor search of the points in the index.
            </summary>
            <param name="coord">The point to search the nearset neighbor for</param>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.Interval">
            <summary> 
            A contiguous portion of 1D-space. Used internally by SIRtree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.#ctor(NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.Interval.Centre">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.ExpandToInclude(NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns><c>this</c></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.ExpandedBy(NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns><c>this</c></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.Intersects(NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.Interval.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.BoundablePair`1">
            <summary>
            A pair of <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s, whose leaf items 
            support a distance metric between them.
            Used to compute the distance between the members,
            and to expand a member relative to the other
            in order to produce new branches of the 
            Branch-and-Bound evaluation tree.
            Provides an ordering based on the distance between the members,
            which allows building a priority queue by minimum distance.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.BoundablePair`1.#ctor(GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,`0},GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,`0},NetTopologySuite.Index.Strtree.IItemDistance{GeoAPI.Geometries.Envelope,`0})">
            <summary>
            Creates an instance of this class with the given <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s and the <see cref="T:NetTopologySuite.Index.Strtree.IItemDistance`2"/> function.
            </summary>
            <param name="boundable1">The first boundable</param>
            <param name="boundable2">The second boundable</param>
            <param name="itemDistance">The item distance function</param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.BoundablePair`1.GetBoundable(System.Int32)">
            <summary>
            Gets one of the member <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s in the pair 
            (indexed by [0, 1]).
            </summary>
            <param name="i">The index of the member to return (0 or 1)</param>
            <returns>The chosen member</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.BoundablePair`1.GetDistance">
            <summary>
            Computes the distance between the <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s in this pair.
            The boundables are either composites or leaves.
            If either is composite, the distance is computed as the minimum distance
            between the bounds.  
            If both are leaves, the distance is computed by <see cref="M:NetTopologySuite.Index.Strtree.IItemDistance`2.Distance(GeoAPI.Geometries.IBoundable{`0,`1},GeoAPI.Geometries.IBoundable{`0,`1})"/>.
            </summary>
            <returns>The distance between the <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s in this pair.</returns>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.BoundablePair`1.Distance">
            <summary>
            Gets the minimum possible distance between the Boundables in
            this pair. 
            If the members are both items, this will be the
            exact distance between them.
            Otherwise, this distance will be a lower bound on 
            the distances between the items in the members.
            </summary>
            <returns>The exact or lower bound distance for this pair</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.BoundablePair`1.CompareTo(NetTopologySuite.Index.Strtree.BoundablePair{`0})">
            <summary>
            Compares two pairs based on their minimum distances
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.BoundablePair`1.IsLeaves">
            <summary>
            Tests if both elements of the pair are leaf nodes
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.BoundablePair`1.ExpandToQueue(NetTopologySuite.Utilities.PriorityQueue{NetTopologySuite.Index.Strtree.BoundablePair{`0}},System.Double)">
            <summary>
            For a pair which is not a leaf 
            (i.e. has at least one composite boundable)
            computes a list of new pairs 
            from the expansion of the larger boundable.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.GeometryItemDistance">
            <summary>
            An <see cref="T:NetTopologySuite.Index.Strtree.IItemDistance`2"/> function for
            items which are <see cref="T:GeoAPI.Geometries.IGeometry"/> using the <see cref="M:GeoAPI.Geometries.IGeometry.Distance(GeoAPI.Geometries.IGeometry)"/> method.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.GeometryItemDistance.Distance(GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,GeoAPI.Geometries.IGeometry},GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,GeoAPI.Geometries.IGeometry})">
            <summary>
            Computes the distance between two <see cref="T:GeoAPI.Geometries.IGeometry"/> items, 
            using the <see cref="M:GeoAPI.Geometries.IGeometry.Distance(GeoAPI.Geometries.IGeometry)"/> method.
            </summary>
            <param name="item1">An item which is a geometry.</param>
            <param name="item2">An item which is a geometry.</param>
            <exception cref="T:System.InvalidCastException">if either item is not a Geometry</exception>
            <returns>The distance between the two items.</returns>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.IItemDistance`2">
            <summary>
            A function method which computes the distance
            between two <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s in an <see cref="T:NetTopologySuite.Index.Strtree.STRtree`1"/>.
            Used for Nearest Neighbour searches.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.IItemDistance`2.Distance(GeoAPI.Geometries.IBoundable{`0,`1},GeoAPI.Geometries.IBoundable{`0,`1})">
            <summary>
            Computes the distance between two items.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <exception cref="T:System.ArgumentException">If the metric is not applicable to the arguments</exception>
            <returns>The distance between <paramref name="item1"/> and <paramref name="item2"/>.</returns>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.AbstractNode`2">
            <summary> 
            A node of an <see cref="T:NetTopologySuite.Index.Strtree.AbstractSTRtree`2"/>. A node is one of:
            <list type="Bullet">
            <item>empty</item>
            <item>an <i>interior node</i> containing child <see cref="T:NetTopologySuite.Index.Strtree.AbstractNode`2"/>s</item>
            <item>a <i>leaf node</i> containing data items (<see cref="T:NetTopologySuite.Index.Strtree.ItemBoundable`2"/>s).</item>
            </list>
            A node stores the bounds of its children, and its level within the index tree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractNode`2.#ctor(System.Int32)">
            <summary> 
            Constructs an AbstractNode at the given level in the tree
            </summary>
            <param name="level">
            0 if this node is a leaf, 1 if a parent of a leaf, and so on; the
            root node will have the highest level.
            </param>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractNode`2.ChildBoundables">
            <summary> 
            Returns either child <see cref="T:NetTopologySuite.Index.Strtree.AbstractNode`2"/>s, or if this is a leaf node, real data (wrapped
            in <see cref="T:NetTopologySuite.Index.Strtree.ItemBoundable`2"/>s).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractNode`2.ComputeBounds">
            <summary>
            Returns a representation of space that encloses this Boundable,
            preferably not much bigger than this Boundable's boundary yet fast to
            test for intersection with the bounds of other Boundables. The class of
            object returned depends on the subclass of AbstractSTRtree.
            </summary>
            <returns> 
            An Envelope (for STRtrees), an Interval (for SIRtrees), or other
            object (for other subclasses of AbstractSTRtree).
            </returns>        
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractNode`2.Bounds">
            <summary>
            Gets the bounds of this node
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractNode`2.Level">
            <summary>
            Returns 0 if this node is a leaf, 1 if a parent of a leaf, and so on; the
            root node will have the highest level.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractNode`2.Count">
            <summary>
            Gets the count of the <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s at this node.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractNode`2.IsEmpty">
            <summary>
            Tests whether there are any <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s at this node.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractNode`2.AddChildBoundable(GeoAPI.Geometries.IBoundable{`0,`1})">
            <summary>
            Adds either an AbstractNode, or if this is a leaf node, a data object
            (wrapped in an ItemBoundable).
            </summary>
            <param name="childBoundable"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.AbstractSTRtree`2">
            <summary>
            Base class for STRtree and SIRtree. STR-packed R-trees are described in:
            P. Rigaux, Michel Scholl and Agnes Voisard. <i>Spatial Databases With
            Application To GIS</i>. Morgan Kaufmann, San Francisco, 2002.
            <para>
            This implementation is based on <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s rather than just <see cref="T:NetTopologySuite.Index.Strtree.AbstractNode`2"/>s,
            because the STR algorithm operates on both nodes and
            data, both of which are treated as <see cref="T:GeoAPI.Geometries.IBoundable`2"/>s.
            </para>
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.IIntersectsOp">
            <returns>
            A test for intersection between two bounds, necessary because subclasses
            of AbstractSTRtree have different implementations of bounds.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.IIntersectsOp.Intersects(`0,`0)">
            <summary>
            For STRtrees, the bounds will be Envelopes; 
            for SIRtrees, Intervals;
            for other subclasses of AbstractSTRtree, some other class.
            </summary>
            <param name="aBounds">The bounds of one spatial object.</param>
            <param name="bBounds">The bounds of another spatial object.</param>                        
            <returns>Whether the two bounds intersect.</returns>
        </member>
        <member name="F:NetTopologySuite.Index.Strtree.AbstractSTRtree`2._itemBoundables">
            Set to <tt>null</tt> when index is built, to avoid retaining memory.
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.#ctor(System.Int32)">
            <summary> 
            Constructs an AbstractSTRtree with the specified maximum number of child
            nodes that a node may have.
            </summary>
            <param name="nodeCapacity"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.Build">
            <summary> 
            Creates parent nodes, grandparent nodes, and so forth up to the root
            node, for the data that has been inserted into the tree. Can only be
            called once, and thus can be called only after all of the data has been
            inserted into the tree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.CreateNode(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.CreateParentBoundables(System.Collections.Generic.IList{GeoAPI.Geometries.IBoundable{`0,`1}},System.Int32)">
            <summary>
            Sorts the childBoundables then divides them into groups of size M, where
            M is the node capacity.
            </summary>
            <param name="childBoundables"></param>
            <param name="newLevel"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.CreateHigherLevels(System.Collections.Generic.IList{GeoAPI.Geometries.IBoundable{`0,`1}},System.Int32)">
            <summary>
            Creates the levels higher than the given level.
            </summary>
            <param name="boundablesOfALevel">The level to build on.</param>
            <param name="level">the level of the Boundables, or -1 if the boundables are item
            boundables (that is, below level 0).</param>
            <returns>The root, which may be a ParentNode or a LeafNode.</returns>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.NodeCapacity">
            <summary> 
            Returns the maximum number of child nodes that a node may have.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.IsEmpty">
            <summary>
            Tests whether the index contains any items.
            This method does not build the index,
            so items can still be inserted after it has been called.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.Count">
            <summary>
            Gets the number of elements in the tree
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.Query(`0)">
            <summary>
            Also builds the tree, if necessary.
            </summary>
            <param name="searchBounds"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.ItemsTree">
            <summary>
            Gets a tree structure (as a nested list) 
            corresponding to the structure of the items and nodes in this tree.
            The returned Lists contain either Object items, 
            or Lists which correspond to subtrees of the tree
            Subtrees which do not contain any items are not included.
            Builds the tree if necessary.
            </summary>
            <returns>a List of items and/or Lists</returns>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.IntersectsOp">
            <returns>
            A test for intersection between two bounds, necessary because subclasses
            of AbstractSTRtree have different implementations of bounds.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.AbstractSTRtree`2.Remove(`0,`1)">
            <summary>
            Removes an item from the tree.
            (Builds the tree, if necessary.)
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.IBoundable">
            <summary>
            A spatial object in an AbstractSTRtree.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.IBoundable.Bounds">
            <summary> 
            Returns a representation of space that encloses this Boundable, preferably
            not much bigger than this Boundable's boundary yet fast to test for intersection
            with the bounds of other Boundables. The class of object returned depends
            on the subclass of AbstractSTRtree.
            </summary>
            <returns> 
            An Envelope (for STRtrees), an Interval (for SIRtrees), or other object
            (for other subclasses of AbstractSTRtree).
            </returns>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.ItemBoundable`2">
            <summary>
            Boundable wrapper for a non-Boundable spatial object. Used internally by
            AbstractSTRtree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.ItemBoundable`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="bounds"></param>
            <param name="item"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.ItemBoundable`2.Bounds">
            <summary>
            The bounds
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.ItemBoundable`2.Item">
            <summary>
            The item
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.SIRtree`1">
            <summary>
            One-dimensional version of an STR-packed R-tree. SIR stands for
            "Sort-Interval-Recursive". STR-packed R-trees are described in:
            P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With
            Application To GIS. Morgan Kaufmann, San Francisco, 2002.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.AnonymousAbstractNodeImpl.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="nodeCapacity"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.AnonymousAbstractNodeImpl.ComputeBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.#ctor">
            <summary> 
            Constructs an SIRtree with the default (10) node capacity.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.#ctor(System.Int32)">
            <summary> 
            Constructs an SIRtree with the given maximum number of child nodes that
            a node may have.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.CreateNode(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.Insert(System.Double,System.Double,`0)">
            <summary> 
            Inserts an item having the given bounds into the tree.
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.Query(System.Double)">
            <summary>
            Returns items whose bounds intersect the given value.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.Query(System.Double,System.Double)">
            <summary> 
            Returns items whose bounds intersect the given bounds.
            </summary>
            <param name="x1">Possibly equal to x2.</param>
            <param name="x2">Possibly equal to x1.</param>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.SIRtree`1.IntersectsOp">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.SIRtree`1.GetComparer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Index.Strtree.STRtree`1">
            <summary>  
            A query-only R-tree created using the Sort-Tile-Recursive (STR) algorithm.
            For two-dimensional spatial data. 
            The STR packed R-tree is simple to implement and maximizes space
            utilization; that is, as many leaves as possible are filled to capacity.
            Overlap between nodes is far less than in a basic R-tree. However, once the
            tree has been built (explicitly or on the first call to #query), items may
            not be added or removed. 
            Described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With
            Application To GIS. Morgan Kaufmann, San Francisco, 2002.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.#ctor">
            <summary> 
            Constructs an STRtree with the default (10) node capacity.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.#ctor(System.Int32)">
            <summary> 
            Constructs an STRtree with the given maximum number of child nodes that
            a node may have.
            </summary>
            <remarks>The minimum recommended capacity setting is 4.</remarks>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.Avg(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.CentreX(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.CentreY(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.CreateParentBoundables(System.Collections.Generic.IList{GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,`0}},System.Int32)">
            <summary>
            Creates the parent level for the given child level. First, orders the items
            by the x-values of the midpoints, and groups them into vertical slices.
            For each slice, orders the items by the y-values of the midpoints, and
            group them into runs of size M (the node capacity). For each run, creates
            a new (parent) node.
            </summary>
            <param name="childBoundables"></param>
            <param name="newLevel"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.CreateParentBoundablesFromVerticalSlices(System.Collections.Generic.IList{GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,`0}}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="verticalSlices"></param>
            <param name="newLevel"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.CreateParentBoundablesFromVerticalSlice(System.Collections.Generic.IList{GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,`0}},System.Int32)">
            <summary>
            
            </summary>
            <param name="childBoundables"></param>
            <param name="newLevel"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.VerticalSlices(System.Collections.Generic.IList{GeoAPI.Geometries.IBoundable{GeoAPI.Geometries.Envelope,`0}},System.Int32)">
            <summary>
            
            </summary>
            <param name="childBoundables">Must be sorted by the x-value of the envelope midpoints.</param>
            <param name="sliceCount"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.CreateNode(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Index.Strtree.STRtree`1.IntersectsOp">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.Insert(GeoAPI.Geometries.Envelope,`0)">
            <summary>
            Inserts an item having the given bounds into the tree.
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.Query(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns items whose bounds intersect the given envelope.
            </summary>
            <param name="searchEnv"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.Query(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.IItemVisitor{`0})">
            <summary>
            Returns items whose bounds intersect the given envelope.
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.Remove(GeoAPI.Geometries.Envelope,`0)">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="itemEnv">The Envelope of the item to remove.</param>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found.</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.GetComparer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.NearestNeighbour(NetTopologySuite.Index.Strtree.IItemDistance{GeoAPI.Geometries.Envelope,`0})">
            <summary>
            Finds the two nearest items in the tree, 
            using <see cref="T:NetTopologySuite.Index.Strtree.IItemDistance`2"/> as the distance metric.
            A Branch-and-Bound tree traversal algorithm is used
            to provide an efficient search.
            </summary>
            <param name="itemDist">A distance metric applicable to the items in this tree</param>
            <returns>The pair of the nearest items</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.NearestNeighbour(GeoAPI.Geometries.Envelope,`0,NetTopologySuite.Index.Strtree.IItemDistance{GeoAPI.Geometries.Envelope,`0})">
            <summary>
            Finds the item in this tree which is nearest to the given <paramref name="item"/>, 
            using <see cref="T:NetTopologySuite.Index.Strtree.IItemDistance`2"/> as the distance metric.
            A Branch-and-Bound tree traversal algorithm is used
            to provide an efficient search.
            <para/>
            The query <paramref name="item"/> does <b>not</b> have to be 
            contained in the tree, but it does 
            have to be compatible with the <paramref name="itemDist"/> 
            distance metric. 
            </summary>
            <param name="env">The envelope of the query item</param>
            <param name="item">The item to find the nearest neighbour of</param>
            <param name="itemDist">A distance metric applicable to the items in this tree and the query item</param>
            <returns>The nearest item in this tree</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Strtree.STRtree`1.NearestNeighbour(NetTopologySuite.Index.Strtree.STRtree{`0},NetTopologySuite.Index.Strtree.IItemDistance{GeoAPI.Geometries.Envelope,`0})">
            <summary>
            Finds the two nearest items from this tree 
            and another tree,
            using <see cref="T:NetTopologySuite.Index.Strtree.IItemDistance`2"/> as the distance metric.
            A Branch-and-Bound tree traversal algorithm is used
            to provide an efficient search.
            The result value is a pair of items, 
            the first from this tree and the second
            from the argument tree.
            </summary>
            <param name="tree">Another tree</param>
            <param name="itemDist">A distance metric applicable to the items in the trees</param>
            <returns>The pair of the nearest items, one from each tree</returns>
        </member>
        <member name="T:NetTopologySuite.Index.ArrayListVisitor`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.ArrayListVisitor`1.VisitItem(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:NetTopologySuite.Index.ArrayListVisitor`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Chain.MonotoneChain">
             <summary> 
             MonotoneChains are a way of partitioning the segments of a linestring to
             allow for fast searching of intersections.
             </summary>
             <remarks>
             <para>
             They have the following properties:
             <list>
             <item>the segments within a monotone chain never intersect each other</item>
             <item>the envelope of any contiguous subset of the segments in a monotone chain
             is equal to the envelope of the endpoints of the subset.</item>
             </list>
             </para>
             <para>
             Property 1 means that there is no need to test pairs of segments from within
             the same monotone chain for intersection.</para>
             <para>Property 2 allows an efficient 
             binary search to be used to find the intersection points of two monotone chains.
             For many types of real-world data, these properties eliminate a large number of
             segment comparisons, producing substantial speed gains.</para>
             <para>
             One of the goals of this implementation of MonotoneChains is to be
             as space and time efficient as possible. One design choice that aids this
             is that a MonotoneChain is based on a subarray of a list of points.
             This means that new arrays of points (potentially very large) do not
             have to be allocated.</para>
             <para>
             MonotoneChains support the following kinds of queries:
             <list type="Table">
             <item>Envelope select</item><description>determine all the segments in the chain which
             intersect a given envelope.</description>
             <item>Overlap</item><description>determine all the pairs of segments in two chains whose
             envelopes overlap.</description>
             </list>
             </para>
             <para>
             This implementation of MonotoneChains uses the concept of internal iterators
             (<see cref="T:NetTopologySuite.Index.Chain.MonotoneChainSelectAction"/> and <see cref="T:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction"/>)
             to return the resultsets for the above queries.
             This has time and space advantages, since it
             is not necessary to build lists of instantiated objects to represent the segments
             returned by the query.
             Queries made in this manner are thread-safe.
             </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChain.#ctor(GeoAPI.Geometries.Coordinate[],System.Int32,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="context"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Chain.MonotoneChain.Id">
            <summary>
            Gets or sets the Id
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Chain.MonotoneChain.Context">
            <summary>
            Gets the chain's context
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Chain.MonotoneChain.Envelope">
            <summary>
            Gets the chain's envelope
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Chain.MonotoneChain.StartIndex">
            <summary>
            Gets the start index
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Chain.MonotoneChain.EndIndex">
            <summary>
            Gets the end index of the underlying linestring
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChain.GetLineSegment(System.Int32,NetTopologySuite.Geometries.LineSegment@)">
            <summary>
            Gets the line segment starting at <paramref name="index"/>
            </summary>
            <param name="index">The index of the segment</param>
            <param name="ls">The line segment to extract to</param>
        </member>
        <member name="P:NetTopologySuite.Index.Chain.MonotoneChain.Coordinates">
            <summary>
            Return the subsequence of coordinates forming this chain.
            Allocates a new array to hold the Coordinates.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChain.Select(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.Chain.MonotoneChainSelectAction)">
            <summary> 
            Determine all the line segments in the chain whose envelopes overlap
            the searchEnvelope, and process them.
            </summary>
            <remarks>
            The monotone chain search algorithm attempts to optimize 
            performance by not calling the select action on chain segments
            which it can determine are not in the search envelope.
            However, it *may* call the select action on segments
            which do not intersect the search envelope.
            This saves on the overhead of checking envelope intersection
            each time, since clients may be able to do this more efficiently.
            </remarks>
            <param name="searchEnv">The search envelope</param>
            <param name="mcs">The select action to execute on selected segments</param>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChain.ComputeSelect(GeoAPI.Geometries.Envelope,System.Int32,System.Int32,NetTopologySuite.Index.Chain.MonotoneChainSelectAction)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="start0"></param>
            <param name="end0"></param>
            <param name="mcs"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Index.Chain.MonotoneChain.ComputeOverlaps(NetTopologySuite.Index.Chain.MonotoneChain,NetTopologySuite.Index.Chain.MonotoneChainOverlapAction)" -->
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChain.ComputeOverlaps(System.Int32,System.Int32,NetTopologySuite.Index.Chain.MonotoneChain,System.Int32,System.Int32,NetTopologySuite.Index.Chain.MonotoneChainOverlapAction)">
            <summary>
            
            </summary>
            <param name="start0"></param>
            <param name="end0"></param>
            <param name="mc"></param>
            <param name="start1"></param>
            <param name="end1"></param>
            <param name="mco"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Chain.MonotoneChainBuilder">
            <summary> 
            Constructs <see cref="T:NetTopologySuite.Index.Chain.MonotoneChain"/>s
            for sequences of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainBuilder.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainBuilder.ToIntArray(System.Collections.Generic.IList{System.Int32})">
             <summary>
            
             </summary>
             <param name="list"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainBuilder.GetChains(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainBuilder.GetChains(GeoAPI.Geometries.Coordinate[],System.Object)">
            <summary>
            Return a list of the <c>MonotoneChain</c>s
            for the given list of coordinates.
            </summary>
            <param name="pts"></param>
            <param name="context"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainBuilder.GetChainStartIndices(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Return an array containing lists of start/end indexes of the monotone chains
            for the given list of coordinates.
            The last entry in the array points to the end point of the point array,
            for use as a sentinel.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainBuilder.FindChainEnd(GeoAPI.Geometries.Coordinate[],System.Int32)">
            <summary>
            Finds the index of the last point in a monotone chain
            starting at a given point.
            Any repeated points (0-length segments) will be included
            in the monotone chain returned.
            </summary>
            <param name="pts">The coordinates</param>
            <param name="start">The start index</param>
            <returns> 
            The index of the last point in the monotone chain starting at <c>start</c>.
            </returns>
        </member>
        <member name="T:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction">
            <summary> 
            The action for the internal iterator for performing
            overlap queries on a MonotoneChain.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.TempEnv1">
            <summary>
            This envelope is used during the MonotoneChain search process.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.TempEnv2">
            <summary>
            This envelope is used during the MonotoneChain search process. 
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.overlapSeg1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.overlapSeg2">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.Overlap(NetTopologySuite.Index.Chain.MonotoneChain,System.Int32,NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary>
            This function can be overridden if the original chains are needed.
            </summary>
            <param name="mc1"></param>
            <param name="start1">The index of the start of the overlapping segment from mc1.</param>
            <param name="mc2"></param>
            <param name="start2">The index of the start of the overlapping segment from mc2.</param>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.Overlap(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment)">
            <summary> 
            This is a convenience function which can be overridden to obtain the actual
            line segments which overlap.
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Chain.MonotoneChainSelectAction">
            <summary>
            The action for the internal iterator for performing
            envelope select queries on a MonotoneChain.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Chain.MonotoneChainSelectAction.TempEnv1">
            <summary>
            These envelopes are used during the MonotoneChain search process.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Chain.MonotoneChainSelectAction.SelectedSegment">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainSelectAction.Select(NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary> 
            This method is overridden to process a segment 
            in the context of the parent chain.
            </summary>
            <param name="mc">The parent chain</param>
            <param name="startIndex">The index of the start vertex of the segment being processed</param>
        </member>
        <member name="M:NetTopologySuite.Index.Chain.MonotoneChainSelectAction.Select(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            This is a convenience method which can be overridden to obtain the actual
            line segment which is selected.
            </summary>
            <param name="seg"></param>
        </member>
        <member name="T:NetTopologySuite.Index.IIndexVisitor">
            <summary> 
            A visitor for nodes and items in an index.
            </summary> 
        </member>
        <member name="M:NetTopologySuite.Index.IIndexVisitor.VisitItem(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:NetTopologySuite.Index.IItemVisitor`1">
            <summary>
            A visitor for items in an index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.IItemVisitor`1.VisitItem(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:NetTopologySuite.Index.IntervalRTree.SortedPackedIntervalRTree`1">
            <summary>
            A static index on a set of 1-dimensional intervals,
            using an R-Tree packed based on the order of the interval midpoints.
            </summary>
            <remarks>
            It supports range searching,
            where the range is an interval of the real line (which may be a single point).
            A common use is to index 1-dimensional intervals which 
            are the projection of 2-D objects onto an axis of the coordinate system.
            <para>
            This index structure is <i>static</i> 
            - items cannot be added or removed once the first query has been made.
            The advantage of this characteristic is that the index performance 
            can be optimized based on a fixed set of items.
            </para>
            <author>Martin Davis</author>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Index.IntervalRTree.SortedPackedIntervalRTree`1.Insert(System.Double,System.Double,`0)">
            <summary>
             Adds an item to the index which is associated with the given interval
            </summary>
             <param name="min">The lower bound of the item interval</param>
             <param name="max">The upper bound of the item interval</param>
             <param name="item">The item to insert</param>
             <exception cref="T:System.InvalidOperationException">if the index has already been queried</exception>
        </member>
        <member name="M:NetTopologySuite.Index.IntervalRTree.SortedPackedIntervalRTree`1.Query(System.Double,System.Double,NetTopologySuite.Index.IItemVisitor{`0})">
            <summary>
             Search for intervals in the index which intersect the given closed interval
             and apply the visitor to them.
            </summary>
             <param name="min">The lower bound of the query interval</param>
             <param name="max">The upper bound of the query interval</param>
             <param name="visitor">The visitor to pass any matched items to</param>
        </member>
        <member name="T:NetTopologySuite.Index.ISpatialIndex">
            <summary> 
            The basic insertion and query operations supported by classes
            implementing spatial index algorithms.
            A spatial index typically provides a primary filter for range rectangle queries. A
            secondary filter is required to test for exact intersection. Of course, this
            secondary filter may consist of other tests besides intersection, such as
            testing other kinds of spatial relationships.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.ISpatialIndex`1.Insert(GeoAPI.Geometries.Envelope,`0)">
            <summary>
            Adds a spatial item with an extent specified by the given <c>Envelope</c> to the index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.ISpatialIndex`1.Query(GeoAPI.Geometries.Envelope)">
            <summary> 
            Queries the index for all items whose extents intersect the given search <c>Envelope</c> 
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query envelope.
            </summary>
            <param name="searchEnv">The envelope to query for.</param>
            <returns>A list of the items found by the query.</returns>
        </member>
        <member name="M:NetTopologySuite.Index.ISpatialIndex`1.Query(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.IItemVisitor{`0})">
            <summary>
            Queries the index for all items whose extents intersect the given search <see cref="T:GeoAPI.Geometries.Envelope" />,
            and applies an <see cref="T:NetTopologySuite.Index.IItemVisitor`1" /> to them.
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query envelope.
            </summary>
            <param name="searchEnv">The envelope to query for.</param>
            <param name="visitor">A visitor object to apply to the items found.</param>
        </member>
        <member name="M:NetTopologySuite.Index.ISpatialIndex`1.Remove(GeoAPI.Geometries.Envelope,`0)">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="itemEnv">The Envelope of the item to remove.</param>
            <param name="item">The item to remove.</param>
            <returns> <c>true</c> if the item was found.</returns>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.DoubleBits">
            <summary>
            DoubleBits manipulates Double numbers
            by using bit manipulation and bit-field extraction.
            For some operations (such as determining the exponent)
            this is more accurate than using mathematical operations
            (which suffer from round-off error).
            The algorithms and constants in this class
            apply only to IEEE-754 double-precision floating point format.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Quadtree.DoubleBits.ExponentBias">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.PowerOf2(System.Int32)">
             <summary>
            
             </summary>
             <param name="exp"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.GetExponent(System.Double)">
             <summary>
            
             </summary>
             <param name="d"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.TruncateToPowerOfTwo(System.Double)">
             <summary>
            
             </summary>
             <param name="d"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.ToBinaryString(System.Double)">
             <summary>
            
             </summary>
             <param name="d"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.MaximumCommonMantissa(System.Double,System.Double)">
             <summary>
            
             </summary>
             <param name="d1"></param>
             <param name="d2"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.#ctor(System.Double)">
             <summary>
            
             </summary>
             <param name="x"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.DoubleBits.Double">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.DoubleBits.BiasedExponent">
            <summary>
            Determines the exponent for the number.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.DoubleBits.Exponent">
            <summary>
            Determines the exponent for the number.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.ZeroLowerBits(System.Int32)">
             <summary>
            
             </summary>
             <param name="nBits"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.GetBit(System.Int32)">
             <summary>
            
             </summary>
             <param name="i"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.NumCommonMantissaBits(NetTopologySuite.Index.Quadtree.DoubleBits)">
            <summary>
            This computes the number of common most-significant bits in the mantissa.
            It does not count the hidden bit, which is always 1.
            It does not determine whether the numbers have the same exponent - if they do
            not, the value computed by this function is meaningless.
            </summary>
            <param name="db"></param>
            <returns> The number of common most-significant mantissa bits.</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.DoubleBits.ToString">
            <summary>
            A representation of the Double bits formatted for easy readability.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.IntervalSize">
            <summary>
            Provides a test for whether an interval is
            so small it should be considered as zero for the purposes of
            inserting it into a binary tree.
            The reason this check is necessary is that round-off error can
            cause the algorithm used to subdivide an interval to fail, by
            computing a midpoint value which does not lie strictly between the
            endpoints.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.IntervalSize.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Quadtree.IntervalSize.MinBinaryExponent">
            <summary> 
            This value is chosen to be a few powers of 2 less than the
            number of bits available in the double representation (i.e. 53).
            This should allow enough extra precision for simple computations to be correct,
            at least for comparison purposes.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.IntervalSize.IsZeroWidth(System.Double,System.Double)">
            <summary> 
            Computes whether the interval [min, max] is effectively zero width.
            I.e. the width of the interval is so much less than the
            location of the interval that the midpoint of the interval cannot be
            represented precisely.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.Key">
            <summary> 
            A Key is a unique identifier for a node in a quadtree.
            It contains a lower-left point and a level number. The level number
            is the power of two for the size of the node envelope.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Key.ComputeQuadLevel(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Key.#ctor(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="itemEnv"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Key.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Key.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Key.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Key.Centre">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Key.ComputeKey(GeoAPI.Geometries.Envelope)">
            <summary>
            Return a square envelope containing the argument envelope,
            whose extent is a power of two and which is based at a power of 2.
            </summary>
            <param name="itemEnv"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Key.ComputeKey(System.Int32,GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="itemEnv"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.Node`1">
            <summary>
            Represents a node of a <c>Quadtree</c>.  Nodes contain
            items which have a spatial extent corresponding to the node's position
            in the quadtree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.CreateNode(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.CreateExpanded(NetTopologySuite.Index.Quadtree.Node{`0},GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="addEnv"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.#ctor(GeoAPI.Geometries.Envelope,System.Int32)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <param name="level"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Node`1.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.IsSearchMatch(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.GetNode(GeoAPI.Geometries.Envelope)">
            <summary> 
            Returns the subquad containing the envelope <paramref name="searchEnv"/>.
            Creates the subquad if
            it does not already exist.
            </summary>
            <param name="searchEnv">The envelope to search for</param>
            <returns>The subquad containing the search envelope.</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.Find(GeoAPI.Geometries.Envelope)">
            <summary>
            Returns the smallest <i>existing</i>
            node containing the envelope.
            </summary>
            <param name="searchEnv"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.InsertNode(NetTopologySuite.Index.Quadtree.Node{`0})">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.GetSubnode(System.Int32)">
            <summary>
            Get the subquad for the index.
            If it doesn't exist, create it.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Node`1.CreateSubnode(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.NodeBase`1">
            <summary>
            The base class for nodes in a <c>Quadtree</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.GetSubnodeIndex(GeoAPI.Geometries.Envelope,System.Double,System.Double)">
            <summary> 
            Gets the index of the subquad that wholly contains the given envelope.
            If none does, returns -1.
            </summary>
            <returns>The index of the subquad that wholly contains the given envelope <br/>
            or -1 if no subquad wholly contains the envelope</returns>
        </member>
        <member name="F:NetTopologySuite.Index.Quadtree.NodeBase`1._items">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Quadtree.NodeBase`1.Subnode">
            <summary>
            subquads are numbered as follows:
            2 | 3
            --+--
            0 | 1
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.HasItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.Remove(GeoAPI.Geometries.Envelope,`0)">
            <summary> 
            Removes a single item from this subtree.
            </summary>
            <param name="itemEnv">The envelope containing the item.</param>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found and removed.</returns>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.IsPrunable">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.HasChildren">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.AddAllItems(System.Collections.Generic.IList{`0}@)">
            <summary>
            Insert items in <c>this</c> into the parameter!
            </summary>
            <param name="resultItems">IList for adding items.</param>
            <returns>Parameter IList with <c>this</c> items.</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.IsSearchMatch(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.AddAllItemsFromOverlapping(GeoAPI.Geometries.Envelope,System.Collections.Generic.IList{`0}@)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="resultItems"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.Visit(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.IItemVisitor{`0})">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.NodeBase`1.VisitItems(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.IItemVisitor{`0})">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.NodeBase`1.NodeCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.Quadtree`1">
            <summary>
            A Quadtree is a spatial index structure for efficient range querying
            of items bounded by 2D rectangles.<br/>
            <see cref="T:GeoAPI.Geometries.IGeometry"/>s can be indexed by using their <see cref="T:GeoAPI.Geometries.Envelope"/>s.<br/>
            Any type of object can also be indexed, as long as it has an extent that can be 
            represented by an <see cref="T:GeoAPI.Geometries.Envelope"/>.
            <para/>
            This Quadtree index provides a <b>primary filter</b>
            for range rectangle queries.  The various query methods return a list of
            all items which <i>may</i> intersect the query rectangle.  Note that
            it may thus return items which do <b>not</b> in fact intersect the query rectangle.
            A secondary filter is required to test for actual intersection 
            between the query rectangle and the envelope of each candidate item. 
            The secondary filter may be performed explicitly, 
            or it may be provided implicitly by subsequent operations executed on the items 
            (for instance, if the index query is followed by computing a spatial predicate 
            between the query geometry and tree items, 
            the envelope intersection check is performed automatically.
            <para/>
            This implementation does not require specifying the extent of the inserted
            items beforehand.  It will automatically expand to accomodate any extent
            of dataset.
            <para/>
            This data structure is also known as an <c>MX-CIF quadtree</c>
            following the terminology usage of Samet and others.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.EnsureExtent(GeoAPI.Geometries.Envelope,System.Double)">
            <summary>
            Ensure that the envelope for the inserted item has non-zero extents.
            Use the current minExtent to pad the envelope, if necessary.
            </summary>
            <param name="itemEnv"></param>
            <param name="minExtent"></param>
        </member>
        <member name="F:NetTopologySuite.Index.Quadtree.Quadtree`1._minExtent">
            <summary>
            minExtent is the minimum envelope extent of all items
            inserted into the tree so far. It is used as a heuristic value
            to construct non-zero envelopes for features with zero X and/or Y extent.
            Start with a non-zero extent, in case the first feature inserted has
            a zero extent in both directions.  This value may be non-optimal, but
            only one feature will be inserted with this value.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.#ctor">
            <summary>
            Constructs a Quadtree with zero items.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Quadtree`1.Depth">
            <summary> 
            Returns the number of levels in the tree.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Quadtree`1.IsEmpty">
            <summary>
            Tests whether the index contains any items.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Quadtree.Quadtree`1.Count">
            <summary> 
            Returns the number of items in the tree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.Insert(GeoAPI.Geometries.Envelope,`0)">
            <summary>
            
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.Remove(GeoAPI.Geometries.Envelope,`0)">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="itemEnv">The Envelope of the item to be removed.</param>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found (and thus removed).</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.Query(GeoAPI.Geometries.Envelope)">
            <summary>
            Queries the tree and returns items which may lie in the given search envelope.
            </summary>
            <remarks>
            Precisely, the items that are returned are all items in the tree 
            whose envelope <b>may</b> intersect the search Envelope.
            Note that some items with non-intersecting envelopes may be returned as well;
            the client is responsible for filtering these out.
            In most situations there will be many items in the tree which do not
            intersect the search envelope and which are not returned - thus
            providing improved performance over a simple linear scan.    
            </remarks>
            <param name="searchEnv">The envelope of the desired query area.</param>
            <returns>A List of items which may intersect the search envelope</returns>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.Query(GeoAPI.Geometries.Envelope,NetTopologySuite.Index.IItemVisitor{`0})">
            <summary>
            Queries the tree and visits items which may lie in the given search envelope.
            </summary>
            <remarks>
            Precisely, the items that are visited are all items in the tree 
            whose envelope <b>may</b> intersect the search Envelope.
            Note that some items with non-intersecting envelopes may be visited as well;
            the client is responsible for filtering these out.
            In most situations there will be many items in the tree which do not
            intersect the search envelope and which are not visited - thus
            providing improved performance over a simple linear scan.    
            </remarks>
            <param name="searchEnv">The envelope of the desired query area.</param>
            <param name="visitor">A visitor object which is passed the visited items</param>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.QueryAll">
            <summary>
            Return a list of all items in the Quadtree.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Quadtree`1.CollectStats(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="itemEnv"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Quadtree.Root`1">
            <summary>
            QuadRoot is the root of a single Quadtree.  
            It is centred at the origin,
            and does not have a defined extent.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Root`1.Insert(GeoAPI.Geometries.Envelope,`0)">
            <summary> 
            Insert an item into the quadtree this is the root of.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Root`1.InsertContained(NetTopologySuite.Index.Quadtree.Node{`0},GeoAPI.Geometries.Envelope,`0)">
            <summary> 
            Insert an item which is known to be contained in the tree rooted at
            the given QuadNode root.  Lower levels of the tree will be created
            if necessary to hold the item.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Quadtree.Root`1.IsSearchMatch(GeoAPI.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction.Overlap(NetTopologySuite.Index.Sweepline.SweepLineInterval,NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="s0"></param>
            <param name="s1"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Sweepline.SweepLineEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Sweepline.SweepLineEvents.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Index.Sweepline.SweepLineEvents.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Index.Sweepline.SweepLineEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineEvent.#ctor(System.Double,NetTopologySuite.Index.Sweepline.SweepLineEvent,NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="insertEvent"></param>
            <param name="sweepInt"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineEvent.IsInsert">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineEvent.IsDelete">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineEvent.InsertEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineEvent.DeleteEventIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineEvent.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineEvent.CompareTo(System.Object)">
            <summary>
            ProjectionEvents are ordered first by their x-value, and then by their eventType.
            It is important that Insert events are sorted before Delete events, so that
            items whose Insert and Delete events occur at the same x-value will be
            correctly handled.
            </summary>
            <param name="o"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Sweepline.SweepLineIndex">
            <summary>
            A sweepline implements a sorted index on a set of intervals.
            It is used to compute all overlaps between the interval in the index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineIndex.Add(NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="sweepInt"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineIndex.BuildIndex">
            <summary>
            Because Delete Events have a link to their corresponding Insert event,
            it is possible to compute exactly the range of events which must be
            compared to a given Insert event object.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineIndex.ComputeOverlaps(NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineIndex.ProcessOverlaps(System.Int32,System.Int32,NetTopologySuite.Index.Sweepline.SweepLineInterval,NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="s0"></param>
            <param name="action"></param>
        </member>
        <member name="T:NetTopologySuite.Index.Sweepline.SweepLineInterval">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineInterval.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:NetTopologySuite.Index.Sweepline.SweepLineInterval.#ctor(System.Double,System.Double,System.Object)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="item"></param>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineInterval.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineInterval.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Index.Sweepline.SweepLineInterval.Item">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.IO.KML.KMLWriter">
            <summary>
            Writes a formatted string containing the KML representation 
            of a JTS <see cref="T:GeoAPI.Geometries.IGeometry"/>. 
            The output is KML fragments which can be substituted
            wherever the KML <see cref="T:GeoAPI.Geometries.IGeometry"/> abstract 
            element can be used.
            </summary>
            <remarks>
            Output elements are indented to provide a
            nicely-formatted representation. 
            An output line prefix and maximum
            number of coordinates per line can be specified.
            </remarks>
            <remarks>
            The Z ordinate value output can be forced to be a specific value. 
            The <see cref="P:NetTopologySuite.IO.KML.KMLWriter.Extrude"/> and <see cref="P:NetTopologySuite.IO.KML.KMLWriter.AltitudeMode"/> modes can be set. 
            If set, the corresponding sub-elements will be output.
            </remarks>
        </member>
        <member name="F:NetTopologySuite.IO.KML.KMLWriter.AltitudeModeClampToGround">
            <summary>
            The KML standard value <c>clampToGround</c> for use in <see cref="P:NetTopologySuite.IO.KML.KMLWriter.AltitudeMode"/>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.KML.KMLWriter.AltitudeModeRelativeToGround">
            <summary>
            The KML standard value <c>relativeToGround</c> for use in <see cref="P:NetTopologySuite.IO.KML.KMLWriter.AltitudeMode"/>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.KML.KMLWriter.AltitudeModeAbsolute">
            <summary>
            The KML standard value <c>absolute</c> for use in <see cref="P:NetTopologySuite.IO.KML.KMLWriter.AltitudeMode"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.KML.KMLWriter.WriteGeometry(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Writes a Geometry as KML to a string, using
            a specified Z value.
            </summary>
            <param name="geometry">the geometry to write</param>
            <param name="z">the Z value to use</param>
            <returns>a string containing the KML geometry representation</returns>
        </member>
        <member name="M:NetTopologySuite.IO.KML.KMLWriter.WriteGeometry(GeoAPI.Geometries.IGeometry,System.Double,System.Int32,System.Boolean,System.String)">
            <summary>
            Writes a Geometry as KML to a string, using
            a specified Z value, precision, extrude flag,
            and altitude mode code.
            </summary>
            <param name="geometry">the geometry to write</param>
            <param name="z">the Z value to use</param>
            <param name="precision">the maximum number of decimal places to write</param>
            <param name="extrude">the extrude flag to write</param>
            <param name="altitudeMode">the altitude model code to write</param>
            <returns>a string containing the KML geometry representation</returns>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.LinePrefix">
            <summary>
            A tag string which is prefixed to every emitted text line.
            This can be used to indent the geometry text in a containing document.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.MaxCoordinatesPerLine">
            <summary>
            The maximum number of coordinates to output per line.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.Z">
            <summary>
            The Z value to be output for all coordinates.
            This overrides any Z value present in the Geometry coordinates.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.Extrude">
            <summary>
            The flag to be output in the <c>extrude</c> element.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.Tesselate">
            <summary>
            The flag to be output in the <c>tesselate</c> element.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.AltitudeMode">
            <summary>
            The value output in the <c>altitudeMode</c> element.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.KML.KMLWriter.Precision">
            <summary>
            The maximum number of decimal places to output in ordinate values.
            Useful for limiting output size.
            </summary>
            <remarks>
            negative values set the precision to <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>,
            like standard behavior.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.IO.KML.KMLWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Writes a <see cref="T:GeoAPI.Geometries.IGeometry"/> in KML format as a string.
            </summary>
            <param name="geom">the geometry to write</param>
            <returns>a string containing the KML geometry representation</returns>
        </member>
        <member name="M:NetTopologySuite.IO.KML.KMLWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.TextWriter)">
            <summary>
            Writes the KML representation of a <see cref="T:GeoAPI.Geometries.IGeometry"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="geom">the geometry to write</param>
            <param name="writer">the writer to write to</param>
        </member>
        <member name="M:NetTopologySuite.IO.KML.KMLWriter.Write(GeoAPI.Geometries.IGeometry,System.Text.StringBuilder)">
            <summary>
            Appends the KML representation of a <see cref="T:GeoAPI.Geometries.IGeometry"/> to a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="geom">the geometry to write</param>
            <param name="sb">the buffer to write into</param>
        </member>
        <member name="M:NetTopologySuite.IO.KML.KMLWriter.Write(GeoAPI.Geometries.Coordinate[],System.Int32,System.Text.StringBuilder)">
            <summary>
            Takes a list of coordinates and converts it to KML.
            </summary>
            <remarks>
            2D and 3D aware. Terminates the coordinate output with a newline.
            </remarks>
        </member>
        <member name="T:NetTopologySuite.IO.WKBHexFileReader">
            <summary>
            Reads a sequence of {@link Geometry}s in WKBHex format 
            from a text file.
            Each WKBHex geometry must be on a single line
            The geometries in the file may be separated by any amount
            of whitespace and newlines.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.IO.WKBHexFileReader.#ctor(GeoAPI.IO.IBinaryGeometryReader)">
            <summary>
            Creates a new <see cref="T:NetTopologySuite.IO.WKBHexFileReader"/> given the
            <see cref="T:NetTopologySuite.IO.WKBReader"/> to use to parse the geometries.
            </summary>
            <param name="wkbReader">The geometry reader to use</param>
        </member>
        <member name="P:NetTopologySuite.IO.WKBHexFileReader.Limit">
            <summary>
            Gets or sets a value indicating the maximum number of geometries to read
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.WKBHexFileReader.Offset">
            <summary>
            Gets or sets the number of geometries to skip before storing.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBHexFileReader.Read(System.String)">
            <summary>
            Reads a sequence of geometries.<br/>
            If an <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Offset"/> is specified, geometries read up to the offset count are skipped.
            If a <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> is specified, no more than <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> geometries are read.
            </summary>
            <param name="file">The path to the file</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no filename was specified</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the filename specified does not exist</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O exception was encountered</exception>
            <exception cref="T:NetTopologySuite.IO.ParseException">Thrown if an error occured reading a geometry</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKBHexFileReader.Read(System.IO.Stream)">
            <summary>
            Reads a sequence of geometries.<br/>
            If an <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Offset"/> is specified, geometries read up to the offset count are skipped.
            If a <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> is specified, no more than <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> geometries are read.
            </summary>
            <param name="stream">The path to the file</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no stream was passed</exception>
            <exception cref="T:System.ArgumentException">Thrown if passed stream is not readable or seekable</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O exception was encountered</exception>
            <exception cref="T:NetTopologySuite.IO.ParseException">Thrown if an error occured reading a geometry</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKBHexFileReader.Read(System.IO.StreamReader)">
            <summary>
            Reads a sequence of geometries.<br/>
            If an <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Offset"/> is specified, geometries read up to the offset count are skipped.
            If a <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> is specified, no more than <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> geometries are read.
            </summary>
            <param name="streamReader">The stream reader to use.</param>
            <exception cref="T:System.IO.IOException">Thrown if an I/O exception was encountered</exception>
            <exception cref="T:NetTopologySuite.IO.ParseException">Thrown if an error occured reading a geometry</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKBHexFileReader.IsAtLimit(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Tests if reader has reached limit
            </summary>
            <param name="geoms">A collection of already read geometries</param>
            <returns><value>true</value> if <see cref="P:NetTopologySuite.IO.WKBHexFileReader.Limit"/> number of geometries has been read.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBHexFileReader.IsAtEndOfFile(System.IO.StreamReader)">
            <summary>
            Tests if reader is at EOF.
            </summary>
        </member>
        <member name="T:NetTopologySuite.IO.WKTFileReader">
            <summary>
             Reads a sequence of <see cref="T:GeoAPI.Geometries.IGeometry"/>s in WKT format from a text file.
            </summary>
             <remarks>The geometries in the file may be separated by any amount of whitespace and newlines.</remarks>
             <author>
             Martin Davis
             </author>
        </member>
        <member name="M:NetTopologySuite.IO.WKTFileReader.#ctor(System.IO.FileInfo,NetTopologySuite.IO.WKTReader)">
            <summary>
             Creates a new <see cref="T:NetTopologySuite.IO.WKTFileReader" /> given the <paramref name="file" /> to read from and a <see cref="T:NetTopologySuite.IO.WKTReader" /> to use to parse the geometries.
            </summary>
             <param name="file"> the <see cref="T:System.IO.FileInfo" /> to read from</param>
             <param name="wktReader">the geometry reader to use</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTFileReader.#ctor(System.String,NetTopologySuite.IO.WKTReader)">
            <summary>
             Creates a new <see cref="T:NetTopologySuite.IO.WKTFileReader" />, given the name of the file to read from.
            </summary>
             <param name="filename">The name of the file to read from</param>
             <param name="wktReader">The geometry reader to use</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTFileReader.#ctor(System.IO.TextReader,NetTopologySuite.IO.WKTReader)">
            <summary>
             Creates a new <see cref="T:NetTopologySuite.IO.WKTFileReader" />, given a <see cref="T:System.IO.TextReader"/> to read with.
            </summary>
             <param name="reader">The stream reader of the file to read from</param>
             <param name="wktReader">The geometry reader to use</param>
        </member>
        <member name="P:NetTopologySuite.IO.WKTFileReader.Limit">
            <summary>
             Gets/Sets the maximum number of geometries to read.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.WKTFileReader.Offset">
            <summary>
             Gets/Sets the number of geometries to skip before reading.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKTFileReader.Read">
            <summary>
             Reads a sequence of geometries.
            </summary>
             <remarks>
             <para>
             If an offset is specified, geometries read up to the offset count are skipped.</para>
             <para>If a limit is specified, no more than <see cref="P:NetTopologySuite.IO.WKTFileReader.Limit" /> geometries are read.</para>
             </remarks>
             <returns>The list of geometries read</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTFileReader.IsAtEndOfFile(System.IO.StreamReader)">
            <summary>
             Tests if reader is at EOF.
            </summary>
        </member>
        <member name="T:NetTopologySuite.IO.BEBinaryReader">
            <summary>
            Extends the <see cref="T:System.IO.BinaryReader" /> class to allow reading values in the BigEndian format.    
            </summary>
            <remarks>
            While <see cref="T:NetTopologySuite.IO.BEBinaryReader" /> extends <see cref="T:System.IO.BinaryReader" /> 
            adding methods for reading integer values (<see cref="M:NetTopologySuite.IO.BEBinaryReader.ReadInt32" />)
            and double values (<see cref="M:NetTopologySuite.IO.BEBinaryReader.ReadDouble" />) in the BigEndian format, 
            this implementation overrides methods, such <see cref="M:System.IO.BinaryReader.ReadInt32" /> 
            and <see cref="M:System.IO.BinaryReader.ReadDouble" /> and more, 
            for reading <see cref="F:GeoAPI.IO.ByteOrder.BigEndian" /> values in the BigEndian format.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.IO.BEBinaryReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.IO.BEBinaryReader"/> class.
            </summary>
            <param name="input">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
            <exception cref="T:System.ArgumentNullException">encoding is null. </exception>
            <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream using big endian encoding
            and advances the current position of the stream by two bytes.
            </summary>
            <returns>
            A 2-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using big endian encoding 
            and advances the position of the stream by two bytes.
            </summary>
            <returns>
            A 2-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream using big endian encoding
            and advances the current position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream using big endian encoding
            and advances the position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream using big endian encoding
            and advances the current position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream using big endian encoding 
            and advances the position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream using big endian encoding
            and advances the current position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte floating point value read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream using big endian encoding
            and advances the current position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte floating point value read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadString">
            <summary>
            Reads a string from the current stream. 
            The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns>The string being read.</returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream 
            and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>
            A decimal value read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="T:NetTopologySuite.IO.BEBinaryWriter">
            <summary>
            Extends the <see cref="T:System.IO.BinaryWriter" /> class to allow writing values in the BigEndian format.    
            </summary>
            <remarks>
            While <see cref="T:NetTopologySuite.IO.BEBinaryWriter" /> extends <see cref="T:System.IO.BinaryWriter" /> 
            adding methods for writing integer values (<see cref="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Int32)" />)
            and double values (<see cref="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Double)" />) in the BigEndian format,
            this implementation overrides methods, such <see cref="M:System.IO.BinaryWriter.Write(System.Int32)" /> 
            and <see cref="M:System.IO.BinaryWriter.Write(System.Double)" /> and more, 
            for writing <see cref="!:ByteOrder.BigEndian" /> values in the BigEndian format.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.IO.BEBinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.IO.BEBinaryWriter"/> class.
            </summary>
            <param name="output">The supplied stream.</param>
            <exception cref="T:System.ArgumentNullException">output is null. </exception>
            <exception cref="T:System.ArgumentException">
            The stream does not support writing, or the stream is already closed. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.IO.BEBinaryWriter"/> class.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
            <exception cref="T:System.ArgumentNullException">output or encoding is null. </exception>
            <exception cref="T:System.ArgumentException">
            The stream does not support writing, or the stream is already closed. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream using BigEndian encoding
            and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream  using BigEndian encoding
            and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream using BigEndian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream using BigEndian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream using BigEndian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream using BigEndian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the current stream using BigEndian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the current stream using BigEndian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed string to this stream in the current encoding 
            of the <see cref="T:System.IO.BinaryWriter"></see>, 
            and advances the current position of the stream in accordance 
            with the encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">value is null. </exception>
        </member>
        <member name="M:NetTopologySuite.IO.BEBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value to the current stream and advances the stream position by sixteen bytes.
            </summary>
            <param name="value">The decimal value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:NetTopologySuite.IO.GML2.GMLReader">
            <summary>
            Reads a GML document and creates a representation of the features based on NetTopologySuite model.
            Uses GML 2.1.1 <c>Geometry.xsd</c> schema for base for features.
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.GML2.GMLReader.Factory">
            <summary>
            <see cref="T:GeoAPI.Geometries.IGeometry"/> builder.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.#ctor">
            <summary>
            Initialize reader with a standard <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initialize reader with the given <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.Read(System.Xml.XmlDocument)">
            <summary>
            Read a GML document and returns relative <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.ReadCoordinate(System.Xml.XmlReader)">
            <summary>
            Reads the coordinate.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.ReadCoordinates(System.String)">
            <summary>
            Extract a <see cref="T:GeoAPI.Geometries.Coordinate" /> from a x,y string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.ReadPosAsCoordinate(System.String[])">
            <summary>
            Extract a <see cref="T:GeoAPI.Geometries.Coordinate" /> from a pos entity string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLReader.ReadPosListAsCoordinates(System.Int32,System.String[])">
            <summary>
            Extract a <see cref="T:GeoAPI.Geometries.Coordinate" /> from a x,y string value.
            </summary>        
        </member>
        <member name="T:NetTopologySuite.IO.GML2.GMLWriter">
            <summary>
            Writes the GML representation of the features of NetTopologySuite model.
            Uses GML 2.1.1 <c>Geometry.xsd</c> schema for base for features.
            <remarks>
            Thanks to <see href="http//www.codeplex.com/Wiki/View.aspx?ProjectName=MsSqlSpatial">rstuven</see> for improvements :)
            </remarks>
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.GML2.GMLWriter.NumberFormatter">
            <summary>
            Formatter for double values of coordinates
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns an <c>XmlReader</c> with feature informations.
            Use <c>XmlDocument.Load(XmlReader)</c> for obtain a <c>XmlDocument</c> to work.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Writes a GML feature into a generic <c>Stream</c>, such a <c>FileStream</c> or other streams.
            </summary>
            <param name="geometry"></param>
            <param name="stream"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.Coordinate,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <param name="writer"></param>        
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.Coordinate[],System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="coordinates"></param>
            <param name="writer"></param>        
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.WriteCoordinates(GeoAPI.Geometries.Coordinate[],System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="coordinates"></param>
            <param name="writer"></param>        
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometry,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IPoint,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.ILineString,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.ILinearRing,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="linearRing"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IPolygon,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IMultiPoint,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IMultiLineString,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IMultiPolygon,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometryCollection,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="geometryCollection"></param>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.GetBytes(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="geometryCollection"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.IO.ParseException">
            <summary>  
            Thrown by a <c>WKTReader</c> when a parsing problem occurs.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.ParseException.#ctor(System.String)">
            <summary>
            Creates a <c>ParseException</c> with the given detail message.
            </summary>
            <param name="message">A description of this <c>ParseException</c>.</param>
        </member>
        <member name="M:NetTopologySuite.IO.ParseException.#ctor(System.Exception)">
            <summary>  
            Creates a <c>ParseException</c> with <c>e</c>s detail message.
            </summary>
            <param name="e">An exception that occurred while a <c>WKTReader</c> was
            parsing a Well-known Text string.</param>
        </member>
        <member name="T:NetTopologySuite.IO.WKBReader">
            <summary>
            Converts a Well-Known Binary byte data to a <c>Geometry</c>.
            </summary>
            <remarks>
            The reader repairs structurally-invalid input
            (specifically, LineStrings and LinearRings which contain
            too few points have vertices added,
            and non-closed rings are closed).
            s</remarks>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.HexToBytes(System.String)">
            <summary>
             Converts a hexadecimal string to a byte array.
             The hexadecimal digit symbols are case-insensitive.
            </summary>
             <param name="hex">A string containing hex digits</param>
             <returns>An array of bytes with the value of the hex string</returns>
        </member>
        <member name="F:NetTopologySuite.IO.WKBReader._isStrict">
            true if structurally invalid input should be reported rather than repaired.
            At some point this could be made client-controllable.
        </member>
        <member name="P:NetTopologySuite.IO.WKBReader.Factory">
            <summary>
            The <see cref="T:GeoAPI.Geometries.IGeometry"/> builder.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.#ctor">
            <summary>
            Initialize reader with a standard <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initialize reader with the given <c>GeometryFactory</c>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.Read(System.Byte[])">
            <summary>
            Reads a <see cref="T:GeoAPI.Geometries.IGeometry"/> in binary WKB format from an array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="data">The byte array to read from</param>
            <returns>The geometry read</returns>
            <exception cref="T:GeoAPI.IO.ParseException"> if the WKB data is ill-formed.</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.Read(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:GeoAPI.Geometries.IGeometry"/> in binary WKB format from an <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>The geometry read</returns>
            <exception cref="T:GeoAPI.IO.ParseException"> if the WKB data is ill-formed.</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.Read(System.IO.BinaryReader)">
             <summary>
            
             </summary>
             <param name="reader"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadByteOrder(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadCoordinateSequence(System.IO.BinaryReader,System.Int32,NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            Function to read a coordinate sequence.
            </summary>
            <param name="reader">The reader</param>
            <param name="size">The number of ordinates</param>
            <param name="cs">The coordinate system</param>
            <returns>The read coordinate sequence.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadCoordinateSequenceRing(System.IO.BinaryReader,System.Int32,NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            Function to read a coordinate sequence that is supposed to form a ring.
            </summary>
            <param name="reader">The reader</param>
            <param name="size">The number of ordinates</param>
            <param name="cs">The coordinate system</param>
            <returns>The read coordinate sequence.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadCoordinateSequenceLineString(System.IO.BinaryReader,System.Int32,NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            Function to read a coordinate sequence that is supposed to serve a line string.
            </summary>
            <param name="reader">The reader</param>
            <param name="size">The number of ordinates</param>
            <param name="cs">The coordinate system</param>
            <returns>The read coordinate sequence.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ToOrdinates(NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            Function to convert from <see cref="T:NetTopologySuite.IO.WKBReader.CoordinateSystem"/> to <see cref="T:GeoAPI.Geometries.Ordinates"/>
            </summary>
            <param name="cs">The coordinate system</param>
            <returns>The corresponding <see cref="T:GeoAPI.Geometries.Ordinates"/></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadLinearRing(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.ILinearRing"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILinearRing"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadPoint(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.IPoint"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPoint"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadLineString(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.ILineString"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILineString"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadPolygon(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.IPolygon"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IPolygon"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadMultiPoint(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiPoint"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadMultiLineString(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.IMultiLineString"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiLineString"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadMultiPolygon(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.IMultiPolygon"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IMultiPolygon"/> geometry</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.ReadGeometryCollection(System.IO.BinaryReader,NetTopologySuite.IO.WKBReader.CoordinateSystem,System.Int32)">
             <summary>
             Reads a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> geometry.
             </summary>
             <param name="reader">The reader</param>
             <param name="cs">The coordinate system</param>
            <param name="srid">The spatial reference id for the geometry.</param>
            <returns>A <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> geometry</returns>
        </member>
        <member name="P:NetTopologySuite.IO.WKBReader.RepairRings">
            <summary>
            Gets or sets whether invalid linear rings should be fixed
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBReader.HandleOrdinate(GeoAPI.Geometries.Ordinate)">
            <summary>
            Function to determine whether an ordinate should be handled or not.
            </summary>
            <param name="ordinate"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.IO.WKBGeometryTypes">
            <summary>
            WKB Geometry Types
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPoint">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBLineString">
            <summary>
            LineString.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPolygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPoint">
            <summary>
            MultiPoint.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineString">
            <summary>
            MultiLineString.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygon">
            <summary>
            MultiPolygon.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollection">
            <summary>
            GeometryCollection.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPointZ">
            <summary>
            Point with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBLineStringZ">
            <summary>
            LineString with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPolygonZ">
            <summary>
            Polygon with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPointZ">
            <summary>
            MultiPoint with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineStringZ">
            <summary>
            MultiLineString with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygonZ">
            <summary>
            MultiPolygon with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollectionZ">
            <summary>
            GeometryCollection with Z coordinate.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPointM">
            <summary>
            Point with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBLineStringM">
            <summary>
            LineString with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPolygonM">
            <summary>
            Polygon with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPointM">
            <summary>
            MultiPoint with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineStringM">
            <summary>
            MultiLineString with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygonM">
            <summary>
            MultiPolygon with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollectionM">
            <summary>
            GeometryCollection with M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPointZM">
            <summary>
            Point with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBLineStringZM">
            <summary>
            LineString with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBPolygonZM">
            <summary>
            Polygon with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPointZM">
            <summary>
            MultiPoint with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineStringZM">
            <summary>
            MultiLineString with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygonZM">
            <summary>
            MultiPolygon with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollectionZM">
            <summary>
            GeometryCollection with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="T:NetTopologySuite.IO.WKBWriter">
            <summary>
            Writes a Well-Known Binary byte data representation of a <c>Geometry</c>.
            </summary>
            <remarks>
            WKBWriter stores <see cref="T:GeoAPI.Geometries.Coordinate" /> X,Y,Z values if <see cref="F:GeoAPI.Geometries.Coordinate.Z" /> is not <see cref="F:System.Double.NaN"/>,
            otherwise <see cref="F:GeoAPI.Geometries.Coordinate.Z" /> value is discarded and only X,Y are stored.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.BytesToHex(System.Byte[])">
            <summary>Converts a byte array to a hexadecimal string.</summary>
             <param name="bytes">A byte array</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.ToHex(System.Byte[])">
            <summary>Converts a byte array to a hexadecimal string.</summary>
             <param name="bytes">A byte array</param>
        </member>
        <member name="P:NetTopologySuite.IO.WKBWriter.EmitSRID">
            <summary>
            Gets or sets whether the <see cref="P:GeoAPI.Geometries.IGeometry.SRID"/> value should be emitted
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.WKBWriter.EmitZ">
            <summary>
            Gets or sets whether the <see cref="F:GeoAPI.Geometries.Coordinate.Z"/> values should be emitted
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.WKBWriter.EmitM">
            <summary>
            Gets or sets whether the <see cref="P:GeoAPI.Geometries.ICoordinate.M"/> values should be emitted
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.WriteHeader(System.IO.BinaryWriter,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="geom"></param>        
        </member>
        <member name="P:NetTopologySuite.IO.WKBWriter.InitCount">
            <summary>
            Standard byte size for each complex point.
            Each complex point (LineString, Polygon, ...) contains:
                1 byte for ByteOrder and
                4 bytes for WKBType.
                4 bytes for SRID value
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.#ctor">
            <summary>
            Initializes writer with LittleIndian byte order.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.#ctor(GeoAPI.IO.ByteOrder)">
            <summary>
            Initializes writer with the specified byte order.
            </summary>
            <param name="encodingType">Encoding type</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.#ctor(GeoAPI.IO.ByteOrder,System.Boolean)">
            <summary>
            Initializes writer with the specified byte order.
            </summary>
            <param name="encodingType">Encoding type</param>
            <param name="handleSRID">SRID values, present or not, should be emitted.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.#ctor(GeoAPI.IO.ByteOrder,System.Boolean,System.Boolean)">
            <summary>
            Initializes writer with the specified byte order.
            </summary>
            <param name="encodingType">Encoding type</param>
            <param name="handleSRID">SRID values, present or not, should be emitted.</param>
            <param name="emitZ">Z values, present or not, should be emitted</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.#ctor(GeoAPI.IO.ByteOrder,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes writer with the specified byte order.
            </summary>
            <param name="encodingType">Encoding type</param>
            <param name="handleSRID">SRID values, present or not, should be emitted.</param>
            <param name="emitZ">Z values, present or not, should be emitted</param>
            <param name="emitM">M values, present or not, should be emitted</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Writes a WKB representation of a given point.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Writes a WKB representation of a given point.
            </summary>
            <param name="geometry"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.WriteByteOrder(System.IO.BinaryWriter)">
            <summary>
            Writes LittleIndian ByteOrder.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.Coordinate,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="coordinate"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IPoint,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="point"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.ILineString,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="lineString"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.ILinearRing,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="ring"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IPolygon,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="polygon"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IMultiPoint,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="multiPoint"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IMultiLineString,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="multiLineString"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IMultiPolygon,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="multiPolygon"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometryCollection,System.IO.BinaryWriter)">
             <summary>
            
             </summary>
             <param name="geomCollection"></param>
             <param name="writer"></param>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.GetBytes(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IGeometryCollection)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IMultiPolygon)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IMultiLineString)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IMultiPoint)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IPolygon)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.ILineString)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IPoint)">
             <summary>
            
             </summary>
             <param name="geometry"></param>
             <returns></returns>
        </member>
        <member name="P:NetTopologySuite.IO.WKBWriter.Strict">
            <summary>
            Gets a value whether or not EWKB featues may be used.
            <para/>EWKB features are
            <list type="Bullet"><item>0x80000000 flag if geometry's z-ordinate values are written</item>
            <item>0x40000000 flag if geometry's m-ordinate values are written</item>
            <item>0x20000000 flag if geometry's SRID value is written</item></list>
            </summary>
        </member>
        <member name="T:NetTopologySuite.IO.WKTReader">
            <summary>  
            Converts a Well-Known Text string to a <c>Geometry</c>.
            
            The <c>WKTReader</c> allows
            extracting <c>Geometry</c> objects from either input streams or
            internal strings. This allows it to function as a parser to read <c>Geometry</c>
            objects from text blocks embedded in other data formats (e.g. XML). 
            
            The Well-known
            Text format is defined in the <A HREF="http://www.opengis.org/techno/specs.htm">
            OpenGIS Simple Features Specification for SQL</A> . 
            
            NOTE:  There is an inconsistency in the SFS. 
            The WKT grammar states that <c>MultiPoints</c> are represented by 
            <c>MULTIPOINT ( ( x y), (x y) )</c>, 
            but the examples show <c>MultiPoint</c>s as <c>MULTIPOINT ( x y, x y )</c>. 
            Other implementations follow the latter syntax, so NTS will adopt it as well.
            A <c>WKTReader</c> is parameterized by a <c>GeometryFactory</c>, 
            to allow it to create <c>Geometry</c> objects of the appropriate
            implementation. In particular, the <c>GeometryFactory</c> will
            determine the <c>PrecisionModel</c> and <c>SRID</c> that is used. 
            The <c>WKTReader</c> will convert the input numbers to the precise
            internal representation.
            <remarks>
            <see cref="T:NetTopologySuite.IO.WKTReader" /> reads also non-standard "LINEARRING" tags.
            </remarks>
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.#ctor">
            <summary> 
            Creates a <c>WKTReader</c> that creates objects using a basic GeometryFactory.
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>  
            Creates a <c>WKTReader</c> that creates objects using the given
            <c>GeometryFactory</c>.
            </summary>
            <param name="geometryFactory">The factory used to create <c>Geometry</c>s.</param>
        </member>
        <member name="P:NetTopologySuite.IO.WKTReader.Factory">
            <summary>
            Gets or sets the factory to create geometries
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.WKTReader.DefaultSRID">
            <summary>
            Gets or sets the default SRID
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.Read(System.String)">
            <summary>
            Converts a Well-known Text representation to a <c>Geometry</c>.
            </summary>
            <param name="wellKnownText">
            one or more Geometry Tagged Text strings (see the OpenGIS
            Simple Features Specification) separated by whitespace.
            </param>
            <returns>
            A <c>Geometry</c> specified by <c>wellKnownText</c>
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.Read(System.IO.Stream)">
            <summary>
            Converts a Well-known Text representation to a <c>Geometry</c>.
            </summary>
            <param name="stream">
            one or more Geometry Tagged Text strings (see the OpenGIS
            Simple Features Specification) separated by whitespace.
            </param>
            <returns>
            A <c>Geometry</c> specified by <c>wellKnownText</c>
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.Read(System.IO.TextReader)">
            <summary>  
            Converts a Well-known Text representation to a <c>Geometry</c>.
            </summary>
            <param name="reader"> 
            A Reader which will return a "Geometry Tagged Text"
            string (see the OpenGIS Simple Features Specification).
            </param>
            <returns>A <c>Geometry</c> read from <c>reader</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetCoordinates(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},System.Boolean,System.Boolean@)">
            <summary>
            Returns the next array of <c>Coordinate</c>s in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next element returned by the stream should be "(" (the
            beginning of "(x1 y1, x2 y2, ..., xn yn)") or "EMPTY".
            </param>
            <param name="skipExtraParenthesis">
            if set to <c>true</c> skip extra parenthesis around coordinates.
            </param>
            <returns>
            The next array of <c>Coordinate</c>s in the
            stream, or an empty array if "EMPTY" is the next element returned by
            the stream.
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetPreciseCoordinate(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="tokens"></param>
            <param name="skipExtraParenthesis"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.IsNumberNext(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetNextNumber(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            Returns the next number in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be a number.
            </param>
            <returns>The next number in the stream.</returns>
            <exception cref="T:GeoAPI.IO.ParseException">if the next token is not a valid number</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetNextEmptyOrOpener(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            Returns the next "EMPTY" or "(" in the stream as uppercase text.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be "EMPTY" or "(".
            </param>
            <returns>
            The next "EMPTY" or "(" in the stream as uppercase text.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetNextCloserOrComma(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            Returns the next ")" or "," in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")" or ",".
            </param>
            <returns>
            The next ")" or "," in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetNextCloser(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            Returns the next ")" in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")".
            </param>
            <returns>
            The next ")" in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.GetNextWord(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            Returns the next word in the stream as uppercase text.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be a word.
            </param>
            <returns>The next word in the stream as uppercase text.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadGeometryTaggedText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token})">
            <summary>
            Creates a <c>Geometry</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Geometry Tagged Text.
            </param>
            <returns>A <c>Geometry</c> specified by the next token
            in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadPointText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <c>Point</c> using the next token in the stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a &lt;Point Text.
            </param>
            <param name="factory"> </param>
            <returns>A <c>Point</c> specified by the next token in
            the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadLineStringText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <c>LineString</c> using the next token in the stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a &lt;LineString Text.
            </param>
            <param name="factory"> </param>
            <returns>
            A <c>LineString</c> specified by the next
            token in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadLinearRingText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <c>LinearRing</c> using the next token in the stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a &lt;LineString Text.
            </param>
            <param name="factory"> </param>
            <returns>A <c>LinearRing</c> specified by the next
            token in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadMultiPointText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <c>MultiPoint</c> using the next token in the stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a &lt;MultiPoint Text.
            </param>
            <param name="factory"> </param>
            <returns>
            A <c>MultiPoint</c> specified by the next
            token in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ToPoints(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary> 
            Creates an array of <c>Point</c>s having the given <c>Coordinate</c>s.
            </summary>
            <param name="coordinates">
            The <c>Coordinate</c>s with which to create the <c>Point</c>s
            </param>
            <param name="factory">The factory to create the points</param>
            <returns>
            <c>Point</c>s created using this <c>WKTReader</c>
            s <c>GeometryFactory</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadPolygonText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>  
            Creates a <c>Polygon</c> using the next token in the stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a Polygon Text.
            </param>
            <param name="factory"> </param>
            <returns>
            A <c>Polygon</c> specified by the next token
            in the stream.        
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadMultiLineStringText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <c>MultiLineString</c> using the next token in the stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a MultiLineString Text.
            </param>
            <param name="factory"> </param>
            <returns>
            A <c>MultiLineString</c> specified by the
            next token in the stream.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadMultiPolygonText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>  
            Creates a <c>MultiPolygon</c> using the next token in the stream.
            </summary>
            <param name="tokens">Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a MultiPolygon Text.
            </param>
            <param name="factory"> </param>
            <returns>
            A <c>MultiPolygon</c> specified by the next
            token in the stream, or if if the coordinates used to create the
            <c>Polygon</c> shells and holes do not form closed linestrings.</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTReader.ReadGeometryCollectionText(System.Collections.Generic.IEnumerator{RTools_NTS.Util.Token},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <c>GeometryCollection</c> using the next token in the
            stream.
            </summary>
            <param name="tokens">
              Tokenizer over a stream of text in Well-known Text
              format. The next tokens must form a &lt;GeometryCollection Text.
            </param>
            <param name="factory"> </param>
            <returns>
            A <c>GeometryCollection</c> specified by the
            next token in the stream.</returns>
        </member>
        <member name="P:NetTopologySuite.IO.WKTReader.RepairRings">
            <summary>
            Gets or sets whether invalid linear rings should be fixed
            </summary>
        </member>
        <member name="T:NetTopologySuite.IO.WKTWriter">
            <summary> 
            Outputs the textual representation of a <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            The <see cref="T:NetTopologySuite.IO.WKTWriter" /> outputs coordinates rounded to the precision
            model. No more than the maximum number of necessary decimal places will be
            output.
            The Well-known Text format is defined in the <A
            HREF="http://www.opengis.org/techno/specs.htm">OpenGIS Simple Features
            Specification for SQL</A>.
            A non-standard "LINEARRING" tag is used for LinearRings. The WKT spec does
            not define a special tag for LinearRings. The standard tag to use is
            "LINESTRING".
            </summary>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.ToPoint(GeoAPI.Geometries.Coordinate)">
            <summary>
            Generates the WKT for a <c>Point</c> specified by a <see cref="T:GeoAPI.Geometries.Coordinate"/>.
            </summary>
            <param name="p0">The point coordinate.</param>
            <returns>The WKT</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.ToLineString(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Generates the WKT for a N-point <c>LineString</c> specified by a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            </summary>
            <param name="seq">The sequence to write.</param>
            <returns>The WKT</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.ToLineString(GeoAPI.Geometries.Coordinate[])">
             Generates the WKT for a <tt>LINESTRING</tt>
             specified by a {@link CoordinateSequence}.
            
             @param seq the sequence to write
            
             @return the WKT string
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.ToLineString(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Generates the WKT for a <c>LineString</c> specified by two <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="p0">The first coordinate.</param>
            <param name="p1">The second coordinate.</param>
            <returns>The WKT</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.CreateFormatter(GeoAPI.Geometries.IPrecisionModel)">
            <summary>  
            Creates the <c>NumberFormatInfo</c> used to write <c>double</c>s
            with a sufficient number of decimal places.
            </summary>
            <param name="precisionModel"> 
            The <c>PrecisionModel</c> used to determine
            the number of decimal places to write.
            </param>
            <returns>
            A <c>NumberFormatInfo</c> that write <c>double</c>s 
            without scientific notation.
            </returns>        
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.StringOfChar(System.Char,System.Int32)">
            <summary>
            Returns a <c>String</c> of repeated characters.
            </summary>
            <param name="ch">The character to repeat.</param>
            <param name="count">The number of times to repeat the character.</param>
            <returns>A <c>string</c> of characters.</returns>
        </member>
        <member name="P:NetTopologySuite.IO.WKTWriter.Formatted">
            <summary>
             Gets/sets whther the output woll be formatted
            </summary>
        </member>
        <member name="P:NetTopologySuite.IO.WKTWriter.MaxCoordinatesPerLine">
            <summary>
             Gets/sets the maximum number of coordinates per line written in formatted output.
            </summary>
             <remarks>If the provided coordinate number is &lt; 0, coordinates will be written all on one line.</remarks>
        </member>
        <member name="P:NetTopologySuite.IO.WKTWriter.Tab">
            <summary>Gets/sets the tab size to use for indenting.</summary>
             <exception cref="T:System.ArgumentException">If the size is non-positive</exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process.</param>
            <returns>A Geometry Tagged Text string (see the OpenGIS Simple Features Specification).</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process.</param>
            <param name="stream">A <c>Stream</c> to write into</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.TextWriter)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process.</param>
            <param name="writer"></param>
            <returns>A "Geometry Tagged Text" string (see the OpenGIS Simple Features Specification)</returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.WriteFormatted(GeoAPI.Geometries.IGeometry)">
            <summary>
            Same as <c>write</c>, but with newlines and spaces to make the
            well-known text more readable.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process</param>
            <returns>
            A "Geometry Tagged Text" string (see the OpenGIS Simple
            Features Specification), with newlines and spaces.
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.WriteFormatted(GeoAPI.Geometries.IGeometry,System.IO.TextWriter)">
            <summary>
            Same as <c>write</c>, but with newlines and spaces to make the
            well-known text more readable.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process</param>
            <param name="writer"></param>
            <returns>
            A Geometry Tagged Text string (see the OpenGIS Simple
            Features Specification), with newlines and spaces.
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.WriteFormatted(GeoAPI.Geometries.IGeometry,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process</param>
            <param name="useFormatting"></param>
            <param name="writer"></param>
            <returns>
            A "Geometry Tagged Text" string (see the OpenGIS Simple
            Features Specification).
            </returns>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendGeometryTaggedText(GeoAPI.Geometries.IGeometry,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>Geometry</c> to &lt;Geometry Tagged Text format,
            then appends it to the writer.
            </summary>
            <param name="geometry">/he <c>Geometry</c> to process.</param>
            <param name="level"></param>
            <param name="writer">/he output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendPointTaggedText(GeoAPI.Geometries.Coordinate,System.Int32,System.IO.TextWriter,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Converts a <c>Coordinate</c> to Point Tagged Text format,
            then appends it to the writer.
            </summary>
            <param name="coordinate">The <c>Coordinate</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
            <param name="precisionModel"> 
            The <c>PrecisionModel</c> to use to convert
            from a precise coordinate to an external coordinate.
            </param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendLineStringTaggedText(GeoAPI.Geometries.ILineString,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>LineString</c> to &lt;LineString Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="lineString">The <c>LineString</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendLinearRingTaggedText(GeoAPI.Geometries.ILinearRing,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>LinearRing</c> to &lt;LinearRing Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="linearRing">The <c>LinearRing</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendPolygonTaggedText(GeoAPI.Geometries.IPolygon,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>Polygon</c> to Polygon Tagged Text format,
            then appends it to the writer.
            </summary>
            <param name="polygon">The <c>Polygon</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendMultiPointTaggedText(GeoAPI.Geometries.IMultiPoint,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPoint</c> to &lt;MultiPoint Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="multipoint">The <c>MultiPoint</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendMultiLineStringTaggedText(GeoAPI.Geometries.IMultiLineString,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiLineString</c> to MultiLineString Tagged
            Text format, then appends it to the writer.
            </summary>
            <param name="multiLineString">The <c>MultiLineString</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendMultiPolygonTaggedText(GeoAPI.Geometries.IMultiPolygon,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPolygon</c> to MultiPolygon Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="multiPolygon">The <c>MultiPolygon</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendGeometryCollectionTaggedText(GeoAPI.Geometries.IGeometryCollection,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>GeometryCollection</c> to GeometryCollection
            Tagged Text format, then appends it to the writer.
            </summary>
            <param name="geometryCollection">The <c>GeometryCollection</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendPointText(GeoAPI.Geometries.Coordinate,System.Int32,System.IO.TextWriter,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Converts a <c>Coordinate</c> to Point Text format, then
            appends it to the writer.
            </summary>
            <param name="coordinate">The <c>Coordinate</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
            <param name="precisionModel">
            The <c>PrecisionModel</c> to use to convert
            from a precise coordinate to an external coordinate.
            </param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendCoordinate(GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.IO.TextWriter)">
            <summary>Appends the i'th coordinate from the sequence to the writer</summary>
             <param name="seq">the <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to process</param>
             <param name="i">the index of the coordinate to write</param>
             <param name="writer">writer the output writer to append to</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendCoordinate(GeoAPI.Geometries.Coordinate,System.IO.TextWriter,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Converts a <c>Coordinate</c> to Point format, then appends
            it to the writer.
            </summary>
            <param name="coordinate">The <c>Coordinate</c> to process.</param>
            <param name="writer">The output writer to append to.</param>
            <param name="precisionModel">
            The <c>PrecisionModel</c> to use to convert
            from a precise coordinate to an external coordinate.
            </param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.WriteNumber(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double" /> to a <see cref="T:System.String" />.
            </summary>
            <param name="d">The <see cref="T:System.Double" /> to convert.</param>
            <returns>
            The <see cref="T:System.Double" /> as a <see cref="T:System.String" />.
            </returns>        
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendSequenceText(GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>Converts a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to &lt;LineString Text&gt; format, then appends it to the writer</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendLineStringText(GeoAPI.Geometries.ILineString,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>LineString</c> to &lt;LineString Text format, then
            appends it to the writer.
            </summary>
            <param name="lineString">The <c>LineString</c> to process.</param>
            <param name="level"></param>
            <param name="doIndent"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendPolygonText(GeoAPI.Geometries.IPolygon,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>Polygon</c> to Polygon Text format, then
            appends it to the writer.
            </summary>
            <param name="polygon">The <c>Polygon</c> to process.</param>
            <param name="level"></param>
            <param name="indentFirst"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendMultiPointText(GeoAPI.Geometries.IMultiPoint,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPoint</c> to &lt;MultiPoint Text format, then
            appends it to the writer.
            </summary>
            <param name="multiPoint">The <c>MultiPoint</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendMultiLineStringText(GeoAPI.Geometries.IMultiLineString,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiLineString</c> to &lt;MultiLineString Text
            format, then appends it to the writer.
            </summary>
            <param name="multiLineString">The <c>MultiLineString</c> to process.</param>
            <param name="level"></param>
            <param name="indentFirst"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendMultiPolygonText(GeoAPI.Geometries.IMultiPolygon,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPolygon</c> to &lt;MultiPolygon Text format,
            then appends it to the writer.
            </summary>
            <param name="multiPolygon">The <c>MultiPolygon</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.AppendGeometryCollectionText(GeoAPI.Geometries.IGeometryCollection,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>GeometryCollection</c> to GeometryCollectionText
            format, then appends it to the writer.
            </summary>
            <param name="geometryCollection">The <c>GeometryCollection</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.IndentCoords(System.Int32,System.Int32,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="coordIndex"></param>
            <param name="level"></param>
            <param name="writer"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NetTopologySuite.IO.WKTWriter.Indent(System.Int32,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="writer"></param>
        </member>
        <member name="T:NetTopologySuite.Mathematics.Plane">
            <summary>
            Enumeration for the 3 coordinate planes
            </summary>
        </member>
        <member name="T:NetTopologySuite.Mathematics.Plane3D">
            <summary>
            Models a plane in 3-dimensional Cartesian space.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Plane3D.OrientedDistance(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the oriented distance from a point to the plane.<br/>
            The distance is:
            <list type="Bullet">
            <item><b>positive</b> if the point lies above the plane (relative to the plane normal)</item>
            <item><b>zero</b> if the point is on the plane</item>
            <item><b>negative</b> if the point lies below the plane (relative to the plane normal)</item>
            </list> 
            </summary>
            <param name="p">The point to compute the distance for</param>
            <returns>The oriented distance to the plane</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Plane3D.ClosestAxisPlane">
            <summary>
            Computes the axis plane that this plane lies closest to.
            <para/>
            Geometries lying in this plane undergo least distortion
            (and have maximum area)
            when projected to the closest axis plane.
            This provides optimal conditioning for
            computing a Point-in-Polygon test.
            </summary>
            <returns>The index of the closest axis plane</returns>
        </member>
        <member name="T:NetTopologySuite.Mathematics.Vector3D">
            <summary>
            Represents a vector in 3-dimensional Cartesian space.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Dot(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the dot product of the 3D vectors AB and CD.
            </summary>
            <param name="A">A coordinate</param>
            <param name="B">A coordinate</param>
            <param name="C">A coordinate</param>
            <param name="D">A coordinate</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Create(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new vector with given <paramref name="x"/>, <paramref name="y"/> and <paramref name="z"/> components.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <returns>A new vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Create(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new vector from a <see cref="T:GeoAPI.Geometries.Coordinate"/>.
            </summary>
            <param name="coord">The coordinate to copy</param>
            <returns>A new vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Dot(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the 3D dot-product of two <see cref="T:GeoAPI.Geometries.Coordinate"/>s
            </summary>
            <param name="v1">The 1st vector</param>
            <param name="v2">The 2nd vector</param>
            <returns>The dot product of the (coordinate) vectors</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a vector, that is the difference of <paramref name="to"/> and <paramref name="from"/>
            </summary>
            <param name="from">The origin coordinate</param>
            <param name="to">The destination coordinate</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a vector with the ordinates <paramref name="x"/>, <paramref name="y"/> and <paramref name="z"/>
            </summary>
            <param name="x">The x-ordinate</param>
            <param name="y">The y-ordinate</param>
            <param name="z">The z-ordinate</param>
        </member>
        <member name="P:NetTopologySuite.Mathematics.Vector3D.X">
            <summary>
            Gets a value indicating the x-ordinate
            </summary>
        </member>
        <member name="P:NetTopologySuite.Mathematics.Vector3D.Y">
            <summary>
            Gets a value indicating the y-ordinate
            </summary>
        </member>
        <member name="P:NetTopologySuite.Mathematics.Vector3D.Z">
            <summary>
            Gets a value indicating the z-ordinate
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Dot(NetTopologySuite.Mathematics.Vector3D)">
            <summary>
            Computes the dot-product of this <see cref="T:NetTopologySuite.Mathematics.Vector3D"/> and <paramref name="v"/>
            </summary>
            <paramref name="v">The 2nd vector</paramref>
            <returns>The dot product of the vectors</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Length">
            <summary>
            Function to compute the length of this vector
            </summary>
            <returns>The length of this vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Length(GeoAPI.Geometries.Coordinate)">
            <summary>
            Function to compute the length of vector <paramref name="v"/>.
            </summary>
            <param name="v">A coordinate, treated as vector</param>
            <returns>The length of <paramref name="v"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Normalize">
            <summary>
            Function to compute a normalized form of this vector
            </summary>
            <returns>A normalized form of this vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Divide(System.Double)">
            <summary>
            Function to devide all dimensions of this vector by <paramref name="d"/>.
            </summary>
            <param name="d">The divisor</param>
            <returns>A new (divided) vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector3D.Normalize(GeoAPI.Geometries.Coordinate)">
            <summary>
            Function to compute a normalized form of vector <paramref name="v"/>.
            </summary>
            <param name="v">A coordinate vector</param>
            <returns>A normalized form of <paramref name="v"/></returns>
        </member>
        <member name="T:NetTopologySuite.Mathematics.DD">
            <summary>
            Implements extended-precision floating-point numbers 
            which maintain 106 bits (approximately 30 decimal digits) of precision. 
            <para/>
            A DoubleDouble uses a representation containing two double-precision values.
            A number x is represented as a pair of doubles, x.hi and x.lo,
            such that the number represented by x is x.hi + x.lo, where
            <pre>
                |x.lo| &lt;= 0.5*ulp(x.hi)
            </pre>
            and ulp(y) means "unit in the last place of y".  
            The basic arithmetic operations are implemented using 
            convenient properties of IEEE-754 floating-point arithmetic.
            <para/>
            The range of values which can be represented is the same as in IEEE-754.  
            The precision of the representable numbers 
            is twice as great as IEEE-754 double precision.
            <para/>
            The correctness of the arithmetic algorithms relies on operations
            being performed with standard IEEE-754 double precision and rounding.
            This is the Java standard arithmetic model, but for performance reasons 
            Java implementations are not
            constrained to using this standard by default.  
            Some processors (notably the Intel Pentium architecure) perform
            floating point operations in (non-IEEE-754-standard) extended-precision.
            A JVM implementation may choose to use the non-standard extended-precision
            as its default arithmetic mode.
            To prevent this from happening, this code uses the
            Java <tt>strictfp</tt> modifier, 
            which forces all operations to take place in the standard IEEE-754 rounding model. 
            <para/>
            The API provides both a set of value-oriented operations 
            and a set of mutating operations.
            Value-oriented operations treat DoubleDouble values as 
            immutable; operations on them return new objects carrying the result
            of the operation.  This provides a simple and safe semantics for
            writing DoubleDouble expressions.  However, there is a performance
            penalty for the object allocations required.
            The mutable interface updates object values in-place.
            It provides optimum memory performance, but requires
            care to ensure that aliasing errors are not created
            and constant values are not changed.
            <para/>
            This implementation uses algorithms originally designed variously by 
            Knuth, Kahan, Dekker, and Linnainmaa.  
            Douglas Priest developed the first C implementation of these techniques. 
            Other more recent C++ implementation are due to Keith M. Briggs and David Bailey et al.
            <h3>References</h3>
            <list type="Bullet">
            <item>Priest, D., <i>Algorithms for Arbitrary Precision Floating Point Arithmetic</i>,
            in P. Kornerup and D. Matula, Eds., Proc. 10th Symposium on Computer Arithmetic, 
            IEEE Computer Society Press, Los Alamitos, Calif., 1991.</item>
            <item>Yozo Hida, Xiaoye S. Li and David H. Bailey, 
            <i>Quad-Double Arithmetic: Algorithms, Implementation, and Application</i>, 
            manuscript, Oct 2000; Lawrence Berkeley National Laboratory Report BNL-46996.</item>
            <item>David Bailey, <i>High Precision Software Directory</i>; 
            <tt>http://crd.lbl.gov/~dhbailey/mpdist/index.html</tt></item>
            </list>
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.PI">
            <summary>The value nearest to the constant Pi.</summary>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.TwoPi">
            <summary>The value nearest to the constant 2 * Pi.</summary>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.PiHalf">
            <summary>The value nearest to the constant Pi / 2.</summary>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.E">
            <summary>
            The value nearest to the constant e (the natural logarithm base). 
            </summary>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.NaN">
            <summary>
            A value representing the result of an operation which does not return a valid number.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.Epsilon">
            <summary>
            The smallest representable relative difference between two <see cref="T:NetTopologySuite.Mathematics.DD"/> values
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ValueOf(System.String)">
            <summary>
            Converts the string argument to a DoubleDouble number.
            </summary>
            <param name="str">A string containing a representation of a numeric value</param>
            <returns>The extended precision version of the value</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="str"/> is not a valid representation of a number</exception>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ValueOf(System.Double)">
            Converts the <tt>double</tt> argument to a DoubleDouble number.
            
            @param x a numeric value
            @return the extended precision version of the value
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD.Split">
            <summary>
            The value to split a double-precision value on during multiplication
            </summary>
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD._hi">
            The high-order component of the double-double precision value.
        </member>
        <member name="F:NetTopologySuite.Mathematics.DD._lo">
            The low-order component of the double-double precision value.
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:NetTopologySuite.Mathematics.DD"/> with value x.
            </summary>
            <param name="x">The initial value</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:NetTopologySuite.Mathematics.DD"/> with value (hi, lo).
            </summary>
            <param name="hi">The high order component</param>
            <param name="lo">The low order component</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.#ctor(NetTopologySuite.Mathematics.DD)">
            <summary>
            Creates a <see cref="T:NetTopologySuite.Mathematics.DD"/> with a value equal to the argument
            </summary>
            <param name="dd">The initial value</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.#ctor(System.String)">
            Creates a new DoubleDouble with value equal to the argument.
            
            @param str the value to initialize by
            @throws NumberFormatException if <tt>str</tt> is not a valid representation of a number
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Copy(NetTopologySuite.Mathematics.DD)">
            <summary>
            Creates a new <see cref="T:NetTopologySuite.Mathematics.DD"/> with the value of the argument.
            </summary>
            <param name="dd">The value to copy</param>
            <returns>A copy of <paramref name="dd"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Clone">
            <summary>
            Creates and returns a copy of this value.
            </summary>
            <returns>Acopy of this value</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Add(NetTopologySuite.Mathematics.DD)">
            <summary>
            Returns a <see cref="T:NetTopologySuite.Mathematics.DD"/> whose value is <c>(this + <paramref name="y"/>)</c>
            </summary>
            <param name="y">The addende</param>"/>
            <returns><c>(this + <paramref name="y"/>)</c></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.op_Addition(NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD)">
            <summary>
            Returns the sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">The left hand side</param>
            <param name="rhs">The right hand side</param>
            <returns>The sum of <paramref name="lhs"/> and <paramref name="rhs"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.op_Addition(NetTopologySuite.Mathematics.DD,System.Double)">
            <summary>
            Returns the sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">The left hand side</param>
            <param name="rhs">The right hand side</param>
            <returns>The sum of <paramref name="lhs"/> and <paramref name="rhs"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.op_Subtraction(NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD)">
            <summary>
            Returns the difference of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">The left hand side</param>
            <param name="rhs">The right hand side</param>
            <returns>The difference of <paramref name="lhs"/> and <paramref name="rhs"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.op_Subtraction(NetTopologySuite.Mathematics.DD,System.Double)">
            <summary>
            Returns the difference of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">The left hand side</param>
            <param name="rhs">The right hand side</param>
            <returns>The difference of <paramref name="lhs"/> and <paramref name="rhs"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Add(System.Double)">
            <summary>
            Returns a <see cref="T:NetTopologySuite.Mathematics.DD"/> whose value is <tt>(this + y)</tt>.
            </summary>
            <param name="y">The addend</param>
            <returns><tt>(this + y)</tt></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Subtract(NetTopologySuite.Mathematics.DD)">
            <summary>
            Computes a new <see cref="T:NetTopologySuite.Mathematics.DD"/> object whose value is <tt>(this - y)</tt>.
            </summary>
            <param name="y">The subtrahend</param>
            <returns><tt>(this - y)</tt></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Subtract(System.Double)">
            <summary>
            Computes a new <see cref="T:NetTopologySuite.Mathematics.DD"/> object whose value is <tt>(this - y)</tt>.
            </summary>
            <param name="y">The subtrahend</param>
            <returns><tt>(this - y)</tt></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Negate">
            <summary>
            Returns a <see cref="T:NetTopologySuite.Mathematics.DD"/> whose value is <c>-this</c>.
            </summary>
            <returns><c>-this</c></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Multiply(NetTopologySuite.Mathematics.DD)">
            Returns a new DoubleDouble whose value is <tt>(this * y)</tt>.
            
            @param y the multiplicand
            @return <tt>(this * y)</tt>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Multiply(System.Double)">
            Returns a new DoubleDouble whose value is <tt>(this * y)</tt>.
            
            @param y the multiplicand
            @return <tt>(this * y)</tt>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.op_Multiply(NetTopologySuite.Mathematics.DD,System.Double)">
            **
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Divide(NetTopologySuite.Mathematics.DD)">
            <summary>
            Computes a new <see cref="T:NetTopologySuite.Mathematics.DD"/> whose value is <tt>(this / y)</tt>.
            </summary>
            <param name="y">The divisor</param>
            <returns>A new <see cref="T:NetTopologySuite.Mathematics.DD"/> with the value <c>(this / y)</c></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Divide(System.Double)">
            <summary>
            Computes a new <see cref="T:NetTopologySuite.Mathematics.DD"/> whose value is <tt>(this / y)</tt>.
            </summary>
            <param name="y">The divisor</param>
            <returns>A new <see cref="T:NetTopologySuite.Mathematics.DD"/> with the value <c>(this / y)</c></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.op_Division(NetTopologySuite.Mathematics.DD,System.Double)">
            **
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Reciprocal">
            Returns a DoubleDouble whose value is  <tt>1 / this</tt>.
            
            @return the reciprocal of this value
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Min(NetTopologySuite.Mathematics.DD)">
            <summary>
            Computes the minimum of this and another DD number.
            </summary>
            <param name="x">A DD number</param>
            <returns>The minimum of the two numbers</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Max(NetTopologySuite.Mathematics.DD)">
            <summary>
            Computes the maximum of this and another DD number.
            </summary>
            <param name="x">A DD number</param>
            <returns>The maximum of the two numbers</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Mathematics.DD.Floor" -->
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Mathematics.DD.Ceiling" -->
        <member name="M:NetTopologySuite.Mathematics.DD.Signum">
            <summary>
            Returns an integer indicating the sign of this value.
            <para>
            <list type="Bullet">
            <item>if this value is &gt; 0, returns 1</item>
            <item>if this value is &lt; 0, returns -1</item>
            <item>if this value is = 0, returns 0</item>
            <item>if this value is NaN, returns 0</item>
            </list>
            </para>
            </summary>
            <returns>An integer indicating the sign of this value</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Rint">
            <summary>
            Rounds this value to the nearest integer.
            The value is rounded to an integer by adding 1/2 and taking the floor of the result.
            Special cases:
            <list type="Bullet">
            <item>If this value is NaN, returns NaN.</item>
            </list>
            </summary>
            <returns>This value rounded to the nearest integer</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Truncate">
            <summary>
            Returns the integer which is largest in absolute value and not further
            from zero than this value.  
            <para/>
            Special cases:
            <list type="Bullet">
            <item>If this value is NaN, returns NaN.</item>
            </list>
            </summary>
            <returns>
            The integer which is largest in absolute value and not further from zero than this value
            </returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Abs">
            <summary>
            Returns the absolute value of this value.
            <para/>
            Special cases:
            <list type="Bullet">
            <item>if this value is NaN, it is returned.</item>
            </list>
            </summary>
            <returns>The absolute value of this value</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Sqr">
            <summary>
            Computes the square of this value.
            </summary>
            <returns>The square of this value</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Sqr(System.Double)">
            <summary>
            Computes the square of this value.
            </summary>
            <returns>The square of this value.</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Sqrt">
            Computes the positive square root of this value.
            If the number is NaN or negative, NaN is returned.
            
            @return the positive square root of this number. 
            If the argument is NaN or less than zero, the result is NaN.
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Pow(System.Int32)">
            <summary>
            Computes the value of this number raised to an integral power.
            Follows semantics of .Net Math.Pow as closely as possible.
            </summary>
            <param name="exp">The integer exponent</param>
            <returns>x raised to the integral power exp</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ToDoubleValue">
            Converts this value to the nearest double-precision number.
            
            @return the nearest double-precision number to this value
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ToIntValue">
            Converts this value to the nearest integer.
            
            @return the nearest integer to this value
        </member>
        <member name="P:NetTopologySuite.Mathematics.DD.IsZero">
            <summary>
            Gets a value indicating whether this object is zero (0) or not
            </summary>
        </member>
        <member name="P:NetTopologySuite.Mathematics.DD.IsNegative">
            <summary>
            Gets a value indicating whether this object is negative or not
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.IsPositive">
            <summary>
            Gets a value indicating whether this object is positive or not
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.IsNaN(NetTopologySuite.Mathematics.DD)">
            <summary>
            Gets a value indicating whether this object is positive or not
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Equals(NetTopologySuite.Mathematics.DD)">
            Tests whether this value is equal to another <tt>DoubleDouble</tt> value.
            
            @param y a DoubleDouble value
            @return true if this value = y
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.GreaterThan(NetTopologySuite.Mathematics.DD)">
            Tests whether this value is greater than another <tt>DoubleDouble</tt> value.
            @param y a DoubleDouble value
            @return true if this value > y
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.GreaterOrEqualThan(NetTopologySuite.Mathematics.DD)">
            Tests whether this value is greater than or equals to another <tt>DoubleDouble</tt> value.
            @param y a DoubleDouble value
            @return true if this value >= y
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.LessThan(NetTopologySuite.Mathematics.DD)">
            <summary>
            Tests whether this value is less than another <tt>DoubleDouble</tt> value.
            </summary>
            <param name="y">A DoubleDouble value</param>
            <returns><c>true</c> if this value is &lt; <paramref name="y"/> </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Mathematics.DD.LessOrEqualThan(NetTopologySuite.Mathematics.DD)" -->
        <member name="M:NetTopologySuite.Mathematics.DD.CompareTo(NetTopologySuite.Mathematics.DD)">
            Compares two DoubleDouble objects numerically.
            
            @return -1,0 or 1 depending on whether this value is less than, equal to
            or greater than the value of <tt>o</tt>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Dump">
            <summary>
            Dumps the components of this number to a string.
            </summary>
            <returns>A string showing the components of the number</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ToString">
            <summary>
            Returns a string representation of this number, in either standard or scientific notation.
            If the magnitude of the number is in the range [ 10<sup>-3</sup>, 10<sup>8</sup> ]
            standard notation will be used.  Otherwise, scientific notation will be used.
            </summary>
            <returns>A string representation of this number</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ToStandardNotation">
            <summary>
            Returns the string representation of this value in standard notation.
            </summary>
            <returns>The string representation in standard notation</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ToSciNotation">
            <summary>
            Returns the string representation of this value in scientific notation.
            </summary>
            <returns>The string representation in scientific notation</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.ExtractSignificantDigits(System.Boolean,System.Int32[])">
            Extracts the significant digits in the decimal representation of the argument.
            A decimal point may be optionally inserted in the string of digits
            (as long as its position lies within the extracted digits
            - if not, the caller must prepend or append the appropriate zeroes and decimal point).
            
            @param y the number to extract ( >= 0)
            @param decimalPointPos the position in which to insert a decimal point
            @return the string containing the significant digits and possibly a decimal point
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.GetSpecialNumberString">
            <summary>
            Returns the string for this value if it has a known representation (e.g. NaN or 0.0).
            </summary>
            <returns>The string for this special number <br/>
            or <c>null</c> if the number is not a special number</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Magnitude(System.Double)">
            <summary>
            Determines the decimal magnitude of a number.<para/>
            The magnitude is the exponent of the greatest power of 10 which is less than
            or equal to the number.
            </summary>
            <param name="x">The number to find the magnitude of</param>
            <returns>The decimal magnitude of <paramref name="x"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.DD.Parse(System.String)">
            <summary>
            Converts a string representation of a real number into a DoubleDouble value.
            The format accepted is similar to the standard Java real number syntax.  
            It is defined by the following regular expression:
            <pre>
            [<tt>+</tt>|<tt>-</tt>] {<i>digit</i>} [ <tt>.</tt> {<i>digit</i>} ] [ ( <tt>e</tt> | <tt>E</tt> ) [<tt>+</tt>|<tt>-</tt>] {<i>digit</i>}+
            </pre>
             </summary>
            <param name="str">The string to parse</param>
            <returns>The value of the parsed number</returns>
            <exception cref="T:System.FormatException">Thrown if <tt>str</tt> is not a valid representation of a number</exception>
        </member>
        <member name="T:NetTopologySuite.Mathematics.MathUtil">
            <summary>
            Various utility functions for mathematical and numerical operations.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a <c>double</c> value to a given range.
            </summary>
            <param name="x">The value to clamp</param>
            <param name="min">The minimum value of the range</param>
            <param name="max">The maximum value of the range</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a <c>int</c> value to a given range.
            </summary>
            <param name="x">The value to clamp</param>
            <param name="min">The minimum value of the range</param>
            <param name="max">The maximum value of the range</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Log10(System.Double)">
            <summary>
            Computes the base-10 logarithm of a <c>double</c> value.
            <para>
            <list type="Bullet">
            <item>If the argument is NaN or less than zero, then the result is NaN.</item>
            <item>If the argument is positive infinity, then the result is positive infinity.</item>
            <item>If the argument is positive zero or negative zero, then the result is negative infinity.</item>
            </list>
            </para>
            </summary>
            <param name="x">A positive number</param>
            <returns>The value log a, the base-10 logarithm of the input value</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Mathematics.MathUtil.Wrap(System.Int32,System.Int32)" -->
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Average(System.Double,System.Double)">
            <summary>
            Computes the average of two numbers.
            </summary>
            <param name="x1">A number</param>
            <param name="x2">A number</param>
            <returns>The average of the inputs</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Max(System.Double,System.Double,System.Double)">
            <summary>
            Computes the maximum fo three values
            </summary>
            <param name="v1">A number</param>
            <param name="v2">A number</param>
            <param name="v3">A number</param>
            <returns>The maximum value of <paramref name="v1"/>, <paramref name="v2"/> and <paramref name="v3"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Max(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the maximum of four values
            </summary>
            <param name="v1">A number</param>
            <param name="v2">A number</param>
            <param name="v3">A number</param>
            <param name="v4">A number</param>
            <returns>The maximum value of <paramref name="v1"/>, <paramref name="v2"/>, <paramref name="v3"/> and <paramref name="v4"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Min(System.Double,System.Double,System.Double)">
            <summary>
            Computes the minimum of four values
            </summary>
            <param name="v1">A number</param>
            <param name="v2">A number</param>
            <param name="v3">A number</param>
            <returns>The minimum value of <paramref name="v1"/>, <paramref name="v2"/> and <paramref name="v3"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.MathUtil.Min(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the minimum of four values
            </summary>
            <param name="v1">A number</param>
            <param name="v2">A number</param>
            <param name="v3">A number</param>
            <param name="v4">A number</param>
            <returns>The minimum value of <paramref name="v1"/>, <paramref name="v2"/>, <paramref name="v3"/> and <paramref name="v4"/></returns>
        </member>
        <member name="T:NetTopologySuite.Mathematics.Matrix">
            <summary>
            Implements some 2D matrix operations 
            (in particular, solving systems of linear equations).
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Matrix.Solve(System.Double[][],System.Double[])">
            <summary>
            Solves a system of equations using Gaussian Elimination.
            In order to avoid overhead the algorithm runs in-place 
            on <see paramref="a"/> - if <see paramref="a"/> should not be modified the client must supply a copy.
            </summary>
            <param name="a">An nxn matrix in row/column order )modified by this method)</param>
            <param name="b">A vector of length n</param>
            <returns>A vector containing the solution (if any)<br/>or <value>null</value> if the system has no or no unique solution
            </returns>
            <exception cref="T:System.ArgumentException">If the matrix has the wrong size</exception>
        </member>
        <member name="T:NetTopologySuite.Mathematics.Vector2D">
            <summary>
            A 2-dimensional mathematical vector represented by double-precision X and Y components.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Create(System.Double,System.Double)">
            <summary>
            Creates a new vector with given X and Y components.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <returns>A new vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Create(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            Creates a new vector from an existing one.
            </summary>
            <param name="v">The vector to copy</param>
            <returns>A new vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Create(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a vector from a <see cref="T:GeoAPI.Geometries.Coordinate"/>.
            </summary>
            <param name="coord">The coordinate to copy</param>
            <returns>A new vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Create(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>Creates a vector with the direction and magnitude
             of the difference between the 
             <paramref name="to"/> and <paramref name="from"/> <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
             </summary>
             <param name="from">The origin coordinate</param>
             <param name="to">The destination coordinate</param>
             <returns>A new vector</returns>
        </member>
        <member name="F:NetTopologySuite.Mathematics.Vector2D._x">
            The X component of this vector.
        </member>
        <member name="F:NetTopologySuite.Mathematics.Vector2D._y">
            The Y component of this vector.
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.#ctor">
            <summary>
            Creates an new vector instance
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new vector instance using the provided <paramref name="x"/> and <paramref name="y"/> ordinates
            </summary>
            <param name="x">The x-ordinate value</param>
            <param name="y">The y-ordinate value</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.#ctor(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            Creates a new vector instance based on <paramref name="v"/>.
            </summary>
            <param name="v">The vector</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>Creates a new vector with the direction and magnitude
            of the difference between the 
            <paramref name="to"/> and <paramref name="from"/> <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="from">The origin coordinate</param>
            <param name="to">The destination coordinate</param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a vector from a <see cref="T:GeoAPI.Geometries.Coordinate"/>.
            </summary>
            <param name="v">The coordinate</param>
            <returns>A new vector</returns>
        </member>
        <member name="P:NetTopologySuite.Mathematics.Vector2D.X">
            <summary>
            Gets the x-ordinate value
            </summary>
        </member>
        <member name="P:NetTopologySuite.Mathematics.Vector2D.Y">
            <summary>
            Gets the y-ordinate value
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NetTopologySuite.Mathematics.Vector2D.Item(System.Int32)" -->
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Add(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            Adds <paramref name="v"/> to this vector instance.
            </summary>
            <param name="v">The vector to add</param>
            <returns>The result vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Subtract(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            Subtracts <paramref name="v"/> from this vector instance
            </summary>
            <param name="v">The vector to subtract</param>
            <returns>The result vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Multiply(System.Double)">
            <summary>
            Multiplies the vector by a scalar value.
            </summary>
            <param name="d">The value to multiply by</param>
            <returns>A new vector with the value v * d</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Divide(System.Double)">
            <summary>
            Divides the vector by a scalar value.
            </summary>
            <param name="d">The value to divide by</param>
            <returns>A new vector with the value v / d</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Negate">
            <summary>
            Negates this vector
            </summary>
            <returns>A new vector with [-_x, -_y]</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Length">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.LengthSquared">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Normalize">
            <summary>
            Normalizes the vector
            </summary>
            <returns>A new normalized vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Average(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.WeightedSum(NetTopologySuite.Mathematics.Vector2D,System.Double)">
            <summary>
            Computes the weighted sum of this vector
            with another vector,
            with this vector contributing a fraction
            of <tt>frac</tt> to the total.
            <para/>
            In other words, 
            <pre>
            sum = frac * this + (1 - frac) * v
            </pre>
            </summary>
            <param name="v">The vector to sum</param>
            <param name="frac">The fraction of the total contributed by this vector</param>
            <returns>The weighted sum of the two vectors</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Distance(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            Computes the distance between this vector and another one.
            </summary>
            <param name="v">A vector</param>
            <returns>The distance between the vectors</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Dot(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            Computes the dot-product of two vectors
            </summary>
            <param name="v">A vector</param>
            <returns>The dot product of the vectors</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Angle">
            <summary>
            Computes the angle this vector describes to the horizontal axis
            </summary>
            <returns>The angle</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Angle(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.AngleTo(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Rotate(System.Double)">
            <summary>
            Rotates this vector by <paramref name="angle"/>
            </summary>
            <param name="angle">The angle</param>
            <returns>The rotated vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.RotateByQuarterCircle(System.Int32)">
            <summary>
            Rotates a vector by a given number of quarter-circles (i.e. multiples of 90
            degrees or Pi/2 radians). A positive number rotates counter-clockwise, a
            negative number rotates clockwise. Under this operation the magnitude of
            the vector and the absolute values of the ordinates do not change, only
            their sign and ordinate index.
            </summary>
            <param name="numQuarters">The number of quarter-circles to rotate by</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.IsParallel(NetTopologySuite.Mathematics.Vector2D)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Translate(GeoAPI.Geometries.Coordinate)">
            <summary>
            Gets a <see cref="T:GeoAPI.Geometries.Coordinate"/> made of this vector translated by <paramref name="coord"/>.
            </summary>
            <param name="coord">The translation coordinate</param>
            <returns>A coordinate</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.ToCoordinate">
            <summary>
            Gets a <see cref="T:GeoAPI.Geometries.Coordinate"/> from this vector
            </summary>
            <returns>A coordinate</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Clone">
            <summary>
            Creates a copy of this vector
            </summary>
            <returns>A copy of this vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.ToString">
            <summary>
            Gets a string representation of this vector
            </summary>
            <returns>A string representing this vector</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.Equals(System.Object)">
            <summary>
            Tests if a vector <paramref name="o"/> has the same values for the x and y components.
            </summary>
            <param name="o">A <see cref="T:NetTopologySuite.Mathematics.Vector2D"/> with which to do the comparison.</param>
            <returns>true if <paramref name="o"/> is a <see cref="T:NetTopologySuite.Mathematics.Vector2D"/>with the same values for the X and Y components.</returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.Vector2D.GetHashCode">
            <summary>
            Gets a hashcode for this vector.
            </summary>
            <returns>A hashcode for this vector</returns>
        </member>
        <member name="T:NetTopologySuite.Mathematics.VectorMath">
            <summary>
            Functions for performing vector mathematics.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Mathematics.VectorMath.NormalToTriangle(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the normal vector to the triangle p0-p1-p2. In order to compute the normal each
            triangle coordinate must have a Z value. If this is not the case, the returned Coordinate
            will have NaN values. The returned vector has unit length.
            </summary>
            <param name="p0">A point</param>
            <param name="p1">A point</param>
            <param name="p2">A point</param>
            <returns>The normal vector to the triangle <paramref name="p0"/>-<paramref name="p1"/>-<paramref name="p2"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.VectorMath.Normalize(GeoAPI.Geometries.Coordinate)">
            <summary>
            Normalizes the vector <param name="v"></param>
            </summary>
            <param name="v">The normalized <paramref name="v"/></param>
        </member>
        <member name="M:NetTopologySuite.Mathematics.VectorMath.CrossProduct(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the cross product of <paramref name="v1"/> and <paramref name="v2"/>
            </summary>
            <param name="v1">A vector</param>
            <param name="v2">A vector</param>
            <returns>The cross product of <paramref name="v1"/> and <paramref name="v2"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.VectorMath.DotProduct(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the dot product of <paramref name="v1"/> and <paramref name="v2"/>
            </summary>
            <param name="v1">A vector</param>
            <param name="v2">A vector</param>
            <returns>The dot product of <paramref name="v1"/> and <paramref name="v2"/></returns>
        </member>
        <member name="M:NetTopologySuite.Mathematics.VectorMath.Det(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the determinant of a 2x2 matrix
            </summary>
            <param name="a1">The m[0,0] value</param>
            <param name="a2">The m[0,1] value</param>
            <param name="b1">The m[1,0] value</param>
            <param name="b2">The m[1,1] value</param>
            <returns>The determinant</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.InteriorIntersectionFinderAdder">
            <summary>
            Finds <b>interior</b> intersections 
            between line segments in <see cref="T:NetTopologySuite.Noding.NodedSegmentString"/>s,
            and adds them as nodes
            using <see cref="M:NetTopologySuite.Noding.NodedSegmentString.AddIntersection(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)"/>.
            This class is used primarily for Snap-Rounding.  
            For general-purpose noding, use <see cref="T:NetTopologySuite.Noding.IntersectionAdder"/>.
            </summary>
            <seealso cref="T:NetTopologySuite.Noding.IntersectionAdder"/>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinderAdder.#ctor(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Creates an intersection finder which finds all proper intersections.
            </summary>
            <param name="li">The <see cref="T:NetTopologySuite.Algorithm.LineIntersector" /> to use.</param>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinderAdder.InteriorIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinderAdder.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> class to process
            intersections for two segments of the <see cref="T:NetTopologySuite.Noding.ISegmentString" />s being intersected.<br/>
            Note that some clients (such as <c>MonotoneChain</c>s) may optimize away
            this call for segment pairs which they have determined do not intersect
            (e.g. by an disjoint envelope test).
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinderAdder.IsDone">
            <summary>
             Always process all intersections
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.SimpleSegmentSetMutualIntersector">
            <summary>
            Intersects two sets of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s using 
            brute-force comparison.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleSegmentSetMutualIntersector.#ctor(System.Collections.Generic.ICollection{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Constructs a new intersector for a given set of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            </summary>
            <param name="baseSegStrings">The base segment strings to intersect</param>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleSegmentSetMutualIntersector.Process(System.Collections.Generic.ICollection{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Calls <see cref="M:NetTopologySuite.Noding.ISegmentIntersector.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)"/> 
            for all <i>candidate</i> intersections between
            the given collection of SegmentStrings and the set of base segments. 
            </summary>
            <param name="segmentStrings">A collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s to node</param>
            <param name="segmentIntersector">The intersection detector to either record intersection occurences
            or add intersection nodes to the input segment strings.</param>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleSegmentSetMutualIntersector.Intersect(NetTopologySuite.Noding.ISegmentString,NetTopologySuite.Noding.ISegmentString,NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Processes all of the segment pairs in the given segment strings
            using the given <paramref name="segInt">SegmentIntersector</paramref>.
            </summary>
            <param name="ss0">A segment string</param>
            <param name="ss1">A segment string</param>
            <param name="segInt">The segment intersector to use</param>
        </member>
        <member name="T:NetTopologySuite.Noding.FastSegmentSetIntersectionFinder">
            <summary>
             Finds if two sets of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s intersect.
             </summary>
             <remarks>
             Uses indexing for fast performance and to optimize repeated tests
             against a target set of lines.
             Short-circuited to return as soon an intersection is found.
             <para/> 
             Immutable and thread-safe.
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.FastSegmentSetIntersectionFinder.#ctor(System.Collections.Generic.IEnumerable{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Creates an intersection finder against a given set of segment strings.
            </summary>
            <param name="baseSegStrings">The segment strings to search for intersections</param>
        </member>
        <member name="P:NetTopologySuite.Noding.FastSegmentSetIntersectionFinder.SegmentSetIntersector">
            <summary>Gets the segment set intersector used by this class.</summary>
             <remarks>This allows other uses of the same underlying indexed structure.</remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.FastSegmentSetIntersectionFinder.Intersects(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Tests for intersections with a given set of target {@link SegmentString}s.
            </summary>
            <param name="segStrings">The SegmentStrings to test</param>
            <returns><c>true</c> if an intersection was found</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.FastSegmentSetIntersectionFinder.Intersects(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Noding.SegmentIntersectionDetector)">
            <summary>
            Tests for intersections with a given set of target <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            using a given SegmentIntersectionDetector.
            </summary>
            <param name="segStrings">The SegmentStrings to test</param>
            <param name="intDetector">The intersection detector to use</param>
            <returns><c>true</c> if the detector reports intersections</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector">
            <summary>
             Intersects two sets of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s using a index based
             on <see cref="T:NetTopologySuite.Index.Chain.MonotoneChain"/>s and a <see cref="T:NetTopologySuite.Index.ISpatialIndex"/>.
             <para/>
             Thread-safe and immutable.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.#ctor(System.Collections.Generic.IEnumerable{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Constructs a new intersector for a given set of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            </summary>
            <param name="baseSegStrings">The base segment strings to intersect</param>
        </member>
        <member name="P:NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.Index">
            <summary>
            Gets the index constructed over the base segment strings
            </summary>
            <remarks>NOTE: To retain thread-safety, treat returned value as immutable</remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.Process(System.Collections.Generic.ICollection{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Calls <see cref="M:NetTopologySuite.Noding.ISegmentIntersector.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)"/>
            for all <i>candidate</i> intersections between
            the given collection of SegmentStrings and the set of indexed segments. 
            </summary>
            <param name="segmentStrings"></param>
            <param name="segmentIntersector"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.SegmentOverlapAction">
            <summary>
            Segment overlap action class
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexSegmentSetMutualIntersector.SegmentOverlapAction.#ctor(NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Creates an instance of this class using the provided <see cref="T:NetTopologySuite.Noding.ISegmentIntersector"/>
            </summary>
            <param name="si">The segment intersector to use</param>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentIntersectionDetector">
            <summary>
             Detects and records an intersection between two <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s,
             if one exists.  Only a single intersection is recorded.
            </summary>
             <remarks>
             This strategy can be configured to search for <b>proper</b> intersections.
             In this case, the presence of <i>any</i> intersection will still be recorded,
             but searching will continue until either a proper intersection has been found
             or no intersections are detected.
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentIntersectionDetector.#ctor">
            <summary>
             Creates an intersection finder using a <see cref="T:NetTopologySuite.Algorithm.RobustLineIntersector"/>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentIntersectionDetector.#ctor(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
             Creates an intersection finder using a given <see cref="T:NetTopologySuite.Algorithm.LineIntersector"/>
            </summary>
             <param name="li">The LineIntersector to use</param>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.FindProper">
            <summary>
            Gets or sets whether processing must continue until a proper intersection is found
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.FindAllIntersectionTypes">
            <summary>
            Gets or sets whether processing can terminate once any intersection is found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.HasIntersection">
            <summary>
             Tests whether an intersection was found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.HasProperIntersection">
            <summary>
             Tests whether a proper intersection was found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.HasNonProperIntersection">
            <summary>
             Tests whether a non-proper intersection was found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.Intersection">
            <summary>
             Gets the computed location of the intersection. Due to round-off, the location may not be exact.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.IntersectionSegments">
            <summary>Gets the endpoints of the intersecting segments.
            </summary>
             <remarks>An array of the segment endpoints (p00, p01, p10, p11)</remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentIntersectionDetector.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
             This method is called by clients of the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector"/> class to process
             intersections for two segments of the <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s being intersected.
            </summary>
             <remarks>
             Note that some clients (such as <c>MonotoneChain</c>s) may optimize away
             this call for segment pairs which they have determined do not intersect
             (e.g. by an disjoint envelope test).
             </remarks>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentIntersectionDetector.IsDone">
            <summary>
            Tests whether processing can terminate,
            because all required information has been obtained
            (e.g. an intersection of the desired type has been detected).
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.ISegmentSetMutualIntersector">
            <summary>
             An intersector for the red-blue intersection problem.
             In this class of line arrangement problem,
             two disjoint sets of linestrings are intersected.
             <para/>
             Implementing classes must provide a way
             of supplying the base set of segment strings to 
             test against (e.g. in the constructor, 
             for straightforward thread-safety).
             <para/>
             In order to allow optimizing processing, 
             the following condition is assumed to hold for each set:
             <list Type="Bullet">
             <item>the only intersection between any two linestrings occurs at their endpoints.</item>
             </list>
             Implementations can take advantage of this fact to optimize processing
             (i.e by avoiding testing for intersections between linestrings
             belonging to the same set).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.ISegmentSetMutualIntersector.Process(System.Collections.Generic.ICollection{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Computes the intersections with a given set of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s,
            using the supplied <see cref="T:NetTopologySuite.Noding.ISegmentIntersector"/>.
            </summary>
            <param name="segmentStrings">A collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s to node</param>
            <param name="segmentIntersector">The intersection detector to either record intersection occurences
            or add intersection nodes to the input segment strings.</param>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentStringUtil">
            <summary>
             Utility methods for processing <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringUtil.ExtractSegmentStrings(GeoAPI.Geometries.IGeometry)">
            <summary>
             Extracts all linear components from a given <see cref="T:GeoAPI.Geometries.IGeometry"/>
             to <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.           
             The <see cref="T:NetTopologySuite.Noding.ISegmentString"/> data item is set to be the source <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             </summary>
             <param name="geom">The <see cref="T:GeoAPI.Geometries.IGeometry"/> to extract from.</param>
             <returns>a list of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringUtil.ExtractNodedSegmentStrings(GeoAPI.Geometries.IGeometry)">
            <summary>
             Extracts all linear components from a given <see cref="T:GeoAPI.Geometries.IGeometry"/>
             to <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.           
             The <see cref="T:NetTopologySuite.Noding.ISegmentString"/> data item is set to be the source <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             </summary>
             <param name="geom">The <see cref="T:GeoAPI.Geometries.IGeometry"/> to extract from.</param>
             <returns>a list of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringUtil.ToGeometry(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Converts a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s into a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            The geometry will be either a <see cref="T:GeoAPI.Geometries.ILineString"/> 
            or a <see cref="T:GeoAPI.Geometries.IMultiLineString"/> (possibly empty).
            </summary>
            <param name="segStrings">A collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>.</param>
            <param name="geomFact">A geometry factory</param>
            <returns>A <see cref="T:GeoAPI.Geometries.ILineString"/> or a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.BasicSegmentString">
            <summary>
             Represents a list of contiguous line segments,
             and supports noding the segments.
             The line segments are represented by an array of <see cref="T:GeoAPI.Geometries.Coordinate" />s.
             Intended to optimize the noding of contiguous segments by
             reducing the number of allocated objects.
             SegmentStrings can carry a context object, which is useful
             for preserving topological or parentage information.
             All noded substrings are initialized with the same context object.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.BasicSegmentString.#ctor(GeoAPI.Geometries.Coordinate[],System.Object)">
            <summary>
             Creates a new segment string from a list of vertices.
            </summary>
            <param name="pts">the vertices of the segment string</param>
            <param name="data">the user-defined data of this segment string (may be null)</param>
        </member>
        <member name="P:NetTopologySuite.Noding.BasicSegmentString.Context">
            <summary>Gets the user-defined data for this segment string.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.BasicSegmentString.GetSegmentOctant(System.Int32)">
            <summary>
             Gets the octant of the segment starting at vertex <code>index</code>
            </summary>
            <param name="index">the index of the vertex starting the segment. Must not be the last index in the vertex list</param>
            <returns>octant of the segment at the vertex</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.FastNodingValidator">
            <summary>
             Validates that a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s is correctly noded.
             Indexing is used to improve performance.
            </summary>
             <remarks>
             <para>
             In the most common use case, validation stops after a single
             non-noded intersection is detected,
             but the class can be requested to detect all intersections
             by using the <see cref="P:NetTopologySuite.Noding.FastNodingValidator.FindAllIntersections"/> property.
             <para/>
             The validator does not check for a-b-a topology collapse situations.
             <para/> 
             The validator does not check for endpoint-interior vertex intersections.
             This should not be a problem, since the JTS noders should be
             able to compute intersections between vertices correctly.
             </para>
             <para>
             The client may either test the <see cref="P:NetTopologySuite.Noding.FastNodingValidator.IsValid"/> condition,
             or request that a suitable <see cref="T:NetTopologySuite.Geometries.TopologyException"/> be thrown.
             </para>
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.FastNodingValidator.#ctor(System.Collections.Generic.IEnumerable{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Creates a new noding validator for a given set of linework.
            </summary>
            <param name="segStrings">A collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s</param>
        </member>
        <member name="P:NetTopologySuite.Noding.FastNodingValidator.FindAllIntersections">
            <summary>
            Gets or sets whether all intersections should be found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.FastNodingValidator.Intersections">
            <summary>
            Gets a list of all intersections found.
            <remarks>
            Intersections are represented as <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            List is empty if none were found.
            </remarks>
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.FastNodingValidator.IsValid">
            <summary>
             Checks for an intersection and reports if one is found.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.FastNodingValidator.GetErrorMessage">
            <summary>
             Returns an error message indicating the segments containing the intersection.
            </summary>
            <returns>an error message documenting the intersection location</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.FastNodingValidator.CheckValid">
            <summary>
             Checks for an intersection and throws
             a TopologyException if one is found.
            </summary>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">if an intersection is found</exception>
        </member>
        <member name="T:NetTopologySuite.Noding.INodableSegmentString">
            <summary>
             An interface for classes which support adding nodes to a segment string.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.INodableSegmentString.AddIntersection(GeoAPI.Geometries.Coordinate,System.Int32)">
            <summary>Adds an intersection node for a given point and segment to this segment string.
            </summary>
            <param name="intPt">the location of the intersection</param>
            <param name="segmentIndex">the index of the segment containing the intersection</param>
        </member>
        <member name="T:NetTopologySuite.Noding.InteriorIntersectionFinder">
            <summary>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinder.CreateAnyIntersectionFinder(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
             Creates an intersection finder which tests if there is at least one interior intersection.
             Uses short-circuiting for efficient performance.
             The intersection found is recorded.
            </summary>
             <param name="li">A line intersector.</param>
             <returns>A intersection finder which tests if there is at least one interior intersection.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinder.CreateAllIntersectionsFinder(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
             Creates an intersection finder which finds all interior intersections.
             The intersections are recorded for later inspection.
            </summary>
             <param name="li">A line intersector.</param>
             <returns>a intersection finder which finds all interior intersections.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinder.CreateIntersectionCounter(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
             Creates an intersection finder which counts all interior intersections.
             The intersections are note recorded to reduce memory usage.
            </summary>
             <param name="li">A line intersector.</param>
             <returns>a intersection finder which counts all interior intersections.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinder.#ctor(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
             Creates an intersection finder which finds an interior intersection if one exists
            </summary>
            <param name="li">the LineIntersector to use</param>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.FindAllIntersections">
            <summary>
            Gets/Sets whether all intersections should be computed.
            <remarks>
            When this is <c>false</c> (the default value), the value of <see cref="P:NetTopologySuite.Noding.InteriorIntersectionFinder.IsDone"/> 
            is <c>true</c> after the first intersection is found.        
            Default is <c>false</c>.
            </remarks>
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.KeepIntersections">
            <summary>
            Gets/Sets whether intersection points are recorded.
            <remarks>
            If the only need is to count intersection points, this can be set to <c>false</c>.
            Default is <c>true</c>.
            </remarks>
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.CheckEndSegmentsOnly">
            <summary>
             Gets/Sets whether only end segments should be tested for interior intersection.
             This is a performance optimization that may be used if
             the segments have been previously noded by an appropriate algorithm.
             It may be known that any potential noding failures will occur only in
             end segments.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.HasIntersection">
            <summary>
             Tests whether an intersection was found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.Intersections">
            <summary>
            Gets the intersections found.
            </summary>
            <returns>A list of <see cref="T:GeoAPI.Geometries.Coordinate"/>.</returns>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.Count">
            <summary>
            Gets the count of intersections found.
            </summary>
            <returns>The intersection count.</returns>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.InteriorIntersection">
            <summary>
             Gets the computed location of the intersection.
             Due to round-off, the location may not be exact.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.InteriorIntersectionFinder.IntersectionSegments">
            <summary>
             Gets the endpoints of the intersecting segments.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinder.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
             This method is called by clients of the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector"/> class to process
             intersections for two segments of the <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s being intersected.<br/>
             Note that some clients (such as <c>MonotoneChain</c>s) may optimize away
             this call for segment pairs which they have determined do not intersect
             (e.g. by an disjoint envelope test).
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.InteriorIntersectionFinder.IsEndSegment(NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
             Tests whether a segment in a <see cref="T:NetTopologySuite.Noding.ISegmentString" /> is an end segment.
             (either the first or last).
            </summary>
            <param name="segStr">a segment string</param>
            <param name="index">the index of a segment in the segment string</param>
            <returns>true if the segment is an end segment</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.IntersectionAdder">
            <summary>
            Computes the possible intersections between two line segments in <see cref="T:NetTopologySuite.Noding.ISegmentString" />s
            and adds them to each string
            using <see cref="M:NetTopologySuite.Noding.NodedSegmentString.AddIntersection(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.IntersectionAdder.IsAdjacentSegments(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="F:NetTopologySuite.Noding.IntersectionAdder._hasIntersection">
            These variables keep track of what types of intersections were
            found during ALL edges that have been intersected.
        </member>
        <member name="F:NetTopologySuite.Noding.IntersectionAdder.NumIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.IntersectionAdder.NumInteriorIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.IntersectionAdder.NumProperIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.IntersectionAdder.NumTests">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.IntersectionAdder.#ctor(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.IntersectionAdder"/> class.
            </summary>
            <param name="li"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.LineIntersector">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.ProperIntersectionPoint">
            <summary>
            Returns the proper intersection point, or <c>null</c> if none was found.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.HasIntersection">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.HasProperIntersection">
            <summary>
            A proper intersection is an intersection which is interior to at least two
            line segments.  Note that a proper intersection is not necessarily
            in the interior of the entire <see cref="T:NetTopologySuite.Geometries.Geometry" />, since another edge may have
            an endpoint equal to the intersection, which according to SFS semantics
            can result in the point being on the Boundary of the <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.HasProperInteriorIntersection">
            <summary>
            A proper interior intersection is a proper intersection which is not
            contained in the set of boundary nodes set for this <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" />.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.HasInteriorIntersection">
            <summary>
            An interior intersection is an intersection which is
            in the interior of some segment.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.IntersectionAdder.IsTrivialIntersection(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            A trivial intersection is an apparent self-intersection which in fact
            is simply the point shared by adjacent line segments.
            Note that closed edges require a special check for the point shared by the beginning and end segments.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.IntersectionAdder.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> class to process
            intersections for two segments of the <see cref="T:NetTopologySuite.Noding.ISegmentString" /> being intersected.<br/>
            Note that some clients (such as <c>MonotoneChain</c>") may optimize away
            this call for segment pairs which they have determined do not intersect
            (e.g. by an disjoint envelope test).
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionAdder.IsDone">
            <summary>
             Always process all intersections
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.IntersectionFinderAdder">
            <summary>
            Finds <b>interior</b> intersections 
            between line segments in <see cref="T:NetTopologySuite.Noding.NodedSegmentString"/>s,
            and adds them as nodes
            using <see cref="M:NetTopologySuite.Noding.NodedSegmentString.AddIntersection(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)"/>.
            This class is used primarily for Snap-Rounding.  
            For general-purpose noding, use <see cref="T:NetTopologySuite.Noding.IntersectionAdder"/>.
            </summary>
            <remarks>
            This class is obsolete. 
            Use <see cref="T:NetTopologySuite.Noding.InteriorIntersectionFinderAdder"/> instead.
            </remarks>
            <seealso cref="T:NetTopologySuite.Noding.IntersectionAdder"/>
            <seealso cref="T:NetTopologySuite.Noding.InteriorIntersectionFinderAdder"/>
        </member>
        <member name="M:NetTopologySuite.Noding.IntersectionFinderAdder.#ctor(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Creates an intersection finder which finds all proper intersections.
            </summary>
            <param name="li">The <see cref="T:NetTopologySuite.Algorithm.LineIntersector" /> to use.</param>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionFinderAdder.InteriorIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.IntersectionFinderAdder.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> class to process
            intersections for two segments of the <see cref="T:NetTopologySuite.Noding.ISegmentString" />s being intersected.<br/>
            Note that some clients (such as <c>MonotoneChain</c>s) may optimize away
            this call for segment pairs which they have determined do not intersect
            (e.g. by an disjoint envelope test).
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.IntersectionFinderAdder.IsDone">
            <summary>
             Always process all intersections
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.ISegmentIntersector">
            <summary>
            Processes possible intersections detected by a <see cref="T:NetTopologySuite.Noding.INoder"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> is passed to a <see cref="T:NetTopologySuite.Noding.INoder" />.
            </para>
            The <see cref="M:NetTopologySuite.Noding.ISegmentIntersector.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)"/> 
            method is called whenever the <see cref="T:NetTopologySuite.Noding.INoder" />
             detects that two <see cref="T:NetTopologySuite.Noding.ISegmentString" />s might intersect.
            <para>
            This class may be used either to find all intersections, or
            to detect the presence of an intersection.  In the latter case,
            Noders may choose to short-circuit their computation by calling the
            <see cref="P:NetTopologySuite.Noding.ISegmentIntersector.IsDone"/> property.
            </para>
            <para>
            </para>
            This class is an example of the <i>Strategy</i> pattern.
            <para>
            This class may be used either to find all intersections, or
            to detect the presence of an intersection.  In the latter case,
            Noders may choose to short-circuit their computation by calling the
            <see cref="P:NetTopologySuite.Noding.ISegmentIntersector.IsDone"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Noding.ISegmentIntersector.ProcessIntersections(NetTopologySuite.Noding.ISegmentString,System.Int32,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> interface to process
            intersections for two segments of the <see cref="T:NetTopologySuite.Noding.ISegmentString" />s being intersected.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.ISegmentIntersector.IsDone">
            <summary>
             Reports whether the client of this class needs to continue testing
             all intersections in an arrangement.
            </summary>
            <returns>if there is no need to continue testing segments</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.ISegmentString">
            <summary>
             An interface for classes which represent a sequence of contiguous line segments.
             SegmentStrings can carry a context object, which is useful
             for preserving topological or parentage information.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.ISegmentString.Context">
            <summary>
             Gets/Sets the user-defined data for this segment string.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.ISegmentString.Coordinates">
            <summary>
             Points that make up ISegmentString
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.ISegmentString.Count">
            <summary>
             Size of Coordinate Sequence
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.ISegmentString.IsClosed">
            <summary>
            States whether ISegmentString is closed
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.IteratedNoder">
            <summary>
            Nodes a set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s completely.
            The set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s is fully noded;
            i.e. noding is repeated until no further intersections are detected.
            <para>
            Iterated noding using a <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating" /> precision model is not guaranteed to converge,
            due to roundoff error. This problem is detected and an exception is thrown.
            Clients can choose to rerun the noding using a lower precision model.
            </para>
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.IteratedNoder.MaxIterations">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.IteratedNoder.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.IteratedNoder"/> class.
            </summary>
            <param name="pm"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.IteratedNoder.MaximumIterations">
            <summary>
            Gets/Sets the maximum number of noding iterations performed before
            the noding is aborted. Experience suggests that this should rarely need to be changed
            from the default. The default is <see cref="F:NetTopologySuite.Noding.IteratedNoder.MaxIterations" />.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.IteratedNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            The <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.IteratedNoder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Fully nodes a list of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s, i.e. peforms noding iteratively
            until no intersections are found between segments.
            Maintains labelling of edges correctly through the noding.
            </summary>
            <param name="segStrings">A collection of SegmentStrings to be noded.</param>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If the iterated noding fails to converge.</exception>
        </member>
        <member name="M:NetTopologySuite.Noding.IteratedNoder.Node(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},System.Int32[])">
            <summary>
            Node the input segment strings once
            and create the split edges between the nodes.
            </summary>
            <param name="segStrings"></param>
            <param name="numInteriorIntersections"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.MCIndexNoder">
            <summary>
            Nodes a set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s using a index based
            on <see cref="T:NetTopologySuite.Index.Chain.MonotoneChain" />s and a <see cref="T:NetTopologySuite.Index.ISpatialIndex" />.
            The <see cref="T:NetTopologySuite.Index.ISpatialIndex" /> used should be something that supports
            envelope (range) queries efficiently (such as a <c>Quadtree</c>"
            or <see cref="T:NetTopologySuite.Index.Strtree.STRtree`1" />.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.MCIndexNoder"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.#ctor(NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.MCIndexNoder"/> class.
            </summary>
            <param name="segInt">The <see cref="T:NetTopologySuite.Noding.ISegmentIntersector"/> to use.</param>
        </member>
        <member name="P:NetTopologySuite.Noding.MCIndexNoder.MonotoneChains">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.MCIndexNoder.Index">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IList`1"/> of fully noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            The <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes the noding for a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.IntersectChains">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.Add(NetTopologySuite.Noding.ISegmentString)">
            <summary>
            
            </summary>
            <param name="segStr"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction.#ctor(NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction"/> class.
            </summary>
            <param name="si">The <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /></param>
        </member>
        <member name="M:NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction.Overlap(NetTopologySuite.Index.Chain.MonotoneChain,System.Int32,NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary>
            
            </summary>
            <param name="mc1"></param>
            <param name="start1"></param>
            <param name="mc2"></param>
            <param name="start2"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.INoder">
            <summary>
            Computes all intersections between segments in a set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            Intersections found are represented as <see cref="T:NetTopologySuite.Noding.SegmentNode" />s and added to the
            <see cref="T:NetTopologySuite.Noding.ISegmentString" />s in which they occur.
            As a final step in the noding a new set of segment strings split at the nodes may be returned.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.INoder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes the noding for a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            Some Noders may add all these nodes to the input <see cref="T:NetTopologySuite.Noding.ISegmentString" />s;
            others may only add some or none at all.
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.INoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IList`1" /> of fully noded <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            The <see cref="T:NetTopologySuite.Noding.ISegmentString" />s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Noding.NodingValidator">
            <summary>
            Validates that a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s is correctly noded.
            Throws an appropriate exception if an noding error is found.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodingValidator.#ctor(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Creates a new validator for the given collection 
            of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            </summary>
            <param name="segStrings">The seg strings.</param>
        </member>
        <member name="M:NetTopologySuite.Noding.NodingValidator.CheckValid">
            <summary>
            Checks whether the supplied segment strings
            are correctly noded.  Throws an exception if they are not.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodingValidator.CheckCollapses">
            <summary>
            Checks if a segment string contains a segment pattern a-b-a (which implies a self-intersection).
            </summary>   
        </member>
        <member name="M:NetTopologySuite.Noding.NodingValidator.CheckInteriorIntersections">
            <summary>
            Checks all pairs of segments for intersections at an interior point of a segment.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodingValidator.CheckEndPtVertexIntersections">
            <summary>
            Checks for intersections between an endpoint of a segment string
            and an interior vertex of another segment string
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.Octants">
            <summary>
            Octants in the Cartesian plane.
            Octants are numbered as follows:
             <para>
              \2|1/
             3 \|/ 0
             ---+--
             4 /|\ 7
              /5|6\ 
            </para>
             If line segments lie along a coordinate axis, the octant is the lower of the two possible values.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.One">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Two">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Three">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Four">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Five">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Six">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.Octants.Seven">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.Octant">
            <summary>
             Methods for computing and working with <see cref="T:NetTopologySuite.Noding.Octants"/> of the Cartesian plane.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Octant.GetOctant(System.Double,System.Double)">
            <summary>
            Returns the octant of a directed line segment (specified as x and y
            displacements, which cannot both be 0).
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Octant.GetOctant(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the octant of a directed line segment from p0 to p1.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Noding.OrientedCoordinateArray">
            <summary>
             Allows comparing <see cref="T:GeoAPI.Geometries.Coordinate" /> arrays in an orientation-independent way.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.OrientedCoordinateArray.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Creates a new <see cref="T:NetTopologySuite.Noding.OrientedCoordinateArray" />}
            for the given <see cref="T:GeoAPI.Geometries.Coordinate" /> array.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.OrientedCoordinateArray.Orientation(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes the canonical orientation for a coordinate array.
            </summary>
            <param name="pts"></param>
            <returns>
            <c>true</c> if the points are oriented forwards <br/>
            or <c>false</c>if the points are oriented in reverse.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Noding.OrientedCoordinateArray.CompareTo(System.Object)">
            <summary>
            Compares two <see cref="T:NetTopologySuite.Noding.OrientedCoordinateArray" />s for their relative order.
            </summary>
            <param name="o1"></param>
            <returns>
            -1 this one is smaller;<br/>
             0 the two objects are equal;<br/>
             1 this one is greater.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Noding.OrientedCoordinateArray.CompareOriented(GeoAPI.Geometries.Coordinate[],System.Boolean,GeoAPI.Geometries.Coordinate[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="pts1"></param>
            <param name="orientation1"></param>
            <param name="pts2"></param>
            <param name="orientation2"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Noding.ScaledNoder">
            <summary>
            Wraps a <see cref="T:NetTopologySuite.Noding.INoder" /> and transforms its input into the integer domain.
            This is intended for use with Snap-Rounding noders,
            which typically are only intended to work in the integer domain.
            Offsets can be provided to increase the number of digits of available precision.
            <para>
            Clients should be aware that rescaling can involve loss of precision,
            which can cause zero-length line segments to be created.
            These in turn can cause problems when used to build a planar graph.
            This situation should be checked for and collapsed segments removed if necessary.
            </para>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.#ctor(NetTopologySuite.Noding.INoder,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.ScaledNoder"/> class.
            </summary>
            <param name="noder"></param>
            <param name="scaleFactor"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.#ctor(NetTopologySuite.Noding.INoder,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="noder"></param>
            <param name="scaleFactor"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.ScaledNoder.IsIntegerPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.GetNodedSubstrings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            
            </summary>
            <param name="inputSegStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.Scale(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.Scale(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.Rescale(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.ScaledNoder.Rescale(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentNode">
            <summary>
            Represents an intersection point between two <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.SegmentNode.Coord">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Noding.SegmentNode.SegmentIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNode.#ctor(NetTopologySuite.Noding.INodableSegmentString,GeoAPI.Geometries.Coordinate,System.Int32,NetTopologySuite.Noding.Octants)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.SegmentNode"/> class.
            </summary>
            <param name="segString"></param>
            <param name="coord"></param>
            <param name="segmentIndex"></param>
            <param name="segmentOctant"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentNode.Coordinate">
            <summary>
            Gets the <see cref="T:GeoAPI.Geometries.Coordinate"/> giving the location of this node.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentNode.IsInterior">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNode.IsEndPoint(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxSegmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNode.CompareTo(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>
            -1 this SegmentNode is located before the argument location;<br/>
             0 this SegmentNode is at the argument location;<br/>
             1 this SegmentNode is located after the argument location.   
            </returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNode.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentNodeList">
            <summary>
            A list of the <see cref="T:NetTopologySuite.Noding.SegmentNode" />s present along a noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.#ctor(NetTopologySuite.Noding.NodedSegmentString)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.SegmentNodeList"/> class.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentNodeList.Edge">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.Add(GeoAPI.Geometries.Coordinate,System.Int32)">
            <summary>
            Adds an intersection into the list, if it isn't already there.
            The input segmentIndex and dist are expected to be normalized.
            </summary>
            <param name="intPt"></param>
            <param name="segmentIndex"></param>
            <returns>The SegmentIntersection found or added.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.GetEnumerator">
            <summary>
            Returns an iterator of SegmentNodes.
            </summary>
            <returns>An iterator of SegmentNodes.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.AddEndpoints">
            <summary>
            Adds nodes for the first and last points of the edge.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.AddCollapsedNodes">
            <summary>
            Adds nodes for any collapsed edge pairs.
            Collapsed edge pairs can be caused by inserted nodes, or they can be
            pre-existing in the edge vertex list.
            In order to provide the correct fully noded semantics,
            the vertex at the base of a collapsed pair must also be added as a node.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.FindCollapsesFromExistingVertices(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds nodes for any collapsed edge pairs
            which are pre-existing in the vertex list.
            </summary>
            <param name="collapsedVertexIndexes"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.FindCollapsesFromInsertedNodes(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds nodes for any collapsed edge pairs caused by inserted nodes
            Collapsed edge pairs occur when the same coordinate is inserted as a node
            both before and after an existing edge vertex.
            To provide the correct fully noded semantics,
            the vertex must be added as a node as well.
            </summary>
            <param name="collapsedVertexIndexes"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.FindCollapseIndex(NetTopologySuite.Noding.SegmentNode,NetTopologySuite.Noding.SegmentNode,System.Int32[])">
            <summary>
            
            </summary>
            <param name="ei0"></param>
            <param name="ei1"></param>
            <param name="collapsedVertexIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.AddSplitEdges(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Creates new edges for all the edges that the intersections in this
            list split the parent edge into.
            Adds the edges to the provided argument list
            (this is so a single list can be used to accumulate all split edges
            for a set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s).
            </summary>
            <param name="edgeList"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.CreateSplitEdge(NetTopologySuite.Noding.SegmentNode,NetTopologySuite.Noding.SegmentNode)">
            <summary>
             Create a new "split edge" with the section of points between
            (and including) the two intersections.
            The label for the new edge is the same as the label for the parent edge.
            </summary>
            <param name="ei0"></param>
            <param name="ei1"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.GetSplitCoordinates">
            <summary>Gets the list of coordinates for the fully noded segment string,
            including all original segment string vertices and vertices
            introduced by nodes in this list.
            Repeated coordinates are collapsed.
            </summary>
            <returns>An array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentNodeList.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.NodeVertexIterator">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodeVertexIterator.#ctor(NetTopologySuite.Noding.SegmentNodeList)">
            <summary>
            
            </summary>
            <param name="nodeList"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.NodeVertexIterator.ReadNextNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodeVertexIterator.Remove">
            <summary>
            Not implemented.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not implemented.</exception>
        </member>
        <member name="P:NetTopologySuite.Noding.NodeVertexIterator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodeVertexIterator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.NodeVertexIterator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentPointComparator">
            <summary>
            Implements a robust method of comparing the relative position of two points along the same segment.
            The coordinates are assumed to lie "near" the segment.
            This means that this algorithm will only return correct results
            if the input coordinates have the same precision and correspond to rounded values
            of exact coordinates lying on the segment.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentPointComparator.Compare(NetTopologySuite.Noding.Octants,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Compares two <see cref="T:GeoAPI.Geometries.Coordinate" />s for their relative position along a segment
            lying in the specified <see cref="T:NetTopologySuite.Noding.Octant" />.
            </summary>
            <param name="octant"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns>
            -1 if node0 occurs first, or<br/>
             0 if the two nodes are equal, or <br/>
             1 if node1 occurs first.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentPointComparator.RelativeSign(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="x1"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentPointComparator.CompareValue(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="compareSign0"></param>
            <param name="compareSign1"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Noding.NodedSegmentString">
            <summary>
            Represents a list of contiguous line segments, and supports noding the segments.
            The line segments are represented by an array of <see cref="T:GeoAPI.Geometries.Coordinate" />s.
            Intended to optimize the noding of contiguous segments by
            reducing the number of allocated objects.
            <see cref="T:NetTopologySuite.Noding.NodedSegmentString" />s can carry a context object, which is useful
            for preserving topological or parentage information.
            All noded substrings are initialized with the same context object.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.GetNodedSubstrings(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s which result from splitting this string at node points.
            </summary>
            <param name="segStrings">A collection of NodedSegmentStrings</param>
            <returns>A collection of NodedSegmentStrings representing the substrings</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.GetNodedSubstrings(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Adds the noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s which result from splitting this string at node points.
            </summary>
            <param name="segStrings">A collection of NodedSegmentStrings</param>
            <param name="resultEdgelist">A list which will collect the NodedSegmentStrings representing the substrings</param>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.#ctor(GeoAPI.Geometries.Coordinate[],System.Object)">
            <summary>
            Creates a new segment string from a list of vertices.
            </summary>
            <param name="pts">The vertices of the segment string.</param>
            <param name="data">The user-defined data of this segment string (may be null).</param>
        </member>
        <member name="P:NetTopologySuite.Noding.NodedSegmentString.Context">
            <summary>
            Gets/Sets the user-defined data for this segment string.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.NodedSegmentString.NodeList">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.NodedSegmentString.Count">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Noding.NodedSegmentString.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Noding.NodedSegmentString.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.GetSegmentOctant(System.Int32)">
            <summary>
             Gets the octant of the segment starting at vertex <c>index</c>.
            </summary>
            <param name="index">
            The index of the vertex starting the segment.  
            Must not be the last index in the vertex list
            </param>
            <returns>The octant of the segment at the vertex</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.AddIntersections(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32)">
            <summary>
            Adds EdgeIntersections for one or both
            intersections found for a segment of an edge to the edge intersection list.   
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.AddIntersection(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an <see cref="T:NetTopologySuite.Noding.SegmentNode" /> for intersection intIndex.
            An intersection that falls exactly on a vertex
            of the <see cref="T:NetTopologySuite.Noding.NodedSegmentString" /> is normalized
            to use the higher of the two possible segmentIndexes.
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
            <param name="intIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.NodedSegmentString.AddIntersection(GeoAPI.Geometries.Coordinate,System.Int32)">
            <summary>
            
            </summary>
            <param name="intPt"></param>
            <param name="segmentIndex"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentStringDissolver">
             <summary>
             Dissolves a noded collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s to produce
             a set of merged linework with unique segments.
             </summary>
             <remarks>
             A custom <see cref="T:NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger"/> merging strategy
             can be supplied.  
             This strategy will be called when two identical (up to orientation)
             strings are dissolved together.
             The default merging strategy is simply to discard one of the merged strings.
            <para>
             A common use for this class is to merge noded edges
             while preserving topological labelling.
             This requires a custom merging strategy to be supplied 
             to merge the topology labels appropriately.
             </para>
            </remarks>
        </member>
        <member name="T:NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger">
            <summary>
            A merging strategy which can be used to update the context data of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s 
            which are merged during the dissolve process.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger.Merge(NetTopologySuite.Noding.ISegmentString,NetTopologySuite.Noding.ISegmentString,System.Boolean)">
            <summary>
            Updates the context data of a <see cref="T:NetTopologySuite.Noding.ISegmentString" />
            when an identical (up to orientation) one is found during dissolving.
            </summary>
            <param name="mergeTarget">The segment string to update.</param>
            <param name="ssToMerge">The segment string being dissolved.</param>
            <param name="isSameOrientation">
            <c>true</c> if the strings are in the same direction,
            <c>false</c> if they are opposite.
            </param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.#ctor(NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger)">
            <summary>
            Creates a dissolver with a user-defined merge strategy.
            </summary>
            <param name="merger"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.#ctor">
            <summary>
            Creates a dissolver with the default merging strategy.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.Dissolve(System.Collections.Generic.IEnumerable{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Dissolve all <see cref="T:NetTopologySuite.Noding.ISegmentString" />s in the input <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.Add(NetTopologySuite.Noding.OrientedCoordinateArray,NetTopologySuite.Noding.ISegmentString)">
            <summary>
            
            </summary>
            <param name="oca"></param>
            <param name="segString"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.Dissolve(NetTopologySuite.Noding.ISegmentString)">
            <summary>
            Dissolve the given <see cref="T:NetTopologySuite.Noding.ISegmentString" />.
            </summary>
            <param name="segString"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SegmentStringDissolver.FindMatching(NetTopologySuite.Noding.OrientedCoordinateArray)">
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Noding.SegmentStringDissolver.Dissolved">
            <summary>
            Gets the collection of dissolved (i.e. unique) <see cref="T:NetTopologySuite.Noding.ISegmentString" />s
            </summary>
        </member>
        <member name="T:NetTopologySuite.Noding.SimpleNoder">
            <summary>
            Nodes a set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s by
            performing a brute-force comparison of every segment to every other one.
            This has n^2 performance, so is too slow for use on large numbers of segments.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleNoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.SimpleNoder"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleNoder.#ctor(NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.SimpleNoder"/> class.
            </summary>
            <param name="segInt"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IList`1"/> of fully noded <see cref="T:NetTopologySuite.Noding.NodedSegmentString"/>s.
            The <see cref="T:NetTopologySuite.Noding.NodedSegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleNoder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes the noding for a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            Some Noders may add all these nodes to the input <see cref="T:NetTopologySuite.Noding.ISegmentString" />s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SimpleNoder.ComputeIntersects(NetTopologySuite.Noding.ISegmentString,NetTopologySuite.Noding.ISegmentString)">
            <summary>
            
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.SinglePassNoder">
            <summary>
            Base class for <see cref="T:NetTopologySuite.Noding.INoder" />s which make a single pass to find intersections.
            This allows using a custom <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" />
            (which for instance may simply identify intersections, rather than insert them).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SinglePassNoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.SinglePassNoder"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SinglePassNoder.#ctor(NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.SinglePassNoder"/> class.
            </summary>
            <param name="segInt">The <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> to use.</param>
        </member>
        <member name="P:NetTopologySuite.Noding.SinglePassNoder.SegmentIntersector">
            <summary>
            Gets/sets the <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" /> to use with this noder.
            A <see cref="T:NetTopologySuite.Noding.ISegmentIntersector" />  will normally add intersection nodes
            to the input segment strings, but it may not - it may
            simply record the presence of intersections.
            However, some <see cref="T:NetTopologySuite.Noding.INoder" />s may require that intersections be added.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.SinglePassNoder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes the noding for a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.SinglePassNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IList`1"/> of fully noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            The <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Noding.Snapround.GeometryNoder">
            <summary>
            Nodes the linework in a list of <see cref="T:GeoAPI.Geometries.IGeometry"/>s using Snap-Rounding
            to a given <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.
            <para>
            The input coordinates are expected to be rounded
            to the given precision model.
            This class does not perform that function.
            <c>GeometryPrecisionReducer"</c> may be used to do this.
            </para><para>
            This class does <b>not</b> dissolve the output linework,
            so there may be duplicate linestrings in the output.
            Subsequent processing (e.g. polygonization) may require
            the linework to be unique.  Using <c>UnaryUnion</c> is one way
            to do this (although this is an inefficient approach).
            </para></summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.GeometryNoder.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Creates a new noder which snap-rounds to a grid specified by the given <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>
            </summary>
            <param name="pm">The precision model for the grid to snap-round to.</param>
        </member>
        <member name="P:NetTopologySuite.Noding.Snapround.GeometryNoder.IsValidityChecked">
            <summary>
            Gets or sets whether noding validity is checked after noding is performed.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.GeometryNoder.Node(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Nodes the linework of a set of Geometrys using SnapRounding.
            </summary>
            <param name="geoms">A collection of Geometrys of any type</param>
            <returns>A list of LineStrings representing the noded linework of the input</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.Snapround.HotPixel">
            <summary>
            Implements a "hot pixel" as used in the Snap Rounding algorithm.
            A hot pixel contains the interior of the tolerance square and the boundary
            minus the top and right segments.
            The hot pixel operations are all computed in the integer domain
            to avoid rounding problems.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.#ctor(GeoAPI.Geometries.Coordinate,System.Double,NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.Snapround.HotPixel"/> class.
            </summary>
            <param name="pt">The coordinate at the center of the hot pixel</param>
            <param name="scaleFactor">The scale factor determining the pixel size</param>
            <param name="li">THe intersector to use for testing intersection with line segments</param>
        </member>
        <member name="P:NetTopologySuite.Noding.Snapround.HotPixel.Coordinate">
            <summary>
            Gets the coordinate this hot pixel is based at.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.GetSafeEnvelope">
            <summary>
            Returns a "safe" envelope that is guaranteed to contain the hot pixel.
            The envelope returned will be larger than the exact envelope of the pixel.
            </summary>
            <returns>An envelope which contains the pixel</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.InitCorners(GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="pt"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.Scale(System.Double)">
             <summary>
            
             </summary>
             <param name="val"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.Intersects(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the line segment (p0-p1)
            intersects this hot pixel.
            </summary>
            <param name="p0">The first coordinate of the line segment to test</param>
            <param name="p1">The second coordinate of the line segment to test</param>
            <returns>true if the line segment intersects this hot pixel.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.CopyScaled(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the line segment (p0-p1)
            intersects this hot pixel.
            </summary>
            <param name="p"></param>
            <param name="pScaled"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.IntersectsScaled(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="p0"></param>
             <param name="p1"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.IntersectsToleranceSquare(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the segment p0-p1 intersects the hot pixel tolerance square.
            Because the tolerance square point set is partially open (along the
            top and right) the test needs to be more sophisticated than
            simply checking for any intersection.  
            However, it can take advantage of the fact that the hot pixel edges
            do not lie on the coordinate grid. 
            It is sufficient to check if any of the following occur:
             - a proper intersection between the segment and any hot pixel edge.
             - an intersection between the segment and BOTH the left and bottom hot pixel edges
            (which detects the case where the segment intersects the bottom left hot pixel corner).
             - an intersection between a segment endpoint and the hot pixel coordinate.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.IntersectsPixelClosure(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Test whether the given segment intersects
            the closure of this hot pixel.
            This is NOT the test used in the standard snap-rounding
            algorithm, which uses the partially closed tolerance square instead.
            This routine is provided for testing purposes only.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.HotPixel.AddSnappedNode(NetTopologySuite.Noding.INodableSegmentString,System.Int32)">
            <summary>
             Adds a new node (equal to the snap pt) to the specified segment
             if the segment passes through the hot pixel
            </summary>
             <param name="segStr"></param>
             <param name="segIndex"></param>
             <returns><c>true</c> if a node was added to the segment</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper">
            <summary>
            "Snaps" all <see cref="T:NetTopologySuite.Noding.ISegmentString" />s in a <see cref="T:NetTopologySuite.Index.ISpatialIndex" /> containing
            <see cref="T:NetTopologySuite.Index.Chain.MonotoneChain" />s to a given <see cref="T:NetTopologySuite.Noding.Snapround.HotPixel" />.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.#ctor(NetTopologySuite.Index.ISpatialIndex{NetTopologySuite.Index.Chain.MonotoneChain})">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper"/> class.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.QueryVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.QueryVisitor.#ctor(GeoAPI.Geometries.Envelope,NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <param name="action"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.QueryVisitor.VisitItem(NetTopologySuite.Index.Chain.MonotoneChain)">
            <summary>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.Snap(NetTopologySuite.Noding.Snapround.HotPixel,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            Snaps (nodes) all interacting segments to this hot pixel.
            The hot pixel may represent a vertex of an edge,
            in which case this routine uses the optimization
            of not noding the vertex itself
            </summary>
            <param name="hotPixel">The hot pixel to snap to.</param>
            <param name="parentEdge">The edge containing the vertex, if applicable, or <c>null</c>.</param>
            <param name="hotPixelVertexIndex"></param>
            <returns><c>true</c> if a node was added for this pixel.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.Snap(NetTopologySuite.Noding.Snapround.HotPixel)">
            <summary>
            Snaps (nodes) all interacting segments to this hot pixel.
            The hot pixel may represent a vertex of an edge,
            in which case this routine uses the optimization
            of not noding the vertex itself
            </summary>
            <param name="hotPixel">The hot pixel to snap to.</param>
            <returns><c>true</c> if a node was added for this pixel.</returns>
        </member>
        <member name="T:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.#ctor(NetTopologySuite.Noding.Snapround.HotPixel,NetTopologySuite.Noding.ISegmentString,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction"/> class.
            </summary>
            <param name="hotPixel"></param>
            <param name="parentEdge"></param>
            <param name="hotPixelVertexIndex"></param>
        </member>
        <member name="P:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.IsNodeAdded">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.Select(NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <param name="startIndex"></param>
        </member>
        <member name="T:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder">
            <summary>
            Uses Snap Rounding to compute a rounded,
            fully noded arrangement from a set of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            Implements the Snap Rounding technique described in
            papers by Hobby, Guibas and Marimont, and Goodrich et al.
            Snap Rounding assumes that all vertices lie on a uniform grid;
            hence the precision model of the input must be fixed precision,
            and all the input vertices must be rounded to that precision.
            <para>
            This implementation uses a monotone chains and a spatial index to
            speed up the intersection tests.
            This implementation appears to be fully robust using an integer precision model.
            It will function with non-integer precision models, but the
            results are not 100% guaranteed to be correctly noded.
            </para>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder"/> class.
            </summary>
            <param name="pm">The <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> to use.</param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IList`1"/> of fully noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            The <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes the noding for a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            Some Noders may add all these nodes to the input <see cref="T:NetTopologySuite.Noding.ISegmentString" />s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegmentStrings"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.SnapRound(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Algorithm.LineIntersector)">
             <summary>
            
             </summary>
             <param name="segStrings"></param>
             <param name="li"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.FindInteriorIntersections(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Algorithm.LineIntersector)">
             <summary>
             Computes all interior intersections in the collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s,
             and returns their <see cref="T:GeoAPI.Geometries.Coordinate" />s.
            
             Does NOT node the segStrings.
             </summary>
             <param name="segStrings"></param>
             <param name="li"></param>
             <returns>A list of Coordinates for the intersections.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeIntersectionSnaps(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.Coordinate})">
            <summary>
            Snaps segments to nodes created by segment intersections.
            </summary>
            <param name="snapPts"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeVertexSnaps(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Snaps segments to all vertices
            </summary>
            <param name="edges">The list of segment strings to snap together</param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeVertexSnaps(NetTopologySuite.Noding.INodableSegmentString)">
            <summary>
            Snaps segments to the vertices of a Segment String.
            </summary>
            <param name="e"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetTopologySuite.Noding.Snapround.SimpleSnapRounder" -->
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.#ctor(NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Noding.Snapround.SimpleSnapRounder"/> class.
            </summary>
            <param name="pm">The <see cref="T:NetTopologySuite.Geometries.PrecisionModel" /> to use.</param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s.
            The <see cref="T:NetTopologySuite.Noding.ISegmentString"/>s have the same context as their parent.
            </summary>
            <returns>A Collection of NodedSegmentStrings representing the substrings</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeNodes(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes the noding for a collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s.
            Some Noders may add all these nodes to the input <see cref="T:NetTopologySuite.Noding.ISegmentString" />s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegmentStrings">A collection of NodedSegmentStrings</param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.SnapRound(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Algorithm.LineIntersector)">
             <summary>
            
             </summary>
             <param name="segStrings"></param>
             <param name="li"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.FindInteriorIntersections(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString},NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Computes all interior intersections in the collection of <see cref="T:NetTopologySuite.Noding.ISegmentString" />s,
            and returns their <see cref="T:GeoAPI.Geometries.Coordinate" />s.
            Does NOT node the segStrings.
            </summary>
            <param name="segStrings"></param>
            <param name="li"></param>
            <returns>A list of <see cref="T:GeoAPI.Geometries.Coordinate" />s for the intersections.</returns>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeSnaps(System.Collections.Generic.IEnumerable{NetTopologySuite.Noding.ISegmentString},System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})">
            <summary>
            Computes nodes introduced as a result of snapping segments to snap points (hot pixels).
            </summary>
            <param name="segStrings"></param>
            <param name="snapPts"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeSnaps(NetTopologySuite.Noding.INodableSegmentString,System.Collections.Generic.IEnumerable{GeoAPI.Geometries.Coordinate})">
             <summary>
            
             </summary>
             <param name="ss"></param>
             <param name="snapPts"></param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeVertexSnaps(System.Collections.Generic.IList{NetTopologySuite.Noding.ISegmentString})">
            <summary>
            Computes nodes introduced as a result of
            snapping segments to vertices of other segments.
            </summary>
            <param name="edges">The list of segment strings to snap together</param>
        </member>
        <member name="M:NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeVertexSnaps(NetTopologySuite.Noding.INodableSegmentString,NetTopologySuite.Noding.INodableSegmentString)">
            <summary>
            Performs a brute-force comparison of every segment in each <see cref="T:NetTopologySuite.Noding.ISegmentString" />.
            This has n^2 performance.
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
        </member>
        <member name="T:NetTopologySuite.NtsGeometryServices">
            <summary>
            A geometry service provider class
            </summary>
        </member>
        <member name="P:NetTopologySuite.NtsGeometryServices.Instance">
            <summary>
            Gets or sets the current instance
            </summary>
        </member>
        <member name="M:NetTopologySuite.NtsGeometryServices.#ctor">
            <summary>
            Creates an instance of this class, using the <see cref="T:NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory"/> as default and a <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/> precision model. No <see cref="P:NetTopologySuite.NtsGeometryServices.DefaultSRID"/> is specified
            </summary>
        </member>
        <member name="M:NetTopologySuite.NtsGeometryServices.#ctor(GeoAPI.Geometries.ICoordinateSequenceFactory,GeoAPI.Geometries.IPrecisionModel,System.Int32)">
            <summary>
            Creates an instance of this class, using the provided <see cref="T:GeoAPI.Geometries.ICoordinateSequenceFactory"/>, <see cref="T:GeoAPI.Geometries.IPrecisionModel"/> and spatial reference Id (<paramref name="srid"/>.
            </summary>
            <param name="coordinateSequenceFactory">The coordinate sequence factory to use.</param>
            <param name="precisionModel">The precision model.</param>
            <param name="srid">The default spatial reference ID</param>
        </member>
        <member name="P:NetTopologySuite.NtsGeometryServices.DefaultSRID">
            <summary>
            Gets the default spatial reference id
            </summary>
        </member>
        <member name="P:NetTopologySuite.NtsGeometryServices.DefaultCoordinateSequenceFactory">
            <summary>
            Gets or sets the coordiate sequence factory to use
            </summary>
        </member>
        <member name="P:NetTopologySuite.NtsGeometryServices.DefaultPrecisionModel">
            <summary>
            Gets or sets the default precision model
            </summary>
        </member>
        <member name="M:NetTopologySuite.NtsGeometryServices.CreatePrecisionModel(GeoAPI.Geometries.PrecisionModels)">
            <summary>
            Creates a precision model based on given precision model type
            </summary>
            <returns>The precision model type</returns>
        </member>
        <member name="M:NetTopologySuite.NtsGeometryServices.CreatePrecisionModel(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Creates a precision model based on given precision model.
            </summary>
            <returns>The precision model</returns>
        </member>
        <member name="M:NetTopologySuite.NtsGeometryServices.CreatePrecisionModel(System.Double)">
            <summary>
            Creates a precision model based on the given scale factor.
            </summary>
            <param name="scale">The scale factor</param>
            <returns>The precision model.</returns>
        </member>
        <member name="P:NetTopologySuite.NtsGeometryServices.NumFactories">
            <summary>
            Gets a value representing the number of geometry factories that have been stored in the cache
            </summary>
        </member>
        <member name="T:NetTopologySuite.Densify.Densifier">
            <summary>
            Densifies a geometry by inserting extra vertices along the line segments
            contained in the geometry. 
            All segments in the created densified geometry will be no longer than
            than the given distance tolerance.
            </summary>
            <remarks>
            <para>Densified polygonal geometries are guaranteed to be topologically correct.</para>
            <para>The coordinates created during densification respect the input geometry's <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.</para>
            <para><b>Note:</b> At some future point this class will offer a variety of densification strategies.</para>
            </remarks>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Densify.Densifier.Densify(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Densifies a geometry using a given distance tolerance, and respecting the input geometry's <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.
            </summary>
            <param name="geom">The geometry densify</param>
            <param name="distanceTolerance">The distance tolerance (<see cref="P:NetTopologySuite.Densify.Densifier.DistanceTolerance"/>)</param>
            <returns>The densified geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Densify.Densifier.DensifyPoints(GeoAPI.Geometries.Coordinate[],System.Double,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Densifies a coordinate sequence.
            </summary>
            <param name="pts">The coordinate sequence to densify</param>
            <param name="distanceTolerance">The distance tolerance (<see cref="P:NetTopologySuite.Densify.Densifier.DistanceTolerance"/>)</param>
            <param name="precModel">The precision model to apply on the new coordinates</param>
            <returns>The densified coordinate sequence</returns>
        </member>
        <member name="M:NetTopologySuite.Densify.Densifier.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>Creates a new densifier instance</summary>
             <param name="inputGeom">The geometry to densify</param>
        </member>
        <member name="P:NetTopologySuite.Densify.Densifier.DistanceTolerance">
            <summary>
            Gets or sets the distance tolerance for the densification. All line segments
            in the densified geometry will be no longer than the distance tolereance.
            Simplified geometry will be within this distance of the original geometry.
            The distance tolerance must be positive.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Densify.Densifier.GetResultGeometry">
            <summary>
            Gets the densified geometry.
            </summary>
            <returns>The densified geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Densify.Densifier.DensifyTransformer.CreateValidArea(GeoAPI.Geometries.IGeometry)">
            <summary>
             Creates a valid area geometry from one that possibly has bad topology
             (i.e. self-intersections). Since buffer can handle invalid topology, but
             always returns valid geometry, constructing a 0-width buffer "corrects"
             the topology. Note this only works for area geometries, since buffer
             always returns areas. This also may return empty geometries, if the input
             has no actual area.
            </summary>
             <param name="roughAreaGeom">An area geometry possibly containing self-intersections</param>
             <returns>A valid area geometry</returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Depth">
            <summary>
            A Depth object records the topological depth of the sides
            of an Edge for up to two Geometries.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Depth.null">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.DepthAtLocation(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="_location"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.GetDepth(System.Int32,NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.SetDepth(System.Int32,NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <param name="depthValue"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Depth.Item(System.Int32,NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            Calls GetDepth and SetDepth.
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.GetLocation(System.Int32,NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.Add(System.Int32,NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <param name="_location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.IsNull">
            <summary>
            A Depth object is null (has never been initialized) if all depths are null.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.IsNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.IsNull(System.Int32,NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.Add(NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="lbl"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.GetDelta(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.Normalize">
            <summary>
            Normalize the depths for each point, if they are non-null.
            A normalized depth
            has depth values in the set { 0, 1 }.
            Normalizing the depths
            involves reducing the depths by the same amount so that at least
            one of them is 0.  If the remaining value is > 0, it is set to 1.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Depth.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.DirectedEdge">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.DepthFactor(GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            Computes the factor for the change in depth when moving from one location to another.
            E.g. if crossing from the Interior to the Exterior the depth decreases, so the factor is -1.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.DirectedEdge._isForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.DirectedEdge._depth">
            <summary> 
            The depth of each side (position) of this edge.
            The 0 element of the array is never used.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.#ctor(NetTopologySuite.GeometriesGraph.Edge,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="isForward"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.InResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.IsInResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.Visited">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.IsVisited">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.EdgeRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.MinEdgeRing">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.GetDepth(NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.SetDepth(NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="depthVal"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.DepthDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.VisitedEdge">
            <summary>
            VisitedEdge get property returns <c>true</c> if bot Visited 
            and Sym.Visited are <c>true</c>.
            VisitedEdge set property marks both DirectedEdges attached to a given Edge.
            This is used for edges corresponding to lines, which will only
            appear oriented in a single direction in the result.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.IsForward">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.Sym">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.NextMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.IsLineEdge">
            <summary>
            This edge is a line edge if
            at least one of the labels is a line label
            any labels which are not line labels have all Location = Exterior.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdge.IsInteriorAreaEdge">
            <summary> 
            This is an interior Area edge if
            its label is an Area label for both Geometries
            and for each Geometry both sides are in the interior.
            </summary>
            <returns><c>true</c> if this is an interior Area edge.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.ComputeDirectedLabel">
            <summary>
            Compute the label in the appropriate orientation for this DirEdge.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.SetEdgeDepths(NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary> 
            Set both edge depths.  
            One depth for a given side is provided.  
            The other is computed depending on the Location 
            transition and the depthDelta of the edge.
            </summary>
            <param name="depth"></param>
            <param name="position"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.OLDSetEdgeDepths(NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary> 
            Set both edge depths.  One depth for a given side is provided.  The other is
            computed depending on the Location transition and the depthDelta of the edge.
            </summary>
            <param name="depth"></param>
            <param name="position"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdge.WriteEdge(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.DirectedEdgeStar">
            <summary> 
            A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a node.
            It supports labelling the edges as well as linking the edges to form both
            MaximalEdgeRings and MinimalEdgeRings.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.DirectedEdgeStar._resultAreaEdgeList">
            <summary> 
            A list of all outgoing edges in the result, in CCW order.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.Insert(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Insert a directed edge in the list.
            </summary>
            <param name="ee"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.Label">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetOutgoingDegree">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetOutgoingDegree(NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetRightmostEdge">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.ComputeLabelling(NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary> 
            Compute the labelling for all dirEdges in this star, as well
            as the overall labelling.
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.MergeSymLabels">
            <summary> 
            For each dirEdge in the star, merge the label .
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.UpdateLabelling(NetTopologySuite.GeometriesGraph.Label)">
            <summary> 
            Update incomplete dirEdge labels from the labelling for the node.
            </summary>
            <param name="nodeLabel"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetResultAreaEdges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.LinkResultDirectedEdges">
            <summary> 
            Traverse the star of DirectedEdges, linking the included edges together.
            To link two dirEdges, the next pointer for an incoming dirEdge
            is set to the next outgoing edge.
            DirEdges are only linked if:
            they belong to an area (i.e. they have sides)
            they are marked as being in the result
            Edges are linked in CCW order (the order they are stored).
            This means that rings have their face on the Right
            (in other words, the topological location of the face is given by the RHS label of the DirectedEdge).
            PRECONDITION: No pair of dirEdges are both marked as being in the result.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.LinkMinimalDirectedEdges(NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="er"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.LinkAllDirectedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.FindCoveredLineEdges">
            <summary> 
            Traverse the star of edges, maintaing the current location in the result
            area at this node (if any).
            If any L edges are found in the interior of the result, mark them as covered.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.ComputeDepths(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.ComputeDepths(System.Int32,System.Int32,System.Int32)">
            <summary> 
            Compute the DirectedEdge depths for a subsequence of the edge array.
            </summary>
            <returns>The last depth assigned (from the R side of the last edge visited).</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.DirectedEdgeStar.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.UpdateIM(NetTopologySuite.GeometriesGraph.Label,GeoAPI.Geometries.IntersectionMatrix)">
            <summary> 
            Updates an IM from the label for an edge.
            Handles edges from both L and A geometries.
            </summary>
            <param name="im"></param>
            <param name="label"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.#ctor(GeoAPI.Geometries.Coordinate[],NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="label"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Points">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.DepthDelta">
            <summary>
            The depthDelta is the change in depth as an edge is crossed from R to L.
            </summary>
            <returns>The change in depth as the edge is crossed from R to L.</returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.MaximumSegmentIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.EdgeIntersectionList">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.MonotoneChainEdge">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.IsCollapsed">
            <summary> 
            An Edge is collapsed if it is an Area edge and it consists of
            two segments which are equal and opposite (eg a zero-width V).
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.CollapsedEdge">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.Isolated">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Edge.IsIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.AddIntersections(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32)">
            <summary>
            Adds EdgeIntersections for one or both
            intersections found for a segment of an edge to the edge intersection list.
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.AddIntersection(NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an EdgeIntersection for intersection intIndex.
            An intersection that falls exactly on a vertex of the edge is normalized
            to use the higher of the two possible segmentIndexes.
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
            <param name="intIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for this component.
            A component only contributes if it has a labelling for both parent geometries.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.Equals(System.Object)">
            <summary>
            Equals is defined to be:
            e1 equals e2
            iff
            the coordinates of e1 are the same or the reverse of the coordinates in e2.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.Equals(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Equals is defined to be:
            e1 equals e2
            iff
            the coordinates of e1 are the same or the reverse of the coordinates in e2.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.op_Equality(NetTopologySuite.GeometriesGraph.Edge,NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.op_Inequality(NetTopologySuite.GeometriesGraph.Edge,NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.IsPointwiseEqual(NetTopologySuite.GeometriesGraph.Edge)">
            <returns> 
            <c>true</c> if the coordinate sequences of the Edges are identical.
            </returns>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.Write(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Edge.WriteReverse(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeEnd">
            <summary> 
            Models the end of an edge incident on a node.
            </summary>
            <remarks>
            <para>
            EdgeEnds have a direction determined by the direction of the ray from the initial
            point to the next point.
            </para>
            <para>
            EdgeEnds are IComparable under the ordering  "a has a greater angle with the x-axis than b".
            This ordering is used to sort EdgeEnds around a node.
            </para>
            </remarks>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.EdgeEnd._label">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.#ctor(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.#ctor(NetTopologySuite.GeometriesGraph.Edge,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.#ctor(NetTopologySuite.GeometriesGraph.Edge,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="label"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.Init(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.DirectedCoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Quadrant">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Dx">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Dy">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEnd.Node">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.CompareTo(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.CompareDirection(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Implements the total order relation:
            a has a greater angle with the positive x-axis than b.
            Using the obvious algorithm of simply computing the angle is not robust,
            since the angle calculation is obviously susceptible to roundoff.
            A robust algorithm is:
            - first compare the quadrant.  If the quadrants
            are different, it it trivial to determine which vector is "greater".
            - if the vectors lie in the same quadrant, the computeOrientation function
            can be used to decide the relative orientation of the vectors.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.ComputeLabel(NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
            Subclasses should override this if they are using labels
            </summary>
            <param name="boundaryNodeRule"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEnd.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeEndStar">
            <summary>
            A EdgeEndStar is an ordered list of EdgeEnds around a node.
            They are maintained in CCW order (starting with the positive x-axis) around the node
            for efficient lookup and topology building.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.EdgeEndStar.edgeMap">
            <summary>
            A map which maintains the edges in sorted order around the node.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.EdgeEndStar.edgeList">
            <summary> 
            A list of all outgoing edges in the result, in CCW order.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.EdgeEndStar._ptInAreaLocation">
            <summary>
            The location of the point for this star in Geometry i Areas.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.Insert(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Insert a EdgeEnd into this EdgeEndStar.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.InsertEdgeEnd(NetTopologySuite.GeometriesGraph.EdgeEnd,NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Insert an EdgeEnd into the map, and clear the edgeList cache,
            since the list of edges has now changed.
            </summary>
            <param name="e"></param>
            <param name="obj"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEndStar.Coordinate">
            <returns>
            The coordinate for the node this star is based at.
            </returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEndStar.Degree">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.GetEnumerator">
            <summary>
            Iterator access to the ordered list of edges is optimized by
            copying the map collection to a list.  (This assumes that
            once an iterator is requested, it is likely that insertion into
            the map is complete).
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeEndStar.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.GetNextCW(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="ee"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.ComputeLabelling(NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.ComputeEdgeEndLabels(NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.GetLocation(System.Int32,GeoAPI.Geometries.Coordinate,NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="p"></param>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.IsAreaLabelsConsistent(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.CheckAreaLabelsConsistent(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.PropagateSideLabels(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.FindIndex(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="eSearch"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeEndStar.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeIntersection">
            <summary> 
            An EdgeIntersection represents a point on an
            edge which intersects with another edge.
            The intersection may either be a single point, or a line segment
            (in which case this point is the start of the line segment)
            The label attached to this intersection point applies to
            the edge from this point forwards, until the next
            intersection or the end of the edge.
            The intersection point must be precise.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeIntersection.Coordinate">
            <summary>
            The point of intersection.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeIntersection.SegmentIndex">
            <summary>
            The index of the containing line segment in the parent edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeIntersection.Distance">
            <summary>
            The edge distance of this point along the containing line segment.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersection.#ctor(GeoAPI.Geometries.Coordinate,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="segmentIndex"></param>
            <param name="dist"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersection.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersection.Compare(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="segmentIndex"></param>
            <param name="dist"></param>
            <returns>
            -1 this EdgeIntersection is located before the argument location,
            0 this EdgeIntersection is at the argument location,
            1 this EdgeIntersection is located after the argument location.
            </returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersection.IsEndPoint(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxSegmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersection.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeIntersectionList">
            <summary>
            A list of edge intersections along an Edge.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.#ctor(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.Add(GeoAPI.Geometries.Coordinate,System.Int32,System.Double)">
            <summary> 
            Adds an intersection into the list, if it isn't already there.
            The input segmentIndex and dist are expected to be normalized.
            </summary>
            <param name="intPt"></param>
            <param name="segmentIndex"></param>
            <param name="dist"></param>
            <returns>The EdgeIntersection found or added.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.GetEnumerator">
            <summary> 
            Returns an iterator of EdgeIntersections.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.IsIntersection(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.AddEndpoints">
            <summary>
            Adds entries for the first and last points of the edge to the list.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.AddSplitEdges(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge})">
            <summary> 
            Creates new edges for all the edges that the intersections in this
            list split the parent edge into.
            Adds the edges to the input list (this is so a single list
            can be used to accumulate all split edges for a Geometry).
            </summary>
            <param name="edgeList"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.CreateSplitEdge(NetTopologySuite.GeometriesGraph.EdgeIntersection,NetTopologySuite.GeometriesGraph.EdgeIntersection)">
            <summary>
            Create a new "split edge" with the section of points between
            (and including) the two intersections.
            The label for the new edge is the same as the label for the parent edge.
            </summary>
            <param name="ei0"></param>
            <param name="ei1"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeIntersectionList.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeList">
            <summary>
            A EdgeList is a list of Edges.  It supports locating edges
            that are pointwise equals to a target edge.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NetTopologySuite.GeometriesGraph.EdgeList._ocaMap" -->
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.Remove(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Remove the selected Edge element from the list if present.
            </summary>
            <param name="e">Edge element to remove from list</param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.Add(NetTopologySuite.GeometriesGraph.Edge)">
            <summary> 
            Insert an edge unless it is already in the list.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.AddAll(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="edgeColl"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeList.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.FindEqualEdge(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            If there is an edge equal to e already in the list, return it.
            Otherwise return null.
            </summary>
            <param name="e"></param>
            <returns>  
            equal edge, if there is one already in the list,
            null otherwise.
            </returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.FindEdgeIndex(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            If the edge e is already in the list, return its index.
            </summary>
            <param name="e"></param>
            <returns>  
            Index, if e is already in the list,
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeList.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeNodingValidator">
            <summary>
            Validates that a collection of <see cref="T:NetTopologySuite.GeometriesGraph.Edge"/> is correctly noded.
            Throws an appropriate exception if an noding error is found.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeNodingValidator.CheckValid(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
             Checks whether the supplied <see cref="T:NetTopologySuite.GeometriesGraph.Edge"/>s are correctly noded. 
            </summary>
             <param name="edges">an enumeration of Edges.</param>
             <exception cref="T:NetTopologySuite.Geometries.TopologyException">If the SegmentStrings are not correctly noded</exception>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeNodingValidator.#ctor(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
             Creates a new validator for the given collection of <see cref="T:NetTopologySuite.GeometriesGraph.Edge"/>s.
             </summary> 
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeNodingValidator.CheckValid">
            <summary>
            Checks whether the supplied edges are correctly noded. 
            </summary>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">If the SegmentStrings are not correctly noded</exception>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.EdgeRing">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.EdgeRing.startDe">
            <summary>
            The directed edge which starts the list of edges for this EdgeRing.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.EdgeRing._geometryFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.#ctor(NetTopologySuite.GeometriesGraph.DirectedEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.IsIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.IsHole">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.LinearRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.IsShell">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.Shell">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.AddHole(NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.ToPolygon(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometryFactory"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.ComputeRing">
            <summary>
            Compute a LinearRing from the point list previously collected.
            Test if the ring is a hole (i.e. if it is CCW) and set the hole flag
            accordingly.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.GetNext(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.SetEdgeRing(NetTopologySuite.GeometriesGraph.DirectedEdge,NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="er"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.Edges">
            <summary> 
            Returns the list of DirectedEdges that make up this EdgeRing.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.ComputePoints(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary> 
            Collect all the points from the DirectedEdges of this ring into a contiguous list.
            </summary>
            <param name="start"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.EdgeRing.MaxNodeDegree">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.ComputeMaxNodeDegree">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.SetInResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.MergeLabel(NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="deLabel"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.MergeLabel(NetTopologySuite.GeometriesGraph.Label,System.Int32)">
            <summary> 
            Merge the RHS label from a DirectedEdge into the label for this EdgeRing.
            The DirectedEdge label may be null.  This is acceptable - it results
            from a node which is NOT an intersection node between the Geometries
            (e.g. the end node of a LinearRing).  In this case the DirectedEdge label
            does not contribute any information to the overall labelling, and is simply skipped.
            </summary>
            <param name="deLabel"></param>
            <param name="geomIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.AddPoints(NetTopologySuite.GeometriesGraph.Edge,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="isForward"></param>
            <param name="isFirstEdge"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.EdgeRing.ContainsPoint(GeoAPI.Geometries.Coordinate)">
            <summary> 
            This method will cause the ring to be computed.
            It will also check any holes, if they have been assigned.
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.GeometryGraph">
            <summary>
            A GeometryGraph is a graph that models a given Geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.DetermineBoundary(NetTopologySuite.Algorithm.IBoundaryNodeRule,System.Int32)">
            <summary>
            This method implements the Boundary Determination Rule
            for determining whether
            a component (node or edge) that appears multiple times in elements
            of a MultiGeometry is in the boundary or the interior of the Geometry.
            The SFS uses the "Mod-2 Rule", which this function implements.
            An alternative (and possibly more intuitive) rule would be
            the "At Most One Rule":
            isInBoundary = (componentCount == 1)
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.GeometryGraph._lineEdgeMap">
            <summary>
            The lineEdgeMap is a map of the linestring components of the
            parentGeometry to the edges which are derived from them.
            This is used to efficiently perform findEdge queries
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.GeometryGraph._useBoundaryDeterminationRule">
            <summary>
            If this flag is true, the Boundary Determination Rule will used when deciding
            whether nodes are in the boundary or not
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.CreateEdgeSetIntersector">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.#ctor(System.Int32,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="argIndex"></param>
             <param name="parentGeom"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.#ctor(System.Int32,GeoAPI.Geometries.IGeometry,NetTopologySuite.Algorithm.IBoundaryNodeRule)">
             <summary>
            
             </summary>
             <param name="argIndex"></param>
             <param name="parentGeom"></param>
             <param name="boundaryNodeRule"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GeometryGraph.HasTooFewPoints">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GeometryGraph.InvalidPoint">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GeometryGraph.Geometry">
             <summary>
            
             </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GeometryGraph.BoundaryNodeRule">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> used with this geometry graph.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GeometryGraph.BoundaryNodes">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.GetBoundaryPoints">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.FindEdge(GeoAPI.Geometries.ILineString)">
             <summary>
            
             </summary>
             <param name="line"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.ComputeSplitEdges(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge})">
             <summary>
            
             </summary>
             <param name="edgelist"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.Add(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddCollection(GeoAPI.Geometries.IGeometryCollection)">
             <summary>
            
             </summary>
             <param name="gc"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddPoint(GeoAPI.Geometries.IPoint)">
            <summary>
            Add a Point to the graph.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddPolygonRing(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            Adds a polygon ring to the graph. Empty rings are ignored.
            The left and right topological location arguments assume that the ring is oriented CW.
            If the ring is in the opposite orientation,
            the left and right locations must be interchanged.
            </summary>
            <param name="lr"></param>
            <param name="cwLeft"></param>
            <param name="cwRight"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddPolygon(GeoAPI.Geometries.IPolygon)">
             <summary>
            
             </summary>
             <param name="p"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddLineString(GeoAPI.Geometries.ILineString)">
             <summary>
            
             </summary>
             <param name="line"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddEdge(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Add an Edge computed externally.  The label on the Edge is assumed
            to be correct.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddPoint(GeoAPI.Geometries.Coordinate)">
            <summary>
            Add a point computed externally.  The point is assumed to be a
            Point Geometry part, which has a location of INTERIOR.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.ComputeSelfNodes(NetTopologySuite.Algorithm.LineIntersector,System.Boolean)">
            <summary>
            Compute self-nodes, taking advantage of the Geometry type to
            minimize the number of intersection tests.  (E.g. rings are
            not tested for self-intersection, since they are assumed to be valid).
            </summary>
            <param name="li">The <c>LineIntersector</c> to use.</param>
            <param name="computeRingSelfNodes">If <c>false</c>, intersection checks are optimized to not test rings for self-intersection.</param>
            <returns>The SegmentIntersector used, containing information about the intersections found.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.ComputeEdgeIntersections(NetTopologySuite.GeometriesGraph.GeometryGraph,NetTopologySuite.Algorithm.LineIntersector,System.Boolean)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <param name="li"></param>
             <param name="includeProper"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.InsertPoint(System.Int32,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Location)">
             <summary>
            
             </summary>
             <param name="argIndex"></param>
             <param name="coord"></param>
             <param name="onLocation"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.InsertBoundaryPoint(System.Int32,GeoAPI.Geometries.Coordinate)">
            <summary>
            Adds candidate boundary points using the current <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/>.
            This is used to add the boundary
            points of dim-1 geometries (Curves/MultiCurves).
            </summary>
            <param name="argIndex"></param>
            <param name="coord"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddSelfIntersectionNodes(System.Int32)">
             <summary>
            
             </summary>
             <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.AddSelfIntersectionNode(System.Int32,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Location)">
            <summary>
            Add a node for a self-intersection.
            If the node is a potential boundary node (e.g. came from an edge which
            is a boundary) then insert it as a potential boundary node.
            Otherwise, just add it as a regular node.
            </summary>
            <param name="argIndex"></param>
            <param name="coord"></param>
            <param name="loc"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GeometryGraph.Locate(GeoAPI.Geometries.Coordinate)">
            <summary>
             Determines the <see cref="T:GeoAPI.Geometries.Location"/> of the given <see cref="T:GeoAPI.Geometries.Coordinate"/> in this geometry.
            </summary>
             <param name="pt">The point to test</param>
             <returns>
             The location of the point in the geometry
             </returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.GraphComponent">
            <summary>
            A GraphComponent is the parent class for the objects'
            that form a graph.  Each GraphComponent can carry a
            Label.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.GraphComponent._label">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GraphComponent.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GraphComponent.#ctor(NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="label"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.InResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.IsInResult">
            <summary> 
            IsInResult indicates if this component has already been included in the result.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.Covered">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.IsCovered">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.IsCoveredSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.Visited">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.IsVisited">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.Coordinate">
            <summary>
            
            </summary>
            <returns>
            A coordinate in this component (or null, if there are none).
            </returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GraphComponent.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Compute the contribution to an IM for this component.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.GraphComponent.IsIsolated">
            <summary>
            An isolated component is one that does not intersect or touch any other
            component.  This is the case if the label has valid locations for
            only a single Geometry.
            </summary>
            <returns><c>true</c> if this component is isolated.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.GraphComponent.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for this component.
            A component only contributes if it has a labelling for both parent geometries.
            </summary>
            <param name="im"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector">
            <summary>
            An <c>EdgeSetIntersector</c> computes all the intersections between the
            edges in the set.  It adds the computed intersections to each edge
            they are found on.  It may be used in two scenarios:
            determining the internal intersections between a single set of edges
            determining the mutual intersections between two different sets of edges
            It uses a <c>SegmentIntersector</c> to compute the intersections between
            segments and to record statistics about what kinds of intersections were found.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            Computes all self-intersections between edges in a set of edges,
            allowing client to choose whether self-intersections are computed.
            </summary>
            <param name="edges">A list of edges to test for intersections.</param>
            <param name="si">The SegmentIntersector to use.</param>
            <param name="testAllSegments"><c>true</c> if self-intersections are to be tested as well.</param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary> 
            Computes all mutual intersections between two sets of edges.
            </summary>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.MonotoneChain">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChain.#ctor(NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,System.Int32)">
            <summary>
            
            </summary>
            <param name="mce"></param>
            <param name="chainIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChain.ComputeIntersections(NetTopologySuite.GeometriesGraph.Index.MonotoneChain,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <param name="si"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge">
            <summary> 
            MonotoneChains are a way of partitioning the segments of an edge to
            allow for fast searching of intersections.
            They have the following properties:
            the segments within a monotone chain will never intersect each other, and 
            the envelope of any contiguous subset of the segments in a monotone chain
            is simply the envelope of the endpoints of the subset.
            Property 1 means that there is no need to test pairs of segments from within
            the same monotone chain for intersection.
            Property 2 allows
            binary search to be used to find the intersection points of two monotone chains.
            For many types of real-world data, these properties eliminate a large number of
            segment comparisons, producing substantial speed gains.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.#ctor(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.StartIndexes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.GetMinX(System.Int32)">
            <summary>
            
            </summary>
            <param name="chainIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.GetMaxX(System.Int32)">
            <summary>
            
            </summary>
            <param name="chainIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.ComputeIntersects(NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="mce"></param>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.ComputeIntersectsForChain(System.Int32,NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,System.Int32,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="chainIndex0"></param>
            <param name="mce"></param>
            <param name="chainIndex1"></param>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.ComputeIntersectsForChain(System.Int32,System.Int32,NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,System.Int32,System.Int32,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="start0"></param>
            <param name="end0"></param>
            <param name="mce"></param>
            <param name="start1"></param>
            <param name="end1"></param>
            <param name="ei"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer">
            <summary>
            MonotoneChains are a way of partitioning the segments of an edge to
            allow for fast searching of intersections.
            <para>
            Specifically, a sequence of contiguous line segments
            is a monotone chain iff all the vectors defined by the oriented segments
            lies in the same quadrant.
            </para><para>
            Monotone Chains have the following useful properties:
            the segments within a monotone chain will never intersect each other, and
            the envelope of any contiguous subset of the segments in a monotone chain
            is simply the envelope of the endpoints of the subset.
            Property 1 means that there is no need to test pairs of segments from within
            the same monotone chain for intersection.
            Property 2 allows
            binary search to be used to find the intersection points of two monotone chains.
            For many types of real-world data, these properties eliminate a large number of
            segment comparisons, producing substantial speed gains.
            </para>
            <para>
            Note that due to the efficient intersection test, there is no need to limit the size
            of chains to obtain fast performance.
            </para>
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.ToIntArray(System.Collections.Generic.IList{System.Int32})">
             <summary>
            
             </summary>
             <param name="list"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.GetChainStartIndices(GeoAPI.Geometries.Coordinate[])">
             <summary>
            
             </summary>
             <param name="pts"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.FindChainEnd(GeoAPI.Geometries.Coordinate[],System.Int32)">
             <returns>
             The index of the last point in the monotone chain.
            
             </returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector">
            <summary>
            Computes the intersection of line segments,
            and adds the intersection to the edges containing the segments.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsAdjacentSegments(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.NumTests">
            <summary>
            Testing only.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.#ctor(NetTopologySuite.Algorithm.LineIntersector,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="includeProper"></param>
            <param name="recordIsolated"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.SetBoundaryNodes(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Node},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Node})">
            <summary>
            
            </summary>
            <param name="bdyNodes0"></param>
            <param name="bdyNodes1"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.ProperIntersectionPoint">
            <returns> 
            The proper intersection point, or <c>null</c> if none was found.
            </returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.HasIntersection">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.HasProperIntersection">
            <summary>
            A proper intersection is an intersection which is interior to at least two
            line segments.  Note that a proper intersection is not necessarily
            in the interior of the entire Geometry, since another edge may have
            an endpoint equal to the intersection, which according to SFS semantics
            can result in the point being on the Boundary of the Geometry.
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.HasProperInteriorIntersection">
            <summary> 
            A proper interior intersection is a proper intersection which is not
            contained in the set of boundary nodes set for this SegmentIntersector.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsTrivialIntersection(NetTopologySuite.GeometriesGraph.Edge,System.Int32,NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary>
            A trivial intersection is an apparent self-intersection which in fact
            is simply the point shared by adjacent line segments.
            Note that closed edges require a special check for the point shared by the beginning
            and end segments.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.AddIntersections(NetTopologySuite.GeometriesGraph.Edge,System.Int32,NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary> 
            This method is called by clients of the EdgeIntersector class to test for and add
            intersections for two segments of the edges being intersected.
            Note that clients (such as MonotoneChainEdges) may choose not to intersect
            certain pairs of segments for efficiency reasons.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsBoundaryPoint(NetTopologySuite.Algorithm.LineIntersector,System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Node}[])">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="bdyNodes"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsBoundaryPoint(NetTopologySuite.Algorithm.LineIntersector,System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Node})">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="bdyNodes"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector">
            <summary>
            Finds all intersections in one or two sets of edges,
            using the straightforward method of
            comparing all segments.
            This algorithm is too slow for production use, but is useful for testing purposes.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="si"></param>
            <param name="testAllSegments"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="edges0"></param>
            <param name="edges1"></param>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.ComputeIntersects(NetTopologySuite.GeometriesGraph.Edge,NetTopologySuite.GeometriesGraph.Edge,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            Performs a brute-force comparison of every segment in each Edge.
            This has n^2 performance, and is about 100 times slower than using
            monotone chains.
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="si"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector">
            <summary> 
            Finds all intersections in one or two sets of edges,
            using an x-axis sweepline algorithm in conjunction with Monotone Chains.
            While still O(n^2) in the worst case, this algorithm
            drastically improves the average-case time.
            The use of MonotoneChains as the items in the index
            seems to offer an improvement in performance over a sweep-line alone.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="si"></param>
            <param name="testAllSegments"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="edges0"></param>
            <param name="edges1"></param>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.Add(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.Add(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge},System.Object)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.Add(NetTopologySuite.GeometriesGraph.Edge,System.Object)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.PrepareEvents">
            <summary>
            Because Delete Events have a link to their corresponding Insert event,
            it is possible to compute exactly the range of events which must be
            compared to a given Insert event object.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ComputeIntersections(NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ProcessOverlaps(System.Int32,System.Int32,NetTopologySuite.GeometriesGraph.Index.SweepLineEvent,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="ev0"></param>
            <param name="si"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector">
            <summary>
            Finds all intersections in one or two sets of edges,
            using a simple x-axis sweepline algorithm.
            While still O(n^2) in the worst case, this algorithm
            drastically improves the average-case time.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="si"></param>
            <param name="testAllSegments"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ComputeIntersections(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge},NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="edges0"></param>
            <param name="edges1"></param>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.Add(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.Add(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge},System.Object)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.Add(NetTopologySuite.GeometriesGraph.Edge,System.Object)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.PrepareEvents">
            <summary> 
            Because DELETE events have a link to their corresponding INSERT event,
            it is possible to compute exactly the range of events which must be
            compared to a given INSERT event object.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ComputeIntersections(NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="si"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ProcessOverlaps(System.Int32,System.Int32,NetTopologySuite.GeometriesGraph.Index.SweepLineEvent,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="ev0"></param>
            <param name="si"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.#ctor(System.Object,System.Double,System.Object)">
            <summary>
            Creates an INSERT event.
            </summary>
            <param name="label">The edge set label for this object.</param>
            <param name="x">The event location</param>
            <param name="obj">the object being inserted</param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.#ctor(System.Double,NetTopologySuite.GeometriesGraph.Index.SweepLineEvent)">
            <summary>
            Creates a DELETE event.
            </summary>
            <param name="x">The event location</param>
            <param name="insertEvent">The corresponding INSERT event</param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.IsInsert">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.IsDelete">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.InsertEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.DeleteEventIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.Object">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.CompareTo(System.Object)">
            <summary>
            Events are ordered first by their x-value, and then by their eventType.
            Insert events are sorted before Delete events, so that
            items whose Insert and Delete events occur at the same x-value will be
            correctly handled.
            </summary>
            <param name="o"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Index.SweepLineSegment">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.#ctor(NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="ptIndex"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.MinX">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.MaxX">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.ComputeIntersections(NetTopologySuite.GeometriesGraph.Index.SweepLineSegment,NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="ss"></param>
            <param name="si"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Label">
            <summary> 
            A <c>Label</c> indicates the topological relationship of a component
            of a topology graph to a given <c>Geometry</c>.
            This class supports labels for relationships to two <c>Geometry</c>s,
            which is sufficient for algorithms for binary operations.
            Topology graphs support the concept of labeling nodes and edges in the graph.
            The label of a node or edge specifies its topological relationship to one or
            more geometries.  (In fact, since NTS operations have only two arguments labels
            are required for only two geometries).  A label for a node or edge has one or
            two elements, depending on whether the node or edge occurs in one or both of the
            input <c>Geometry</c>s.  Elements contain attributes which categorize the
            topological location of the node or edge relative to the parent
            <c>Geometry</c>; that is, whether the node or edge is in the interior,
            boundary or exterior of the <c>Geometry</c>.  Attributes have a value
            from the set <c>{Interior, Boundary, Exterior}</c>.  In a node each
            element has a single attribute <c>On</c>. For an edge each element has a
            triplet of attributes <c>Left, On, Right</c>.
            It is up to the client code to associate the 0 and 1 <c>TopologyLocation</c>s
            with specific geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.ToLineLabel(NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            Converts a Label to a Line label (that is, one with no side Location).
            </summary>
            <param name="label">Label to convert.</param>
            <returns>Label as Line label.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.#ctor(GeoAPI.Geometries.Location)">
            <summary>
            Construct a Label with a single location for both Geometries.
            Initialize the locations to Null.
            </summary>
            <param name="onLoc"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.#ctor(System.Int32,GeoAPI.Geometries.Location)">
            <summary> 
            Construct a Label with a single location for both Geometries.
            Initialize the location for the Geometry index.
            </summary>
            <param name="geomIndex"></param>
            <param name="onLoc"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.#ctor(GeoAPI.Geometries.Location,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            Construct a Label with On, Left and Right locations for both Geometries.
            Initialize the locations for both Geometries to the given values.
            </summary>
            <param name="onLoc"></param>
            <param name="leftLoc"></param>
            <param name="rightLoc"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.#ctor(System.Int32,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            Construct a Label with On, Left and Right locations for both Geometries.
            Initialize the locations for the given Geometry index.
            </summary>
            <param name="geomIndex"></param>
            <param name="onLoc"></param>
            <param name="leftLoc"></param>
            <param name="rightLoc"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.#ctor(NetTopologySuite.GeometriesGraph.Label)">
            <summary> 
            Construct a Label with the same values as the argument Label.
            </summary>
            <param name="lbl"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.Flip">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.GetLocation(System.Int32,NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.GetLocation(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.SetLocation(System.Int32,NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <param name="_location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.SetLocation(System.Int32,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="_location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.SetAllLocations(System.Int32,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="_location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.SetAllLocationsIfNull(System.Int32,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="_location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.SetAllLocationsIfNull(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="_location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.Merge(NetTopologySuite.GeometriesGraph.Label)">
            <summary> 
            Merge this label with another one.
            Merging updates any null attributes of this label with the attributes from lbl.
            </summary>
            <param name="lbl"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.SetGeometryLocation(System.Int32,NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="tl"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Label.GeometryCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.IsNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.IsAnyNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.IsArea">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.IsArea(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.IsLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.IsEqualOnSide(NetTopologySuite.GeometriesGraph.Label,System.Int32)">
            <summary>
            
            </summary>
            <param name="lbl"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.AllPositionsEqual(System.Int32,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.ToLine(System.Int32)">
            <summary> 
            Converts one GeometryLocation to a Line location.
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Label.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Node._coord">
            <summary>
            Only non-null if this node is precise.
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Node._edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.#ctor(GeoAPI.Geometries.Coordinate,NetTopologySuite.GeometriesGraph.EdgeEndStar)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="edges"></param>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Node.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Node.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.IsIncidentEdgeInResult">
            <summary>
            Tests whether any incident edge is flagged as
            being in the result.
            This test can be used to determine if the node is in the result,
            since if any incident edge is in the result, the node must be in the result as well.
            </summary>
            <returns><value>true</value> if any indicident edge in the in the result
            </returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.Node.IsIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Basic nodes do not compute IMs.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.Add(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Add the edge to the list of edges at this node.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.MergeLabel(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.MergeLabel(NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            To merge labels for two nodes,
            the merged location for each LabelElement is computed.
            The location for the corresponding node LabelElement is set to the result,
            as long as the location is non-null.
            </summary>
            <param name="label2"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.SetLabel(System.Int32,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="argIndex"></param>
            <param name="onLocation"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.SetLabelBoundary(System.Int32)">
            <summary> 
            Updates the label of a node to BOUNDARY,
            obeying the mod-2 boundaryDetermination rule.
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.ComputeMergedLocation(NetTopologySuite.GeometriesGraph.Label,System.Int32)">
            <summary> 
            The location for a given eltIndex for a node will be one
            of { Null, Interior, Boundary }.
            A node may be on both the boundary and the interior of a point;
            in this case, the rule is that the node is considered to be in the boundary.
            The merged location is the maximum of the two input values.
            </summary>
            <param name="label2"></param>
            <param name="eltIndex"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.Write(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Node.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.NodeFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeFactory.CreateNode(GeoAPI.Geometries.Coordinate)">
            <summary> 
            The basic node constructor does not allow for incident edges.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.NodeMap">
            <summary> 
            A map of nodes, indexed by the coordinate of the node.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.#ctor(NetTopologySuite.GeometriesGraph.NodeFactory)">
            <summary>
            
            </summary>
            <param name="nodeFact"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.AddNode(GeoAPI.Geometries.Coordinate)">
            <summary> 
            This method expects that a node has a coordinate value.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.AddNode(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.Add(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Adds a node for the start point of this EdgeEnd
            (if one does not already exist in this map).
            Adds the EdgeEnd to the (possibly new) node.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.Find(GeoAPI.Geometries.Coordinate)">
            <returns> 
            The node if found; null otherwise.
            </returns>
            <param name="coord"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.NodeMap.Values">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.GetBoundaryNodes(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.NodeMap.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.PlanarGraph">
            <summary> 
            The computation of the <c>IntersectionMatrix</c> relies on the use of a structure
            called a "topology graph". The topology graph contains nodes and edges
            corresponding to the nodes and line segments of a <c>Geometry</c>. Each
            node and edge in the graph is labeled with its topological location relative to
            the source point.
            Note that there is no requirement that points of self-intersection be a vertex.
            Thus to obtain a correct topology graph, <c>Geometry</c>s must be
            self-noded before constructing their graphs.
            Two fundamental operations are supported by topology graphs:
            Computing the intersections between all the edges and nodes of a single graph
            Computing the intersections between the edges and nodes of two different graphs
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.LinkResultDirectedEdges(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Node})">
            <summary> 
            For nodes in the Collection, link the DirectedEdges at the node that are in the result.
            This allows clients to link only a subset of nodes in the graph, for
            efficiency (because they know that only a subset is of interest).
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.PlanarGraph._edges">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.PlanarGraph._nodes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.PlanarGraph.edgeEndList">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.#ctor(NetTopologySuite.GeometriesGraph.NodeFactory)">
            <summary>
            
            </summary>
            <param name="nodeFact"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.GetEdgeEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.PlanarGraph.EdgeEnds">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.IsBoundaryNode(System.Int32,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.InsertEdge(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.Add(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.GetNodeEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.PlanarGraph.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.AddNode(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.AddNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.Find(GeoAPI.Geometries.Coordinate)">
            <returns> 
            The node if found; null otherwise
            </returns>
            <param name="coord"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.AddEdges(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge})">
            <summary> 
            Add a set of edges to the graph.  For each edge two DirectedEdges
            will be created.  DirectedEdges are NOT linked by this method.
            </summary>
            <param name="edgesToAdd"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.LinkResultDirectedEdges">
            <summary> 
            Link the DirectedEdges at the nodes of the graph.
            This allows clients to link only a subset of nodes in the graph, for
            efficiency (because they know that only a subset is of interest).
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.LinkAllDirectedEdges">
            <summary> 
            Link the DirectedEdges at the nodes of the graph.
            This allows clients to link only a subset of nodes in the graph, for
            efficiency (because they know that only a subset is of interest).
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.FindEdgeEnd(NetTopologySuite.GeometriesGraph.Edge)">
            <summary> 
            Returns the EdgeEnd which has edge e as its base edge
            (MD 18 Feb 2002 - this should return a pair of edges).
            </summary>
            <param name="e"></param>
            <returns> The edge, if found <c>null</c> if the edge was not found.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.FindEdge(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the edge whose first two coordinates are p0 and p1.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns> The edge, if found <c>null</c> if the edge was not found.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.FindEdgeInSameDirection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
             <summary>
             Returns the edge which starts at p0 and whose first segment is
             parallel to p1.
             </summary>
             <param name="p0"></param>
            <param name="p1"></param>
             <returns> The edge, if found <c>null</c> if the edge was not found.</returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.MatchInSameDirection(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            The coordinate pairs match if they define line segments lying in the same direction.
            E.g. the segments are parallel and in the same quadrant
            (as opposed to parallel and opposite!).
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="ep0"></param>
            <param name="ep1"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.PlanarGraph.WriteEdges(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Positions">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Positions.On">
            <summary>
             An indicator that a Location is <c>on</c> a GraphComponent (0)
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Positions.Left">
            <summary>
            An indicator that a Location is to the <c>left</c> of a GraphComponent (1)
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Positions.Right">
            <summary> 
            An indicator that a Location is to the <c>right</c> of a GraphComponent (2)
            </summary> 
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.Positions.Parallel">
            <summary> 
            An indicator that a Location is <c>is parallel to x-axis</c> of a GraphComponent (-1)
            /// </summary> 
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.Position">
            <summary> 
            A Position indicates the position of a Location relative to a graph component
            (Node, Edge, or Area).
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.Position.Opposite(NetTopologySuite.GeometriesGraph.Positions)">
            <summary> 
            Returns Positions.Left if the position is Positions.Right, 
            Positions.Right if the position is Left, or the position
            otherwise.
            </summary>
            <param name="position"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.QuadrantOp">
            <summary> 
            Utility functions for working with quadrants, which are numbered as follows:
            <para>
            1 | 0
            --+--
            2 | 3
            </para>
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.QuadrantOp.NE">
            <summary>
            North-East
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.QuadrantOp.NW">
            <summary>
            North-West
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.QuadrantOp.SW">
            <summary>
            South-West
            </summary>
        </member>
        <member name="F:NetTopologySuite.GeometriesGraph.QuadrantOp.SE">
            <summary>
            South-East
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.Quadrant(System.Double,System.Double)">
            <summary> 
            Returns the quadrant of a directed line segment (specified as x and y
            displacements, which cannot both be 0).
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <exception cref="T:System.ArgumentException">If the displacements are both 0</exception>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.Quadrant(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Returns the quadrant of a directed line segment from p0 to p1.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <exception cref="T:System.ArgumentException"> if the points are equal</exception>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.IsOpposite(System.Int32,System.Int32)">
            <summary>
            Returns true if the quadrants are 1 and 3, or 2 and 4.
            </summary>
            <param name="quad1"></param>
            <param name="quad2"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.CommonHalfPlane(System.Int32,System.Int32)">
            <summary>
            Returns the right-hand quadrant of the halfplane defined by the two quadrants,
            or -1 if the quadrants are opposite, or the quadrant if they are identical.
            </summary>
            <param name="quad1"></param>
            <param name="quad2"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.IsInHalfPlane(System.Int32,System.Int32)">
            <summary> 
            Returns whether the given quadrant lies within the given halfplane (specified
            by its right-hand quadrant).
            </summary>
            <param name="quad"></param>
            <param name="halfPlane"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.QuadrantOp.IsNorthern(System.Int32)">
            <summary> 
            Returns true if the given quadrant is 0 or 1.
            </summary>
            <param name="quad"></param>
        </member>
        <member name="T:NetTopologySuite.GeometriesGraph.TopologyLocation">
            <summary> 
            A TopologyLocation is the labelling of a
            GraphComponent's topological relationship to a single Geometry.
            </summary>
            <remarks>
            If the parent component is an area edge, each side and the edge itself
            have a topological location.  These locations are named:
            <list type="Table">
            <item>On</item><description>on the edge</description> 
            <item>Left</item><description>left-hand side of the edge</description>
            <item>Right</item><description>right-hand side</description>
            </list>
            <para>
            If the parent component is a line edge or node, there is a single
            topological relationship attribute, On.</para>
            <para>
            The possible values of a topological location are
            { <see cref="F:GeoAPI.Geometries.Location.Null"/>, <see cref="F:GeoAPI.Geometries.Location.Exterior"/>, <see cref="F:GeoAPI.Geometries.Location.Boundary"/>, <see cref="F:GeoAPI.Geometries.Location.Interior"/> }</para>
            <para>
            The labelling is stored in an array _location[j] where
            where j has the values On, Left, Right.
            </para>
            </remarks>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GeoAPI.Geometries.Location[])">
            <summary>
            
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GeoAPI.Geometries.Location,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary> 
            Constructs a TopologyLocation specifying how points on, to the left of, and to the
            right of some GraphComponent relate to some Geometry. Possible values for the
            parameters are Location.Null, Location.Exterior, Location.Boundary, 
            and Location.Interior.
            </summary>        
            <param name="on"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            
            </summary>
            <param name="gl"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.Init(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.Get(NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.TopologyLocation.Item(NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            Get calls Get(Positions posIndex),
            Set calls SetLocation(Positions locIndex, Location locValue)
            </summary>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.TopologyLocation.IsNull">
            <returns>
            <c>true</c> if all locations are Null.
            </returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.TopologyLocation.IsAnyNull">
            <returns> 
            <c>true</c> if any locations are Null.
            </returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.IsEqualOnSide(NetTopologySuite.GeometriesGraph.TopologyLocation,System.Int32)">
            <summary>
            
            </summary>
            <param name="le"></param>
            <param name="locIndex"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.TopologyLocation.IsArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.GeometriesGraph.TopologyLocation.IsLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.Flip">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.SetAllLocations(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="locValue"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.SetAllLocationsIfNull(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="locValue"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocation(NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="locIndex"></param>
            <param name="locValue"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocation(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="locValue"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.GetLocations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocations(GeoAPI.Geometries.Location,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="on"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocations(NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            
            </summary>
            <param name="gl"></param>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.AllPositionsEqual(GeoAPI.Geometries.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.Merge(NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            Merge updates only the Null attributes of this object
            with the attributes of another.
            </summary>
        </member>
        <member name="M:NetTopologySuite.GeometriesGraph.TopologyLocation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.ExtractLineByLocation">
            <summary>
            Extracts the subline of a linear <see cref="T:NetTopologySuite.Geometries.Geometry" /> between
            two <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />s on the line.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.ExtractLineByLocation.Extract(GeoAPI.Geometries.IGeometry,NetTopologySuite.LinearReferencing.LinearLocation,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the subline of a <see cref="T:GeoAPI.Geometries.ILineString" /> between
            two <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/>s on the line.
            If the start location is after the end location,
            the computed linear geometry has reverse orientation to the input line.
            </summary>
            <param name="line">The line to use as the baseline.</param>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>The extracted subline.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.ExtractLineByLocation.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.ExtractLineByLocation"/> class.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.ExtractLineByLocation.Extract(NetTopologySuite.LinearReferencing.LinearLocation,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Extracts a subline of the input.
            If <paramref name="end" /> is minor that <paramref name="start" />,
            the linear geometry computed will be reversed.
            </summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>A linear geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.ExtractLineByLocation.Reverse(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="linear"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.ExtractLineByLocation.ComputeLinear(NetTopologySuite.LinearReferencing.LinearLocation,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Assumes input is valid
            (e.g. <paramref name="start" /> minor or equals to <paramref name="end" />).
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LengthIndexedLine">
            <summary>
            Supports linear referencing along a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />
            using the length along the line as the index.
            Negative length values are taken as measured in the reverse direction
            from the end of the geometry.
            Out-of-range index values are handled by clamping
            them to the valid range of values.
            Non-simple lines (i.e. which loop back to cross or touch
            themselves) are supported.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs an object which allows a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />
            to be linearly referenced using length as an index.
            </summary>
            <param name="linearGeom">The linear geometry to reference along.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.ExtractPoint(System.Double)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.Coordinate" /> for the point
            on the line at the given index.
            If the index is out of range the first or last point on the
            line will be returned.
            </summary>
            <remarks>
            The Z-ordinate of the computed point will be interpolated from
            the Z-ordinates of the line segment containing it, if they exist.
            </remarks>
            <param name="index">The index of the desired point.</param>
            <returns>The <see cref="T:GeoAPI.Geometries.Coordinate" /> at the given index.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.ExtractPoint(System.Double,System.Double)">
            <summary>
             Computes the <see cref="T:GeoAPI.Geometries.Coordinate"/> for the point on the line at the given index, offset by the given distance.
            </summary>
             <remarks>
             If the index is out of range the first or last point on the line will be returned.
             The computed point is offset to the left of the line if the offset distance is
             positive, to the right if negative.
             The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist.
             </remarks>
             <param name="index">The index of the desired point</param>
             <param name="offsetDistance">The distance the point is offset from the segment (positive is to the left, negative is to the right)</param>
             <returns>The Coordinate at the given index</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.ExtractLine(System.Double,System.Double)">
            <summary>
            Computes the <see cref="T:NetTopologySuite.Geometries.LineString" /> for the interval
            on the line between the given indices.
            If the <paramref name="endIndex" /> lies before the <paramref name="startIndex" />,
            the computed geometry is reversed.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.LocationOf(System.Double)">
             <summary>
            
             </summary>
             <param name="index"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.IndexOf(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the minimum index for a point on the line.
            If the line is not simple (i.e. loops back on itself)
            a single point may have more than one possible index.
            In this case, the smallest index is returned.
            The supplied point does not necessarily have to lie precisely
            on the line, but if it is far from the line the accuracy and
            performance of this function is not guaranteed.
            Use <see cref="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.Coordinate)"/> to compute a guaranteed result for points
            which may be far from the line.
            </summary>
            <param name="pt">A point on the line.</param>
            <returns>The minimum index of the point.</returns>
            <seealso cref="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.IndexOfAfter(GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
            Finds the index for a point on the line
            which is greater than the given index.
            If no such index exists, returns <paramref name="minIndex" />.
            This method can be used to determine all indexes for
            a point which occurs more than once on a non-simple line.
            It can also be used to disambiguate cases where the given point lies
            slightly off the line and is equidistant from two different
            points on the line.
            The supplied point does not necessarily have to lie precisely
            on the line, but if it is far from the line the accuracy and
            performance of this function is not guaranteed.
            Use <see cref="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.Coordinate)" /> to compute a guaranteed result for points
            which may be far from the line.
            </summary>
            <param name="pt">A point on the line.</param>
            <param name="minIndex">The value the returned index must be greater than.</param>
            <returns>The index of the point greater than the given minimum index.</returns>
            <seealso cref="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.IndicesOf(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the indices for a subline of the line.
            (The subline must conform to the line; that is,
            all vertices in the subline (except possibly the first and last)
            must be vertices of the line and occcur in the same order).
            </summary>
            <param name="subLine">A subLine of the line.</param>
            <returns>A pair of indices for the start and end of the subline..</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the index for the closest point on the line to the given point.
            If more than one point has the closest distance the first one along the line is returned.
            (The point does not necessarily have to lie precisely on the line.)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LengthIndexedLine.StartIndex">
            <summary>
            Returns the index of the start of the line.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LengthIndexedLine.EndIndex">
            <summary>
            Returns the index of the end of the line.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.IsValidIndex(System.Double)">
            <summary>
            Tests whether an index is in the valid index range for the line.
            </summary>
            <param name="index">The index to test.</param>
            <returns><c>true</c> if the index is in the valid range.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexedLine.ClampIndex(System.Double)">
            <summary>
            Computes a valid index for this line
            by clamping the given index to the valid range of index values
            </summary>
            <returns>A valid index value</returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LengthIndexOfPoint">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexOfPoint.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LengthIndexOfPoint"/> class.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOf(GeoAPI.Geometries.Coordinate)">
            <summary>
            Find the nearest location along a linear <see cref="T:GeoAPI.Geometries.IGeometry"/> to a given point.
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOfAfter(GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
            Finds the nearest index along the linear <see cref="T:GeoAPI.Geometries.IGeometry" />
            to a given <see cref="T:GeoAPI.Geometries.Coordinate"/> after the specified minimum index.
            If possible the location returned will be strictly
            greater than the <paramref name="minIndex" />.
            If this is not possible, the value returned
            will equal <paramref name="minIndex" />.
            (An example where this is not possible is when
            <paramref name="minIndex" /> = [end of line] ).
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <param name="minIndex">The minimum location for the point location.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOfFromStart(GeoAPI.Geometries.Coordinate,System.Double)">
             <summary>
            
             </summary>
             <param name="inputPt"></param>
             <param name="minIndex"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthIndexOfPoint.SegmentNearestMeasure(NetTopologySuite.Geometries.LineSegment,GeoAPI.Geometries.Coordinate,System.Double)">
             <summary>
            
             </summary>
             <param name="seg"></param>
             <param name="inputPt"></param>
             <param name="segmentStartMeasure"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LengthLocationMap">
            <summary>
            Computes the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> for a given length
            along a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />
            Negative lengths are measured in reverse from end of the linear geometry.
            Out-of-range values are clamped.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocation(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> for a
            given length along a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">The linear geometry to use.</param>
            <param name="length">The length index of the location.</param>
            <returns>The <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> for the length.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocation(GeoAPI.Geometries.IGeometry,System.Double,System.Boolean)">
            <summary>
            Computes the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/> for a
            given length along a linear <see cref="T:GeoAPI.Geometries.IGeometry"/>,
            with control over how the location
            is resolved at component endpoints.
            </summary>
            <param name="linearGeom">The linear geometry to use</param>
            <param name="length">The length index of the location</param>
            <param name="resolveLower">If true lengths are resolved to the lowest possible index</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLength(GeoAPI.Geometries.IGeometry,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the length for a given <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />
            on a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">The linear geometry to use.</param>
            <param name="loc">The <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> index of the location.</param>
            <returns>The length for the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LengthLocationMap"/> class.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocation(System.Double)">
            <summary>
            Compute the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> corresponding to a length.
            Negative lengths are measured in reverse from end of the linear geometry.
            Out-of-range values are clamped.
            Ambiguous indexes are resolved to the lowest possible location value.
            </summary>
            <param name="length">The length index.</param>
            <returns>The corresponding <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocation(System.Double,System.Boolean)">
            <summary>
            Compute the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/> corresponding to a length.
            Negative lengths are measured in reverse from end of the linear geometry.
            Out-of-range values are clamped.
            Ambiguous indexes are resolved to the lowest or highest possible location value,
            depending on the value of <tt>resolveLower</tt>
            </summary>
            <param name="length">The length index</param>
            <param name="resolveLower"></param>
            <returns>The corresponding <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocationForward(System.Double)">
             <summary>
            
             </summary>
             <param name="length"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LengthLocationMap.GetLength(NetTopologySuite.LinearReferencing.LinearLocation)">
             <summary>
            
             </summary>
             <param name="loc"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LinearGeometryBuilder">
            <summary>
            Builds a linear geometry (<see cref="T:NetTopologySuite.Geometries.LineString" /> or <see cref="T:NetTopologySuite.Geometries.MultiLineString" />)
            incrementally (point-by-point).
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="geomFact">The geometry factory to use.</param>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.FixInvalidLines">
            <summary>
            Allows invalid lines to be fixed rather than causing Exceptions.
            An invalid line is one which has only one unique point.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.IgnoreInvalidLines">
            <summary>
            Allows invalid lines to be ignored rather than causing Exceptions.
            An invalid line is one which has only one unique point.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.Add(GeoAPI.Geometries.Coordinate)">
            <summary>
            Adds a point to the current line.
            </summary>
            <param name="pt">The <see cref="T:GeoAPI.Geometries.Coordinate" /> to add.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.Add(GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Adds a point to the current line.
            </summary>
            <param name="pt">The <see cref="T:GeoAPI.Geometries.Coordinate" /> to add.</param>
            <param name="allowRepeatedPoints">If <c>true</c>, allows the insertions of repeated points.</param>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.LastCoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.EndLine">
            <summary>
            Terminate the current <see cref="T:NetTopologySuite.Geometries.LineString" />.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.ValidCoordinateSequence(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearGeometryBuilder.GetGeometry">
            <summary>
            Builds and returns the <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LinearIterator">
            <summary>
            An iterator over the components and coordinates of a linear geometry
            (<see cref="T:NetTopologySuite.Geometries.LineString" />s and <see cref="T:NetTopologySuite.Geometries.MultiLineString" />s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.SegmentEndVertexIndex(NetTopologySuite.LinearReferencing.LinearLocation)">
             <summary>
            
             </summary>
             <param name="loc"></param>
             <returns></returns>
        </member>
        <member name="F:NetTopologySuite.LinearReferencing.LinearIterator._currentLine">
            <summary>
            Invariant: currentLine &lt;&gt; null if the iterator is pointing at a valid coordinate
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates an iterator initialized to the start of a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">The linear geometry to iterate over.</param>
            <exception cref="T:System.ArgumentException"> if <paramref name="linearGeom"/> is not <see cref="T:GeoAPI.Geometries.ILineal"/></exception>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.#ctor(GeoAPI.Geometries.IGeometry,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Creates an iterator starting at a <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> on a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">The linear geometry to iterate over.</param>
            <param name="start">The location to start at.</param>
            <exception cref="T:System.ArgumentException"> if <paramref name="linearGeom"/> is not <see cref="T:GeoAPI.Geometries.ILineal"/></exception>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.#ctor(GeoAPI.Geometries.IGeometry,System.Int32,System.Int32)">
            <summary>
            Creates an iterator starting at
            a component and vertex in a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">The linear geometry to iterate over.</param>
            <param name="componentIndex">The component to start at.</param>
            <param name="vertexIndex">The vertex to start at.</param>
            <exception cref="T:System.ArgumentException"> if <paramref name="linearGeom"/> is not <see cref="T:GeoAPI.Geometries.ILineal"/></exception>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.LoadCurrentLine">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.HasNext">
            <summary>
            Tests whether there are any vertices left to iterator over.
            Specifically, <c>HasNext()</c> returns <tt>true</tt> if the
            current state of the iterator represents a valid location
            on the linear geometry. 
            </summary>
            <returns><c>true</c> if there are more vertices to scan.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearIterator.Next">
            <summary>
            Jump to the next element of the iteration.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearIterator.IsEndOfLine">
            <summary>
            Checks whether the iterator cursor is pointing to the
            endpoint of a component <see cref="T:GeoAPI.Geometries.ILineString"/>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearIterator.ComponentIndex">
            <summary>
            The component index of the vertex the iterator is currently at.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearIterator.VertexIndex">
            <summary>
            The vertex index of the vertex the iterator is currently at.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearIterator.Line">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Geometries.LineString" /> component the iterator is current at.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearIterator.SegmentStart">
            <summary>
            Gets the first <see cref="T:GeoAPI.Geometries.Coordinate" /> of the current segment
            (the coordinate of the current vertex).
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearIterator.SegmentEnd">
            <summary>
            Gets the second <see cref="T:GeoAPI.Geometries.Coordinate" /> of the current segment
            (the coordinate of the next vertex).
            If the iterator is at the end of a line, <c>null</c> is returned.
            </summary>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LinearLocation">
            <summary>
            Represents a location along a <see cref="T:GeoAPI.Geometries.ILineString" /> or <see cref="T:GeoAPI.Geometries.IMultiLineString" />.<br/>
            The referenced geometry is not maintained within this location,
            but must be provided for operations which require it.
            Various methods are provided to manipulate the location value
            and query the geometry it references.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.GetEndLocation(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets a location which refers to the end of a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linear">The linear geometry.</param>
            <returns>A new <c>LinearLocation</c>.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.PointAlongSegmentByFraction(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.Coordinate" /> of a point a given fraction
            along the line segment <c>(p0, p1)</c>.
            </summary>
            <remarks>
            <para>
            If the fraction is greater than 1.0 the last
            point of the segment is returned.</para>
            <para>If the fraction is less than or equal to 0.0 the first point
            of the segment is returned.</para>
            <para>
            The Z ordinate is interpolated from the Z-ordinates of the given points,
            if they are specified.</para>
            </remarks>
            <param name="p0">The first point of the line segment.</param>
            <param name="p1">The last point of the line segment.</param>
            <param name="fraction">The length to the desired point.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="segmentFraction">The segment fraction.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
            <param name="componentIndex">Index of the component.</param>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="segmentFraction">The segment fraction.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.#ctor(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
            <param name="componentIndex">Index of the component.</param>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="segmentFraction">The segment fraction.</param>
            <param name="normalize">If <c>true</c>, ensures the individual values are locally valid.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.#ctor(NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Creates a new location equal to a given one.
            </summary>
            <param name="loc">A linear location</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.Normalize">
            <summary>
            Ensures the individual values are locally valid.
            Does not ensure that the indexes are valid for
            a particular linear geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.Clamp(GeoAPI.Geometries.IGeometry)">
            <summary>
            Ensures the indexes are valid for a given linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linear">A linear geometry.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.SnapToVertex(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Snaps the value of this location to
            the nearest vertex on the given linear <see cref="T:NetTopologySuite.Geometries.Geometry" />,
            if the vertex is closer than <paramref name="minDistance" />.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <param name="minDistance">The minimum allowable distance to a vertex.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.GetSegmentLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length of the segment in the given
            Geometry containing this location.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <returns>The length of the segment.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.SetToEnd(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets the value of this location to
            refer to the end of a linear geometry.
            </summary>
            <param name="linear">The linear geometry to use to set the end.</param>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearLocation.ComponentIndex">
            <summary>
            Gets the component index for this location.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearLocation.SegmentIndex">
            <summary>
            Gets the segment index for this location.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearLocation.SegmentFraction">
            <summary>
            Gets the segment fraction for this location.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LinearLocation.IsVertex">
            <summary>
            Tests whether this location refers to a vertex:
            returns <c>true</c> if the location is a vertex.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.GetCoordinate(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the <see cref="T:GeoAPI.Geometries.Coordinate" /> along the
            given linear <see cref="T:NetTopologySuite.Geometries.Geometry" /> which is
            referenced by this location.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <returns>The <see cref="T:GeoAPI.Geometries.Coordinate" /> at the location.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.GetSegment(GeoAPI.Geometries.IGeometry)">
            <summary>
             Gets a <see cref="T:NetTopologySuite.Geometries.LineSegment"/> representing the segment of the given linear <see cref="T:GeoAPI.Geometries.IGeometry"/> which contains this location.
            </summary>
             <param name="linearGeom">A linear geometry</param>
             <returns>the <c>LineSegment</c> containing the location</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.IsValid(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this location refers to a valid
            location on the given linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <returns><c>true</c> if this location is valid.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">
            The <c>LineStringLocation</c> with which this
            <c>Coordinate</c> is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this
            <c>LineStringLocation</c> is less than, equal to,
            or greater than the specified <c>LineStringLocation</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj" /> is not the same type as this instance.
            </exception>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.CompareTo(NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The <c>LineStringLocation</c> with which this
            <c>Coordinate</c> is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this
            <c>LineStringLocation</c> is less than, equal to,
            or greater than the specified <c>LineStringLocation</c>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.CompareLocationValues(System.Int32,System.Int32,System.Double)">
            <summary>
            Compares this object with the specified index values for order.
            </summary>
            <param name="componentIndex1">The component index.</param>
            <param name="segmentIndex1">The segment index.</param>
            <param name="segmentFraction1">The segment fraction.</param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>LineStringLocation</c>
            is less than, equal to, or greater than the specified locationValues.
            </returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.CompareLocationValues(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Compares two sets of location values for order.
            </summary>
            <param name="componentIndex0">The first component index.</param>
            <param name="segmentIndex0">The first segment index.</param>
            <param name="segmentFraction0">The first segment fraction.</param>
            <param name="componentIndex1">The second component index.</param>
            <param name="segmentIndex1">The second segment index.</param>
            <param name="segmentFraction1">The second segment fraction.</param>
            <returns>
            A negative integer, zero, or a positive integer
            as the first set of location values is less than, equal to,
            or greater than the second set of locationValues.
            </returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.IsOnSameSegment(NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
             Tests whether two locations are on the same segment in the parent <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             </summary>
             <param name="loc">A location on the same geometry</param>
             <returns><c>true</c> if the locations are on the same segment of the parent geometry</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.IsEndpoint(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this location is an endpoint of
            the linear component it refers to.
            </summary>
            <param name="linearGeom">The linear geometry referenced by this location</param>
            <returns>True if the location is a component endpoint</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.ToLowest(GeoAPI.Geometries.IGeometry)">
            <summary>
            Converts a linear location to the lowest equivalent location index.
            The lowest index has the lowest possible component and segment indices.
            Specifically:
            * if the location point is an endpoint, a location value is returned as (nseg-1, 1.0)
            * if the location point is ambiguous (i.e. an endpoint and a startpoint), the lowest endpoint location is returned
            If the location index is already the lowest possible value, the original location is returned.
            </summary>
            <param name="linearGeom">The linear geometry referenced by this location.</param>
            <returns>The lowest equivalent location.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LinearLocation.Clone">
            <summary>
            Copies this location.
            </summary>
            <returns>A copy of this location.</returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LocationIndexedLine">
            <summary>
            Supports linear referencing along a linear <see cref="T:GeoAPI.Geometries.IGeometry" />
            using <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />s as the index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs an object which allows linear referencing along
            a given linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            </summary>
            <param name="linearGeom">The linear geometry to reference alo</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.ExtractPoint(NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.Coordinate" />for the point on the line at the given index.
            If the <paramref name="index" /> is out of range,
            the first or last point on the line will be returned.
            </summary>
            <remarks>
            The Z-ordinate of the computed point will be interpolated from
            the Z-ordinates of the line segment containing it, if they exist.
            </remarks>
            <param name="index">The index of the desired point.</param>
            <returns>The <see cref="T:GeoAPI.Geometries.Coordinate" /> at the given index.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.ExtractPoint(NetTopologySuite.LinearReferencing.LinearLocation,System.Double)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.Coordinate"/> for the point
            on the line at the given index, offset by the given distance.
            If the index is out of range the first or last point on the
            line will be returned.<para/>
            The computed point is offset to the left of the line if the offset distance is
            positive, to the right if negative.<para/>
            The Z-ordinate of the computed point will be interpolated from
            the Z-ordinates of the line segment containing it, if they exist.
            </summary>
            <param name="index">The index of the desired point</param>
            <param name="offsetDistance">The distance the point is offset from the segment
            (positive is to the left, negative is to the right)</param>
            <returns>The Coordinate at the given index</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.ExtractPoint(System.Double,System.Double)">
            <summary>
             Computes the <see cref="T:GeoAPI.Geometries.Coordinate"/> for the point on the line at the given index, offset by the given distance.
            </summary>
             <remarks>
             If the index is out of range the first or last point on the line will be returned.
             The computed point is offset to the left of the line if the offset distance is
             positive, to the right if negative.
             The Z-ordinate of the computed point will be interpolated from the Z-ordinates of the line segment containing it, if they exist.
             </remarks>
             <param name="index">The index of the desired point</param>
             <param name="offsetDistance">The distance the point is offset from the segment (positive is to the left, negative is to the right)</param>
             <returns>The Coordinate at the given index</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.ExtractLine(NetTopologySuite.LinearReferencing.LinearLocation,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the <see cref="T:GeoAPI.Geometries.ILineString" /> for the interval
            on the line between the given indices.
            If the start location is after the end location,
            the computed linear geometry has reverse orientation to the input line.
            </summary>
            <param name="startIndex">The index of the start of the interval.</param>
            <param name="endIndex">The index of the end of the interval.</param>
            <returns>The linear interval between the indices.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.IndexOf(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the index for a given point on the line.
            The supplied point does not necessarily have to lie precisely
            on the line, but if it is far from the line the accuracy and
            performance of this function is not guaranteed.
            Use <see cref="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.Coordinate)" /> to compute a guaranteed result for points
            which may be far from the line.
            </summary>
            <param name="pt">A point on the line.</param>
            <returns>The index of the point.</returns>
            <seealso cref="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.IndicesOf(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the indices for a subline of the line.
            (The subline must conform to the line; that is,
            all vertices in the subline (except possibly the first and last)
            must be vertices of the line and occcur in the same order).
            </summary>
            <param name="subLine">A subLine of the line.</param>
            <returns>A pair of indices for the start and end of the subline.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.IndexOfAfter(GeoAPI.Geometries.Coordinate,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
             Finds the index for a point on the line which is greater than the given index. 
             If no such index exists, returns <paramref name="minIndex" />.
            </summary>
             <remarks>
             <para>
             This method can be used to determine all indexes for
             a point which occurs more than once on a non-simple line.
             It can also be used to disambiguate cases where the given point lies
             slightly off the line and is equidistant from two different
             points on the line.
             </para>
             <para>
             The supplied point does not <i>necessarily</i> have to lie precisely
             on the line, but if it is far from the line the accuracy and
             performance of this function is not guaranteed.
             Use <see cref="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.Coordinate)"/> to compute a guaranteed result for points
             which may be far from the line.
             </para>
             </remarks>
             <param name="pt">A point on the line</param>
             <param name="minIndex">The value the returned index must be greater than</param>
             <returns>The index of the point greater than the given minimum index</returns>
             <seealso cref="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.Coordinate)"/>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the index for the closest point on the line to the given point.
            If more than one point has the closest distance the first one along the line is returned.
            (The point does not necessarily have to lie precisely on the line.)
            </summary>
            <param name="pt">A point on the line.</param>
            <returns>The index of the point.</returns>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LocationIndexedLine.StartIndex">
            <summary>
            Returns the index of the start of the line.
            </summary>
        </member>
        <member name="P:NetTopologySuite.LinearReferencing.LocationIndexedLine.EndIndex">
            <summary>
            Returns the index of the end of the line.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.IsValidIndex(NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Tests whether an index is in the valid index range for the line.
            </summary>
            <param name="index">The index to test.</param>
            <returns><c>true</c> if the index is in the valid range.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexedLine.ClampIndex(NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes a valid index for this line by clamping 
            the given index to the valid range of index values.
            </summary>
            <param name="index"></param>
            <returns>A valid index value.</returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LocationIndexOfLine">
            <summary>
            Determines the location of a subline along a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />.
            The location is reported as a pair of <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />s.
            NOTE: Currently this algorithm is not guaranteed to
            return the correct substring in some situations where
            an endpoint of the test line occurs more than once in the input line.
            (However, the common case of a ring is always handled correctly).
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfLine.IndicesOf(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="linearGeom"></param>
            <param name="subLine"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LocationIndexOfLine"/> class.
            </summary>
            <param name="linearGeom">The linear geom.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfLine.IndicesOf(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="subLine"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.LinearReferencing.LocationIndexOfPoint">
            <summary>
            Computes the <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> of the point
            on a linear <see cref="T:NetTopologySuite.Geometries.Geometry" />nearest a given <see cref="T:GeoAPI.Geometries.Coordinate"/>.
            The nearest point is not necessarily unique; this class
            always computes the nearest point closest
            to the start of the geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOf(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="linearGeom"></param>
             <param name="inputPt"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfPoint.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.LinearReferencing.LocationIndexOfPoint"/> class.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOf(GeoAPI.Geometries.Coordinate)">
            <summary>
            Find the nearest location along a linear <see cref="T:NetTopologySuite.Geometries.Geometry" /> to a given point.
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOfAfter(GeoAPI.Geometries.Coordinate,NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Find the nearest <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" /> along the linear <see cref="T:NetTopologySuite.Geometries.Geometry" />
            to a given <see cref="T:NetTopologySuite.Geometries.Geometry" /> after the specified minimum <see cref="T:NetTopologySuite.LinearReferencing.LinearLocation" />.
            If possible the location returned will be strictly greater than the <paramref name="minIndex" />.
            If this is not possible, the value returned will equal <paramref name="minIndex" />.
            (An example where this is not possible is when <paramref name="minIndex" /> = [end of line] ).
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <param name="minIndex">The minimum location for the point location.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.BoundaryOp">
            <summary>
             Computes the boundary of a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             Allows specifying the <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> to be used.
             This operation will always return a <see cref="T:GeoAPI.Geometries.IGeometry"/> of the appropriate
             dimension for the boundary (even if the input geometry is empty).
             The boundary of zero-dimensional geometries (Points) is
             always the empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>.
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Operation.BoundaryOp._endpointMap">
            <summary>
            A map which maintains the edges in sorted order around the node.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Counter">
            <summary>
             Stores an integer count, for use as a Map entry.
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.BufferBuilder">
            <summary>
             Builds the buffer geometry for a given input geometry and precision model.
             Allows setting the level of approximation for circular arcs,
             and the precision model in which to carry out the computation.
            </summary>
             <remarks>
             When computing buffers in floating point double-precision 
             it can happen that the process of iterated noding can fail to converge (terminate).
             In this case a <see cref="T:NetTopologySuite.Geometries.TopologyException"/> will be thrown.
             Retrying the computation in a fixed precision
             can produce more robust results.
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferBuilder.DepthDelta(NetTopologySuite.GeometriesGraph.Label)">
            <summary>Compute the change in depth as an edge is crossed from R to L</summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferBuilder.#ctor(GeoAPI.Operation.Buffer.IBufferParameters)">
            <summary>Creates a new BufferBuilder</summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferBuilder.WorkingPrecisionModel">
            <summary>
             Sets the precision model to use during the curve computation and noding, 
             if it is different to the precision model of the Geometry.
            </summary>
            <remarks>
             If the precision model is less than the precision of the Geometry precision model,
             the Geometry must have previously been rounded to that precision.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferBuilder.Noder">
            <summary>
             Sets the <see cref="T:NetTopologySuite.Noding.INoder"/> to use during noding.
             This allows choosing fast but non-robust noding, or slower
             but robust noding.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferBuilder.InsertUniqueEdge(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Inserted edges are checked to see if an identical edge already exists.
            If so, the edge is not inserted, but its label is merged
            with the existing edge.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferBuilder.BuildSubgraphs(System.Collections.Generic.IEnumerable{NetTopologySuite.Operation.Buffer.BufferSubgraph},NetTopologySuite.Operation.Overlay.PolygonBuilder)">
            <summary>
            Completes the building of the input subgraphs by depth-labelling them,
            and adds them to the PolygonBuilder.
            </summary>
            <remarks>
            The subgraph list must be sorted in rightmost-coordinate order.
            </remarks>
            <param name="subgraphList"> the subgraphs to build</param>
            <param name="polyBuilder"> the PolygonBuilder which will build the final polygons</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferBuilder.CreateEmptyResultGeometry">
            <summary>
             Gets the standard result for an empty buffer.
             Since buffer always returns a polygonal result, this is chosen to be an empty polygon.
            </summary>
             <returns>The empty result geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier">
            <summary>
             Simplifies a buffer input line to remove concavities with shallow depth.
            </summary>
             <remarks>
             <para>
             The most important benefit of doing this
             is to reduce the number of points and the complexity of
             shape which will be buffered.
             It also reduces the risk of gores created by
             the quantized fillet arcs (although this issue
             should be eliminated in any case by the
             offset curve generation logic).
             </para>
             <para>
             A key aspect of the simplification is that it
             affects inside (concave or inward) corners only.
             Convex (outward) corners are preserved, since they
             are required to ensure that the generated buffer curve
             lies at the correct distance from the input geometry.
             </para>
             <para>
             Another important heuristic used is that the end segments
             of the input are never simplified.  This ensures that
             the client buffer code is able to generate end caps faithfully.
             </para>
             <para>
             No attempt is made to avoid self-intersections in the output.
             This is acceptable for use for generating a buffer offset curve,
             since the buffer algorithm is insensitive to invalid polygonal
             geometry.  However,
             this means that this algorithm
             cannot be used as a general-purpose polygon simplification technique.
             </para>
             </remarks>
             <author> Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.Simplify(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            Simplify the input coordinate list.
            If the distance tolerance is positive,
            concavities on the LEFT side of the line are simplified.
            If the supplied distance tolerance is negative,
            concavities on the RIGHT side of the line are simplified.
            </summary>
            <param name="inputLine">The coordinate list to simplify</param>
            <param name="distanceTol">simplification distance tolerance to use</param>
            <returns>The simplified coordinate list</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.Simplify(System.Double)">
            <summary>
             Simplify the input coordinate list.
            </summary>
             <remarks>
             If the distance tolerance is positive, concavities on the LEFT side of the line are simplified.
             If the supplied distance tolerance is negative, concavities on the RIGHT side of the line are simplified.
             </remarks>
             <param name="distanceTol">Simplification distance tolerance to use</param>
             <returns>
             The simplified coordinates list
             </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.DeleteShallowConcavities">
            <summary>
            Uses a sliding window containing 3 vertices to detect shallow angles
            in which the middle vertex can be deleted, since it does not
            affect the shape of the resulting buffer in a significant way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.FindNextNonDeletedIndex(System.Int32)">
            <summary>
            Finds the next non-deleted index, or the end of the point array if none
            </summary>
            <param name="index">The start index to search from</param>
            <returns>The next non-deleted index, if any <br/>
            or <c>_inputLine.Length</c> if there are no more non-deleted indices
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferInputLineSimplifier.IsShallowSampled(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Int32,System.Int32,System.Double)">
            <summary>
            Checks for shallowness over a sample of points in the given section.
            This helps to prevent the siplification from incrementally
            "skipping" over points which are in fact non-shallow.
            </summary>
            <param name="p0">A coordinate of section</param>
            <param name="p2">A coordinate of section</param>
            <param name="i0">The start index of section</param>
            <param name="i2">The end index of section</param>
            <param name="distanceTol">The tolerated distance</param>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.BufferOp">
            <summary>
            Computes the buffer of a geometry, for both positive and negative buffer distances.
            </summary>
            <remarks>
            <para>
            In GIS, the positive (or negative) buffer of a geometry is defined as
            the Minkowski sum (or difference) of the geometry
            with a circle of radius equal to the absolute value of the buffer distance.
            In the CAD/CAM world buffers are known as <i>offset curves</i>.
            In morphological analysis the
            operation of positive and negative buffering
            is referred to as <i>erosion</i> and <i>dilation</i>
            </para>
            <para>
            The buffer operation always returns a polygonal result.
            The negative or zero-distance buffer of lines and points is always an empty <see cref="T:GeoAPI.Geometries.IPolygon" />.
            </para>
            <para>
            Since true buffer curves may contain circular arcs,
            computed buffer polygons are only approximations to the true geometry.
            The user can control the accuracy of the approximation by specifying
            the number of linear segments used to approximate arcs.
            This is specified via <see cref="P:GeoAPI.Operation.Buffer.IBufferParameters.QuadrantSegments"/> 
            or <see cref="P:NetTopologySuite.Operation.Buffer.BufferOp.QuadrantSegments"/>.
            </para>
            <para>
            The <see cref="P:GeoAPI.Operation.Buffer.IBufferParameters.EndCapStyle"/> of a linear buffer may be specified. 
            The following end cap styles are supported:
            <ul>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Round" /> - the usual round end caps</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Flat" /> - end caps are truncated flat at the line ends</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.EndCapStyle.Square" /> - end caps are squared off at the buffer distance beyond the line ends</li>
            </ul>
            </para>
            <para>
            The <see cref="P:GeoAPI.Operation.Buffer.IBufferParameters.JoinStyle"/> of the corners in a buffer may be specified. 
            The following join styles are supported:
            <ul>
            <li><see cref="F:GeoAPI.Operation.Buffer.JoinStyle.Round" /> - the usual round join</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.JoinStyle.Mitre" /> - corners are "sharp" (up to a <see cref="P:GeoAPI.Operation.Buffer.IBufferParameters.MitreLimit"/> distance limit})</li>
            <li><see cref="F:GeoAPI.Operation.Buffer.JoinStyle.Bevel" /> - corners are beveled (clipped off)</li>
            </ul>
            </para>
            <para>
            The buffer algorithm can perform simplification on the input to increase performance.
            The simplification is performed a way that always increases the buffer area 
            (so that the simplified input covers the original input).
            The degree of simplification can be specified with <see cref="P:GeoAPI.Operation.Buffer.IBufferParameters.SimplifyFactor"/>,
            with a <see cref="F:NetTopologySuite.Operation.Buffer.BufferParameters.DefaultSimplifyFactor"/> used otherwise.
            Note that if the buffer distance is zero then so is the computed simplify tolerance, 
            no matter what the simplify factor.
            </para>
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.BufferOp.MaxPrecisionDigits">
            <summary>
            A number of digits of precision which leaves some computational "headroom"
            for floating point operations.
            </summary>
            <remarks>
            This value should be less than the decimal precision of double-precision values (16).
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.PrecisionScaleFactor(GeoAPI.Geometries.IGeometry,System.Double,System.Int32)">
             <summary>
             Compute a scale factor to limit the precision of
             a given combination of Geometry and buffer distance.
             The scale factor is determined by 
             the number of digits of precision in the (geometry + buffer distance),
             limited by the supplied <paramref name="maxPrecisionDigits"/> value.
             <para/>
             The scale factor is based on the absolute magnitude of the (geometry + buffer distance).
             since this determines the number of digits of precision which must be handled.
             </summary>
             <param name="g"> the Geometry being buffered</param>
             <param name="distance"> the buffer distance</param>
             <param name="maxPrecisionDigits"> the max # of digits that should be allowed by
                      the precision determined by the computed scale factor</param>
            
             <returns> a scale factor for the buffer computation</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the buffer of a geometry for a given buffer distance.
            </summary>
            <param name="g"> the geometry to buffer</param>
            <param name="distance"> the buffer distance</param>
            <returns> the buffer of the input geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double,GeoAPI.Operation.Buffer.IBufferParameters)">
            <summary>
            Comutes the buffer for a geometry for a given buffer distance
            and accuracy of approximation.
            </summary>
            <param name="g"> the geometry to buffer</param>
            <param name="distance"> the buffer distance</param>
            <param name="parameters"> the buffer parameters to use</param>
            <returns> the buffer of the input geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double,System.Int32)">
            <summary>
            Comutes the buffer for a geometry for a given buffer distance
            and accuracy of approximation.
            </summary>
            <param name="g"> the geometry to buffer</param>
            <param name="distance"> the buffer distance</param>
            <param name="quadrantSegments"> the number of segments used to approximate a quarter circle</param>
            <returns> the buffer of the input geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double,System.Int32,GeoAPI.Operation.Buffer.BufferStyle)">
            <summary>
            Comutes the buffer for a geometry for a given buffer distance
            and accuracy of approximation.
            </summary>
            <param name="g"> the geometry to buffer</param>
            <param name="distance"> the buffer distance</param>
            <param name="quadrantSegments"> the number of segments used to approximate a quarter circle</param>
            <param name="endCapStyle"> the end cap style to use</param>
            <returns> the buffer of the input geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a buffer computation for the given geometry
            </summary>
            <param name="g"> the geometry to buffer</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Operation.Buffer.IBufferParameters)">
            <summary>
            Initializes a buffer computation for the given geometry
            with the given set of parameters
            </summary>
            <param name="g"> the geometry to buffer</param>
            <param name="bufParams"> the buffer parameters to use</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferOp.BufferStyle">
            <summary>
            Specifies the end cap style of the generated buffer.
            The styles supported are <see cref="!:GeoAPI.Operations.Buffer.BufferStyle.CapRound" />, <see cref="!:GeoAPI.Operations.Buffer.BufferStyle.CapButt" />, and <see cref="!:GeoAPI.Operations.Buffer.BufferStyle.CapSquare" />.
            The default is <see cref="!:GeoAPI.Operations.Buffer.BufferStyle.CapRound" />.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferOp.QuadrantSegments">
            <summary>
            Sets the number of segments used to approximate a angle fillet
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferOp.GetResultGeometry(System.Double)">
             <summary>
             Returns the buffer computed for a geometry for a given buffer distance.
            </summary>
             <param name="distance"> the buffer distance</param>
             <returns> the buffer of the input geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.BufferParameters">
            <summary>
            A value class containing the parameters which 
            specify how a buffer should be constructed.
            <para/>
            The parameters allow control over:
            <list type="Bullet">
            <item>Quadrant segments (accuracy of approximation for circular arcs)</item>
            <item>End Cap style</item>
            <item>Join style</item>
            <item>Mitre limit</item>
            <item>whether the buffer is single-sided</item>
            </list>
            </summary>
            <seealso cref="T:GeoAPI.Operation.Buffer.IBufferParameters"/>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.BufferParameters.DefaultQuadrantSegments">
            <summary>
            The default number of facets into which to divide a fillet of 90 degrees.
            A value of 8 gives less than 2% max error in the buffer distance.
            For a max error of &lt; 1%, use QS = 12.
            For a max error of &lt; 0.1%, use QS = 18.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.BufferParameters.DefaultMitreLimit">
            <summary>
            The default mitre limit
            Allows fairly pointy mitres.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.BufferParameters.DefaultSimplifyFactor">
            <summary>
            The default simplify factor.
            Provides an accuracy of about 1%, which matches
            the accuracy of the <see cref="F:NetTopologySuite.Operation.Buffer.BufferParameters.DefaultQuadrantSegments"/> parameter.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferParameters.#ctor">
            <summary>
             Creates a default set of parameters
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferParameters.#ctor(System.Int32)">
            <summary>
             Creates a set of parameters with the given quadrantSegments value.
             </summary>
             <param name="quadrantSegments">The number of quadrant segments to use</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferParameters.#ctor(System.Int32,GeoAPI.Operation.Buffer.EndCapStyle)">
            <summary>
            Creates a set of parameters with the
            given quadrantSegments and endCapStyle values.
            </summary>
            <param name="quadrantSegments"> the number of quadrant segments to use</param>
            <param name="endCapStyle"> the end cap style to use</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferParameters.#ctor(System.Int32,GeoAPI.Operation.Buffer.EndCapStyle,GeoAPI.Operation.Buffer.JoinStyle,System.Double)">
            <summary>
            Creates a set of parameters with the
            given parameter values.
            </summary>
            <param name="quadrantSegments"> the number of quadrant segments to use</param>
            <param name="endCapStyle"> the end cap style to use</param>
            <param name="joinStyle"> the join style to use</param>
            <param name="mitreLimit"> the mitre limit to use</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferParameters.QuadrantSegments">
            <summary>
             Gets/sets the number of quadrant segments which will be used
            </summary>
             <remarks>
             QuadrantSegments is the number of line segments used to approximate an angle fillet.
             <list type="Table">
             <item><c>QuadrantSegments</c> &gt;>= 1</item><description>joins are round, and <c>QuadrantSegments</c> indicates the number of segments to use to approximate a quarter-circle.</description>
             <item><c>QuadrantSegments</c> = 0</item><description>joins are beveled</description>
             <item><c>QuadrantSegments</c> &lt; 0</item><description>joins are mitred, and the value of qs indicates the mitre ration limit as <c>mitreLimit = |<tt>QuadrantSegments</tt>|</c></description>
             </list>
             For round joins, <c>QuadrantSegments</c> determines the maximum
             error in the approximation to the true buffer curve.
             The default value of 8 gives less than 2% max error in the buffer distance.
             For a max error of &lt; 1%, use QS = 12.
             For a max error of &lt; 0.1%, use QS = 18.
             The error is always less than the buffer distance
             (in other words, the computed buffer curve is always inside the true
             curve).
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferParameters.BufferDistanceError(System.Int32)">
            <summary>
             Computes the maximum distance error due to a given level of approximation to a true arc.
            </summary>
             <param name="quadSegs">The number of segments used to approximate a quarter-circle</param>
             <returns>The error of approximation</returns>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferParameters.EndCapStyle">
            <summary>
             Gets/Sets the end cap style of the generated buffer.
            </summary>
             <remarks>
             <para>
             The styles supported are <see cref="!:GeoAPI.Operations.Buffer.EndCapStyle.Round"/>, 
             <see cref="!:GeoAPI.Operations.Buffer.EndCapStyle.Flat"/>, and 
             <see cref="!:GeoAPI.Operations.Buffer.EndCapStyle.Square"/>.
             </para>
             <para>The default is <see cref="!:GeoAPI.Operations.Buffer.EndCapStyle.Round"/>.</para>
             </remarks>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferParameters.JoinStyle">
            <summary>
             Gets/Sets the join style for outside (reflex) corners between line segments.
            </summary>
             <remarks>
             <para>Allowable values are <see cref="!:GeoAPI.Operations.Buffer.JoinStyle.Round"/> (which is the default), 
             <see cref="!:GeoAPI.Operations.Buffer.JoinStyle.Mitre"/> and <see cref="!:GeoAPI.Operations.Buffer.JoinStyle.Bevel"/></para>
             </remarks>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferParameters.MitreLimit">
            <summary>
             Sets the limit on the mitre ratio used for very sharp corners.
            </summary>
             <remarks>
             <para>
             The mitre ratio is the ratio of the distance from the corner
             to the end of the mitred offset corner.
             When two line segments meet at a sharp angle,
             a miter join will extend far beyond the original geometry.
             (and in the extreme case will be infinitely far.)
             To prevent unreasonable geometry, the mitre limit
             allows controlling the maximum length of the join corner.
             Corners with a ratio which exceed the limit will be beveled.
             </para>
             </remarks>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferParameters.IsSingleSided">
            <summary>
            Gets or sets whether the computed buffer should be single-sided.
            A single-sided buffer is constructed on only one side of each input line.
            <para>
            The side used is determined by the sign of the buffer distance:
            <list type="Bullet">
            <item>a positive distance indicates the left-hand side</item>
            <item>a negative distance indicates the right-hand side</item>
            </list>
            The single-sided buffer of point geometries is  the same as the regular buffer.
            </para><para>
            The End Cap Style for single-sided buffers is always ignored,
            and forced to the equivalent of <see cref="!:GeoAPI.Operations.Buffer.EndCapStyle.Flat"/>.
            </para>
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferParameters.SimplifyFactor">
            <summary>
            Factor used to determine the simplify distance tolerance
            for input simplification.
            Simplifying can increase the performance of computing buffers.
            Generally the simplify factor should be greater than 0.
            Values between 0.01 and .1 produce relatively good accuracy for the generate buffer.
            Larger values sacrifice accuracy in return for performance.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.BufferSubgraph">
            <summary>
            A connected subset of the graph of
            <c>DirectedEdges</c> and <c>Node</c>s.
            Its edges will generate either
            a single polygon in the complete buffer, with zero or more holes, or
            one or more connected holes.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferSubgraph.DirectedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferSubgraph.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.BufferSubgraph.RightMostCoordinate">
            <summary>
            Gets the rightmost coordinate in the edges of the subgraph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.Create(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            Creates the subgraph consisting of all edges reachable from this node.
            Finds the edges in the graph and the rightmost coordinate.
            </summary>
            <param name="node">A node to start the graph traversal from.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.AddReachable(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            Adds all nodes and edges reachable from this node to the subgraph.
            Uses an explicit stack to avoid a large depth of recursion.
            </summary>
            <param name="startNode">A node known to be in the subgraph.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.Add(NetTopologySuite.GeometriesGraph.Node,System.Collections.Generic.Stack{NetTopologySuite.GeometriesGraph.Node})">
            <summary>
            Adds the argument node and all its out edges to the subgraph
            </summary>
            <param name="node">The node to add.</param>
            <param name="nodeStack">The current set of nodes being traversed.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.ClearVisitedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.ComputeDepth(System.Int32)">
            <summary>
            
            </summary>
            <param name="outsideDepth"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.ComputeDepths(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            Compute depths for all dirEdges via breadth-first traversal of nodes in graph.
            </summary>
            <param name="startEdge">Edge to start processing with.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.ComputeNodeDepth(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.CopySymDepths(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.FindResultEdges">
            <summary>
            Find all edges whose depths indicates that they are in the result area(s).
            Since we want polygon shells to be
            oriented CW, choose dirEdges with the interior of the result on the RHS.
            Mark them as being in the result.
            Interior Area edges are the result of dimensional collapses.
            They do not form part of the result area boundary.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.BufferSubgraph.CompareTo(System.Object)">
            <summary>
            BufferSubgraphs are compared on the x-value of their rightmost Coordinate.
            This defines a partial ordering on the graphs such that:
            g1 >= g2 - Ring(g2) does not contain Ring(g1)
            where Polygon(g) is the buffer polygon that is built from g.
            This relationship is used to sort the BufferSubgraphs so that shells are guaranteed to
            be built before holes.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.OffsetCurveBuilder">
            <summary>
            Computes the raw offset curve for a
            single <see cref="T:GeoAPI.Geometries.IGeometry"/> component (ring, line or point).
            A raw offset curve line is not noded -
            it may contain self-intersections (and usually will).
            The final buffer polygon is computed by forming a topological graph
            of all the noded raw curves and tracing outside contours.
            The points in the raw curve are rounded
            to a given <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.BufferParameters">
            <summary>
            Gets the buffer parameters being used to generate the curve.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.GetLineCurve(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            This method handles single points as well as LineStrings.
            LineStrings are assumed <b>not</b> to be closed (the function will not
            fail for closed lines, but will generate superfluous line caps).
            </summary>
            <param name="inputPts">The vertices of the line to offset</param>
            <param name="distance">The offset distance</param>
            <returns>A Coordinate array representing the curve <br/>
            or <c>null</c> if the curve is empty
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.GetRingCurve(GeoAPI.Geometries.Coordinate[],NetTopologySuite.GeometriesGraph.Positions,System.Double)">
            <summary>
            This method handles the degenerate cases of single points and lines,
            as well as rings.
            </summary>
            <returns>A Coordinate array representing the curve<br/>
            or <c>null</c> if the curve is empty</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.SimplifyTolerance(System.Double)">
            <summary>
            Computes the distance tolerance to use during input
            line simplification.
            </summary>
            <param name="bufDistance">The buffer distance</param>
            <returns>The simplification tolerance</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator">
            <summary>
            Generates segments which form an offset curve.
            Supports all end cap and join options
            provided for buffering.
            This algorithm implements various heuristics to
            produce smoother, simpler curves which are
            still within a reasonable tolerance of the
            true curve.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.OffsetSegmentSeparationFactor">
            Factor which controls how close offset segments can be to
            skip adding a filler or mitre.
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.InsideTurnVertexSnapDistanceFactor">
            Factor which controls how close curve vertices on inside turns can be to be snapped
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.CurveVertexSnapDistanceFactor">
            Factor which controls how close curve vertices can be to be snapped
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.MaxClosingSegLenFactor">
            Factor which determines how short closing segs can be for round buffers
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator._maxCurveSegmentError">
            the max error of approximation (distance) between a quad segment and the true fillet curve
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator._filletAngleQuantum">
            The angle quantum with which to approximate a fillet curve
            (based on the input # of quadrant segments)
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator._closingSegLengthFactor">
             The Closing Segment Length Factor controls how long
             "closing segments" are.  Closing segments are added
             at the middle of inside corners to ensure a smoother
             boundary for the buffer offset curve.
             In some cases (particularly for round joins with default-or-better
             quantization) the closing segments can be made quite short.
             This substantially improves performance (due to fewer intersections being created).
            
             A closingSegFactor of 0 results in lines to the corner vertex
             A closingSegFactor of 1 results in lines halfway to the corner vertex
             A closingSegFactor of 80 results in lines 1/81 of the way to the corner vertex
             (this option is reasonable for the very common default situation of round joins
             and quadrantSegs >= 8)
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.HasNarrowConcaveAngle">
            <summary>
            Gets whether the input has a narrow concave angle
            (relative to the offset distance).
            In this case the generated offset curve will contain self-intersections
            and heuristic closing segments.
            This is expected behaviour in the case of buffer curves.
            For pure offset curves,
            the output needs to be further treated
            before it can be used.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddLastSegment">
            <summary>
            Add last offset point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddOutsideTurn(System.Int32,System.Boolean)">
            <summary>
            Adds the offset points for an outside (convex) turn
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddInsideTurn(System.Int32,System.Boolean)">
            <summary>
            Adds the offset points for an inside (concave) turn.
            </summary>
            <param name="orientation"></param>
            <param name="addStartPoint"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.ComputeOffsetSegment(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.GeometriesGraph.Positions,System.Double,NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Compute an offset segment for an input segment on a given side and at a given distance.
            The offset points are computed in full double precision, for accuracy.
            </summary>
            <param name="seg">The segment to offset</param>
            <param name="side">The side of the segment <see cref="T:NetTopologySuite.GeometriesGraph.Positions"/> the offset lies on</param>
            <param name="distance">The offset distance</param>
            <param name="offset">The points computed for the offset segment</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddLineEndCap(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Add an end cap around point <paramref name="p1"/>, terminating a line segment coming from <paramref name="p0"/>
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddMitreJoin(GeoAPI.Geometries.Coordinate,NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment,System.Double)">
            <summary>
            Adds a mitre join connecting the two reflex offset segments.
            The mitre will be beveled if it exceeds the mitre ratio limit.
            </summary>
            <param name="p"></param>
            <param name="offset0">The first offset segment</param>
            <param name="offset1">The second offset segment</param>
            <param name="distance">The offset distance</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddLimitedMitreJoin(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment,System.Double,System.Double)">
            <summary>
            Adds a limited mitre join connecting the two reflex offset segments.
            A limited mitre is a mitre which is beveled at the distance
            determined by the mitre ratio limit.
            </summary>
            <param name="offset0">The first offset segment</param>
            <param name="offset1">The second offset segment</param>
            <param name="distance">The offset distance</param>
            <param name="mitreLimit">The mitre limit ratio</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddBevelJoin(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment)">
            
            
             @param offset0
             @param offset1
            <summary>
            Adds a bevel join connecting the two offset segments
            around a reflex corner.
            </summary>
            <param name="offset0">The first offset segment</param>
            <param name="offset1">The second offset segment</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddFillet(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Int32,System.Double)">
            <summary>
            Add points for a circular fillet around a reflex corner.
            Adds the start and end points
            </summary>
            <param name="p">Base point of curve</param>
            <param name="p0">Start point of fillet curve</param>
            <param name="p1">Endpoint of fillet curve</param>
            <param name="direction">The orientation of the fillet</param>
            <param name="radius">The radius of the fillet</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.AddFillet(GeoAPI.Geometries.Coordinate,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Adds points for a circular fillet arc
            between two specified angles.
            The start and end point for the fillet are not added -
            the caller must add them if required.
            </summary>
            <param name="direction">Is -1 for a <see cref="F:NetTopologySuite.Algorithm.CGAlgorithms.Clockwise"/> angle, 1 for a <see cref="F:NetTopologySuite.Algorithm.CGAlgorithms.CounterClockwise"/> angle</param>
            <param name="radius">The radius of the fillet</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.CreateCircle(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a <see cref="F:NetTopologySuite.Algorithm.CGAlgorithms.Clockwise"/> circle around a point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentGenerator.CreateSquare(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a <see cref="F:NetTopologySuite.Algorithm.CGAlgorithms.Clockwise"/> square around a point
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.OffsetSegmentString">
            <summary>
            A dynamic list of the vertices in a constructed offset curve.
            Automatically removes adjacent vertices
            which are closer than a given tolerance.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OffsetSegmentString._minimimVertexDistance">
            The distance below which two adjacent points on the curve
            are considered to be coincident.
            This is chosen to be a small fraction of the offset distance.
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetSegmentString.IsRedundant(GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the given point is redundant
            relative to the previous
            point in the list (up to tolerance).
            </summary>
            <param name="pt"></param>
            <returns>true if the point is redundant</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder">
            <summary>
             Computes the raw offset curve for a single <see cref="T:GeoAPI.Geometries.IGeometry"/> component (ring, line or point).
            </summary>
             <remarks>
             A raw offset curve line is not noded - it may contain self-intersections (and usually will).
             The final buffer polygon is computed by forming a topological graph
             of all the noded raw curves and tracing outside contours.
             The points in the raw curve are rounded to the required precision model.
             </remarks>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder._filletAngleQuantum">
            The angle quantum with which to approximate a fillet curve
            (based on the input # of quadrant segments)
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder._maxCurveSegmentError">
            the max error of approximation (distance) between a quad segment and the true fillet curve
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.CurveVertexSnapDistanceFactor">
            Factor which controls how close curve vertices can be to be snapped
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.OFFSET_SEGMENT_SEPARATION_FACTOR">
            Factor which controls how close offset segments can be to
            skip adding a filler or mitre.
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR">
            Factor which controls how close curve vertices on inside turns can be to be snapped
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.MAX_CLOSING_SEG_FRACTION">
            Factor which determines how short closing segs can be for round buffers
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.closingSegFactor">
             The Closing Segment Factor controls how long
             "closing segments" are.  Closing segments are added
             at the middle of inside corners to ensure a smoother
             boundary for the buffer offset curve.
             In some cases (particularly for round joins with default-or-better
             quantization) the closing segments can be made quite short.
             This substantially improves performance (due to fewer intersections being created).
            
             A closingSegFactor of 0 results in lines to the corner vertex
             A closingSegFactor of 1 results in lines halfway to the corner vertex
             A closingSegFactor of 80 results in lines 1/81 of the way to the corner vertex
             (this option is reasonable for the very common default situation of round joins
             and quadrantSegs >= 8)
            
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.GetLineCurve(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            This method handles single points as well as lines.
            Lines are assumed to <b>not</b> be closed (the function will not
            fail for closed lines, but will generate superfluous line caps).
            </summary>
            <returns>a List of Coordinate[]</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.GetRingCurve(GeoAPI.Geometries.Coordinate[],NetTopologySuite.GeometriesGraph.Positions,System.Double)">
            <summary>
             This method handles the degenerate cases of single points and lines, as well as rings.
            </summary>
             <returns>a List of Coordinate[]</returns>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.SimplifyFactor">
            Use a value which results in a potential distance error which is
            significantly less than the error due to
            the quadrant segment discretization.
            For QS = 8 a value of 100 is reasonable.
            This should produce a maximum of 1% distance error.
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.SimplifyTolerance(System.Double)">
             Computes the distance tolerance to use during input
             line simplification.
            
             @param distance the buffer distance
             @return the simplification tolerance
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddOutsideTurn(System.Int32,System.Boolean)">
            <summary>
             Adds the offset points for an outside (convex) turn
            </summary>
             <param name="orientation">
             </param>
             <param name="addStartPoint"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddInsideTurn(System.Int32,System.Boolean)">
            <summary>
             Adds the offset points for an inside (concave) turn.
            </summary>
             <param name="orientation"></param>
             <param name="addStartPoint"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddLastSegment">
            <summary>
             Add last offset point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.ComputeOffsetSegment(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.GeometriesGraph.Positions,System.Double,NetTopologySuite.Geometries.LineSegment)">
            <summary>
             Compute an offset segment for an input segment on a given side and at a given distance.
             The offset points are computed in full double precision, for accuracy.
            </summary>
             <param name="seg">The segment to offset</param>
             <param name="side">The side of the segment (<see cref="T:NetTopologySuite.GeometriesGraph.Positions"/>) the offset lies on</param>
             <param name="distance">The offset distance</param>
             <param name="offset">The points computed for the offset segment</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddLineEndCap(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
             Add an end cap around point p1, terminating a line segment coming from p0
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddMitreJoin(GeoAPI.Geometries.Coordinate,NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment,System.Double)">
            <summary>
             Adds a mitre join connecting the two reflex offset segments.
             The mitre will be beveled if it exceeds the mitre ratio limit.
            </summary>
             <param name="p">The base point</param>
             <param name="offset0">The first offset segment</param>
             <param name="offset1">The second offset segment</param>
             <param name="distance">The offset distance</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddLimitedMitreJoin(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment,System.Double,System.Double)">
            <summary>
             Adds a limited mitre join connecting the two reflex offset segments.
            </summary>
             <remarks>
             A limited mitre is a mitre which is beveled at the distance
             determined by the mitre ratio limit.
             </remarks>
             <param name="offset0">The first offset segment</param>
             <param name="offset1">The second offset segment</param>
             <param name="distance">The offset distance</param>
             <param name="mitreLimit">The mitre limit ratio</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddBevelJoin(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment)">
            <summary>
             Adds a bevel join connecting the two offset segments around a reflex corner.
            </summary>
             <param name="offset0">The first offset segment</param>
             <param name="offset1">The second offset segment</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddFillet(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Int32,System.Double)">
            <summary>
             Add points for a circular fillet around a reflex corner. Adds the start and end points
            </summary>
             <param name="p">Base point of curve</param>
             <param name="p0">Start point of fillet curve</param>
             <param name="p1">Endpoint of fillet curve</param>
             <param name="direction">The orientation of the fillet</param>
             <param name="radius">The radius of the fillet</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddFillet(GeoAPI.Geometries.Coordinate,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
             Adds points for a circular fillet arc between two specified angles.
            </summary>
            <remarks>
             The start and end point for the fillet are not added - the caller must add them if required.
            </remarks>
             <param name="p">The point around which to add the fillet points</param>
             <param name="startAngle">The start angle (in radians)</param>
             <param name="endAngle">The end angle (in radians)</param>
             <param name="direction">Is -1 for a CW angle, 1 for a CCW angle</param>
             <param name="radius">The radius of the fillet</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddCircle(GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
             Adds a CW circle around a point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OldOffsetCurveBuilder.AddSquare(GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
             Adds a CW square around a point
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder">
            <summary>
            Creates all the raw offset curves for a buffer of a <c>Geometry</c>.
            Raw curves need to be noded together and polygonized to form the final buffer area.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.#ctor(GeoAPI.Geometries.IGeometry,System.Double,NetTopologySuite.Operation.Buffer.OffsetCurveBuilder)">
             <summary>
            
             </summary>
             <param name="inputGeom"></param>
             <param name="distance"></param>
             <param name="curveBuilder"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.GetCurves">
            <summary>
            Computes the set of raw offset curves for the buffer.
            Each offset curve has an attached {Label} indicating
            its left and right location.
            </summary>
            <returns>A Collection of SegmentStrings representing the raw buffer curves.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddCurve(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            Creates a {SegmentString} for a coordinate list which is a raw offset curve,
            and adds it to the list of buffer curves.
            The SegmentString is tagged with a Label giving the topology of the curve.
            The curve may be oriented in either direction.
            If the curve is oriented CW, the locations will be:
            Left: Location.Exterior.
            Right: Location.Interior.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.Add(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddCollection(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="gc"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddPoint(GeoAPI.Geometries.IGeometry)">
            <summary>
            Add a Point to the graph.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddLineString(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="line"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddPolygon(GeoAPI.Geometries.IPolygon)">
             <summary>
            
             </summary>
             <param name="p"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddPolygonRing(GeoAPI.Geometries.Coordinate[],System.Double,NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Location,GeoAPI.Geometries.Location)">
            <summary>
            Adds an offset curve for a polygon ring.
            The side and left and right topological location arguments
            assume that the ring is oriented CW.
            If the ring is in the opposite orientation,
            the left and right locations must be interchanged and the side flipped.
            </summary>
            <param name="coord">The coordinates of the ring (must not contain repeated points).</param>
            <param name="offsetDistance">The distance at which to create the buffer.</param>
            <param name="side">The side of the ring on which to construct the buffer line.</param>
            <param name="cwLeftLoc">The location on the L side of the ring (if it is CW).</param>
            <param name="cwRightLoc">The location on the R side of the ring (if it is CW).</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.IsErodedCompletely(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            The ringCoord is assumed to contain no repeated points.
            It may be degenerate (i.e. contain only 1, 2, or 3 points).
            In this case it has no area, and hence has a minimum diameter of 0.
            </summary>
            <param name="ringCoord"></param>
            <param name="bufferDistance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.IsTriangleErodedCompletely(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            Tests whether a triangular ring would be eroded completely by the given
            buffer distance.
            This is a precise test.  It uses the fact that the inner buffer of a
            triangle converges on the inCentre of the triangle (the point
            equidistant from all sides).  If the buffer distance is greater than the
            distance of the inCentre from a side, the triangle will be eroded completely.
            This test is important, since it removes a problematic case where
            the buffer distance is slightly larger than the inCentre distance.
            In this case the triangle buffer curve "inverts" with incorrect topology,
            producing an incorrect hole in the buffer.
            </summary>
            <param name="triangleCoord"></param>
            <param name="bufferDistance"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList">
            <summary>
             A list of the vertices in a constructed offset curve.
            </summary>
             <remarks>Automatically removes close adjacent vertices.</remarks>
             <author>Martin Davis</author>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.PrecisionModel">
            <summary>
            Gets/Sets the precision model to use when adding new points.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.MinimumVertexDistance">
            <summary>
            The distance below which two adjacent points on the curve are considered to be coincident.
            </summary>
            <remarks>This is chosen to be a small fraction of the offset distance.</remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.AddPt(GeoAPI.Geometries.Coordinate)">
            <summary>
            Function to add a point
            </summary>
            <remarks>
            The point is only added if <see cref="M:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.IsDuplicate(GeoAPI.Geometries.Coordinate)"/> evaluates to false.
            </remarks>
            <param name="pt">The point to add.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.IsDuplicate(GeoAPI.Geometries.Coordinate)">
            <summary>
             Tests whether the given point duplicates the previous point in the list (up to tolerance)
            </summary>
             <param name="pt">The point to test</param>
             <returns>true if the point duplicates the previous point</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.CloseRing">
            <summary>
            Automatically closes the ring (if it not alread is).
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.OffsetCurveVertexList.Coordinates">
            <summary>
            Gets the Coordinates for the curve.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder">
            <summary>
            A RightmostEdgeFinder find the DirectedEdge in a list which has the highest coordinate,
            and which is oriented L to R at that point. (I.e. the right side is on the RHS of the edge.)
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.FindEdge(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="dirEdgeList"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.FindRightmostEdgeAtNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.FindRightmostEdgeAtVertex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.CheckForRightmostCoordinate(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.GetRightmostSide(NetTopologySuite.GeometriesGraph.DirectedEdge,System.Int32)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.GetRightmostSideOfSegment(NetTopologySuite.GeometriesGraph.DirectedEdge,System.Int32)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater">
            <summary>
            Locates a subgraph inside a set of subgraphs,
            in order to determine the outside depth of the subgraph.
            The input subgraphs are assumed to have had depths
            already calculated for their edges.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.#ctor(System.Collections.Generic.IList{NetTopologySuite.Operation.Buffer.BufferSubgraph})">
             <summary>
            
             </summary>
             <param name="subgraphs"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.GetDepth(GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="p"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.FindStabbedSegments(GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds all non-horizontal segments intersecting the stabbing line.
            The stabbing line is the ray to the right of stabbingRayLeftPt.
            </summary>
            <param name="stabbingRayLeftPt">The left-hand origin of the stabbing line.</param>
            <returns>A List of {DepthSegments} intersecting the stabbing line.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.FindStabbedSegments(GeoAPI.Geometries.Coordinate,System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.DirectedEdge},System.Collections.Generic.IList{NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment})">
            <summary>
            Finds all non-horizontal segments intersecting the stabbing line
            in the list of dirEdges.
            The stabbing line is the ray to the right of stabbingRayLeftPt.
            </summary>
            <param name="stabbingRayLeftPt">The left-hand origin of the stabbing line.</param>
            <param name="dirEdges"></param>
            <param name="stabbedSegments">The current list of DepthSegments intersecting the stabbing line.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.FindStabbedSegments(GeoAPI.Geometries.Coordinate,NetTopologySuite.GeometriesGraph.DirectedEdge,System.Collections.Generic.IList{NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment})">
            <summary>
            Finds all non-horizontal segments intersecting the stabbing line
            in the input dirEdge.
            The stabbing line is the ray to the right of stabbingRayLeftPt.
            </summary>
            <param name="stabbingRayLeftPt">The left-hand origin of the stabbing line.</param>
            <param name="dirEdge"></param>
            <param name="stabbedSegments">The current list of DepthSegments intersecting the stabbing line.</param>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment">
            <summary>
            A segment from a directed edge which has been assigned a depth value
            for its sides.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.LeftDepth">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.#ctor(NetTopologySuite.Geometries.LineSegment,System.Int32)">
             <summary>
            
             </summary>
             <param name="seg"></param>
             <param name="depth"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.CompareTo(NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment)">
            <summary>
            Defines a comparison operation on DepthSegments
            which orders them left to right.
            Assumes the segments are normalized.
            <para/>
            The definition of ordering is:
            <list type="Bullet">
            <item>-1 : if DS1.seg is left of or below DS2.seg (DS1 &lt; DS2).</item>
            <item>1 : if DS1.seg is right of or above DS2.seg (DS1 &gt; DS2).</item>
            <item>0 : if the segments are identical</item>
            </list>
            </summary>
            <remarks>
            Known Bugs:
            <list type="Bullet">
            <item>The logic does not obey the <see cref="M:System.IComparable.CompareTo(System.Object)"/> contract. 
            This is acceptable for the intended usage, but may cause problems if used with some
            utilities in the .Net standard library (e.g. <see cref="T:System.Collections.List.Sort()"/>.</item>
            </list>
            </remarks>
            <param name="other">A DepthSegment</param>
            <returns>The comparison value</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.CompareX(NetTopologySuite.Geometries.LineSegment,NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Compare two collinear segments for left-most ordering.
            If segs are vertical, use vertical ordering for comparison.
            If segs are equal, return 0.
            Segments are assumed to be directed so that the second coordinate is >= to the first
            (e.g. up and to the right).
            </summary>
            <param name="seg0">A segment to compare.</param>
            <param name="seg1">A segment to compare.</param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.Validate.BufferCurveMaximumDistanceFinder">
            <summary>
             Finds the approximate maximum distance from a buffer curve to
             the originating geometry.
            </summary>
             <remarks><para>The approximate maximum distance is determined by testing
             all vertices in the buffer curve, as well
             as midpoints of the curve segments.
             Due to the way buffer curves are constructed, this
             should be a very close approximation.</para>
             <para>This is similar to the Discrete Oriented Hausdorff distance
             from the buffer curve to the input.</para>
             </remarks>
             <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator">
            <summary>
            Validates that a given buffer curve lies an appropriate distance
            from the input generating it.
            </summary>
            <remarks>
            Useful only for round buffers (cap and join).
            Can be used for either positive or negative distances.
            <para></para>
            <para>This is a heuristic test, and may return false positive results
            (I.e. it may fail to detect an invalid result.)
            It should never return a false negative result, however
            (I.e. it should never report a valid result as invalid.)</para>
            </remarks>
            <author>mbdavis</author>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator.MaxDistanceDiffFrac">
            Maximum allowable fraction of buffer distance the
            actual distance can differ by.
            1% sometimes causes an error - 1.2% should be safe.
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator.ErrorIndicator">
            <summary>
            Gets a geometry which indicates the location and nature of a validation failure.
            <para>
            The indicator is a line segment showing the location and size
            of the distance discrepancy.
            </para>
            </summary>
            <returns>A geometric error indicator 
            or <value>null</value>, if no error was found</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator.CheckMinimumDistance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
             Checks that two geometries are at least a minumum distance apart.
             </summary>
             <param name="g1">A geometry</param>
             <param name="g2">A geometry</param>
             <param name="minDist">The minimum distance the geometries should be separated by</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.Validate.BufferDistanceValidator.CheckMaximumDistance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
             Checks that the furthest distance from the buffer curve to the input
             is less than the given maximum distance.
             </summary>
             <remarks>
             This uses the Oriented Hausdorff distance metric. It corresponds to finding
             the point on the buffer curve which is furthest from <i>some</i> point on the input.
             </remarks>
             <param name="input">A geometry</param>
             <param name="bufCurve">A geometry</param>
             <param name="maxDist">The maximum distance that a buffer result can be from the input</param>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator">
            <summary>
            Validates that the result of a buffer operation
            is geometrically correct, within a computed tolerance.
            </summary>
            <remarks>
            <para>This is a heuristic test, and may return false positive results
            (I.e. it may fail to detect an invalid result.)
            It should never return a false negative result, however
            (I.e. it should never report a valid result as invalid.)</para>
            <para>This test may be (much) more expensive than the original buffer computation.</para>
            </remarks>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.MaxEnvDiffFrac">
            Maximum allowable fraction of buffer distance the
            actual distance can differ by.
            1% sometimes causes an error - 1.2% should be safe.
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.IsValidMessage(GeoAPI.Geometries.IGeometry,System.Double,GeoAPI.Geometries.IGeometry)">
            <summary>Checks whether the geometry buffer is valid, and returns an error message if not.
            </summary>
             <param name="g"></param>
             <param name="distance"></param>
             <param name="result"></param>
             <returns>An appropriate error message<br/>
             or <c>null</c>if the buffer is valid</returns>
            
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.ErrorMessage">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.ErrorLocation">
            <summary>
            Gets the error location
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Buffer.Validate.BufferResultValidator.ErrorIndicator">
            <summary>
            Gets a geometry which indicates the location and nature of a validation failure.
            <para>
            If the failure is due to the buffer curve being too far or too close
            to the input, the indicator is a line segment showing the location and size
            of the discrepancy.
            </para>
            </summary>
            <returns>A geometric error indicator<br/>
            or <value>null</value>, if no error was found</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.Validate.DistanceToPointFinder">
            <summary>
             Computes the Euclidean distance (L2 metric) from a Point to a Geometry.
             Also computes two points which are separated by the distance.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.Validate.PointPairDistance">
            <summary>
            Contains a pair of points and the distance between them.
            Provides methods to update with a new point pair with
            either maximum or minimum distance.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.Validate.PointPairDistance.Initialize(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Double)">
            <summary>
            Initializes the points, avoiding recomputing the distance.
            </summary>
            <param name="p0">The first point</param>
            <param name="p1">The second point</param>
            <param name="distance">The distance between <paramref name="p0"/> and <paramref name="p1"/></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance3D.AxisPlaneCoordinateSequence">
            <summary>
            A <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> wrapper which 
            projects 3D coordinates into one of the
            three Cartesian axis planes,
            using the standard orthonormal projection
            (i.e. simply selecting the appropriate ordinates into the XY ordinates).
            The projected data is represented as 2D coordinates.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.AxisPlaneCoordinateSequence.ProjectToXY(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a wrapper projecting to the XY plane.
            </summary>
            <param name="seq">The sequence to be projected</param>
            <returns>A sequence which projects coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.AxisPlaneCoordinateSequence.ProjectToXZ(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a wrapper projecting to the XZ plane.
            </summary>
            <param name="seq">The sequence to be projected</param>
            <returns>A sequence which projects coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.AxisPlaneCoordinateSequence.ProjectToYZ(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a wrapper projecting to the YZ plane.
            </summary>
            <param name="seq">The sequence to be projected</param>
            <returns>A sequence which projects coordinates</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance3D.Distance3DOp">
            <summary>
            Find two points on two  3D <see cref="T:GeoAPI.Geometries.IGeometry"/>s which lie within a given distance,
            or else are the nearest points on the geometries (in which case this also
            provides the distance between the geometries).
            <para/>
            3D geometries have vertex Z ordinates defined.
            3D <see cref="T:GeoAPI.Geometries.IPolygon"/>s are assumed to lie in a single plane (which is enforced if not actually the case).
            3D <see cref="T:GeoAPI.Geometries.ILineString"/>s and <see cref="T:GeoAPI.Geometries.IPoint"/>s may have any configuration.
            <para/>
            The distance computation also finds a pair of points in the input geometries
            which have the minimum distance between them. If a point lies in the interior
            of a line segment, the coordinate computed is a close approximation to the
            exact point.
            <para/>
            The algorithms used are straightforward O(n^2) comparisons. This worst-case
            performance could be improved on by using Voronoi techniques or spatial
            indexes.
            </summary>
            <version>1.13</version>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.Distance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the distance between the nearest points of two geometries.
            </summary>
            <param name="g0">A <see cref="T:GeoAPI.Geometries.IGeometry">geometry</see></param>
            <param name="g1">A <see cref="T:GeoAPI.Geometries.IGeometry">geometry</see></param>
            <returns>The distance between the geometries</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.IsWithinDistance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Test whether two geometries lie within a given distance of each other.
            </summary>
            <param name="g0">A <see cref="T:GeoAPI.Geometries.IGeometry">geometry</see></param>
            <param name="g1">A <see cref="T:GeoAPI.Geometries.IGeometry">geometry</see></param>
            <param name="distance">The distance to test</param>
            <returns><value>true</value> if <c>g0.distance(g1) &lt;= <paramref name="distance"/></c></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.NearestPoints(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the the nearest points of two geometries. The points are
            presented in the same order as the input Geometries.
            </summary>
            <param name="g0">A <see cref="T:GeoAPI.Geometries.IGeometry">geometry</see></param>
            <param name="g1">A <see cref="T:GeoAPI.Geometries.IGeometry">geometry</see></param>
            <returns>The nearest points in the geometries</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs a DistanceOp that computes the distance and nearest points
            between the two specified geometries.
            </summary>
            <param name="g0">A geometry</param>
            <param name="g1">A geometry</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Constructs a DistanceOp that computes the distance and nearest points
            between the two specified geometries.
            </summary>
            <param name="g0">A geometry</param>
            <param name="g1">A geometry</param>
            <param name="terminateDistance">The distance on which to terminate the search</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.Distance">
            <summary>
            Report the distance between the nearest points on the input geometries.
            </summary>
            <returns>The distance between the geometries<br/>
            or <value>0</value> if either input geometry is empty</returns>
            <exception cref="T:System.ArgumentException">Thrown if either input geometry is null.</exception>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.NearestPoints">
            <summary>
            Report the coordinates of the nearest points in the input geometries. The
            points are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <see cref="T:GeoAPI.Geometries.Coordinate"/>s of the nearest points</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.NearestLocations">
            <summary>
            Gets the locations of the nearest points in the input geometries. The
            locations are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <see cref="T:NetTopologySuite.Operation.Distance.GeometryLocation"/>s for the nearest points</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.MostPolygonalIndex">
            <summary>
            Finds the index of the "most polygonal" input geometry.
            This optimizes the computation of the best-fit plane, 
            since it is cached only for the left-hand geometry.
            </summary>
            <returns>The index of the most polygonal geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.PolyPlane(GeoAPI.Geometries.IGeometry)">
            <summary>
            Convenience method to create a Plane3DPolygon
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.ComputeMinDistancePolygonPolygon(NetTopologySuite.Operation.Distance3D.PlanarPolygon3D,GeoAPI.Geometries.IPolygon,System.Boolean)">
            <summary>
            Computes distance between two polygons.
            </summary>
            <remarks>
            To compute the distance, compute the distance
            between the rings of one polygon and the other polygon,
            and vice-versa.
            If the polygons intersect, then at least one ring must
            intersect the other polygon.
            Note that it is NOT sufficient to test only the shell rings. 
            A counter-example is a "figure-8" polygon A 
            and a simple polygon B at right angles to A, with the ring of B
            passing through the holes of A.
            The polygons intersect,
            but A's shell does not intersect B, and B's shell does not intersect A.</remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.ComputeMinDistancePolygonRings(NetTopologySuite.Operation.Distance3D.PlanarPolygon3D,GeoAPI.Geometries.IPolygon,System.Boolean)">
            <summary>Compute distance between a polygon and the rings of another.</summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.Distance3DOp.SegmentPoint(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Double,System.Double)">
            Computes a point at a distance along a segment
            specified by two relatively proportional values. 
            The fractional distance along the segment is d0/(d0+d1).
            
            @param p0
                       start point of the segment
            @param p1
                       end point of the segment
            @param d0
                       proportional distance from start point to computed point
            @param d1
                       proportional distance from computed point to end point
            @return the computed point
        </member>
        <member name="T:NetTopologySuite.Operation.Distance3D.PlanarPolygon3D">
            <summary>
            Models a polygon lying in a plane in 3-dimensional Cartesian space.
            The polygon representation is supplied
            by a <see cref="T:GeoAPI.Geometries.IPolygon"/>,
            containing coordinates with XYZ ordinates.
            3D polygons are assumed to lie in a single plane.
            The plane best fitting the polygon coordinates is
            computed and is represented by a <see cref="T:NetTopologySuite.Mathematics.Plane3D"/>.
            </summary>
            <author>Martin Davis</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Operation.Distance3D.PlanarPolygon3D.FindBestFitPlane(GeoAPI.Geometries.IPolygon)" -->
        <member name="M:NetTopologySuite.Operation.Distance3D.PlanarPolygon3D.AverageNormal(GeoAPI.Geometries.ICoordinateSequence)">
            Computes an average normal vector from a list of polygon coordinates.
            Uses Newell's method, which is based
            on the fact that the vector with components
            equal to the areas of the projection of the polygon onto 
            the Cartesian axis planes is normal.
            
            @param seq the sequence of coordinates for the polygon
            @return a normal vector
        </member>
        <member name="M:NetTopologySuite.Operation.Distance3D.PlanarPolygon3D.AveragePoint(GeoAPI.Geometries.ICoordinateSequence)">
            Computes a point which is the average of all coordinates
            in a sequence.
            If the sequence lies in a single plane,
            the computed point also lies in the plane.
            
            @param seq a coordinate sequence
            @return a Coordinate with averaged ordinates
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter">
            <summary>
            A ConnectedElementPointFilter extracts a single point
            from each connected element in a Geometry
            (e.g. a polygon, linestring or point)
            and returns them in a list. The elements of the list are 
            <c>com.vividsolutions.jts.operation.distance.GeometryLocation</c>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.GetLocations(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a list containing a point from each Polygon, LineString, and Point
            found inside the specified point. Thus, if the specified point is
            not a GeometryCollection, an empty list will be returned. The elements of the list 
            are <c>com.vividsolutions.jts.operation.distance.GeometryLocation</c>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.#ctor(System.Collections.Generic.IList{NetTopologySuite.Operation.Distance.GeometryLocation})">
            <summary>
            
            </summary>
            <param name="locations"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.ConnectedElementPointFilter">
            <summary>
            Extracts a single point
            from each connected element in a Geometry
            (e.g. a polygon, linestring or point)
            and returns them in a list
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.GetCoordinates(NetTopologySuite.Geometries.Geometry)">
            <summary>
            Returns a list containing a Coordinate from each Polygon, LineString, and Point
            found inside the specified point. Thus, if the specified point is
            not a GeometryCollection, an empty list will be returned.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.#ctor(System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate})">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.DistanceOp">
            <summary>
            Computes the distance and
            closest points between two <c>Geometry</c>s.
            The distance computation finds a pair of points in the input geometries
            which have minimum distance between them.  These points may
            not be vertices of the geometries, but may lie in the interior of
            a line segment. In this case the coordinate computed is a close
            approximation to the exact point.
            The algorithms used are straightforward O(n^2)
            comparisons.  This worst-case performance could be improved on
            by using Voronoi techniques.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.Distance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the distance between the closest points of two geometries.
            </summary>
            <param name="g0">A <c>Geometry</c>.</param>
            <param name="g1">Another <c>Geometry</c>.</param>
            <returns>The distance between the geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.IsWithinDistance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Test whether two geometries lie within a given distance of each other.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.NearestPoints(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the the closest points of two geometries.
            The points are presented in the same order as the input Geometries.
            </summary>
            <param name="g0">A <c>Geometry</c>.</param>
            <param name="g1">Another <c>Geometry</c>.</param>
            <returns>The closest points in the geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ClosestPoints(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the the closest points of two geometries.
            The points are presented in the same order as the input Geometries.
            </summary>
            <param name="g0">A <c>Geometry</c>.</param>
            <param name="g1">Another <c>Geometry</c>.</param>
            <returns>The closest points in the geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs a <see cref="T:NetTopologySuite.Operation.Distance.DistanceOp" />  that computes the distance and closest points between
            the two specified geometries.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Constructs a <see cref="T:NetTopologySuite.Operation.Distance.DistanceOp" /> that computes the distance and closest points between
            the two specified geometries.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="terminateDistance">The distance on which to terminate the search.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.Distance">
            <summary>
            Report the distance between the closest points on the input geometries.
            </summary>
            <returns>The distance between the geometries<br/>
            or <value>0</value> if either input geometry is empty.</returns>
            <exception cref="T:System.ApplicationException"> if either input geometry is null</exception>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ClosestPoints">
            <summary>
            Report the coordinates of the closest points in the input geometries.
            The points are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <c>Coordinate</c>s of the closest points.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ClosestLocations">
            <summary>
            Report the locations of the closest points in the input geometries.
            The locations are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <see cref="T:NetTopologySuite.Operation.Distance.GeometryLocation"/>s for the closest points.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.NearestPoints">
            <summary>
            Report the coordinates of the nearest points in the input geometries.
            The points are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <c>Coordinate</c>s of the nearest points.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.NearestLocations">
            <summary>
            Report the locations of the nearest points in the input geometries.
            The locations are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <see cref="T:NetTopologySuite.Operation.Distance.GeometryLocation"/>s for the nearest points.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.UpdateMinDistance(System.Double)">
            <summary>
            
            </summary>
            <param name="dist"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.UpdateMinDistance(NetTopologySuite.Operation.Distance.GeometryLocation[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="locGeom"></param>
            <param name="flip"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeContainmentDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeFacetDistance">
            <summary>
            Computes distance between facets (lines and points) of input geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistanceLines(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry},System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="lines0"></param>
            <param name="lines1"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistancePoints(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry},System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="points0"></param>
            <param name="points1"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistanceLinesPoints(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry},System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry},NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="points"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistance(GeoAPI.Geometries.ILineString,GeoAPI.Geometries.ILineString,NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="line0"></param>
            <param name="line1"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistance(GeoAPI.Geometries.ILineString,GeoAPI.Geometries.IPoint,NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="line"></param>
            <param name="pt"></param>
            <param name="locGeom"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.FacetSequence">
            <summary>
            Represents a sequence of facets (points or line segments) of a <see cref="T:GeoAPI.Geometries.IGeometry"/> 
            specified by a subsequence of a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.FacetSequence.#ctor(GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Int32)">
            <summary>
            Creates a new section based on a CoordinateSequence.
            </summary>
            <param name="pts">The sequence holding the points in the section</param>
            <param name="start">The index of the start point</param>
            <param name="end">The index of the end point + 1</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.FacetSequence.#ctor(GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
            <summary>
            Creates a new sequence for a single point from a CoordinateSequence.
            </summary>
            <param name="pts">The sequence holding the points in the facet sequence</param>
            <param name="index">the index of the point</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.FacetSequence.Envelope">
            <summary>
            Gets the envelope of this facet sequence
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.FacetSequence.Count">
            <summary>
            Gets the number of coordinates in this facet sequence
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.FacetSequence.GetCoordinate(System.Int32)">
            <summary>
            Gets the coordinate at the given index
            </summary>
            <param name="index">The index</param>
            <returns>The coordinate at the given index</returns>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.FacetSequence.IsPoint">
            <summary>
            Tests if this facet sequence consists of only one point
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.FacetSequence.Distance(NetTopologySuite.Operation.Distance.FacetSequence)">
            <summary>
            Computes the distance to another facet sequence
            </summary>
            <param name="facetSeq">The other facet sequence</param>
            <returns>The distance between this and <paramref name="facetSeq"/>.</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.FacetSequenceTreeBuilder">
            <summary>
            Utility class to build facet sequencs STRtrees-
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.FacetSequenceTreeBuilder.BuildSTRtree(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.FacetSequenceTreeBuilder.ComputeFacetSequences(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates facet sequences from a given geometry
            </summary>
            <param name="g">The geometry</param>
            <returns>A list of <see cref="T:NetTopologySuite.Operation.Distance.FacetSequence"/>s</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.GeometryLocation">
            <summary>
            Represents the location of a point on a Geometry.
            Maintains both the actual point location 
            (which may not be exact, if the point is not a vertex) 
            as well as information about the component
            and segment index where the point occurs.
            Locations inside area Geometrys will not have an associated segment index,
            so in this case the segment index will have the sentinel value of <see cref="F:NetTopologySuite.Operation.Distance.GeometryLocation.InsideArea"/>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Distance.GeometryLocation.InsideArea">
            <summary>
            A special value of segmentIndex used for locations inside area geometries. 
            These locations are not located on a segment, 
            and thus do not have an associated segment index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.GeometryLocation.#ctor(GeoAPI.Geometries.IGeometry,System.Int32,GeoAPI.Geometries.Coordinate)">
            <summary>
            Constructs a GeometryLocation specifying a point on a point, as well as the 
            segment that the point is on (or <see cref="F:NetTopologySuite.Operation.Distance.GeometryLocation.InsideArea"/> if the point is not on a segment).
            </summary>
            <param name="component">The component of the geometry containing the point</param>
            <param name="segIndex">The segment index of the location, or <see cref="F:NetTopologySuite.Operation.Distance.GeometryLocation.InsideArea"/></param>
            <param name="pt">The coordinate of the location</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.GeometryLocation.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Constructs a GeometryLocation specifying a point inside an area point.
            </summary>
            <param name="component">The component of the geometry containing the point</param>
            <param name="pt">The coordinate of the location</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.GeometryLocation.GeometryComponent">
            <summary>
            Returns the geometry component on (or in) which this location occurs.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.GeometryLocation.SegmentIndex">
            <summary>
            Returns the segment index for this location. If the location is inside an
            area, the index will have the value <see cref="F:NetTopologySuite.Operation.Distance.GeometryLocation.InsideArea"/>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.GeometryLocation.Coordinate">
            <summary>
            Returns the <see cref="P:NetTopologySuite.Operation.Distance.GeometryLocation.Coordinate"/> of this location.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Distance.GeometryLocation.IsInsideArea">
            <summary>
            Tests whether this location represents a point inside an area geometry.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.IndexedFacetDistance">
            <summary>
            Computes the distance between the facets (segments and vertices) 
            of two <see cref="T:GeoAPI.Geometries.IGeometry"/>s
            using a Branch-and-Bound algorithm.
            The Branch-and-Bound algorithm operates over a 
            traversal of R-trees built
            on the target and possibly also the query geometries.
            <para>
            This approach provides the following benefits:
            <list type="Bullet">
            <item>
            Performance is improved due to the effects of the R-tree index
            and the pruning due to the Branch-and-Bound approach
            </item><item>
            The spatial index on the target geometry can be cached
            to allow reuse in an incremental query situation.</item>
            </list>
            Using this technique can be much more performant 
            than using <see cref="M:GeoAPI.Geometries.IGeometry.Distance(GeoAPI.Geometries.IGeometry)"/>
            when one or both input geometries are large, 
            or when evaluating many distance computations against 
            a single geometry.
            </para>
            </summary>
            <remarks>This class is not thread-safe.</remarks>
            <author>
            Martin Davis
            </author>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.IndexedFacetDistance.Distance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the distance between two geometries using the indexed approach.
            </summary>
            <remarks>
            For geometries with many segments or points,
            this can be faster than using a simple distance
            algorithm.
            </remarks>
            <param name="g1">A geometry</param>
            <param name="g2">A geometry</param>
            <returns>The distance between the two geometries</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.IndexedFacetDistance.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new distance-finding instance for a given target <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <remarks> 
            <para>
            Distances will be computed to all facets of the input geometry.
            The facets of the geometry are the discrete segments and points 
            contained in its components.  </para>
            <para>
            In the case of <see cref="T:GeoAPI.Geometries.ILineal"/> and <see cref="T:GeoAPI.Geometries.IPuntal"/> inputs,
            this is equivalent to computing the conventional distance.
            </para><para>
            In the case of <see cref="T:GeoAPI.Geometries.IPolygonal"/> inputs, this is equivalent 
            to computing the distance to the polygons boundaries. 
            </para>
            </remarks>
            <param name="g1">A Geometry, which may be of any type.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Distance.IndexedFacetDistance.GetDistance(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the distance from the base geometry to the given geometry.
            </summary>
            <param name="g">The geometry to compute the distance to.</param>
            <returns>The computed distance</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Distance.IndexedFacetDistance.FacetSequenceDistance">
                     * Tests whether the base geometry lies within
                     * a specified distance of the given geometry.
                     * 
                     //* @param g the geomtry to test
                     //* @param maximumDistance the maximum distance to test
                     //* @return true if the geometry lies with the specified distance
        </member>
        <member name="T:NetTopologySuite.Operation.GeometryGraphOperation">
            <summary>
            The base class for operations that require <see cref="T:NetTopologySuite.GeometriesGraph.GeometryGraph"/>s.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.GeometryGraphOperation.lineIntersector">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.GeometryGraphOperation.resultPrecisionModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.GeometryGraphOperation.arg">
            <summary>
            The operation args into an array so they can be accessed by index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.GeometryGraphOperation.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.GeometryGraphOperation.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.GeometryGraphOperation.GetArgGeometry(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Operation.GeometryGraphOperation.ComputationPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.IsSimpleOp">
            <summary>
             Tests whether a <see cref="T:GeoAPI.Geometries.IGeometry"/> is simple.
             In general, the SFS specification of simplicity
             follows the rule:
             <list type="Bullet">
             <item> 
             A Geometry is simple if and only if the only self-intersections are at boundary points.
             </item>  
             </list>
             </summary>
             <remarks>
             Simplicity is defined for each <see cref="T:GeoAPI.Geometries.IGeometry"/>} subclass as follows:
             <list type="Bullet">
             <item>Valid <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometries are simple by definition, so
             <c>IsSimple</c> trivially returns true.<br/>
             (Note: this means that <tt>IsSimple</tt> cannot be used to test 
             for (invalid) self-intersections in <tt>Polygon</tt>s.  
             In order to check if a <tt>Polygonal</tt> geometry has self-intersections,
             use <see cref="P:NetTopologySuite.Geometries.Geometry.IsValid" />).</item>
             <item><b><see cref="T:GeoAPI.Geometries.ILineal"/></b> geometries are simple if and only if they do <i>not</i> self-intersect at interior points
             (i.e. points other than boundary points). 
             This is equivalent to saying that no two linear components satisfy the SFS <see cref="M:GeoAPI.Geometries.IGeometry.Touches(GeoAPI.Geometries.IGeometry)"/>
             predicate.</item>
             <item><b>Zero-dimensional (<see cref="T:GeoAPI.Geometries.IPuntal"/>)</b> geometries are simple if and only if they have no
             repeated points.</item>
            <item><b>Empty</b> <see cref="T:GeoAPI.Geometries.IGeometry"/>s are <i>always</i> simple by definition.</item>
            </list>
             For <see cref="T:GeoAPI.Geometries.ILineal"/> geometries the evaluation of simplicity  
             can be customized by supplying a <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/>
             to define how boundary points are determined.
             The default is the SFS-standard <see cref="T:NetTopologySuite.Algorithm.BoundaryNodeRules.Mod2BoundaryNodeRule"/>.
             Note that under the <tt>Mod-2</tt> rule, closed <tt>LineString</tt>s (rings)
             will never satisfy the <tt>touches</tt> predicate at their endpoints, since these are
             interior points, not boundary points. 
             If it is required to test whether a set of <code>LineString</code>s touch
             only at their endpoints, use <code>IsSimpleOp</code> with {@link BoundaryNodeRule#ENDPOINT_BOUNDARY_RULE}.
             For example, this can be used to validate that a set of lines form a topologically valid
             linear network.
             </remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.#ctor">
            <summary>
            Creates a simplicity checker using the default SFS Mod-2 Boundary Node Rule
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
             Creates a simplicity checker using the default SFS Mod-2 Boundary Node Rule
            </summary>
             <param name="geom">The geometry to test</param>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.#ctor(GeoAPI.Geometries.IGeometry,NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
             Creates a simplicity checker using a given <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/>
            </summary>
             <param name="geom">The geometry to test</param>
             <param name="boundaryNodeRule">The rule to use</param>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.IsSimple">
            <summary>
             Tests whether the geometry is simple.
            </summary>
             <returns>true if the geometry is simple</returns>
        </member>
        <member name="P:NetTopologySuite.Operation.IsSimpleOp.NonSimpleLocation">
            <summary>
             Gets a coordinate for the location where the geometry fails to be simple.
             (i.e. where it has a non-boundary self-intersection).
             <see cref="M:NetTopologySuite.Operation.IsSimpleOp.IsSimple"/> must be called before this location is accessed
            </summary>
             <returns> a coordinate for the location of the non-boundary self-intersection
             or <value>null</value> if the geometry is simple</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.IsSimple(GeoAPI.Geometries.ILineString)">
            <summary>
            Reports whether a <see cref="T:GeoAPI.Geometries.ILineString"/> is simple.
            </summary>
            <param name="geom">The lineal geometry to test</param>
            <returns>True if the geometry is simple</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.IsSimple(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            Reports whether a <see cref="T:GeoAPI.Geometries.IMultiLineString"/> is simple.
            </summary>
            <param name="geom">The lineal geometry to test</param>
            <returns>True if the geometry is simple</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.IsSimple(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            A MultiPoint is simple if it has no repeated points.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.IsSimplePolygonal(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes simplicity for polygonal geometries.
            Polygonal geometries are simple if and only if
            all of their component rings are simple.
            </summary>
            <param name="geom">A Polygonal geometry</param>
            <returns><c>true</c> if the geometry is simple</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.IsSimpleGeometryCollection(GeoAPI.Geometries.IGeometry)">
            <summary>Semantics for GeometryCollection is 
            simple iff all components are simple.</summary>
            <param name="geom">A GeometryCollection</param>
            <returns><c>true</c> if the geometry is simple</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.HasNonEndpointIntersection(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            For all edges, check if there are any intersections which are NOT at an endpoint.
            The Geometry is not simple if there are intersections not at endpoints.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.IsSimpleOp.EndpointInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.EndpointInfo.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="pt">The endpoint</param>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.HasClosedEndpointIntersection(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary> 
            Tests that no edge intersection is the endpoint of a closed line.
            This ensures that closed lines are not touched at their endpoint,
            which is an interior point according to the Mod-2 rule
            To check this we compute the degree of each endpoint.
            The degree of endpoints of closed lines
            must be exactly 2.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.IsSimpleOp.AddEndpoint(System.Collections.Generic.IDictionary{GeoAPI.Geometries.Coordinate,NetTopologySuite.Operation.IsSimpleOp.EndpointInfo},GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Add an endpoint to the map, creating an entry for it if none exists.
            </summary>
            <param name="endPoints"></param>
            <param name="p"></param>
            <param name="isClosed"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.EdgeString">
            <summary>
            A sequence of <c>LineMergeDirectedEdge</c>s forming one of the lines that will
            be output by the line-merging process.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.EdgeString.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs an EdgeString with the given factory used to convert this EdgeString
            to a LineString.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.EdgeString.Add(NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge)">
            <summary>
            Adds a directed edge which is known to form part of this line.
            </summary>
            <param name="directedEdge"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Linemerge.EdgeString.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.EdgeString.ToLineString">
            <summary>
            Converts this EdgeString into a LineString.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge">
            <summary>
            A <c>com.vividsolutions.jts.planargraph.DirectedEdge</c> of a <c>LineMergeGraph</c>. 
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge.#ctor(NetTopologySuite.Planargraph.Node,NetTopologySuite.Planargraph.Node,GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Constructs a LineMergeDirectedEdge connecting the <c>from</c> node to the <c>to</c> node.
            </summary>
            <param name="from"/>
            <param name="to"/>
            <param name="directionPt">
            specifies this DirectedEdge's direction (given by an imaginary
            line from the <c>from</c> node to <c>directionPt</c>).
            </param>
            <param name="edgeDirection">
            whether this DirectedEdge's direction is the same as or
            opposite to that of the parent Edge (if any).
            </param>
        </member>
        <member name="P:NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge.Next">
            <summary>
            Returns the directed edge that starts at this directed edge's end point, or null
            if there are zero or multiple directed edges starting there.  
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineMergeEdge">
            <summary>
            An edge of a <c>LineMergeGraph</c>. The <c>marked</c> field indicates
            whether this Edge has been logically deleted from the graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMergeEdge.#ctor(GeoAPI.Geometries.ILineString)">
            <summary>
            Constructs a LineMergeEdge with vertices given by the specified LineString.
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Linemerge.LineMergeEdge.Line">
            <summary>
            Returns the LineString specifying the vertices of this edge.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineMergeGraph">
            <summary>
            A planar graph of edges that is analyzed to sew the edges together. The 
            <c>marked</c> flag on <c>com.vividsolutions.planargraph.Edge</c>s 
            and <c>com.vividsolutions.planargraph.Node</c>s indicates whether they have been
            logically deleted from the graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMergeGraph.AddEdge(GeoAPI.Geometries.ILineString)">
            <summary>
            Adds an Edge, DirectedEdges, and Nodes for the given LineString representation
            of an edge. 
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMergeGraph.GetNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineMerger">
            <summary>
            Sews together a set of fully noded LineStrings.
            </summary>
            <remarks>
            <para> Sewing stops at nodes of degree 1
            or 3 or more -- the exception is an isolated loop, which only has degree-2 nodes,
            in which case a node is simply chosen as a starting point. The direction of each
            merged LineString will be that of the majority of the LineStrings from which it
            was derived.</para>
            <para>
            Any dimension of Geometry is handled -- the constituent linework is extracted to 
            form the edges. The edges must be correctly noded; that is, they must only meet
            at their endpoints.  The LineMerger will still run on incorrectly noded input
            but will not form polygons from incorrected noded edges.</para>
            <para>
            <b>NOTE:</b>once merging has been performed, no more</para>
            </remarks>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineMerger.AnonymousGeometryComponentFilterImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.AnonymousGeometryComponentFilterImpl.#ctor(NetTopologySuite.Operation.Linemerge.LineMerger)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.AnonymousGeometryComponentFilterImpl.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a Geometry to be processed. May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be
            extracted.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.Add(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Adds a collection of Geometries to be processed. May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be
            extracted.
            </summary>
            <param name="geometries"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.Add(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.Merge">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForObviousStartNodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForIsolatedLoops">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForUnprocessedNodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForNonDegree2Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsStartingAt(NetTopologySuite.Planargraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringStartingWith(NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineMerger.GetMergedLineStrings">
            <summary>
            Returns the LineStrings built by the merging process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineSequencer">
            <summary>
            <para>
            Builds a sequence from a set of <see cref="T:GeoAPI.Geometries.ILineString" />s,
            so that they are ordered end to end.
            A sequence is a complete non-repeating list of the linear
            components of the input.  Each linestring is oriented
            so that identical endpoints are adjacent in the list.
            </para>
            <para>
            The input linestrings may form one or more connected sets.
            The input linestrings should be correctly noded, or the results may
            not be what is expected.
            The output of this method is a single <see cref="T:GeoAPI.Geometries.IMultiLineString" />,
            containing the ordered linestrings in the sequence.
            </para>
            <para>
            The sequencing employs the classic 'Eulerian path' graph algorithm.
            Since Eulerian paths are not uniquely determined, further rules are used to
            make the computed sequence preserve as much as possible of the input ordering.
            Within a connected subset of lines, the ordering rules are:    
             - If there is degree-1 node which is the start
            node of an linestring, use that node as the start of the sequence.
             - If there is a degree-1 node which is the end
            node of an linestring, use that node as the end of the sequence.
             - If the sequence has no degree-1 nodes, use any node as the start
            </para>
            <para>
            Not all arrangements of lines can be sequenced.
            For a connected set of edges in a graph,
            Euler's Theorem states that there is a sequence containing each edge once
            if and only if there are no more than 2 nodes of odd degree.
            If it is not possible to find a sequence, the <see cref="M:NetTopologySuite.Operation.Linemerge.LineSequencer.IsSequenceable" /> 
            property will return <c>false</c>.
            </para>
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.IsSequenced(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether a <see cref="T:GeoAPI.Geometries.IGeometry" /> is sequenced correctly.
            <see cref="T:GeoAPI.Geometries.ILineString" />s are trivially sequenced.
            <see cref="T:GeoAPI.Geometries.IMultiLineString" />s are checked for correct sequencing.
            Otherwise, <c>IsSequenced</c> is defined
            to be <c>true</c> for geometries that are not lineal.
            </summary>
            <param name="geom">The <see cref="T:GeoAPI.Geometries.IGeometry" /> to test.</param>
            <returns>
            <value>true</value> if the <see cref="T:GeoAPI.Geometries.IGeometry" /> is sequenced or is not lineal.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.Add(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:NetTopologySuite.Geometries.Geometry" />s to be sequenced.
            May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be extracted.
            </summary>
            <param name="geometries">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> of geometries to add.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a <see cref="T:NetTopologySuite.Geometries.Geometry" /> to be sequenced.
            May be called multiple times.
            Any dimension of <see cref="T:NetTopologySuite.Geometries.Geometry" /> may be added; 
            the constituent linework will be extracted.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl">
            <summary>
            A private implementation for <see cref="T:GeoAPI.Geometries.IGeometryComponentFilter" />
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl.#ctor(NetTopologySuite.Operation.Linemerge.LineSequencer)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl"/> class.
            </summary>
            <param name="sequencer">The sequencer.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            Performs an operation with or on <paramref name="component" />
            </summary>
            <param name="component">
            A <see cref="T:NetTopologySuite.Geometries.Geometry" /> to which the filter is applied.
            </param>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.IsSequenceable">
            <summary>
            Tests whether the arrangement of linestrings has a valid sequence.
            </summary>
            <returns><c>true</c> if a valid sequence exists.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.GetSequencedLineStrings">
            <summary>
            Returns the <see cref="T:NetTopologySuite.Geometries.LineString" /> or <see cref="T:NetTopologySuite.Geometries.MultiLineString" />
            built by the sequencing process, if one exists.
            </summary>
            <returns>The sequenced linestrings,
            or <c>null</c> if a valid sequence does not exist.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.HasSequence(NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            Tests whether a complete unique path exists in a graph
            using Euler's Theorem.
            </summary>
            <param name="graph">The <see cref="T:NetTopologySuite.Planargraph.Subgraph" /> containing the edges.</param>
            <returns><c>true</c> if a sequence exists.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.FindUnvisitedBestOrientedDE(NetTopologySuite.Planargraph.Node)">
            <summary>
            Finds an <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" /> for an unvisited edge (if any),
            choosing the <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" /> which preserves orientation, if possible.
            </summary>
            <param name="node">The <see cref="T:NetTopologySuite.Planargraph.Node" /> to examine.</param>
            <returns>
            The <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" /> found, 
            or <c>null</c> if none were unvisited.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.Orient(System.Collections.Generic.LinkedList{NetTopologySuite.Planargraph.DirectedEdge})">
            <summary>
            Computes a version of the sequence which is optimally
            oriented relative to the underlying geometry.
            <para>
            Heuristics used are:   
             - If the path has a degree-1 node which is the start
            node of an linestring, use that node as the start of the sequence.
             - If the path has a degree-1 node which is the end
            node of an linestring, use that node as the end of the sequence.
             - If the sequence has no degree-1 nodes, use any node as the start
            (NOTE: in this case could orient the sequence according to the majority of the
            linestring orientations).
            </para>
            </summary>
            <param name="seq">A <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s oriented appropriately.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.Reverse(System.Collections.Generic.IEnumerable{NetTopologySuite.Planargraph.DirectedEdge})">
            <summary>
            Reverse the sequence.
            This requires reversing the order of the <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s, 
            and flipping each <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" /> as well.
            </summary>
            <param name="seq">
            A enumeration of <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s, 
            in sequential order.
            </param>
            <returns>The reversed sequence.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Linemerge.LineSequencer.BuildSequencedGeometry(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{NetTopologySuite.Planargraph.DirectedEdge}})">
            <summary>
            Builds a geometry (<see cref="T:NetTopologySuite.Geometries.LineString" /> or <see cref="T:NetTopologySuite.Geometries.MultiLineString" />)
            representing the sequence.
            </summary>
            <param name="sequences">
            An enumeration of  <see cref="T:System.Collections.Generic.IList`1" />s of <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s
            with <see cref="T:NetTopologySuite.Operation.Linemerge.LineMergeEdge" />s as their parent edges.
            </param>
            <returns>
            The sequenced geometry, or <c>null</c> if no sequence exists.
            </returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.EdgeSetNoder">
            <summary>
            Nodes a set of edges.
            Takes one or more sets of edges and constructs a
            new set of edges consisting of all the split edges created by
            noding the input edges together.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.EdgeSetNoder.#ctor(NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            
            </summary>
            <param name="li"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.EdgeSetNoder.AddEdges(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Overlay.EdgeSetNoder.NodedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.LineBuilder">
            <summary>
            Forms NTS LineStrings out of a the graph of <c>DirectedEdge</c>s
            created by an <c>OverlayOp</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.#ctor(NetTopologySuite.Operation.Overlay.OverlayOp,GeoAPI.Geometries.IGeometryFactory,NetTopologySuite.Algorithm.PointLocator)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <param name="geometryFactory"></param>
            <param name="ptLocator"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.Build(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
            <returns>
            A list of the LineStrings in the result of the specified overlay operation.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.FindCoveredLineEdges">
            <summary>
            Find and mark L edges which are "covered" by the result area (if any).
            L edges at nodes which also have A edges can be checked by checking
            their depth at that node.
            L edges at nodes which do not have A edges can be checked by doing a
            point-in-polygon test with the previously computed result areas.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.CollectLines(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.CollectLineEdge(NetTopologySuite.GeometriesGraph.DirectedEdge,NetTopologySuite.Operation.Overlay.SpatialFunction,System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="opCode"></param>
            <param name="edges"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.CollectBoundaryTouchEdge(NetTopologySuite.GeometriesGraph.DirectedEdge,NetTopologySuite.Operation.Overlay.SpatialFunction,System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            Collect edges from Area inputs which should be in the result but
            which have not been included in a result area.
            This happens ONLY:
            during an intersection when the boundaries of two
            areas touch in a line segment
            OR as a result of a dimensional collapse.
            </summary>
            <param name="de"></param>
            <param name="opCode"></param>
            <param name="edges"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.BuildLines(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.LabelIsolatedLines(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="edgesList"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.LineBuilder.LabelIsolatedLine(NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary>
            Label an isolated node with its relationship to the target point.
            </summary>
            <param name="e"></param>
            <param name="targetIndex"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.MaximalEdgeRing">
            <summary>
            A ring of edges which may contain nodes of degree > 2.
            A MaximalEdgeRing may represent two different spatial entities:
            a single polygon possibly containing inversions (if the ring is oriented CW)
            a single hole possibly containing exversions (if the ring is oriented CCW)    
            If the MaximalEdgeRing represents a polygon,
            the interior of the polygon is strongly connected.
            These are the form of rings used to define polygons under some spatial data models.
            However, under the OGC SFS model, MinimalEdgeRings are required.
            A MaximalEdgeRing can be converted to a list of MinimalEdgeRings using the
            <c>BuildMinimalRings()</c> method.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MaximalEdgeRing.#ctor(NetTopologySuite.GeometriesGraph.DirectedEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MaximalEdgeRing.GetNext(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MaximalEdgeRing.SetEdgeRing(NetTopologySuite.GeometriesGraph.DirectedEdge,NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="er"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MaximalEdgeRing.LinkDirectedEdgesForMinimalEdgeRings">
            <summary> 
            For all nodes in this EdgeRing,
            link the DirectedEdges at the node to form minimalEdgeRings
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MaximalEdgeRing.BuildMinimalRings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.MinimalEdgeRing">
            <summary>
            A ring of edges with the property that no node
            has degree greater than 2.  These are the form of rings required
            to represent polygons under the OGC SFS spatial data model.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MinimalEdgeRing.#ctor(NetTopologySuite.GeometriesGraph.DirectedEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MinimalEdgeRing.GetNext(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.MinimalEdgeRing.SetEdgeRing(NetTopologySuite.GeometriesGraph.DirectedEdge,NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="er"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.OverlayNodeFactory">
            <summary>
            Creates nodes for use in the <c>PlanarGraph</c>s constructed during
            overlay operations.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayNodeFactory.CreateNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.SpatialFunction">
            <summary>
            The spatial functions supported by this class.
            These operations implement various bool combinations of the resultants of the overlay.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Overlay.SpatialFunction.Intersection">
            <summary>
            The code for the Intersection overlay operation
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Overlay.SpatialFunction.Union">
            <summary>
            The code for the Union overlay operation
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Overlay.SpatialFunction.Difference">
            <summary>
            The code for the Difference overlay operation
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Overlay.SpatialFunction.SymDifference">
            <summary>
            The code for the Symmetric Difference overlay operation
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.OverlayOp">
            <summary>
            Computes the geometric overlay of two <see cref="T:GeoAPI.Geometries.IGeometry"/>s.  The overlay
            can be used to determine any bool combination of the geometries.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Overlay.OverlayOp.NodingValidatorDisabled">
            <summary>
            Disable <see cref="T:NetTopologySuite.GeometriesGraph.EdgeNodingValidator"/> 
            when an intersection is made (<see cref="M:NetTopologySuite.Operation.Overlay.OverlayOp.ComputeOverlay(NetTopologySuite.Operation.Overlay.SpatialFunction)"/>), 
            so performances are dramatically improved but failures are not managed.
            </summary>
            <remarks>
            Use ay your own risk!
            </remarks>        
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.Overlay(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Computes an overlay operation 
            for the given geometry arguments.
            </summary>
            <param name="geom0">The first geometry argument</param>
            <param name="geom1">The second geometry argument</param>
            <param name="opCode">The code for the desired overlay operation</param>
            <returns>The result of the overlay operation</returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">Thrown if a robustness problem is encountered.</exception>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.IsResultOfOp(NetTopologySuite.GeometriesGraph.Label,NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Tests whether a point with a given topological <see cref="T:NetTopologySuite.GeometriesGraph.Label"/>
            relative to two geometries is contained in 
            the result of overlaying the geometries using
            a given overlay operation.
            <para/>
            The method handles arguments of <see cref="F:GeoAPI.Geometries.Location.Null"/> correctly
            </summary>
            <param name="label">The topological label of the point</param>
            <param name="overlayOpCode">The code for the overlay operation to test</param>
            <returns><c>true</c> if the label locations correspond to the overlayOpCode</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.IsResultOfOp(GeoAPI.Geometries.Location,GeoAPI.Geometries.Location,NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Tests whether a point with given <see cref="T:GeoAPI.Geometries.Location"/>s
            relative to two geometries is contained in 
            the result of overlaying the geometries using
            a given overlay operation.
            <para/>
            The method handles arguments of <see cref="F:GeoAPI.Geometries.Location.Null"/> correctly
            </summary>
            <param name="loc0">the code for the location in the first geometry </param>
            <param name="loc1">the code for the location in the second geometry</param>
            <param name="overlayOpCode">the code for the overlay operation to test</param>
            <returns><c>true</c> if the locations correspond to the overlayOpCode.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs an instance to compute a single overlay operation
            for the given geometries.
            </summary>
            <param name="g0">The first geometry argument</param>
            <param name="g1">The second geometry argument</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.GetResultGeometry(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Gets the result of the overlay for a given overlay operation.
            <para/>
            Note: this method can be called once only.
            </summary>
            <param name="overlayOpCode">The code of the overlay operation to perform</param>
            <returns>The computed result geometry</returns>
            <exception cref="T:NetTopologySuite.Geometries.TopologyException">Thrown if a robustness problem is encountered</exception>
        </member>
        <member name="P:NetTopologySuite.Operation.Overlay.OverlayOp.Graph">
            <summary>
            Gets the graph constructed to compute the overlay.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.InsertUniqueEdge(NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Insert an edge from one of the noded input graphs.
            Checks edges that are inserted to see if an
            identical edge already exists.
            If so, the edge is not inserted, but its label is merged
            with the existing edge.
            </summary>
            <param name="e">The edge to insert</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.ComputeLabelsFromDepths">
            <summary>
            Update the labels for edges according to their depths.
            For each edge, the depths are first normalized.
            Then, if the depths for the edge are equal,
            this edge must have collapsed into a line edge.
            If the depths are not equal, update the label
            with the locations corresponding to the depths
            (i.e. a depth of 0 corresponds to a Location of Exterior,
            a depth of 1 corresponds to Interior)
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.ReplaceCollapsedEdges">
            <summary>
            If edges which have undergone dimensional collapse are found,
            replace them with a new edge which is a L edge
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.CopyPoints(System.Int32)">
            <summary>
            Copy all nodes from an arg point into this graph.
            The node label in the arg point overrides any previously computed
            label for that argIndex.
            (E.g. a node may be an intersection node with
            a previously computed label of Boundary,
            but in the original arg Geometry it is actually
            in the interior due to the Boundary Determination Rule)
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.ComputeLabelling">
            <summary> 
            Compute initial labelling for all DirectedEdges at each node.
            In this step, DirectedEdges will acquire a complete labelling
            (i.e. one with labels for both Geometries)
            only if they
            are incident on a node which has edges for both Geometries
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.MergeSymLabels">
            <summary> 
            For nodes which have edges from only one Geometry incident on them,
            the previous step will have left their dirEdges with no labelling for the other
            Geometry.  However, the sym dirEdge may have a labelling for the other
            Geometry, so merge the two labels.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.LabelIncompleteNodes">
            <summary>
            Incomplete nodes are nodes whose labels are incomplete.
            (e.g. the location for one Geometry is null).
            These are either isolated nodes,
            or nodes which have edges from only a single Geometry incident on them.
            Isolated nodes are found because nodes in one graph which don't intersect
            nodes in the other are not completely labelled by the initial process
            of adding nodes to the nodeList.
            To complete the labelling we need to check for nodes that lie in the
            interior of edges, and in the interior of areas.
            When each node labelling is completed, the labelling of the incident
            edges is updated, to complete their labelling as well.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.LabelIncompleteNode(NetTopologySuite.GeometriesGraph.GraphComponent,System.Int32)">
            <summary>
            Label an isolated node with its relationship to the target point.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.FindResultAreaEdges(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Find all edges whose label indicates that they are in the result area(s),
            according to the operation being performed.  Since we want polygon shells to be
            oriented CW, choose dirEdges with the interior of the result on the RHS.
            Mark them as being in the result.
            Interior Area edges are the result of dimensional collapses.
            They do not form part of the result area boundary.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.CancelDuplicateResultEdges">
            <summary>
            If both a dirEdge and its sym are marked as being in the result, cancel
            them out.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.IsCoveredByLA(GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point node should be included in the result or not.
            </summary>
            <param name="coord">The point coordinate</param>
            <returns><c>true</c> if the coordinate point is covered by a result Line or Area geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.IsCoveredByA(GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if an L edge should be included in the result or not.
            </summary>
            <param name="coord">The point coordinate</param>
            <returns><c>true</c> if the coordinate point is covered by a result Area geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.IsCovered(GeoAPI.Geometries.Coordinate,System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <returns>
            <c>true</c> if the coord is located in the interior or boundary of
            a point in the list.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.OverlayOp.CreateEmptyResult(NetTopologySuite.Operation.Overlay.SpatialFunction,GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates an empty result geometry of the appropriate dimension,
            based on the given overlay operation and the dimensions of the inputs.
            The created geometry is always an atomic geometry, 
            not a collection.
            <para/>
            The empty result is constructed using the following rules:
            <list type="Bullet">
            <item><see cref="F:NetTopologySuite.Operation.Overlay.SpatialFunction.Intersection"/> - result has the dimension of the lowest input dimension</item>
            <item><see cref="F:NetTopologySuite.Operation.Overlay.SpatialFunction.Union"/> - result has the dimension of the highest input dimension</item>
            <item><see cref="F:NetTopologySuite.Operation.Overlay.SpatialFunction.Difference"/> - result has the dimension of the left-hand input</item>
            <item><see cref="F:NetTopologySuite.Operation.Overlay.SpatialFunction.SymDifference"/> - result has the dimension of the highest input dimension
            (since symDifference is the union of the differences).</item>
            </list>
            </summary>
            <param name="overlayOpCode">The overlay operation being performed</param>
            <param name="a">An input geometry</param>
            <param name="b">An input geometry</param>
            <param name="geomFact">The geometry factory being used for the operation</param>
            <returns>An empty atomic geometry of the appropriate dimension</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.PointBuilder">
            <summary>
            Constructs <c>Point</c>s from the nodes of an overlay graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PointBuilder.#ctor(NetTopologySuite.Operation.Overlay.OverlayOp,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="op">The operation</param>
            <param name="geometryFactory">The geometry factory</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PointBuilder.#ctor(NetTopologySuite.Operation.Overlay.OverlayOp,GeoAPI.Geometries.IGeometryFactory,NetTopologySuite.Algorithm.PointLocator)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="op">The operation</param>
            <param name="geometryFactory">The geometry factory</param>
            <param name="ptLocator">The point locator</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PointBuilder.Build(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Computes the Point geometries which will appear in the result,
            given the specified overlay operation.
            </summary>
            <param name="opCode">The spatial function</param>
            <returns>
            A list of the Points in the result.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PointBuilder.ExtractNonCoveredResultNodes(NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Determines nodes which are in the result, and creates <see cref="T:GeoAPI.Geometries.IPoint"/>s for them.
            </summary>
            <remarks>
            This method determines nodes which are candidates for the result via their
            labelling and their graph topology.
            </remarks>
            <param name="opCode">The overlay operation</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PointBuilder.FilterCoveredNodeToPoint(NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            Converts non-covered nodes to Point objects and adds them to the result.
            </summary>
            <remarks>
            A node is covered if it is contained in another element Geometry
            with higher dimension (e.g. a node point might be contained in a polygon,
            in which case the point can be eliminated from the result).
            </remarks>
            <param name="n">The node to test</param>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.PolygonBuilder">
            <summary>
            Forms <c>Polygon</c>s out of a graph of {DirectedEdge}s.
            The edges to use are marked as being in the result Area.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.Add(NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            Add a complete graph.
            The graph is assumed to contain one or more polygons,
            possibly with holes.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.Add(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeEnd},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.Node})">
            <summary> 
            Add a set of edges and nodes, which form a graph.
            The graph is assumed to contain one or more polygons,
            possibly with holes.
            </summary>
            <param name="dirEdges"></param>
            <param name="nodes"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Overlay.PolygonBuilder.Polygons">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.BuildMaximalEdgeRings(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeEnd})">
            <summary> 
            For all DirectedEdges in result, form them into MaximalEdgeRings.
            </summary>
            <param name="dirEdges"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.BuildMinimalEdgeRings(System.Collections.Generic.List{NetTopologySuite.GeometriesGraph.EdgeRing},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeRing},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary>
            
            </summary>
            <param name="maxEdgeRings"></param>
            <param name="shellList"></param>
            <param name="freeHoleList"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.FindShell(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary>
            This method takes a list of MinimalEdgeRings derived from a MaximalEdgeRing,
            and tests whether they form a Polygon.  This is the case if there is a single shell
            in the list.  In this case the shell is returned.
            The other possibility is that they are a series of connected holes, in which case
            no shell is returned.
            </summary>
            <returns>The shell EdgeRing, if there is one<br/> or
            <value>null</value>, if all the rings are holes.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.PlacePolygonHoles(NetTopologySuite.GeometriesGraph.EdgeRing,System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary>
            This method assigns the holes for a Polygon (formed from a list of
            MinimalEdgeRings) to its shell.
            Determining the holes for a MinimalEdgeRing polygon serves two purposes:
            it is faster than using a point-in-polygon check later on.
            it ensures correctness, since if the PIP test was used the point
            chosen might lie on the shell, which might return an incorrect result from the
            PIP test.
            </summary>
            <param name="shell"></param>
            <param name="minEdgeRings"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.SortShellsAndHoles(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeRing},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeRing},System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary> 
            For all rings in the input list,
            determine whether the ring is a shell or a hole
            and add it to the appropriate list.
            Due to the way the DirectedEdges were linked,
            a ring is a shell if it is oriented CW, a hole otherwise.
            </summary>
            <param name="edgeRings"></param>
            <param name="shellList"></param>
            <param name="freeHoleList"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.PlaceFreeHoles(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeRing},System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary>
            This method determines finds a containing shell for all holes
            which have not yet been assigned to a shell.
            These "free" holes should
            all be properly contained in their parent shells, so it is safe to use the
            <c>findEdgeRingContaining</c> method.
            (This is the case because any holes which are NOT
            properly contained (i.e. are connected to their
            parent shell) would have formed part of a MaximalEdgeRing
            and been handled in a previous step).
            </summary>
            <param name="shellList"></param>
            <param name="freeHoleList"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.FindEdgeRingContaining(NetTopologySuite.GeometriesGraph.EdgeRing,System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary> 
            Find the innermost enclosing shell EdgeRing containing the argument EdgeRing, if any.
            The innermost enclosing ring is the <i>smallest</i> enclosing ring.
            The algorithm used depends on the fact that:
            ring A contains ring B iff envelope(ring A) contains envelope(ring B).
            This routine is only safe to use if the chosen point of the hole
            is known to be properly contained in a shell
            (which is guaranteed to be the case if the hole does not touch its shell).
            </summary>
            <param name="testEr"></param>
            <param name="shellList"></param>
            <returns>Containing EdgeRing, if there is one <br/> or
            <value>null</value> if no containing EdgeRing is found.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.ComputePolygons(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary>
            
            </summary>
            <param name="shellList"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.PolygonBuilder.ContainsPoint(GeoAPI.Geometries.Coordinate)">
            <summary> 
            Checks the current set of shells (with their associated holes) to
            see if any of them contain the point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper">
            <summary>
            Snaps the vertices and segments of a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            to another Geometry's vertices.
            A snap distance tolerance is used to control where snapping is performed.
            Snapping one geometry to another can improve
            robustness for overlay operations by eliminating
            nearly-coincident edges
            (which cause problems during noding and intersection calculation).
            It can also be used to eliminate artifacts such as narrow slivers, spikes and gores.
            Too much snapping can result in invalid topology
            beging created, so the number and location of snapped vertices
            is decided using heuristics to determine when it
            is safe to snap.
            This can result in some potential snaps being omitted, however.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeOverlaySnapTolerance(GeoAPI.Geometries.IGeometry)">
            <summary>
            Estimates the snap tolerance for a Geometry, taking into account its precision model.
            </summary>
            <param name="g"></param>
            <returns>The estimated snap tolerance</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeSizeBasedSnapTolerance(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeOverlaySnapTolerance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.Snap(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Snaps two geometries together with a given tolerance.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="snapTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.SnapToSelf(GeoAPI.Geometries.IGeometry,System.Double,System.Boolean)">
            <summary>
            Snaps a geometry to itself.
            Allows optionally cleaning the result to ensure it is topologically valid
            (which fixes issues such as topology collapses in polygonal inputs).
            Snapping a geometry to itself can remove artifacts such as very narrow slivers, gores and spikes.
            </summary>
            <param name="geom">the geometry to snap</param>
            <param name="snapTolerance">the snapping tolerance</param>
            <param name="cleanResult">whether the result should be made valid</param>
            <returns>a new snapped <see cref="T:GeoAPI.Geometries.IGeometry"/></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new snapper acting on the given geometry
            </summary>
            <param name="g">the geometry to snap</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.SnapTo(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
             Snaps the vertices in the component <see cref="T:GeoAPI.Geometries.ILineString" />s
             of the source geometry to the vertices of the given snap geometry.
            </summary>
            <param name="g">a geometry to snap the source to</param>
            <param name="tolerance"></param>
            <returns>a new snapped Geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.SnapToSelf(System.Double,System.Boolean)">
            Snaps the vertices in the component <see cref="T:GeoAPI.Geometries.ILineString" />s
            of the source geometry to the vertices of the same geometry.
            Allows optionally cleaning the result to ensure it is topologically valid
            (which fixes issues such as topology collapses in polygonal inputs).
            <param name="snapTolerance">The snapping tolerance</param>
            <param name="cleanResult">Whether the result should be made valid</param>
            <returns>The geometry snapped to itself</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ExtractTargetCoordinates(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeSnapTolerance(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Computes the snap tolerance based on the input geometries.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Snap.SnapTransformer">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapTransformer.#ctor(System.Double,GeoAPI.Geometries.Coordinate[])">
             <summary>
            
             </summary>
             <param name="snapTolerance"></param>
             <param name="snapPts"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="coords"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapTransformer.SnapLine(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
             <summary>
            
             </summary>
             <param name="srcPts"></param>
             <param name="snapPts"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper">
            <summary>
            Snaps the vertices and segments of a <see cref="T:GeoAPI.Geometries.ILineString"/>
             to a set of target snap vertices.
            A snap distance tolerance is used to control where snapping is performed.
            <para/>The implementation handles empty geometry and empty snap vertex sets.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.#ctor(GeoAPI.Geometries.ILineString,System.Double)">
            <summary>
            Creates a new snapper using the points in the given <see cref="T:NetTopologySuite.Geometries.LineString"/>
            as target snap points.
            </summary>
            <param name="srcLine">A LineString to snap (may be empty)</param>
            <param name="snapTolerance">the snap tolerance to use</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.#ctor(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            Creates a new snapper using the given points
            as source points to be snapped.
            </summary>
            <param name="srcPts"></param>
            <param name="snapTolerance"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.SnapTo(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Snaps the vertices and segments of the source LineString
            to the given set of snap points.
            </summary>
            <param name="snapPts">the vertices to snap to</param>
            <returns>list of the snapped points</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.SnapVertices(NetTopologySuite.Geometries.CoordinateList,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Snap source vertices to vertices in the target.
            </summary>
            <param name="srcCoords">the points to snap</param>
            <param name="snapPts">the points to snap to</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.FindSnapForVertex(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
             <summary>
            
             </summary>
             <param name="pt"></param>
             <param name="snapPts"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.SnapSegments(NetTopologySuite.Geometries.CoordinateList,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Snap segments of the source to nearby snap vertices.<para/>
            Source segments are "cracked" at a snap vertex.
            A single input segment may be snapped several times
            to different snap vertices.<para/>
            For each distinct snap vertex, at most one source segment
            is snapped to.  This prevents "cracking" multiple segments
            at the same point, which would likely cause
            topology collapse when being used on polygonal linework.
            </summary>
            <param name="srcCoords">The coordinates of the source linestring to snap</param>
            <param name="snapPts">The target snap vertices</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.FindSegmentIndexToSnap(GeoAPI.Geometries.Coordinate,NetTopologySuite.Geometries.CoordinateList)">
            <summary>
            Finds a src segment which snaps to (is close to) the given snap point<para/>
            Only a single segment is selected for snapping.
            This prevents multiple segments snapping to the same snap vertex,
            which would almost certainly cause invalid geometry
            to be created.
            (The heuristic approach of snapping used here
            is really only appropriate when
            snap pts snap to a unique spot on the src geometry)<para/>
            Also, if the snap vertex occurs as a vertex in the src coordinate list,
            no snapping is performed.
            </summary>
            <param name="snapPt">The point to snap to</param>
            <param name="srcCoords">The source segment coordinates</param>
            <returns>The index of the snapped segment <br/>
            or -1 if no segment snaps to the snap point.</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp">
            <summary>
            Performs an overlay operation using snapping and enhanced precision
            to improve the robustness of the result.
            This class only uses snapping
            if an error is detected when running the standard JTS overlay code.
            Errors detected include thrown exceptions
            (in particular, <see cref="T:NetTopologySuite.Geometries.TopologyException" />)
            and invalid overlay computations.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp">
            <summary>
            Performs an overlay operation using snapping and enhanced precision
            to improve the robustness of the result.
            This class always uses snapping.
            This is less performant than the standard JTS overlay code,
            and may even introduce errors which were not present in the original data.
            For this reason, this class should only be used
            if the standard overlay code fails to produce a correct result.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Overlay(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,NetTopologySuite.Operation.Overlay.SpatialFunction)">
             <summary>
            
             </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <param name="opCode"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.SymDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g1"></param>
             <param name="g2"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.ComputeSnapTolerance">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.GetResultGeometry(NetTopologySuite.Operation.Overlay.SpatialFunction)">
             <summary>
            
             </summary>
             <param name="opCode"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Snap(GeoAPI.Geometries.IGeometry[])">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.PrepareResult(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.RemoveCommonBits(GeoAPI.Geometries.IGeometry[])">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.CheckValid(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="g"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Validate.FuzzyPointLocator">
            <summary>
             Finds the most likely <see cref="T:GeoAPI.Geometries.Location"/> of a point relative to
             the polygonal components of a geometry, using a tolerance value.
            </summary> 
            <remarks>
             If a point is not clearly in the Interior or Exterior,
             it is considered to be on the Boundary.
             In other words, if the point is within the tolerance of the Boundary,
             it is considered to be on the Boundary; otherwise,
             whether it is Interior or Exterior is determined directly.
            </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Validate.FuzzyPointLocator.ExtractLinework(GeoAPI.Geometries.IGeometry)">
            <summary>
             Extracts linework for polygonal components.
            </summary>
            <param name="g">The geometry from which to extract</param>
            <returns>A lineal geometry containing the extracted linework</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Validate.PolygonalLineworkExtracter">
            <summary>
             Extracts the LineStrings in the boundaries of all the polygonal elements in the target <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Validate.PolygonalLineworkExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
             Filters out all linework for polygonal elements
             </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Overlay.Validate.PolygonalLineworkExtracter.Linework">
            <summary>
             Gets the list of polygonal linework.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator">
            <summary>
             Generates points offset by a given distance from both sides of the midpoint of all segments in a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <remarks>
             <para>
             Can be used to generate probe points for determining whether a polygonal overlay result is incorrect.
             </para>
             <para>
             The input geometry may have any orientation for its rings,
             but <see cref="M:NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator.SetSidesToGenerate(System.Boolean,System.Boolean)"/> is
             only meaningful if the orientation is known.
             </para>
            </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator.SetSidesToGenerate(System.Boolean,System.Boolean)">
            Set the sides on which to generate offset points.
            
            @param doLeft
            @param doRight
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator.GetPoints(System.Double)">
            <summary>
             Gets the computed offset points.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Overlay.Validate.OffsetPointGenerator.ComputeOffsetPoints(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Double,System.Collections.Generic.IList{GeoAPI.Geometries.Coordinate})">
            <summary>
             Generates the two points which are offset from the
             midpoint of the segment <c>(p0, p1)</c> by the <c>offsetDistance</c>
            </summary>
             <param name="p0">The first point of the segment to offset from.</param>
             <param name="p1">The second point of the segment to offset from</param>
            <param name="offsetDistance"></param>
            <param name="offsetPts"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Overlay.Validate.OverlayResultValidator">
            <summary>
             Validates that the result of an overlay operation is geometrically correct within a determined tolerance.
             Uses fuzzy point location to find points which are
             definitely in either the interior or exterior of the result
             geometry, and compares these results with the expected ones.
            </summary>
             <remarks>
             This algorithm is only useful where the inputs are polygonal.
             This is a heuristic test, and may return false positive results
             (I.e. it may fail to detect an invalid result.)
             It should never return a false negative result, however
             (I.e. it should never report a valid result as invalid.)
             </remarks>
             <author>Martin Davis</author>
             <see cref="T:NetTopologySuite.Operation.Overlay.OverlayOp"/>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.EdgeRing">
            <summary>
            Represents a ring of <c>PolygonizeDirectedEdge</c>s which form
            a ring of a polygon.  The ring may be either an outer shell or a hole.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.FindEdgeRingContaining(NetTopologySuite.Operation.Polygonize.EdgeRing,System.Collections.Generic.IList{NetTopologySuite.Operation.Polygonize.EdgeRing})">
            <summary>
            Find the innermost enclosing shell EdgeRing containing the argument EdgeRing, if any.
            The innermost enclosing ring is the <i>smallest</i> enclosing ring.
            The algorithm used depends on the fact that:
            ring A contains ring B iff envelope(ring A) contains envelope(ring B).
            This routine is only safe to use if the chosen point of the hole
            is known to be properly contained in a shell
            (which is guaranteed to be the case if the hole does not touch its shell).
            </summary>
            <param name="shellList"></param>
            <param name="testEr"></param>
            <returns>Containing EdgeRing, if there is one <br/>
            or <value>null</value> if no containing EdgeRing is found.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.PointNotInList(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate[])">
            <summary>
            Finds a point in a list of points which is not contained in another list of points.
            </summary>
            <param name="testPts">The <c>Coordinate</c>s to test.</param>
            <param name="pts">An array of <c>Coordinate</c>s to test the input points against.</param>
            <returns>A <c>Coordinate</c> from <c>testPts</c> which is not in <c>pts</c>, <br/>
            or <value>null</value>.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.IsInList(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate[])">
            <summary>
            Tests whether a given point is in an array of points.
            Uses a value-based test.
            </summary>
            <param name="pt">A <c>Coordinate</c> for the test point.</param>
            <param name="pts">An array of <c>Coordinate</c>s to test,</param>
            <returns><c>true</c> if the point is in the array.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.FindDirEdgesInRing(NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge)">
             Traverses a ring of DirectedEdges, accumulating them into a list.
             This assumes that all dangling directed edges have been removed
             from the graph, so that there is always a next dirEdge.
            
             @param startDE the DirectedEdge to start traversing at
             @return a List of DirectedEdges that form a ring
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.Add(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds a DirectedEdge which is known to form part of this ring.
            </summary>
            <param name="de">The DirectedEdge to add.</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.IsHole">
            <summary>
            Tests whether this ring is a hole.
            Due to the way the edges in the polyongization graph are linked,
            a ring is a hole if it is oriented counter-clockwise.
            </summary>
            <returns><c>true</c> if this ring is a hole.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.ComputeHole">
            <summary>
             Computes whether this ring is a hole.
             Due to the way the edges in the polyongization graph are linked,
             a ring is a hole if it is oriented counter-clockwise.
             </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.AddHole(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Adds a hole to the polygon formed by this ring.
            </summary>
            <param name="hole">The LinearRing forming the hole.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.AddHole(NetTopologySuite.Operation.Polygonize.EdgeRing)">
            <summary>
            Adds a hole to the polygon formed by this ring.
            </summary>
            <param name="holeER">the <see cref="T:GeoAPI.Geometries.ILinearRing"/> forming the hole.</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.Polygon">
            <summary>
            Computes and returns the Polygon formed by this ring and any contained holes.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.IsValid">
            <summary>
            Tests if the <see cref="T:GeoAPI.Geometries.ILinearRing" /> ring formed by this edge ring is topologically valid.
            </summary>
            <return>true if the ring is valid.</return>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.Coordinates">
            <summary>
            Computes and returns the list of coordinates which are contained in this ring.
            The coordinatea are computed once only and cached.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.LineString">
            <summary>
            Gets the coordinates for this ring as a <c>LineString</c>.
            Used to return the coordinates in this ring
            as a valid point, when it has been detected that the ring is topologically
            invalid.
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.Ring">
            <summary>
            Returns this ring as a LinearRing, or null if an Exception occurs while
            creating it (such as a topology problem). Details of problems are written to
            standard output.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.AddEdge(GeoAPI.Geometries.Coordinate[],System.Boolean,NetTopologySuite.Geometries.CoordinateList)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="isForward"></param>
            <param name="coordList"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.Shell">
            <summary>
            Gets or sets a value indicating the containing shell ring of a ring that has been determined to be a hole.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.HasShell">
            <summary>
            Gets a value indicating whether this ring has a shell assigned to it.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.IsOuterHole">
            <summary>
            Tests whether this ring is an outer hole.
            A hole is an outer hole if it is not contained by a shell.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.IsOuterShell">
            <summary>
            Tests whether this ring is an outer shell.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.UpdateIncluded">
            <summary>
            Updates the included status for currently non-included shells
            based on whether they are adjacent to an included shell.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.EdgeRing.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.EdgeRing.IsProcessed">
            <summary>
            Gets or sets a value indicating whether this ring has been processed.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.EdgeRing.EnvelopeComparator">
            <summary>
            Compares EdgeRings based on their envelope,
            using the standard lexicographic ordering.
            This ordering is sufficient to make edge ring sorting deterministic.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge">
            <summary>
            A <c>DirectedEdge</c> of a <c>PolygonizeGraph</c>, which represents
            an edge of a polygon formed by the graph.
            May be logically deleted from the graph by setting the <c>marked</c> flag.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.#ctor(NetTopologySuite.Planargraph.Node,NetTopologySuite.Planargraph.Node,GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Constructs a directed edge connecting the <c>from</c> node to the
            <c>to</c> node.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionPt">
            Specifies this DirectedEdge's direction (given by an imaginary
            line from the <c>from</c> node to <c>directionPt</c>).
            </param>
            <param name="edgeDirection">
            Whether this DirectedEdge's direction is the same as or
            opposite to that of the parent Edge (if any).
            </param>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.Label">
            <summary> 
            Returns the identifier attached to this directed edge.
            Attaches an identifier to this directed edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.Next">
            <summary>
            Returns the next directed edge in the EdgeRing that this directed edge is a member of.
            Sets the next directed edge in the EdgeRing that this directed edge is a member of.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.IsInRing">
            <summary>
            Returns the ring of directed edges that this directed edge is
            a member of, or null if the ring has not been set.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.Ring">
            <summary> 
            Gets/Sets the ring of directed edges that this directed edge is
            a member of.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.PolygonizeEdge">
            <summary>
            An edge of a polygonization graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeEdge.#ctor(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.PolygonizeEdge.Line">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.PolygonizeGraph">
            <summary>
            Represents a planar graph of edges that can be used to compute a
            polygonization, and implements the algorithms to compute the
            EdgeRings formed by the graph.
            The marked flag on DirectedEdges is used to indicate that a directed edge
            has be logically deleted from the graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetDegreeNonDeleted(NetTopologySuite.Planargraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetDegree(NetTopologySuite.Planargraph.Node,System.Int64)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.DeleteAllEdges(NetTopologySuite.Planargraph.Node)">
            <summary>
            Deletes all edges at a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a new polygonization graph.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.AddEdge(GeoAPI.Geometries.ILineString)">
            <summary>
            Add a <c>LineString</c> forming an edge of the polygon graph.
            </summary>
            <param name="line">The line to add.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeNextCWEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ConvertMaximalToMinimalEdgeRings(System.Collections.Generic.IEnumerable{NetTopologySuite.Planargraph.DirectedEdge})">
            <summary>
            Convert the maximal edge rings found by the initial graph traversal
            into the minimal edge rings required by NTS polygon topology rules.
            </summary>
            <param name="ringEdges">The list of start edges for the edgeRings to convert.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindIntersectionNodes(NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge,System.Int64)">
            <summary>
            Finds all nodes in a maximal edgering which are self-intersection nodes
            </summary>
            <param name="startDE"></param>
            <param name="label"></param>
            <returns> 
            The list of intersection nodes found,
            or null if no intersection nodes were found.       
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetEdgeRings">
            <summary>
            Computes the minimal EdgeRings formed by the edges in this graph.        
            </summary>
            <returns>A list of the{EdgeRings found by the polygonization process.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindLabeledEdgeRings(System.Collections.Generic.IEnumerable{NetTopologySuite.Planargraph.DirectedEdge})">
            <summary>
            Finds and labels all edgerings in the graph.
            The edge rings are labeling with unique integers.
            The labeling allows detecting cut edges.
            </summary>
            <param name="dirEdges">A List of the DirectedEdges in the graph.</param>
            <returns>A List of DirectedEdges, one for each edge ring found.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.DeleteCutEdges">
            <summary>
            Finds and removes all cut edges from the graph.
            </summary>
            <returns>A list of the <c>LineString</c>s forming the removed cut edges.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.Label(System.Collections.Generic.IEnumerable{NetTopologySuite.Planargraph.DirectedEdge},System.Int64)">
            <summary>
            
            </summary>
            <param name="dirEdges"></param>
            <param name="label"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeNextCWEdges(NetTopologySuite.Planargraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeNextCCWEdges(NetTopologySuite.Planargraph.Node,System.Int64)">
            <summary>
            Computes the next edge pointers going CCW around the given node, for the
            given edgering label.
            This algorithm has the effect of converting maximal edgerings into minimal edgerings
            </summary>
            <param name="node"></param>
            <param name="label"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindEdgeRing(NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge)">
            <summary>
            
            </summary>
            <param name="startDE"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.DeleteDangles">
            <summary>
            Marks all edges from the graph which are "dangles".
            Dangles are which are incident on a node with degree 1.
            This process is recursive, since removing a dangling edge
            may result in another edge becoming a dangle.
            In order to handle large recursion depths efficiently,
            an explicit recursion stack is used.
            </summary>
            <returns>A List containing the <see cref="T:GeoAPI.Geometries.ILineString"/>s that formed dangles.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeDepthParity">
            <summary>
            Traverses the polygonized edge rings in the graph
            and computes the depth parity (odd or even)
            relative to the exterior of the graph.
            
            If the client has requested that the output
            be polygonally valid, only odd polygons will be constructed. 
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeDepthParity(NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge)">
            <summary>
             Traverses all connected edges, computing the depth parity of the associated polygons.
            </summary>
             <param name="de"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.Polygonizer">
            <summary>
            Polygonizes a set of <see cref="T:GeoAPI.Geometries.IGeometry"/>s which contain linework that
            represents the edges of a planar graph.
            </summary>
            <remarks>
            <para>All types of Geometry are accepted as input;
            the constituent linework is extracted as the edges to be polygonized.
            The processed edges must be correctly noded; that is, they must only meet
            at their endpoints. Polygonization will accept incorrectly noded input
            but will not form polygons from non-noded edges, 
            and reports them as errors.
            </para><para>
            The Polygonizer reports the follow kinds of errors:
            Dangles - edges which have one or both ends which are not incident on another edge endpoint
            Cut Edges - edges which are connected at both ends but which do not form part of polygon
            Invalid Ring Lines - edges which form rings which are invalid
            (e.g. the component lines contain a self-intersection).</para>
            <para>
            Polygonization supports extracting only polygons which form a valid polygonal geometry.
            The set of extracted polygons is guaranteed to be edge-disjoint.
            This is useful for situations where it is known that the input lines form a
            valid polygonal geometry.</para>
            </remarks>
            
        </member>
        <member name="F:NetTopologySuite.Operation.Polygonize.Polygonizer.AllPolys">
            <summary>
            The default polygonizer output behavior
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Polygonize.Polygonizer.LineStringAdder">
            <summary>
            Adds every linear element in a <see cref="T:GeoAPI.Geometries.IGeometry"/> into the polygonizer graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.LineStringAdder.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            Filters all <see cref="T:GeoAPI.Geometries.ILineString"/> geometry instances
            </summary>
            <param name="g">The geometry instance</param>
        </member>
        <member name="F:NetTopologySuite.Operation.Polygonize.Polygonizer._lineStringAdder">
            <summary>
            Default linestring adder.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Polygonize.Polygonizer.IsCheckingRingsValid">
            <summary>
            Allows disabling the valid ring checking, 
            to optimize situations where invalid rings are not expected.
            </summary>
            <remarks>The default is <c>true</c></remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.#ctor">
            <summary>
            Creates a polygonizer with the same <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>
            as the input <c>Geometry</c>s.
            The output mask is <see cref="F:NetTopologySuite.Operation.Polygonize.Polygonizer.AllPolys"/>
            </summary>
            
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.#ctor(System.Boolean)">
            <summary>
            Creates a polygonizer and allow specifyng if only polygons which form a valid polygonal geometry are to be extracted.
            </summary>
            <param name="extractOnlyPolygonal"><value>true</value> if only polygons which form a valid polygonal geometry are to be extracted</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.Add(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Adds a collection of <see cref="T:GeoAPI.Geometries.IGeometry"/>s to be polygonized.
            May be called multiple times.
            Any dimension of Geometry may be added;
            the constituent linework will be extracted and used.
            </summary>
            <param name="geomList">A list of <c>Geometry</c>s with linework to be polygonized.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a <see cref="T:GeoAPI.Geometries.IGeometry"/> to the linework to be polygonized.
            May be called multiple times.
            Any dimension of Geometry may be added;
            the constituent linework will be extracted and used
            </summary>
            <param name="g">A <c>Geometry</c> with linework to be polygonized.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.Add(GeoAPI.Geometries.ILineString)">
            <summary>
            Adds a  to the graph of polygon edges.
            </summary>
            <param name="line">The <see cref="T:GeoAPI.Geometries.ILineString"/> to add.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.GetPolygons">
            <summary>
            Gets the list of polygons formed by the polygonization.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.GetGeometry">
            <summary>
            Gets a geometry representing the polygons formed by the polygonization.
            If a valid polygonal geometry was extracted the result is a <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometry. 
            </summary>
            <returns>A geometry containing the polygons</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.GetDangles">
            <summary> 
            Gets the list of dangling lines found during polygonization.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.GetCutEdges">
            <summary>
            Gets the list of cut edges found during polygonization.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.GetInvalidRingLines">
            <summary>
            Gets the list of lines forming invalid rings found during polygonization.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.Polygonize">
            <summary>
            Performs the polygonization, if it has not already been carried out.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Polygonize.Polygonizer.FindOuterShells(System.Collections.Generic.List{NetTopologySuite.Operation.Polygonize.EdgeRing})">
            <summary>
            For each outer hole finds and includes a single outer shell.
            This seeds the travesal algorithm for finding only polygonal shells.
            </summary>
            <param name="shellList">The list of shell EdgeRings</param>
        </member>
        <member name="T:NetTopologySuite.Operation.Predicate.RectangleContains">
            <summary>
            Optimized implementation of spatial predicate "contains"
            for cases where the first <c>Geometry</c> is a rectangle.    
            As a further optimization,
            this class can be used directly to test many geometries against a single rectangle.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.Contains(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            Create a new contains computer for two geometries.
            </summary>
            <param name="rectangle">A rectangular geometry.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.Contains(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.IsContainedInBoundary(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.IsPointContainedInBoundary(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.IsPointContainedInBoundary(GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point is contained in the boundary of the target rectangle.
            </summary>
            <param name="pt">the point to test</param>
            <returns>true if the point is contained in the boundary</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.IsLineStringContainedInBoundary(GeoAPI.Geometries.ILineString)">
            <summary>
            Tests if a linestring is completely contained in the boundary of the target rectangle.
            </summary>
            <param name="line">the linestring to test</param>
            <returns>true if the linestring is contained in the boundary</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleContains.IsLineSegmentContainedInBoundary(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a line segment is contained in the boundary of the target rectangle.
            </summary>
            <param name="p0">an endpoint of the segment</param>
            <param name="p1">an endpoint of the segment</param>
            <returns>true if the line segment is contained in the boundary</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Predicate.RectangleIntersects">
            <summary>I
            Implementation of the <tt>Intersects</tt> spatial predicate
            optimized for the case where one <see cref="T:GeoAPI.Geometries.IGeometry"/> is a rectangle. 
            </summary>
            <remarks>
            This class works for all input geometries, including <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>s.
            <para/>
            As a further optimization, this class can be used in batch style
            to test many geometries against a single rectangle.
            </remarks>
        </member>
        <member name="F:NetTopologySuite.Operation.Predicate.RectangleIntersects.MaximumScanSegmentCount">
            <summary>     
            Crossover size at which brute-force intersection scanning
            is slower than indexed intersection detection.
            Must be determined empirically.  Should err on the
            safe side by making value smaller rather than larger.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleIntersects.Intersects(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether a rectangle intersects a given geometry.
            </summary>
            <param name="rectangle">A rectangular polygon</param>
            <param name="b">A geometry of any kind</param>
            <returns><c>true</c> if the geometries intersect.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleIntersects.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            Create a new intersects computer for a rectangle.
            </summary>
            <param name="rectangle">A rectangular polygon.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleIntersects.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether the given Geometry intersects the query rectangle.
            </summary>
            <param name="geom">The Geometry to test (may be of any type)</param>
            <returns><value>true</value> if an intersection must occur 
            or <value>false</value> if no conclusion about intersection can be made</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor">
            <summary>
            Tests whether it can be concluded that a rectangle intersects a geometry,
            based on the relationship of the envelope(s) of the geometry.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.#ctor(GeoAPI.Geometries.Envelope)">
            <summary>
            Creates an instance of this class using the provided <c>Envelope</c>
            </summary>
            <param name="rectEnv">The query envelope</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.Intersects">
            <summary>
            Reports whether it can be concluded that an intersection occurs, 
            or whether further testing is required.
            </summary>
            <returns><c>true</c> if an intersection must occur <br/> 
            or <c>false</c> if no conclusion about intersection can be made</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Predicate.GeometryContainsPointVisitor">
            <summary>
            A visitor which tests whether it can be 
            concluded that a geometry contains a vertex of
            a query geometry.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.GeometryContainsPointVisitor.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Predicate.GeometryContainsPointVisitor.ContainsPoint">
            <summary>
            Gets a value indicating whether it can be concluded that a corner point of the rectangle is
            contained in the geometry, or whether further testing is required.
            </summary>
            <returns><value>true</value> if a corner point is contained 
            or <value>false</value> if no conclusion about intersection can be made
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.GeometryContainsPointVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.GeometryContainsPointVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Predicate.RectangleIntersectsSegmentVisitor">
            <summary>
            A visitor to test for intersection between the query rectangle and the line segments of the geometry.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.RectangleIntersectsSegmentVisitor.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            Creates a visitor for checking rectangle intersection with segments
            </summary>
            <param name="rectangle">the query rectangle </param>
        </member>
        <member name="P:NetTopologySuite.Operation.Predicate.RectangleIntersectsSegmentVisitor.Intersects">
            <summary>Reports whether any segment intersection exists.</summary>
            <returns>true if a segment intersection exists or
            false if no segment intersection exists</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Predicate.SegmentIntersectionTester">
            <summary>
            Tests if any line segments in two sets of <see cref="T:NetTopologySuite.Geometries.CoordinateSequences"/> intersect.
            Optimized for use when at least one input is of small size.
            Short-circuited to return as soon an intersection is found.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.HasIntersectionWithLineStrings(GeoAPI.Geometries.ICoordinateSequence,System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.HasIntersection(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            
            </summary>
            <param name="seq0"></param>
            <param name="seq1"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.EdgeEndBuilder">
            <summary> 
            An EdgeEndBuilder creates EdgeEnds for all the "split edges"
            created by the intersections determined for an Edge.
            Computes the <c>EdgeEnd</c>s which arise from a noded <c>Edge</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBuilder.ComputeEdgeEnds(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.Edge})">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBuilder.ComputeEdgeEnds(NetTopologySuite.GeometriesGraph.Edge,System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeEnd})">
            <summary>
            Creates stub edges for all the intersections in this
            Edge (if any) and inserts them into the graph.
            </summary>
            <param name="edge"></param>
            <param name="l"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBuilder.CreateEdgeEndForPrev(NetTopologySuite.GeometriesGraph.Edge,System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeEnd},NetTopologySuite.GeometriesGraph.EdgeIntersection,NetTopologySuite.GeometriesGraph.EdgeIntersection)">
            <summary>
            Create a EdgeStub for the edge before the intersection eiCurr.
            The previous intersection is provided
            in case it is the endpoint for the stub edge.
            Otherwise, the previous point from the parent edge will be the endpoint.
            eiCurr will always be an EdgeIntersection, but eiPrev may be null.
            </summary>
            <param name="edge"></param>
            <param name="l"></param>
            <param name="eiCurr"></param>
            <param name="eiPrev"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBuilder.CreateEdgeEndForNext(NetTopologySuite.GeometriesGraph.Edge,System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeEnd},NetTopologySuite.GeometriesGraph.EdgeIntersection,NetTopologySuite.GeometriesGraph.EdgeIntersection)">
            <summary>
            Create a StubEdge for the edge after the intersection eiCurr.
            The next intersection is provided
            in case it is the endpoint for the stub edge.
            Otherwise, the next point from the parent edge will be the endpoint.
            eiCurr will always be an EdgeIntersection, but eiNext may be null.
            </summary>
            <param name="edge"></param>
            <param name="l"></param>
            <param name="eiCurr"></param>
            <param name="eiNext"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.EdgeEndBundle">
            <summary>
            A collection of EdgeStubs which obey the following invariant:
            They originate at the same node and have the same direction.
            Contains all <c>EdgeEnd</c>s which start at the same point and are parallel.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.#ctor(NetTopologySuite.Algorithm.IBoundaryNodeRule,NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="boundaryNodeRule"></param>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Operation.Relate.EdgeEndBundle.EdgeEnds">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.Insert(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabel(NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
            This computes the overall edge label for the set of
            edges in this EdgeStubBundle.  It essentially merges
            the ON and side labels for each edge. 
            These labels must be compatible
            </summary>
            <param name="boundaryNodeRule"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabelOn(System.Int32,NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
            Compute the overall ON location for the list of EdgeStubs.
            (This is essentially equivalent to computing the self-overlay of a single Geometry)
            edgeStubs can be either on the boundary (eg Polygon edge)
            OR in the interior (e.g. segment of a LineString)
            of their parent Geometry.
            In addition, GeometryCollections use the <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/> to determine
            whether a segment is on the boundary or not.
            Finally, in GeometryCollections it can occur that an edge is both
            on the boundary and in the interior (e.g. a LineString segment lying on
            top of a Polygon edge.) In this case the Boundary is given precendence.
            These observations result in the following rules for computing the ON location:
             if there are an odd number of Bdy edges, the attribute is Bdy
             if there are an even number >= 2 of Bdy edges, the attribute is Int
             if there are any Int edges, the attribute is Int
             otherwise, the attribute is Null.
            </summary>
            <param name="geomIndex"></param>
            <param name="boundaryNodeRule"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabelSides(System.Int32)">
            <summary>
            Compute the labelling for each side
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabelSide(System.Int32,NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            To compute the summary label for a side, the algorithm is:
            FOR all edges
            IF any edge's location is Interior for the side, side location = Interior
            ELSE IF there is at least one Exterior attribute, side location = Exterior
            ELSE  side location = Null
            Note that it is possible for two sides to have apparently contradictory information
            i.e. one edge side may indicate that it is in the interior of a point, while
            another edge side may indicate the exterior of the same point.  This is
            not an incompatibility - GeometryCollections may contain two Polygons that touch
            along an edge.  This is the reason for Interior-primacy rule above - it
            results in the summary label having the Geometry interior on both sides.
            </summary>
            <param name="geomIndex"></param>
            <param name="side"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for the computed label for the EdgeStubs.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundle.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.EdgeEndBundleStar">
            <summary>
            An ordered list of <c>EdgeEndBundle</c>s around a <c>RelateNode</c>.
            They are maintained in CCW order (starting with the positive x-axis) around the node
            for efficient lookup and topology building.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundleStar.Insert(NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            Insert a EdgeEnd in order in the list.
            If there is an existing EdgeStubBundle which is parallel, the EdgeEnd is
            added to the bundle.  Otherwise, a new EdgeEndBundle is created
            to contain the EdgeEnd.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.EdgeEndBundleStar.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for the EdgeStubs around the node.
            </summary>
            <param name="im"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.RelateComputer">
            <summary>
            Computes the topological relationship between two Geometries.
            RelateComputer does not need to build a complete graph structure to compute
            the IntersectionMatrix.  The relationship between the geometries can
            be computed by simply examining the labelling of edges incident on each node.
            RelateComputer does not currently support arbitrary GeometryCollections.
            This is because GeometryCollections can contain overlapping Polygons.
            In order to correct compute relate on overlapping Polygons, they
            would first need to be noded and merged (if not explicitly, at least
            implicitly).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.#ctor(NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.ComputeIM">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.InsertEdgeEnds(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeEnd})">
            <summary>
            
            </summary>
            <param name="ee"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.ComputeProperIntersectionIM(NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            
            </summary>
            <param name="intersector"></param>
            <param name="im"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.CopyNodesAndLabels(System.Int32)">
            <summary>
            Copy all nodes from an arg point into this graph.
            The node label in the arg point overrides any previously computed
            label for that argIndex.
            (E.g. a node may be an intersection node with
            a computed label of Boundary,
            but in the original arg Geometry it is actually
            in the interior due to the Boundary Determination Rule)
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.ComputeIntersectionNodes(System.Int32)">
            <summary>
            Insert nodes for all intersections on the edges of a Geometry.
            Label the created nodes the same as the edge label if they do not already have a label.
            This allows nodes created by either self-intersections or
            mutual intersections to be labelled.
            Endpoint nodes will already be labelled from when they were inserted.
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.LabelIntersectionNodes(System.Int32)">
            <summary>
            For all intersections on the edges of a Geometry,
            label the corresponding node IF it doesn't already have a label.
            This allows nodes created by either self-intersections or
            mutual intersections to be labelled.
            Endpoint nodes will already be labelled from when they were inserted.
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.ComputeDisjointIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            If the Geometries are disjoint, we need to enter their dimension and
            boundary dimension in the Ext rows in the IM
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.LabelNodeEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the sum of the IMs for each component.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedEdges(System.Int32,System.Int32)">
            <summary> 
            Processes isolated edges by computing their labelling and adding them
            to the isolated edges list.
            Isolated edges are guaranteed not to touch the boundary of the target (since if they
            did, they would have caused an intersection to be computed and hence would
            not be isolated).
            </summary>
            <param name="thisIndex"></param>
            <param name="targetIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedEdge(NetTopologySuite.GeometriesGraph.Edge,System.Int32,GeoAPI.Geometries.IGeometry)">
            <summary>
            Label an isolated edge of a graph with its relationship to the target point.
            If the target has dim 2 or 1, the edge can either be in the interior or the exterior.
            If the target has dim 0, the edge must be in the exterior.
            </summary>
            <param name="e"></param>
            <param name="targetIndex"></param>
            <param name="target"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedNodes">
            <summary>
            Isolated nodes are nodes whose labels are incomplete
            (e.g. the location for one Geometry is null).
            This is the case because nodes in one graph which don't intersect
            nodes in the other are not completely labelled by the initial process
            of adding nodes to the nodeList.
            To complete the labelling we need to check for nodes that lie in the
            interior of edges, and in the interior of areas.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedNode(NetTopologySuite.GeometriesGraph.Node,System.Int32)">
            <summary>
            Label an isolated node with its relationship to the target point.
            </summary>
            <param name="n"></param>
            <param name="targetIndex"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.RelateNode">
            <summary>
            A RelateNode is a Node that maintains a list of EdgeStubs
            for the edges that are incident on it.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNode.#ctor(GeoAPI.Geometries.Coordinate,NetTopologySuite.GeometriesGraph.EdgeEndStar)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="edges"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNode.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for this component.
            A component only contributes if it has a labelling for both parent geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNode.UpdateIMFromEdges(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for the EdgeEnds incident on this node.
            </summary>
            <param name="im"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.RelateNodeFactory">
            <summary>
            Used by the <c>NodeMap</c> in a <c>RelateNodeGraph</c> to create <c>RelateNode</c>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNodeFactory.CreateNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.RelateNodeGraph">
            <summary>
            Implements the simple graph of Nodes and EdgeEnd which is all that is
            required to determine topological relationships between Geometries.
            Also supports building a topological graph of a single Geometry, to
            allow verification of valid topology.    
            It is not necessary to create a fully linked
            PlanarGraph to determine relationships, since it is sufficient
            to know how the Geometries interact locally around the nodes.
            In fact, this is not even feasible, since it is not possible to compute
            exact intersection points, and hence the topology around those nodes
            cannot be computed robustly.
            The only Nodes that are created are for improper intersections;
            that is, nodes which occur at existing vertices of the Geometries.
            Proper intersections (e.g. ones which occur between the interior of line segments)
            have their topology determined implicitly, without creating a Node object
            to represent them.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNodeGraph.GetNodeEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNodeGraph.Build(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNodeGraph.ComputeIntersectionNodes(NetTopologySuite.GeometriesGraph.GeometryGraph,System.Int32)">
            <summary>
            Insert nodes for all intersections on the edges of a Geometry.
            Label the created nodes the same as the edge label if they do not already have a label.
            This allows nodes created by either self-intersections or
            mutual intersections to be labelled.
            Endpoint nodes will already be labelled from when they were inserted.
            Precondition: edge intersections have been computed.
            </summary>
            <param name="geomGraph"></param>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNodeGraph.CopyNodesAndLabels(NetTopologySuite.GeometriesGraph.GeometryGraph,System.Int32)">
            <summary>
            Copy all nodes from an arg point into this graph.
            The node label in the arg point overrides any previously computed
            label for that argIndex.
            (E.g. a node may be an intersection node with
            a computed label of Boundary,
            but in the original arg Geometry it is actually
            in the interior due to the Boundary Determination Rule).
            </summary>
            <param name="geomGraph"></param>
            <param name="argIndex"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateNodeGraph.InsertEdgeEnds(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeEnd})">
            <summary>
            
            </summary>
            <param name="ee"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Relate.RelateOp">
            <summary>
            Implements the SFS <c>relate()</c>  generalized spatial predicate on two <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            <br/>
            The class supports specifying a custom <see cref="T:NetTopologySuite.Algorithm.IBoundaryNodeRule"/>
            to be used during the relate computation.
            </summary>
            <remarks>
            If named spatial predicates are used on the result <see cref="P:NetTopologySuite.Operation.Relate.RelateOp.IntersectionMatrix"/>
            of the RelateOp, the result may or not be affected by the 
            choice of <tt>BoundaryNodeRule</tt>, depending on the exact nature of the pattern.
            For instance, <see cref="M:GeoAPI.Geometries.IntersectionMatrix.IsIntersects"/> is insensitive 
            to the choice of <tt>BoundaryNodeRule</tt>, 
            whereas <see cref="M:GeoAPI.Geometries.IntersectionMatrix.IsTouches(GeoAPI.Geometries.Dimension,GeoAPI.Geometries.Dimension)"/> is affected by the rule chosen.
            <para/> 
            <b>Note:</b> custom Boundary Node Rules do not (currently)
            affect the results of other <see cref="T:GeoAPI.Geometries.IGeometry"/> methods (such
            as <see cref="P:GeoAPI.Geometries.IGeometry.Boundary"/>.  The results of
            these methods may not be consistent with the relationship computed by
            a custom Boundary Node Rule.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateOp.Relate(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the <see cref="P:NetTopologySuite.Operation.Relate.RelateOp.IntersectionMatrix"/> for the spatial relationship
             between two <see cref="T:GeoAPI.Geometries.IGeometry"/>s, using the default (OGC SFS) Boundary Node Rule
            </summary>
            <param name="a">A geometry to test</param>
            <param name="b">A geometry to test</param>
            <returns>The IntersectonMatrix for the spatial relationship between the geometries</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateOp.Relate(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
            Computes the <see cref="P:NetTopologySuite.Operation.Relate.RelateOp.IntersectionMatrix"/> for the spatial relationship
             between two <see cref="T:GeoAPI.Geometries.IGeometry"/>s, using the specified Boundary Node Rule
            </summary>
            <param name="a">A geometry to test</param>
            <param name="b">A geometry to test</param>
            <param name="boundaryNodeRule">The Boundary Node Rule to use</param>
            <returns>The IntersectonMatrix for the spatial relationship between the geometries</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a new Relate operation, using the default (OGC SFS) Boundary Node Rule.
            </summary>
            <param name="g0">a Geometry to relate</param>
            <param name="g1">another Geometry to relate</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Relate.RelateOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,NetTopologySuite.Algorithm.IBoundaryNodeRule)">
            <summary>
            Creates a new Relate operation, using the default (OGC SFS) Boundary Node Rule.
            </summary>
            <param name="g0">a Geometry to relate</param>
            <param name="g1">another Geometry to relate</param>
            <param name="boundaryNodeRule">The Boundary Node Rule to use</param>
        </member>
        <member name="P:NetTopologySuite.Operation.Relate.RelateOp.IntersectionMatrix">
            <summary>
            Gets the IntersectionMatrix for the spatial relationship
            between the input geometries.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Union.CascadedPolygonUnion">
            <summary>
            Provides an efficient method of unioning a collection of 
            <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometrys.
            The geometries are indexed using a spatial index, 
            and unioned recursively in index order.
            For geometries with a high degree of overlap,
            this has the effect of reducing the number of vertices
            early in the process, which increases speed
            and robustness.
            <para/>
            This algorithm is faster and more robust than
            the simple iterated approach of 
            repeatedly unioning each polygon to a result geometry.
            <para/>
            The <tt>buffer(0)</tt> trick is sometimes faster, but can be less robust and 
            can sometimes take a long time to complete.
            This is particularly the case where there is a high degree of overlap
            between the polygons.  In this case, <tt>buffer(0)</tt> is forced to compute
            with <i>all</i> line segments from the outset, 
            whereas cascading can eliminate many segments
            at each stage of processing.
            The best situation for using <tt>buffer(0)</tt> is the trivial case
            where there is <i>no</i> overlap between the input geometries. 
            However, this case is likely rare in practice.
            </summary>
            <author>Martin Davis</author>
            <seealso href="http://code.google.com/p/nettopologysuite/issues/detail?id=44"/>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.Union(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Computes the union of
            a collection of <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            </summary>
            <param name="polys">A collection of <see cref="T:GeoAPI.Geometries.IPolygonal"/> <see cref="T:GeoAPI.Geometries.IGeometry"/>s.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.#ctor(System.Collections.Generic.ICollection{GeoAPI.Geometries.IGeometry})">
            <summary>
            Creates a new instance to union
            the given collection of <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            </summary>
            <param name="polys">A collection of <see cref="T:GeoAPI.Geometries.IPolygonal"/> <see cref="T:GeoAPI.Geometries.IGeometry"/>s</param>
        </member>
        <member name="F:NetTopologySuite.Operation.Union.CascadedPolygonUnion.StrtreeNodeCapacity">
            The effectiveness of the index is somewhat sensitive
            to the node capacity.  
            Testing indicates that a smaller capacity is better.
            For an STRtree, 4 is probably a good number (since
            this produces 2x2 "squares").
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.Union">
            <summary>
            Computes the union of the input geometries.
            </summary>
            <returns>
            <remarks>
            This method discards the input geometries as they are processed.
            In many input cases this reduces the memory retained
            as the operation proceeds. 
            Optimal memory usage is achieved 
            by disposing of the original input collection 
            before calling this method.
            </remarks>
            The union of the input geometries,
            or <c>null</c> if no input geometries were provided
            </returns>
            <exception cref="T:System.InvalidOperationException">if this method is called more than once</exception>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.BinaryUnion(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry})">
            <summary>
            Unions a list of geometries 
            by treating the list as a flattened binary tree,
            and performing a cascaded union on the tree.
            </summary>
            <param name="geoms">The list of geometries to union</param>
            <returns>The union of the list</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.BinaryUnion(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Unions a section of a list using a recursive binary union on each half
            of the section.
            </summary>
            <param name="geoms">The list of geometries containing the section to union</param>
            <param name="start">The start index of the section</param>
            <param name="end">The index after the end of the section</param>
            <returns>The union of the list section</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.GetGeometry(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry},System.Int32)">
            <summary>
            Gets the element at a given list index, or
            null if the index is out of range.
            </summary>
            <param name="list">The list of geometries</param>
            <param name="index">The index</param>
            <returns>The geometry at the given index or
            <value>null</value> if the index is out of range</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.ReduceToGeometries(System.Collections.Generic.IList{System.Object})">
            <summary>
            Reduces a tree of geometries to a list of geometries
            by recursively unioning the subtrees in the list.
            </summary>
            <param name="geomTree">A tree-structured list of geometries</param>
            <returns>A list of Geometrys</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.UnionSafe(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the union of two geometries, 
            either or both of which may be null.
            </summary>
            <param name="g0">A Geometry</param>
            <param name="g1">A Geometry</param>
            <returns>The union of the input(s) or
            <value>null</value> if both inputs are null</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.UnionUsingEnvelopeIntersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.Envelope)">
            <summary>
            Unions two polygonal geometries, restricting computation 
            to the envelope intersection where possible.
            The case of MultiPolygons is optimized to union only 
            the polygons which lie in the intersection of the two geometry's envelopes.
            Polygons outside this region can simply be combined with the union result,
            which is potentially much faster.
            This case is likely to occur often during cascaded union, and may also
            occur in real world data (such as unioning data for parcels on different street blocks).
            </summary>
            <param name="g0">A polygonal geometry</param>
            <param name="g1">A polygonal geometry</param>
            <param name="common">The intersection of the envelopes of the inputs</param>
            <returns>The union of the inputs</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.UnionActual(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Encapsulates the actual unioning of two polygonal geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.CascadedPolygonUnion.RestrictToPolygons(GeoAPI.Geometries.IGeometry)">
            <summary> Computes a <see cref="T:GeoAPI.Geometries.IGeometry"/> containing only <see cref="T:GeoAPI.Geometries.IPolygonal"/> components.
            Extracts the <see cref="T:GeoAPI.Geometries.IPolygon"/>s from the input 
            and returns them as an appropriate <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometry.
            <para/>
            If the input is already <tt>Polygonal</tt>, it is returned unchanged.
            <para/>
            A particular use case is to filter out non-polygonal components
            returned from an overlay operation.  
            </summary>
            <param name="g">The geometry to filter</param>
            <returns>A polygonal geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.PointGeometryUnion.Union(GeoAPI.Geometries.IPuntal,GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the union of a <see cref="T:GeoAPI.Geometries.IPoint"/> geometry with 
             another arbitrary <see cref="T:GeoAPI.Geometries.IGeometry"/>.
             Does not copy any component geometries.
            </summary>
            <param name="pointGeom"></param>
            <param name="otherGeom"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Union.UnaryUnionOp">
            <summary>
             Unions a <c>Collection</c> of <see cref="T:GeoAPI.Geometries.IGeometry"/>s or a single Geometry (which may be a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>) together.
            </summary>
             <remarks>
             <para>
             By using this special-purpose operation over a collection of geometries
             it is possible to take advantage of various optimizations to improve performance.
             </para>
             <para>
             Heterogeneous <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>s are fully supported.
             </para>
             <para>
             The result obeys the following contract:
             <list type="Bullet">
             <item>Unioning a set of <see cref="T:GeoAPI.Geometries.IPolygon"/>s has the effect of merging the areas (i.e. the same effect as iteratively unioning all individual polygons together).</item>
             <item>Unioning a set of <see cref="T:GeoAPI.Geometries.ILineString"/>s has the effect of <b>fully noding</b> 
             and <b>dissolving</b> the input linework.
             In this context "fully noded" means that there will be 
             an endpoint or node in the result  
             for every endpoint or line segment crossing in the input.
             "Dissolved" means that any duplicate (e.g. coincident) line segments or portions
             of line segments will be reduced to a single line segment in the output.  
             This is consistent with the semantics of the 
             <see cref="M:GeoAPI.Geometries.IGeometry.Union(GeoAPI.Geometries.IGeometry)"/> operation.
             If <b>merged</b> linework is required, the <see cref="T:NetTopologySuite.Operation.Linemerge.LineMerger"/> class can be used.</item>
             <item>Unioning a set of <see cref="T:GeoAPI.Geometries.IPoint"/>s has the effect of merging all identical points (producing a set with no duplicates).</item> </list>
             </para>
             <para>
             <c>UnaryUnion</c> always operates on the individual components of MultiGeometries.
             So it is possible to use it to "clean" invalid self-intersecting MultiPolygons
             (although the polygon components must all still be individually valid.)
             </para>
             </remarks>
             <author>
             mbdavis
            </author>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.Union(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry})">
            <summary>
            Computes the geometric union of a <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <param name="geoms">A collection of geometries</param>
            <returns>The union of the geometries, 
            or <c>null</c> if the input is empty</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.Union(System.Collections.Generic.IList{GeoAPI.Geometries.IGeometry},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Computes the geometric union of a <see cref="T:System.Collections.Generic.IList`1"/><para/>
            If no input geometries were provided but a <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> was provided, 
            an empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> is returned.
            </summary>
            <param name="geoms">A collection of geometries</param>
            <param name="geomFact">The geometry factory to use if the collection is empty</param>
            <returns>The union of the geometries
            or an empty GEOMETRYCOLLECTION</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.Union(GeoAPI.Geometries.IGeometry)">
            <summary>Constructs a unary union operation for a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            (which may be a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>).
            </summary>
            <param name="geom">A geometry to union</param>
            <returns>The union of the elements of the geometry
            or an empty GEOMETRYCOLLECTION</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Constructs a unary union operation for an enumeration  
            of <see cref="T:GeoAPI.Geometries.IGeometry"/>s, using the <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>
            of the input geometries.
            </summary>
            <param name="geoms">An enumeration of geometries</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry},GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a unary union operation for an enumeration  
            of <see cref="T:GeoAPI.Geometries.IGeometry"/>s. <para/>
            If no input geometries were provided but a <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> was provided, 
            </summary>
            <param name="geoms">An enumeration of geometries</param>
            <param name="geomFact">The geometry factory to use if the enumeration is empty</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs a unary union operation for a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            (which may be a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>).
            </summary>
            <param name="geom">A geometry to union</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.Union">
            <summary>
             Gets the union of the input geometries.
             If no input geometries were provided but a <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> was provided, 
             an empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> is returned.
             <para/>Otherwise, the return value is <c>null</c>
            </summary>
             <returns>
             A Geometry containing the union 
             or an empty <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> if no geometries were provided in the input, 
             or <c>null</c> if not GeometryFactory was provided
             </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.UnionWithNull(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes the union of two geometries, either of both of which may be null.
            </summary>
             <param name="g0"></param>
             <param name="g1"></param>
             <returns>
             The union of the input(s)
             or <value>null</value> if both inputs are <value>null</value>
             </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Union.UnaryUnionOp.UnionNoOpt(GeoAPI.Geometries.IGeometry)">
            <summary>
             Computes a unary union with no extra optimization, and no short-circuiting.
            </summary>
             <remarks>
             Due to the way the overlay operations are implemented, this is still efficient in the case of linear and puntal geometries.
             </remarks>
             <param name="g0">A geometry</param>
             <returns>The union of the input geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Union.UnionInteracting">
            <summary>
             Experimental code to union MultiPolygons with processing limited to the elements which actually interact.
            </summary>
             <remarks>Not currently used, since it doesn't seem to offer much of a performance advantage.</remarks>
             <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.ConnectedInteriorTester">
            <summary> 
            This class tests that the interior of an area <see cref="T:NetTopologySuite.Geometries.Geometry" />
            (<see cref="T:NetTopologySuite.Geometries.Polygon" /> or <see cref="T:NetTopologySuite.Geometries.MultiPolygon" />)
            is connected.  An area Geometry is invalid if the interior is disconnected.
            This can happen if:
            - a shell self-intersects,
            - one or more holes form a connected chain touching a shell at two different points,
            - one or more holes form a ring around a subset of the interior.
            If a disconnected situation is found the location of the problem is recorded.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.FindDifferentPoint(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.#ctor(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.IsInteriorsConnected">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.SetInteriorEdgesInResult(NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.BuildEdgeRings(System.Collections.Generic.IEnumerable{NetTopologySuite.GeometriesGraph.EdgeEnd})">
            <summary>
            Form <see cref="T:NetTopologySuite.GeometriesGraph.DirectedEdge" />s in graph into Minimal EdgeRings.
            (Minimal Edgerings must be used, because only they are guaranteed to provide
            a correct isHole computation).
            </summary>
            <param name="dirEdges"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.VisitShellInteriors(GeoAPI.Geometries.IGeometry,NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            Mark all the edges for the edgeRings corresponding to the shells of the input polygons.  
            Only ONE ring gets marked for each shell - if there are others which remain unmarked
            this indicates a disconnected interior.
            </summary>
            <param name="g"></param>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.VisitInteriorRing(GeoAPI.Geometries.ILineString,NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            
            </summary>
            <param name="ring"></param>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.VisitLinkedDirectedEdges(NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConnectedInteriorTester.HasUnvisitedShellEdge(System.Collections.Generic.IList{NetTopologySuite.GeometriesGraph.EdgeRing})">
            <summary>
            Check if any shell ring has an unvisited edge.
            A shell ring is a ring which is not a hole and which has the interior
            of the parent area on the RHS.
            (Note that there may be non-hole rings with the interior on the LHS,
            since the interior of holes will also be polygonized into CW rings
            by the <c>LinkAllDirectedEdges()</c> step).
            </summary>
            <param name="edgeRings"></param>
            <returns><c>true</c> if there is an unvisited edge in a non-hole ring.</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.ConsistentAreaTester">
            <summary> 
            Checks that a {GeometryGraph} representing an area
            (a <c>Polygon</c> or <c>MultiPolygon</c> )
            is consistent with the SFS semantics for area geometries.
            Checks include:
            Testing for rings which self-intersect (both properly and at nodes).
            Testing for duplicate rings.
            If an inconsistency if found the location of the problem is recorded.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.ConsistentAreaTester.#ctor(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.ConsistentAreaTester.InvalidPoint">
            <summary>
            Returns the intersection point, or <c>null</c> if none was found.
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.ConsistentAreaTester.IsNodeConsistentArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.ConsistentAreaTester.IsNodeEdgeAreaLabelsConsistent">
            <summary>
            Check all nodes to see if their labels are consistent.
            If any are not, return false.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.ConsistentAreaTester.HasDuplicateRings">
            <summary>
            Checks for two duplicate rings in an area.
            Duplicate rings are rings that are topologically equal
            (that is, which have the same sequence of points up to point order).
            If the area is topologically consistent (determined by calling the
            <c>isNodeConsistentArea</c>,
            duplicate rings can be found by checking for EdgeBundles which contain more than one EdgeEnd.
            (This is because topologically consistent areas cannot have two rings sharing
            the same line segment, unless the rings are equal).
            The start point of one of the equal rings will be placed in invalidPoint.
            Returns <c>true</c> if this area Geometry is topologically consistent but has two duplicate rings.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.IndexedNestedRingTester">
             Tests whether any of a set of {@link LinearRing}s are
             nested inside another ring in the set, using a spatial
             index to speed up the comparisons.
            
             @version 1.7
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.IsValidOp">
            <summary>
            Implements the algorithsm required to compute the <see cref="P:NetTopologySuite.Geometries.Geometry.IsValid" />
            method for <see cref="T:NetTopologySuite.Geometries.Geometry" />s.
            See the documentation for the various geometry types for a specification of validity.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.IsValidCoordinate(GeoAPI.Geometries.Coordinate)">
            <summary>
            Checks whether a coordinate is valid for processing.
            Coordinates are valid iff their x and y ordinates are in the
            range of the floating point representation.
            </summary>
            <param name="coord">The coordinate to validate.</param>
            <returns><c>true</c> if the coordinate is valid.</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.FindPointNotNode(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.ILinearRing,NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Find a point from the list of testCoords
            that is NOT a node in the edge for the list of searchCoords.
            </summary>
            <param name="testCoords"></param>
            <param name="searchRing"></param>
            <param name="graph"></param>
            <returns>The point found, or <c>null</c> if none found.</returns>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.IsValidOp.isChecked">
            If the following condition is TRUE JTS will validate inverted shells and exverted holes (the ESRI SDE model).
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="parentGeometry"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.IsValidOp.IsSelfTouchingRingFormingHoleValid">
            <summary>
            <para>
            Gets/Sets whether polygons using Self-Touching Rings to form
            holes are reported as valid.
            If this flag is set, the following Self-Touching conditions
            are treated as being valid:
            - The shell ring self-touches to create a hole touching the shell.
            - A hole ring self-touches to create two holes touching at a point.
            </para>
            <para>
            The default (following the OGC SFS standard)
            is that this condition is not valid (<c>false</c>).
            </para>
            <para>
            This does not affect whether Self-Touching Rings
            disconnecting the polygon interior are considered valid
            (these are considered to be invalid under the SFS, and many other
            spatial models as well).
            This includes "bow-tie" shells,
            which self-touch at a single point causing the interior to be disconnected,
            and "C-shaped" holes which self-touch at a single point causing an island to be formed.
            </para>
            </summary>
            <value>States whether geometry with this condition is valid.</value>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.IsValidOp.IsValid">
            <summary>
            Computes the validity of the geometry,
            and returns <tt>true</tt> if it is valid.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.IsValidOp.ValidationError">
            <summary>
            Computes the validity of the geometry,
            and if not valid returns the validation error for the geometry,
            or null if the geometry is valid.
            </summary>
            <returns>The validation error, if the geometry is invalid <br/>
            or <value>null</value> if the geometry is valid</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IPoint)">
            <summary>
            Checks validity of a Point.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            Checks validity of a MultiPoint.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.ILineString)">
            <summary>
            Checks validity of a LineString.  
            Almost anything goes for lineStrings!
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Checks validity of a LinearRing.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IPolygon)">
            <summary>
            Checks the validity of a polygon and sets the validErr flag.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckInvalidCoordinates(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="coords"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckInvalidCoordinates(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckClosedRings(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckClosedRing(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckTooFewPoints(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckConsistentArea(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckNoSelfIntersectingRings(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Check that there is no ring which self-intersects (except of course at its endpoints).
            This is required by OGC topology rules (but not by other models
            such as ESRI SDE, which allow inverted shells and exverted holes).
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckNoSelfIntersectingRing(NetTopologySuite.GeometriesGraph.EdgeIntersectionList)">
            <summary>
            Check that a ring does not self-intersect, except at its endpoints.
            Algorithm is to count the number of times each node along edge occurs.
            If any occur more than once, that must be a self-intersection.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckHolesInShell(GeoAPI.Geometries.IPolygon,NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Tests that each hole is inside the polygon shell.
            This routine assumes that the holes have previously been tested
            to ensure that all vertices lie on the shell or inside it.
            A simple test of a single point in the hole can be used,
            provide the point is chosen such that it does not lie on the
            boundary of the shell.
            </summary>
            <param name="p">The polygon to be tested for hole inclusion.</param>
            <param name="graph">A GeometryGraph incorporating the polygon.</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckHolesNotNested(GeoAPI.Geometries.IPolygon,NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Tests that no hole is nested inside another hole.
            This routine assumes that the holes are disjoint.
            To ensure this, holes have previously been tested
            to ensure that:
            They do not partially overlap
            (checked by <c>checkRelateConsistency</c>).
            They are not identical
            (checked by <c>checkRelateConsistency</c>).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckShellsNotNested(GeoAPI.Geometries.IMultiPolygon,NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Tests that no element polygon is wholly in the interior of another element polygon.
            Preconditions:
            Shells do not partially overlap.
            Shells do not touch along an edge.
            No duplicate rings exists.
            This routine relies on the fact that while polygon shells may touch at one or
            more vertices, they cannot touch at ALL vertices.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckShellNotNested(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IPolygon,NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Check if a shell is incorrectly nested within a polygon.  This is the case
            if the shell is inside the polygon shell, but not inside a polygon hole.
            (If the shell is inside a polygon hole, the nesting is valid.)
            The algorithm used relies on the fact that the rings must be properly contained.
            E.g. they cannot partially overlap (this has been previously checked by
            <c>CheckRelateConsistency</c>).
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckShellInsideHole(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing,NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary> 
            This routine checks to see if a shell is properly contained in a hole.
            It assumes that the edges of the shell and hole do not
            properly intersect.
            </summary>
            <param name="shell"></param>
            <param name="hole"></param>
            <param name="graph"></param>
            <returns>
            <c>null</c> if the shell is properly contained, or
            a Coordinate which is not inside the hole if it is not.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.IsValidOp.CheckConnectedInteriors(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester">
            <summary>
            Tests whether any of a set of <c>LinearRing</c>s are
            nested inside another ring in the set, using a <c>Quadtree</c>
            index to speed up the comparisons.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.#ctor(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.NestedPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.Add(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.IsNonNested">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.BuildQuadtree">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.RepeatedPointTester">
            <summary> 
            Implements the appropriate checks for repeated points
            (consecutive identical coordinates) as defined in the
            NTS spec.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.RepeatedPointTester.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.SimpleNestedRingTester">
            <summary>
            Tests whether any of a set of <c>LinearRing</c>s are
            nested inside another ring in the set, using a simple O(n^2)
            comparison.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SimpleNestedRingTester.#ctor(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SimpleNestedRingTester.Add(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.SimpleNestedRingTester.NestedPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SimpleNestedRingTester.IsNonNested">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester">
            <summary>
            Tests whether any of a set of <c>LinearRing</c>s are
            nested inside another ring in the set, using a <c>SweepLineIndex</c>
            index to speed up the comparisons.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.#ctor(NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.NestedPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.Add(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.IsNonNested">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.BuildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.IsInside(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="innerRing"></param>
            <param name="searchRing"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction.IsNonNested">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction.#ctor(NetTopologySuite.Operation.Valid.SweeplineNestedRingTester)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction.Overlap(NetTopologySuite.Index.Sweepline.SweepLineInterval,NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="s0"></param>
            <param name="s1"></param>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.TopologyValidationErrors">
            <summary>
            Contains information about the nature and location of 
            a <see cref="T:NetTopologySuite.Geometries.Geometry" /> validation error.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.Error">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.RepeatedPoint">
            <summary>
            No longer used: 
            repeated points are considered valid as per the SFS.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.HoleOutsideShell">
            <summary>
            Indicates that a hole of a polygon lies partially 
            or completely in the exterior of the shell.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.NestedHoles">
            <summary>
            Indicates that a hole lies 
            in the interior of another hole in the same polygon.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.DisconnectedInteriors">
            <summary>
            Indicates that the interior of a polygon is disjoint
            (often caused by set of contiguous holes splitting 
            the polygon into two parts).
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.SelfIntersection">
            <summary>
            Indicates that two rings of a polygonal geometry intersect.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.RingSelfIntersection">
            <summary>
            Indicates that a ring self-intersects.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.NestedShells">
            <summary>
            Indicates that a polygon component of a 
            <see cref="T:NetTopologySuite.Geometries.MultiPolygon" /> lies inside another polygonal component.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.DuplicateRings">
            <summary>
            Indicates that a polygonal geometry 
            contains two rings which are identical.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.TooFewPoints">
            <summary>
            Indicates that either:
            - A <see cref="T:NetTopologySuite.Geometries.LineString" /> contains a single point.
            - A <see cref="T:NetTopologySuite.Geometries.LinearRing" /> contains 2 or 3 points.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.InvalidCoordinate">
            <summary>
            Indicates that the <c>X</c> or <c>Y</c> ordinate of
            a <see cref="T:GeoAPI.Geometries.Coordinate" /> is not a valid 
            numeric value (e.g. <see cref="F:System.Double.NaN" />).
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationErrors.RingNotClosed">
            <summary>
            Indicates that a ring is not correctly closed
            (the first and the last coordinate are different).
            </summary>
        </member>
        <member name="T:NetTopologySuite.Operation.Valid.TopologyValidationError">
            <summary>
            Contains information about the nature and location of a <c>Geometry</c>
            validation error.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Operation.Valid.TopologyValidationError.errMsg">
            <summary>
            These messages must synch up with the indexes above
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.TopologyValidationError.#ctor(NetTopologySuite.Operation.Valid.TopologyValidationErrors,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="errorType"></param>
            <param name="pt"></param>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.TopologyValidationError.#ctor(NetTopologySuite.Operation.Valid.TopologyValidationErrors)">
            <summary>
            
            </summary>
            <param name="errorType"></param>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.TopologyValidationError.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.TopologyValidationError.ErrorType">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Operation.Valid.TopologyValidationError.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Operation.Valid.TopologyValidationError.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder">
            <summary>
            Finds all connected <see cref="T:NetTopologySuite.Planargraph.Subgraph" />s of a <see cref="T:NetTopologySuite.Planargraph.PlanarGraph" />.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.#ctor(NetTopologySuite.Planargraph.PlanarGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder"/> class.
            </summary>
            <param name="graph">The <see cref="T:NetTopologySuite.Planargraph.PlanarGraph" />.</param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.AddReachable(NetTopologySuite.Planargraph.Node,NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            Adds all nodes and edges reachable from this node to the subgraph.
            Uses an explicit stack to avoid a large depth of recursion.
            </summary>
            <param name="startNode"></param>
            <param name="subgraph"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.AddEdges(NetTopologySuite.Planargraph.Node,System.Collections.Generic.Stack{NetTopologySuite.Planargraph.Node},NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            Adds the argument node and all its out edges to the subgraph.
            </summary>
            <param name="node"></param>
            <param name="nodeStack"></param>
            <param name="subgraph"></param>
        </member>
        <member name="T:NetTopologySuite.Planargraph.DirectedEdge">
            <summary>
            Represents a directed edge in a <c>PlanarGraph</c>. A DirectedEdge may or
            may not have a reference to a parent Edge (some applications of
            planar graphs may not require explicit Edge objects to be created). Usually
            a client using a <c>PlanarGraph</c> will subclass <c>DirectedEdge</c>
            to add its own application-specific data and methods.    
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdge.ToEdges(System.Collections.Generic.IList{NetTopologySuite.Planargraph.DirectedEdge})">
            <summary>
            Returns a List containing the parent Edge (possibly null) for each of the given
            DirectedEdges.
            </summary>
            <param name="dirEdges"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdge.#ctor(NetTopologySuite.Planargraph.Node,NetTopologySuite.Planargraph.Node,GeoAPI.Geometries.Coordinate,System.Boolean)">
            <summary>
            Constructs a DirectedEdge connecting the <c>from</c> node to the
            <c>to</c> node.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionPt">
            Specifies this DirectedEdge's direction (given by an imaginary
            line from the <c>from</c> node to <c>directionPt</c>).
            </param>
            <param name="edgeDirection">
            Whether this DirectedEdge's direction is the same as or
            opposite to that of the parent Edge (if any).
            </param>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.Edge">
            <summary>
            Returns this DirectedEdge's parent Edge, or null if it has none.
            Associates this DirectedEdge with an Edge (possibly null, indicating no associated
            Edge).
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.Quadrant">
            <summary>
            Returns 0, 1, 2, or 3, indicating the quadrant in which this DirectedEdge's
            orientation lies.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.DirectionPt">
            <summary>
            Returns a point to which an imaginary line is drawn from the from-node to
            specify this DirectedEdge's orientation.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.EdgeDirection">
            <summary>
            Returns whether the direction of the parent Edge (if any) is the same as that
            of this Directed Edge.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.FromNode">
            <summary>
            Returns the node from which this DirectedEdge leaves.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.ToNode">
            <summary>
            Returns the node to which this DirectedEdge goes.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.Coordinate">
            <summary>
            Returns the coordinate of the from-node.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.Angle">
            <summary>
            Returns the angle that the start of this DirectedEdge makes with the
            positive x-axis, in radians.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.Sym">
            <summary>
            Returns the symmetric DirectedEdge -- the other DirectedEdge associated with
            this DirectedEdge's parent Edge.
            Sets this DirectedEdge's symmetric DirectedEdge, which runs in the opposite
            direction.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdge.CompareTo(System.Object)">
            <summary>
            Returns 1 if this DirectedEdge has a greater angle with the
            positive x-axis than b", 0 if the DirectedEdges are collinear, and -1 otherwise.
            Using the obvious algorithm of simply computing the angle is not robust,
            since the angle calculation is susceptible to roundoff. A robust algorithm
            is:
            first compare the quadrants. If the quadrants are different, it it
            trivial to determine which vector is "greater".
            if the vectors lie in the same quadrant, the robust
            <c>RobustCGAlgorithms.ComputeOrientation(Coordinate, Coordinate, Coordinate)</c>
            function can be used to decide the relative orientation of the vectors.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdge.CompareDirection(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Returns 1 if this DirectedEdge has a greater angle with the
            positive x-axis than b", 0 if the DirectedEdges are collinear, and -1 otherwise.
            Using the obvious algorithm of simply computing the angle is not robust,
            since the angle calculation is susceptible to roundoff. A robust algorithm
            is:
            first compare the quadrants. If the quadrants are different, it it
            trivial to determine which vector is "greater".
            if the vectors lie in the same quadrant, the robust
            <c>RobustCGAlgorithms.ComputeOrientation(Coordinate, Coordinate, Coordinate)</c>
            function can be used to decide the relative orientation of the vectors.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdge.Write(System.IO.StreamWriter)">
            <summary>
            Writes a detailed string representation of this DirectedEdge to the given PrintStream.
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdge.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdge.Remove">
            <summary>
            Removes this directed edge from its containing graph.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Planargraph.DirectedEdgeStar">
            <summary>
            A sorted collection of <c>DirectedEdge</c>s which leave a <c>Node</c>
            in a <c>PlanarGraph</c>.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.DirectedEdgeStar._outEdges">
            <summary>
            The underlying list of outgoing DirectedEdges.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.Add(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds a new member to this DirectedEdgeStar.
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.Remove(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Drops a member of this DirectedEdgeStar.
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.GetEnumerator">
            <summary>
            Returns an Iterator over the DirectedEdges, in ascending order by angle with the positive x-axis.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdgeStar.Degree">
            <summary>
            Returns the number of edges around the Node associated with this DirectedEdgeStar.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdgeStar.Coordinate">
            <summary>
            Returns the coordinate for the node at wich this star is based.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.DirectedEdgeStar.Edges">
            <summary>
            Returns the DirectedEdges, in ascending order by angle with the positive x-axis.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.SortEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.GetIndex(NetTopologySuite.Planargraph.Edge)">
            <summary>
            Returns the zero-based index of the given Edge, after sorting in ascending order
            by angle with the positive x-axis.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.GetIndex(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Returns the zero-based index of the given DirectedEdge, after sorting in ascending order
            by angle with the positive x-axis.
            </summary>
            <param name="dirEdge"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.GetIndex(System.Int32)">
            <summary> 
            Returns the remainder when i is divided by the number of edges in this
            DirectedEdgeStar. 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.GetNextEdge(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Returns the <see cref="T:NetTopologySuite.Planargraph.DirectedEdge"/> on the left-hand 
            side of the given <see cref="T:NetTopologySuite.Planargraph.DirectedEdge"/> 
            (which  must be a member of this DirectedEdgeStar). 
            </summary>
            <param name="dirEdge"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.DirectedEdgeStar.GetNextCWEdge(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
             Returns the <see cref="T:NetTopologySuite.Planargraph.DirectedEdge"/> on the right-hand (CW) 
             side of the given <see cref="T:NetTopologySuite.Planargraph.DirectedEdge"/>
             (which must be a member of this DirectedEdgeStar).
             </summary>
        </member>
        <member name="T:NetTopologySuite.Planargraph.Edge">
            <summary>
            Represents an undirected edge of a {PlanarGraph}. An undirected edge
            in fact simply acts as a central point of reference for two opposite
            <c>DirectedEdge</c>s.
            Usually a client using a <c>PlanarGraph</c> will subclass <c>Edge</c>
            to add its own application-specific data and methods.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Edge.dirEdge">
            <summary>
            The two DirectedEdges associated with this Edge. 
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.#ctor">
            <summary>
            Constructs an Edge whose DirectedEdges are not yet set. Be sure to call
            <c>SetDirectedEdges(DirectedEdge, DirectedEdge)</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.#ctor(NetTopologySuite.Planargraph.DirectedEdge,NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Constructs an Edge initialized with the given DirectedEdges, and for each
            DirectedEdge: sets the Edge, sets the symmetric DirectedEdge, and adds
            this Edge to its from-Node.
            </summary>
            <param name="de0"></param>
            <param name="de1"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.SetDirectedEdges(NetTopologySuite.Planargraph.DirectedEdge,NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Initializes this Edge's two DirectedEdges, and for each DirectedEdge: sets the
            Edge, sets the symmetric DirectedEdge, and adds this Edge to its from-Node.
            </summary>
            <param name="de0"></param>
            <param name="de1"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.GetDirEdge(System.Int32)">
            <summary> 
            Returns one of the DirectedEdges associated with this Edge.
            </summary>
            <param name="i">0 or 1.</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.GetDirEdge(NetTopologySuite.Planargraph.Node)">
            <summary>
            Returns the DirectedEdge that starts from the given node, or null if the
            node is not one of the two nodes associated with this Edge.
            </summary>
            <param name="fromNode"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.GetOppositeNode(NetTopologySuite.Planargraph.Node)">
            <summary> 
            If <c>node</c> is one of the two nodes associated with this Edge,
            returns the other node; otherwise returns null.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Edge.Remove">
            <summary>
            Removes this edge from its containing graph.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.Edge.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
            <value></value>
        </member>
        <member name="T:NetTopologySuite.Planargraph.GraphComponent">
            <summary>
            The base class for all graph component classes.
            Maintains flags of use in generic graph algorithms.
            Provides two flags:
            marked - typically this is used to indicate a state that persists
            for the course of the graph's lifetime.  For instance, it can be
            used to indicate that a component has been logically deleted from the graph.
            visited - this is used to indicate that a component has been processed
            or visited by an single graph algorithm.  For instance, a breadth-first traversal of the
            graph might use this to indicate that a node has already been traversed.
            The visited flag may be set and cleared many times during the lifetime of a graph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.GraphComponent.SetVisited(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Sets the <see cref="P:NetTopologySuite.Planargraph.GraphComponent.Visited" /> state 
            for all <see cref="T:NetTopologySuite.Planargraph.GraphComponent" />s in an <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <param name="i">A <see cref="T:System.Collections.IEnumerator" /> to scan.</param>
            <param name="visited">The state to set the <see cref="P:NetTopologySuite.Planargraph.GraphComponent.Visited" /> flag to.</param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.GraphComponent.SetMarked(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Sets the <see cref="P:NetTopologySuite.Planargraph.GraphComponent.Marked" /> state 
            for all <see cref="T:NetTopologySuite.Planargraph.GraphComponent" />s in an <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <param name="i">A <see cref="T:System.Collections.IEnumerator" /> to scan.</param>
            <param name="marked">The state to set the <see cref="P:NetTopologySuite.Planargraph.GraphComponent.Marked" /> flag to.</param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.GraphComponent.GetComponentWithVisitedState(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Finds the first <see cref="T:NetTopologySuite.Planargraph.GraphComponent" /> 
            in a <see cref="T:System.Collections.IEnumerator" /> set
            which has the specified <see cref="P:NetTopologySuite.Planargraph.GraphComponent.Visited" /> state.
            </summary>
            <param name="i">A <see cref="T:System.Collections.IEnumerator" /> to scan.</param>
            <param name="visitedState">The <see cref="P:NetTopologySuite.Planargraph.GraphComponent.Visited" /> state to test.</param>
            <returns>The first <see cref="T:NetTopologySuite.Planargraph.GraphComponent" /> found, or <c>null</c> if none found.</returns>
        </member>
        <member name="P:NetTopologySuite.Planargraph.GraphComponent.IsVisited">
            <summary>
            Tests if a component has been visited during the course of a graph algorithm.
            </summary>              
        </member>
        <member name="P:NetTopologySuite.Planargraph.GraphComponent.Visited">
            <summary> 
            Gets/Sets the visited flag for this component.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.GraphComponent.IsMarked">
            <summary>
            Tests if a component has been marked at some point during the processing
            involving this graph.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.GraphComponent.Marked">
            <summary>
            Gets/Sets the marked flag for this component.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.GraphComponent.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.GraphComponent.Data">
            <summary>
            Gets or sets user defined data for this component
            </summary>
        </member>
        <member name="T:NetTopologySuite.Planargraph.Node">
            <summary>
            A node in a <c>PlanarGraph</c> is a location where 0 or more <c>Edge</c>s
            meet. A node is connected to each of its incident Edges via an outgoing
            DirectedEdge. Some clients using a <c>PlanarGraph</c> may want to
            subclass <c>Node</c> to add their own application-specific
            data and methods.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.GetEdgesBetween(NetTopologySuite.Planargraph.Node,NetTopologySuite.Planargraph.Node)">
            <summary>
            Returns all Edges that connect the two nodes (which are assumed to be different).
            </summary>
            <param name="node0"></param>
            <param name="node1"></param>
            <returns></returns>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Node.pt">
            <summary>
            The location of this Node.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Node.deStar">
            <summary>
            The collection of DirectedEdges that leave this Node.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Constructs a Node with the given location.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.#ctor(GeoAPI.Geometries.Coordinate,NetTopologySuite.Planargraph.DirectedEdgeStar)">
            <summary>
            Constructs a Node with the given location and collection of outgoing DirectedEdges.
            </summary>
            <param name="pt"></param>
            <param name="deStar"></param>
        </member>
        <member name="P:NetTopologySuite.Planargraph.Node.Coordinate">
            <summary>
            Returns the location of this Node.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.AddOutEdge(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds an outgoing DirectedEdge to this Node.
            </summary>
            <param name="de"></param>
        </member>
        <member name="P:NetTopologySuite.Planargraph.Node.OutEdges">
            <summary>
            Returns the collection of DirectedEdges that leave this Node.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.Node.Degree">
            <summary>
            Returns the number of edges around this Node.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.GetIndex(NetTopologySuite.Planargraph.Edge)">
            <summary>
            Returns the zero-based index of the given Edge, after sorting in ascending order
            by angle with the positive x-axis.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.Remove(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
             Removes a <see cref="T:NetTopologySuite.Planargraph.DirectedEdge"/> incident on this node. Does not change the state of the directed edge.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.Remove">
            <summary>
            Removes this node from its containing graph.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.Node.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
            <value></value>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Node.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Planargraph.NodeMap">
            <summary>
            A map of <see cref="T:NetTopologySuite.Planargraph.Node">nodes</see>, indexed by the coordinate of the node.
            </summary>   
        </member>
        <member name="M:NetTopologySuite.Planargraph.NodeMap.Add(NetTopologySuite.Planargraph.Node)">
            <summary>
            Adds a node to the map, replacing any that is already at that location.
            </summary>
            <param name="n"></param>
            <returns>The added node.</returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.NodeMap.Remove(GeoAPI.Geometries.Coordinate)">
            <summary>
            Removes the Node at the given location, and returns it (or null if no Node was there).
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.NodeMap.Find(GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the Node at the given location, or null if no Node was there.
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.NodeMap.GetEnumerator">
            <summary>
            Returns an Iterator over the Nodes in this NodeMap, sorted in ascending order
            by angle with the positive x-axis.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.NodeMap.Values">
            <summary>
            Returns the Nodes in this NodeMap, sorted in ascending order
            by angle with the positive x-axis.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Planargraph.NodeMap.Count">
            <summary>
            Returns the number of Nodes in this NodeMap.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Planargraph.PlanarGraph">
            <summary>
            Represents a directed graph which is embeddable in a planar surface.
            This class and the other classes in this package serve as a framework for
            building planar graphs for specific algorithms. This class must be
            subclassed to expose appropriate methods to construct the graph. This allows
            controlling the types of graph components ({DirectedEdge}s,
            <c>Edge</c>s and <c>Node</c>s) which can be added to the graph. An
            application which uses the graph framework will almost always provide
            subclasses for one or more graph components, which hold application-specific
            data and graph algorithms.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.PlanarGraph._edges">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.PlanarGraph.dirEdges">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.PlanarGraph.nodeMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.FindNode(GeoAPI.Geometries.Coordinate)">
            <summary>
            Returns the <see cref="T:NetTopologySuite.Planargraph.Node"/> at the given <paramref name="pt">location</paramref>, or <value>null</value> if no <see cref="T:NetTopologySuite.Planargraph.Node"/> was there.
            </summary>
            <param name="pt">The location</param>
            <returns>The node found<br/>
            or <c>null</c> if this graph contains no node at the location
            </returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.Add(NetTopologySuite.Planargraph.Node)">
            <summary>
            Adds a node to the map, replacing any that is already at that location.
            Only subclasses can add Nodes, to ensure Nodes are of the right type.
            </summary>
            <param name="node"></param>
            <returns>The added node.</returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.Add(NetTopologySuite.Planargraph.Edge)">
            <summary>
            Adds the Edge and its DirectedEdges with this PlanarGraph.
            Assumes that the Edge has already been created with its associated DirectEdges.
            Only subclasses can add Edges, to ensure the edges added are of the right class.
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.Add(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds the Edge to this PlanarGraph; only subclasses can add DirectedEdges,
            to ensure the edges added are of the right class.
            </summary>
            <param name="dirEdge"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.GetNodeEnumerator">
            <summary>
            Returns an IEnumerator over the Nodes in this PlanarGraph.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Planargraph.PlanarGraph.Nodes">
            <summary>
            Returns the Nodes in this PlanarGraph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.GetDirEdgeEnumerator">
            <summary> 
            Returns an Iterator over the DirectedEdges in this PlanarGraph, in the order in which they
            were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.GetEdgeEnumerator">
            <summary>
            Returns an Iterator over the Edges in this PlanarGraph, in the order in which they
            were added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetTopologySuite.Planargraph.PlanarGraph.Edges">
            <summary>
            Returns the Edges that have been added to this PlanarGraph.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.Remove(NetTopologySuite.Planargraph.Edge)">
            <summary>
            Removes an Edge and its associated DirectedEdges from their from-Nodes and
            from this PlanarGraph. Note: This method does not remove the Nodes associated
            with the Edge, even if the removal of the Edge reduces the degree of a
            Node to zero.
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.Remove(NetTopologySuite.Planargraph.DirectedEdge)">
            <summary> 
            Removes a <see cref="T:NetTopologySuite.Planargraph.DirectedEdge"/> from its from-<see cref="T:NetTopologySuite.Planargraph.Node"/> and from this PlanarGraph.
            </summary>
            <remarks>
            This method does not remove the <see cref="T:NetTopologySuite.Planargraph.Node"/>s associated with the DirectedEdge,
            even if the removal of the DirectedEdge reduces the degree of a Node to zero.
            </remarks>
            <param name="de"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.Remove(NetTopologySuite.Planargraph.Node)">
            <summary>
            Removes a node from the graph, along with any associated DirectedEdges and
            Edges.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.PlanarGraph.FindNodesOfDegree(System.Int32)">
            <summary>
            Returns all Nodes with the given number of Edges around it.
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Planargraph.Subgraph">
            <summary>
            A subgraph of a <see cref="T:NetTopologySuite.Planargraph.PlanarGraph" />.
            A subgraph may contain any subset of <see cref="T:NetTopologySuite.Planargraph.Edge" />s
            from the parent graph.
            It will also automatically contain all <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s
            and <see cref="T:NetTopologySuite.Planargraph.Node" />s associated with those edges.
            No new objects are created when edges are added -
            all associated components must already exist in the parent graph.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Subgraph.parentGraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Subgraph.edges">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Subgraph.dirEdges">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Planargraph.Subgraph.nodeMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.#ctor(NetTopologySuite.Planargraph.PlanarGraph)">
            <summary>
            Creates a new subgraph of the given <see cref="T:NetTopologySuite.Planargraph.PlanarGraph" />.
            </summary>
            <param name="parentGraph"></param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.GetParent">
            <summary>
             Gets the <see cref="T:NetTopologySuite.Planargraph.PlanarGraph" /> which this subgraph is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.Add(NetTopologySuite.Planargraph.Edge)">
            <summary>
            Adds an <see cref="T:NetTopologySuite.Planargraph.Edge" /> to the subgraph.
            The associated <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s and <see cref="T:NetTopologySuite.Planargraph.Node" />s are also added.
            </summary>
            <param name="e">The <see cref="T:NetTopologySuite.Planargraph.Edge" /> to add.</param>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.GetDirEdgeEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> over the <see cref="T:NetTopologySuite.Planargraph.DirectedEdge" />s in this graph,
            in the order in which they were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.GetEdgeEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> over the <see cref="T:NetTopologySuite.Planargraph.Edge" />s in this graph,
            in the order in which they were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.GetNodeEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> over the <see cref="T:NetTopologySuite.Planargraph.Node" />s in this graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Planargraph.Subgraph.Contains(NetTopologySuite.Planargraph.Edge)">
            <summary>
            Tests whether an <see cref="T:NetTopologySuite.Planargraph.Edge" /> is contained in this subgraph.
            </summary>
            <param name="e">The <see cref="T:NetTopologySuite.Planargraph.Edge" /> to test.</param>
            <returns><c>true</c> if the <see cref="T:NetTopologySuite.Planargraph.Edge" /> is contained in this subgraph.</returns>
        </member>
        <member name="T:NetTopologySuite.Precision.CommonBits">
            <summary>
            Determines the maximum number of common most-significant
            bits in the mantissa of one or numbers.
            Can be used to compute the double-precision number which
            is represented by the common bits.
            If there are no common bits, the number computed is 0.0.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBits.SignExpBits(System.Int64)">
            <summary>
            Computes the bit pattern for the sign and exponent of a
            double-precision number.
            </summary>
            <param name="num"></param>
            <returns>The bit pattern for the sign and exponent.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBits.NumCommonMostSigMantissaBits(System.Int64,System.Int64)">
            <summary>
            This computes the number of common most-significant bits in the mantissas
            of two double-precision numbers.
            It does not count the hidden bit, which is always 1.
            It does not determine whether the numbers have the same exponent - if they do
            not, the value computed by this function is meaningless.
            </summary>
            <param name="num1"></param>
            /// <param name="num2"></param>
            <returns>The number of common most-significant mantissa bits.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBits.ZeroLowerBits(System.Int64,System.Int32)">
            <summary>
            Zeroes the lower n bits of a bitstring.
            </summary>
            <param name="bits">The bitstring to alter.</param>
            <param name="nBits">the number of bits to zero.</param>
            <returns>The zeroed bitstring.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBits.GetBit(System.Int64,System.Int32)">
            <summary>
            Extracts the i'th bit of a bitstring.
            </summary>
            <param name="bits">The bitstring to extract from.</param>
            <param name="i">The bit to extract.</param>
            <returns>The value of the extracted bit.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBits.Add(System.Double)">
             <summary>
            
             </summary>
             <param name="num"></param>
        </member>
        <member name="P:NetTopologySuite.Precision.CommonBits.Common">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBits.ToString(System.Int64)">
            <summary>
            A representation of the Double bits formatted for easy readability
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Precision.CommonBitsOp">
            <summary> 
            Provides versions of Geometry spatial functions which use
            common bit removal to reduce the likelihood of robustness problems.
            In the current implementation no rounding is performed on the
            reshifted result point, which means that it is possible
            that the returned Geometry is invalid.
            Client classes should check the validity of the returned result themselves.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.#ctor">
            <summary>
            Creates a new instance of class, which reshifts result <c>Geometry</c>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of class, specifying whether
            the result <c>Geometry</c>s should be reshifted.
            </summary>
            <param name="returnToOriginalPrecision"></param>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.Intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic intersection of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic intersection of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.Union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic union of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic union of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.Difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic difference of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry, to be subtracted from the first.</param>
            <returns>The Geometry representing the set-theoretic difference of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.SymDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary
            > Computes the set-theoretic symmetric difference of two geometries,
            using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic symmetric difference of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the buffer a point, using enhanced precision.
            </summary>
            <param name="geom0">The Geometry to buffer.</param>
            <param name="distance">The buffer distance.</param>
            <returns>The Geometry representing the buffer of the input Geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.ComputeResultPrecision(GeoAPI.Geometries.IGeometry)">
            <summary>
            If required, returning the result to the orginal precision if required.
            In this current implementation, no rounding is performed on the
            reshifted result point, which means that it is possible
            that the returned Geometry is invalid.
            </summary>
            <param name="result">The result Geometry to modify.</param>
            <returns>The result Geometry with the required precision.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.RemoveCommonBits(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a copy of the input <c>Geometry</c> with the calculated common bits
            removed from each coordinate.
            </summary>
            <param name="geom0">The Geometry to remove common bits from.</param>
            <returns>A copy of the input Geometry with common bits removed.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsOp.RemoveCommonBits(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a copy of each input <c>Geometry</c>s with the calculated common bits
            removed from each coordinate.
            </summary>
            <param name="geom0">A Geometry to remove common bits from.</param>
            <param name="geom1">A Geometry to remove common bits from.</param>
            <returns>
            An array containing copies
            of the input Geometry's with common bits removed.
            </returns>
        </member>
        <member name="T:NetTopologySuite.Precision.CommonBitsRemover">
            <summary>
            Removes common most-significant mantissa bits
            from one or more <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            <para/>
            The CommonBitsRemover "scavenges" precision
            which is "wasted" by a large displacement of the geometry
            from the origin.
            For example, if a small geometry is displaced from the origin
            by a large distance,
            the displacement increases the significant figures in the coordinates,
            but does not affect the <i>relative</i> topology of the geometry.
            Thus the geometry can be translated back to the origin
            without affecting its topology.
            In order to compute the translation without affecting
            the full precision of the coordinate values,
            the translation is performed at the bit level by
            removing the common leading mantissa bits.
            <para/>
            If the geometry envelope already contains the origin,
            the translation procedure cannot be applied.
            In this case, the common bits value is computed as zero.
            <para/>
            If the geometry crosses the Y axis but not the X axis
            (and <i>mutatis mutandum</i>),
            the common bits for Y are zero,
            but the common bits for X are non-zero.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsRemover.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Add a point to the set of geometries whose common bits are
            being computed.  After this method has executed the
            common coordinate reflects the common bits of all added
            geometries.
            </summary>
            <param name="geom">A Geometry to test for common bits.</param>
        </member>
        <member name="P:NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinate">
            <summary>
            The common bits of the Coordinates in the supplied Geometries.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsRemover.RemoveCommonBits(GeoAPI.Geometries.IGeometry)">
            <summary>
            Removes the common coordinate bits from a Geometry.
            The coordinates of the Geometry are changed.
            </summary>
            <param name="geom">The Geometry from which to remove the common coordinate bits.</param>
            <returns>The shifted Geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsRemover.AddCommonBits(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds the common coordinate bits back into a Geometry.
            The coordinates of the Geometry are changed.
            </summary>
            <param name="geom">The Geometry to which to add the common coordinate bits.</param>
        </member>
        <member name="T:NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter.Filter(GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="coord"></param>
        </member>
        <member name="P:NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter.CommonCoordinate">
             <summary>
            
             </summary>
        </member>
        <member name="T:NetTopologySuite.Precision.CommonBitsRemover.Translater">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsRemover.Translater.#ctor(GeoAPI.Geometries.Coordinate)">
             <summary>
            
             </summary>
             <param name="trans"></param>
        </member>
        <member name="M:NetTopologySuite.Precision.CommonBitsRemover.Translater.Filter(GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
             <summary>
            
             </summary>
             <param name="seq">The coordinate sequence</param>
        </member>
        <member name="T:NetTopologySuite.Precision.CoordinatePrecisionReducerFilter">
            <summary>
             Reduces the precision of the <see cref="T:GeoAPI.Geometries.Coordinate"/>s in a
             <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> to match the supplied <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.
            </summary>
             <remarks>
             Uses <see cref="M:GeoAPI.Geometries.IPrecisionModel.MakePrecise(System.Double)"/>.
             The input is modified in-place, so
             it should be cloned beforehand if the
             original should not be modified.
             </remarks>
             <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Precision.CoordinatePrecisionReducerFilter.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
             Creates a new precision reducer filter.
            </summary>
             <param name="precModel">The PrecisionModel to use</param>
        </member>
        <member name="M:NetTopologySuite.Precision.CoordinatePrecisionReducerFilter.Filter(GeoAPI.Geometries.ICoordinateSequence,System.Int32)">
            <summary>
             Rounds the Coordinates in the sequence to match the PrecisionModel
            </summary>
        </member>
        <member name="P:NetTopologySuite.Precision.CoordinatePrecisionReducerFilter.Done">
            <summary>
             Always runs over all geometry components.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Precision.CoordinatePrecisionReducerFilter.GeometryChanged">
            <summary>
             Always reports that the geometry has changed
            </summary>
        </member>
        <member name="T:NetTopologySuite.Precision.EnhancedPrecisionOp">
            <summary>
            Provides versions of Geometry spatial functions which use
            enhanced precision techniques to reduce the likelihood of robustness problems.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.EnhancedPrecisionOp.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.EnhancedPrecisionOp.Intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic intersection of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic intersection of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.EnhancedPrecisionOp.Union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic union of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic union of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.EnhancedPrecisionOp.Difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic difference of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic difference of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.EnhancedPrecisionOp.SymDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic symmetric difference of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic symmetric difference of the input Geometries.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.EnhancedPrecisionOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the buffer of a <c>Geometry</c>, using enhanced precision.
            This method should no longer be necessary, since the buffer algorithm
            now is highly robust.
            </summary>
            <param name="geom">The first Geometry.</param>
            <param name="distance">The buffer distance.</param>
            <returns>The Geometry representing the buffer of the input Geometry.</returns>
        </member>
        <member name="T:NetTopologySuite.Precision.GeometryPrecisionReducer">
            <summary>
            Reduces the precision of a <see cref="T:GeoAPI.Geometries.IGeometry"/>
            according to the supplied <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>,
            ensuring that the result is topologically valid.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.GeometryPrecisionReducer.Reduce(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Convenience method for doing precision reduction
            on a single geometry,
            with collapses removed
            and keeping the geometry precision model the same,
            and preserving polygonal topology.
            </summary>
            <param name="g">The geometry to reduce</param>
            <param name="precModel">The precision model to use</param>
            <returns>The reduced geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.GeometryPrecisionReducer.ReducePointwise(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Convenience method for doing pointwise precision reduction
            on a single geometry,
            with collapses removed
            and keeping the geometry precision model the same,
            but NOT preserving valid polygonal topology.
            </summary>
            <param name="g">The geometry to reduce</param>
            <param name="precModel">The precision model to use</param>
            <returns>The reduced geometry</returns>
        </member>
        <member name="P:NetTopologySuite.Precision.GeometryPrecisionReducer.RemoveCollapsedComponents">
            <summary>Gets or sets whether the reduction will result in collapsed components
            being removed completely, or simply being collapsed to an (invalid)
            Geometry of the same type.
            The default is to remove collapsed components.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Precision.GeometryPrecisionReducer.ChangePrecisionModel">
            <summary>
            /// Gets or sets whether the <see cref = "T:GeoAPI.Geometries.IPrecisionModel"/> of the new reduced Geometry
            will be changed to be the <see cref="T:GeoAPI.Geometries.IPrecisionModel"/> supplied to
            specify the precision reduction.
            <para/>
            The default is to <b>not</b> change the precision model
            </summary>
        </member>
        <member name="P:NetTopologySuite.Precision.GeometryPrecisionReducer.Pointwise">
            <summary>
            Gets or sets whether the precision reduction will be done
            in pointwise fashion only.
            Pointwise precision reduction reduces the precision
            of the individual coordinates only, but does
            not attempt to recreate valid topology.
            This is only relevant for geometries containing polygonal components.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.GeometryPrecisionReducer.ChangePrecModel(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Duplicates a geometry to one that uses a different PrecisionModel,
            without changing any coordinate values.
            </summary>
            <param name="geom">The geometry to duplicate</param>
            <param name="pm">The precision model to use</param>
            <returns>The geometry value with a new precision model</returns>
        </member>
        <member name="T:NetTopologySuite.Precision.MinimumClearance">
            <summary>
            Computes the Minimum Clearance of a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            <para/>
            The <b>Minimum Clearance</b> is a measure of
            what magnitude of perturbation of
            the vertices of a geometry can be tolerated
            before the geometry becomes topologically invalid.
            The smaller the Minimum Clearance distance,
            the less vertex pertubation the geometry can tolerate
            before becoming invalid.
            </summary>
            <remarks>
            The concept was introduced by Thompson and Van Oosterom
            [TV06], based on earlier work by Milenkovic [Mi88].
            <para/>
            The Minimum Clearance of a geometry G
            is defined to be the value <i>r</i>
            such that "the movement of all points by a distance
            of <i>r</i> in any direction will
            guarantee to leave the geometry valid" [TV06].
            An equivalent constructive definition [Mi88] is that
            <i>r</i> is the largest value such:
            <list type="Bullet">
            <item>No two distinct vertices of G are closer than <i>r</i>.</item>
            <item>No vertex of G is closer than <i>r</i> to an edge of G of which the vertex is not an endpoint</item>
            </list>
            The following image shows an example of the Minimum Clearance
            of a simple polygon.
            <para/>
            <center><img src="DocFiles/minClearance.png"/></center>
            <para/>
            If G has only a single vertex (i.e. is a
            <see cref="T:GeoAPI.Geometries.IPoint"/>), the value of the minimum clearance
            is <see cref="F:System.Double.MaxValue"/>.
            <para/>
            If G is a <see cref="T:GeoAPI.Geometries.IPuntal"/> or <see cref="T:GeoAPI.Geometries.ILineal"/> geometry,
            then in fact no amount of perturbation
            will render the geometry invalid.
            In this case a Minimum Clearance is still computed
            based on the vertex and segment distances
            according to the constructive definition.
            <para/>
            It is possible for no Minimum Clearance to exist.
            For instance, a <see cref="T:GeoAPI.Geometries.IMultiPoint"/> with all members identical
            has no Minimum Clearance
            (i.e. no amount of perturbation will cause
            the member points to become non-identical).
            Empty geometries also have no such distance.
            The lack of a meaningful MinimumClearance distance is detected
            and suitable values are returned by
            <see cref="M:NetTopologySuite.Precision.MinimumClearance.GetDistance"/> and <see cref="M:NetTopologySuite.Precision.MinimumClearance.GetLine"/>.
            <para/>
            The computation of Minimum Clearance utilizes
            the <see cref="!:STRtree.NearestNeighbour(NetTopologySuite.Index.Strtree.IItemDistance)"/>
            method to provide good performance even for
            large inputs.
            <para/>
            An interesting note is that for the case of <see cref="T:GeoAPI.Geometries.IMultiPoint"/>s,
            the computed Minimum Clearance line
            effectively determines the Nearest Neighbours in the collection.
            <h3>References</h3>
            <list type="Bullet">
            <item>[Mi88] Milenkovic, V. J.,
            <i>Verifiable implementations of geometric algorithms
            using finite precision arithmetic</i>.
            in Artificial Intelligence, 377-401. 1988</item>
            <item>[TV06] Thompson, Rod and van Oosterom, Peter,
            <i>Interchange of Spatial Data-Inhibiting Factors</i>,
            Agile 2006, Visegrad, Hungary. 2006</item>
            </list>
            </remarks>
            /// <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Precision.MinimumClearance.GetDistance(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the Minimum Clearance distance for
            the given Geometry.
            </summary>
            <param name="g">The input geometry</param>
            <returns>The minimum clearance</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.MinimumClearance.GetLine(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets a LineString containing two points
            which are at the Minimum Clearance distance
            for the given Geometry.
            </summary>
            <param name="g">The input geometry</param>
            <returns>The value of the minimum clearance distance<br/> 
            or <c>LINESTRING EMPTY</c> if no minimum clearance distance exists.</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.MinimumClearance.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates an object to compute the Minimum Clearance for the given Geometry
            </summary>
            <param name="geom">The input geometry</param>
        </member>
        <member name="M:NetTopologySuite.Precision.MinimumClearance.GetDistance">
            <summary>
            Gets the Minimum Clearance distance.
            <para>If no distance exists
             (e.g. in the case of two identical points)
            <see cref="F:System.Double.MaxValue"/> is returned.</para>
            </summary>
            <returns>
            The value of the minimum clearance distance<br/>
            or <see cref="F:System.Double.MaxValue"/> if no Minimum Clearance distance exists
            </returns>
        </member>
        <member name="M:NetTopologySuite.Precision.MinimumClearance.GetLine">
            <summary>
            Gets a LineString containing two points
            which are at the Minimum Clearance distance.<para/>
            If no distance could be found
            (e.g. in the case of two identical points)
            <c>LINESTRING EMPTY</c> is returned.
            </summary>
            <returns>The value of the minimum clearance distance, <br/>
            or <c>LINESTRING EMPTY</c> if no minimum clearance distance exists.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetTopologySuite.Precision.MinimumClearance.MinClearanceDistance" -->
        <member name="T:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer">
            <summary>
            Reduces the precision of the coordinates of a <c>Geometry</c>
            according to the supplied {PrecisionModel}, without
            attempting to preserve valid topology.
            </summary>
            <remarks>
            In case of <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometries,
            the topology of the resulting geometry may be invalid if
            topological collapse occurs due to coordinates being shifted.
            It is up to the client to check this and handle it if necessary.
            Collapses may not matter for some uses. An example
            is simplifying the input to the buffer algorithm.
            The buffer algorithm does not depend on the validity of the input point.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.Reduce(GeoAPI.Geometries.IGeometry,NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
             Convenience method for doing precision reduction on a single geometry,
             with collapses removed and keeping the geometry precision model the same.
            </summary>
             <returns>The reduced geometry</returns>
        </member>
        <member name="M:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.#ctor(NetTopologySuite.Geometries.PrecisionModel)">
             <summary>
            
             </summary>
             <param name="pm"></param>
        </member>
        <member name="P:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.RemoveCollapsedComponents">
            <summary>
            Sets whether the reduction will result in collapsed components
            being removed completely, or simply being collapsed to an (invalid)
            Geometry of the same type.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.ChangePrecisionModel">
            <summary>
            Gets/Sets whether the PrecisionModel of the new reduced Geometry
            will be changed to be the PrecisionModel supplied to
            specify the precision reduction.  <para/>
            The default is to not change the precision model.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.Reduce(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.PrecisionReducerCoordinateOperation">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.PrecisionReducerCoordinateOperation.#ctor(NetTopologySuite.Precision.SimpleGeometryPrecisionReducer)">
             <summary>
            
             </summary>
             <param name="container"></param>
        </member>
        <member name="M:NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.PrecisionReducerCoordinateOperation.Edit(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="coordinates"></param>
             <param name="geom"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Precision.SimpleMinimumClearance">
            <summary>
            Computes the minimum clearance of a geometry or
            set of geometries.<para/>
            The <b>Minimum Clearance</b> is a measure of
            what magnitude of perturbation of its vertices can be tolerated
            by a geometry before it becomes topologically invalid.
            <para/>
            This class uses an inefficient O(N^2) scan.
            It is primarily for testing purposes.
            </summary>
            <seealso cref="T:NetTopologySuite.Precision.MinimumClearance"/>
            <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Shape.Fractal.KochSnowflakeBuilder.HeightFactor">
            <summary>
            The height of an equilateral triangle of side one
            </summary>
        </member>
        <member name="P:NetTopologySuite.Shape.GeometricShapeBuilder.NumPoints">
            <summary>
            Gets or sets the total number of points in the created <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            The created geometry will have no more than this number of points,
            unless more are needed to create a valid geometry.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Shape.Random.RandomPointsBuilder">
            <summary>
            Creates random point sets contained in a
            region defined by either a rectangular or a polygonal extent.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Shape.Random.RandomPointsBuilder.#ctor">
            <summary>
            Create a shape factory which will create shapes using the default
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Shape.Random.RandomPointsBuilder.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a shape factory which will create shapes using the given
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>
            </summary>
            <param name="geomFact">The factory to use</param>
        </member>
        <member name="M:NetTopologySuite.Shape.Random.RandomPointsBuilder.SetExtent(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets a polygonal mask.
            </summary>
            <exception cref="T:System.ArgumentException">if the mask is not polygonal</exception>
        </member>
        <member name="T:NetTopologySuite.Shape.Random.RandomPointsInGridBuilder">
            <summary>
            Creates random point sets where the points
            are constrained to lie in the cells of a grid.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.#ctor">
            <summary>
            Create a builder which will create shapes using the default
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a builder which will create shapes using the given
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
            <param name="geomFact">The factory to use</param>
        </member>
        <member name="P:NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.ConstrainedToCircle">
            <summary>
            Gets or sets whether generated points are constrained to lie
            within a circle contained within each grid cell.
            This provides greater separation between points
            in adjacent cells.
            <para/>
            The default is to not be constrained to a circle.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.GutterFraction">
            <summary>
            Gets or sets the fraction of the grid cell side which will be treated as
            a gutter, in which no points will be created.
            <para/>
            The provided value is clamped to the range [0.0, 1.0].
            </summary>
        </member>
        <member name="M:NetTopologySuite.Shape.Random.RandomPointsInGridBuilder.GetGeometry">
            <summary>
            Gets the <see cref="T:GeoAPI.Geometries.IMultiPoint"/> containing the generated point
            </summary>
            <returns>A MultiPoint</returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier">
            <summary>
            Simplifies a line (sequence of points) using
            the standard Douglas-Peucker algorithm.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.Simplify(GeoAPI.Geometries.Coordinate[],System.Double)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="distanceTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.#ctor(GeoAPI.Geometries.Coordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="P:NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.DistanceTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.Simplify">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.SimplifySection(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="T:NetTopologySuite.Simplify.DouglasPeuckerSimplifier">
            <summary>
            Simplifies a <see cref="T:GeoAPI.Geometries.IGeometry"/> using the Douglas-Peucker algorithm.
            </summary>
            <remarks>
            Ensures that any polygonal geometries returned are valid.
            Simple lines are not guaranteed to remain simple after simplification.
            All geometry types are handled. 
            Empty and point geometries are returned unchanged.
            Empty geometry components are deleted.
            <para/>
            Note that in general D-P does not preserve topology -
            e.g. polygons can be split, collapse to lines or disappear
            holes can be created or disappear,
            and lines can cross.
            To simplify point while preserving topology use TopologySafeSimplifier.
            (However, using D-P is significantly faster).
            <para/>
            KNOWN BUGS:
            In some cases the approach used to clean invalid simplified polygons
            can distort the output geometry severely.  
            </remarks>
            <seealso cref="T:NetTopologySuite.Simplify.TopologyPreservingSimplifier"/>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.Simplify(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Simplifies a geometry using a given tolerance.
            </summary>
            <param name="geom">The geometry to simplify.</param>
            <param name="distanceTolerance">The tolerance to use.</param>
            <returns>A simplified version of the geometry.</returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a simplifier for a given geometry.
            </summary>
            <param name="inputGeom">The geometry to simplify.</param>
        </member>
        <member name="P:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DistanceTolerance">
            <summary>
            The distance tolerance for the simplification.
            </summary>
            <remarks>
            All vertices in the simplified geometry will be within this
            distance of the original geometry.
            The tolerance value must be non-negative. 
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.EnsureValidTopology">
            <summary>
            Controls whether simplified polygons will be "fixed"
            to have valid topology.
            </summary>
            <remarks>
            The caller may choose to disable this because:
            <list type="Bullet">
            <item>valid topology is not required</item>
            <item>fixing topology is a relative expensive operation</item>
            <item>in some pathological cases the topology fixing operation may either fail or run for too long</item>
            </list>
            The default is to fix polygon topology.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.GetResultGeometry">
            <summary>
            Gets the simplified geometry.
            </summary>
            <returns>The simplified geometry.</returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.#ctor(NetTopologySuite.Simplify.DouglasPeuckerSimplifier,System.Boolean)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="ensureValidTopology"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            Simplifies a polygon, fixing it if required.
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformLinearRing(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IGeometry)">
            <summary>
             Simplifies a LinearRing.  If the simplification results in a degenerate ring, remove the component.
            </summary>
             <returns>null if the simplification results in a degenerate ring</returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.CreateValidArea(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a valid area point from one that possibly has
            bad topology (i.e. self-intersections).
            Since buffer can handle invalid topology, but always returns
            valid point, constructing a 0-width buffer "corrects" the
            topology.
            Note this only works for area geometries, since buffer always returns
            areas.  This also may return empty geometries, if the input
            has no actual area.
            </summary>
            <param name="rawAreaGeom">An area point possibly containing self-intersections.</param>
            <returns>A valid area point.</returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.LineSegmentIndex">
            <summary>
            An index of LineSegments.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.LineSegmentIndex.Add(NetTopologySuite.Simplify.TaggedLineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.LineSegmentIndex.Add(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.LineSegmentIndex.Remove(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.LineSegmentIndex.Query(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="querySeg"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.LineSegmentVisitor">
            <summary>
            ItemVisitor subclass to reduce volume of query results.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.LineSegmentVisitor.#ctor(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="querySeg"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.LineSegmentVisitor.VisitItem(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:NetTopologySuite.Simplify.LineSegmentVisitor.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Simplify.OldVWLineSimplifier">
            <summary>
            Simplifies a linestring (sequence of points) using the 
            Visvalingam-Whyatt algorithm.
            The Visvalingam-Whyatt algorithm simplifies geometry 
            by removing vertices while trying to minimize the area changed.
            </summary>
            <version>1.7</version>
        </member>
        <member name="T:NetTopologySuite.Simplify.TaggedLineSegment">
            <summary>
            A LineSegment which is tagged with its location in a <c>Geometry</c>.
            Used to index the segments in a point and recover the segment locations
            from the index.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineSegment.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.IGeometry,System.Int32)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="parent"></param>
            <param name="index"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineSegment.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineSegment.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineSegment.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetTopologySuite.Simplify.TaggedLinesSimplifier">
            <summary>
            Simplifies a collection of <c>TaggedLineString</c>s, preserving topology
            (in the sense that no new intersections are introduced).
            This class is essentially just a container for the common
            indexes used by <see cref="T:NetTopologySuite.Simplify.TaggedLineStringSimplifier"/>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLinesSimplifier.DistanceTolerance">
            <summary>
            Gets or sets the distance tolerance for the simplification.<br/>
            Points closer than this tolerance to a simplified segment may
            be removed.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLinesSimplifier.Simplify(System.Collections.Generic.ICollection{NetTopologySuite.Simplify.TaggedLineString})">
            <summary>
            Simplifies a collection of <c>TaggedLineString</c>s.
            </summary>
            <param name="taggedLines">The collection of lines to simplify.</param>
        </member>
        <member name="T:NetTopologySuite.Simplify.TaggedLineString">
            <summary>
            Represents a <see cref="T:GeoAPI.Geometries.ILineString"/> which can be modified to a simplified shape.
            This class provides an attribute which specifies the minimum allowable length
            for the modified result.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.#ctor(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="parentLine"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.#ctor(GeoAPI.Geometries.ILineString,System.Int32)">
            <summary>
            
            </summary>
            <param name="parentLine"></param>
            <param name="minimumSize"></param>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineString.MinimumSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineString.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineString.ParentCoordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineString.ResultCoordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineString.ResultSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.GetSegment(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.Init">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineString.Segments">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.AddToResult(NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.AsLineString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.AsLinearRing">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineString.ExtractCoordinates(System.Collections.Generic.IList{NetTopologySuite.Geometries.LineSegment})">
            <summary>
            
            </summary>
            <param name="segs"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.TaggedLineStringSimplifier">
            <summary>
            Simplifies a TaggedLineString, preserving topology
            (in the sense that no new intersections are introduced).
            Uses the recursive Douglas-Peucker  algorithm.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.TaggedLineStringSimplifier.DistanceTolerance">
            <summary>
            Sets the distance tolerance for the simplification.
            All vertices in the simplified geometry will be within this
            distance of the original geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineStringSimplifier.Simplify(NetTopologySuite.Simplify.TaggedLineString)">
            <summary>
            Simplifies the given <see cref="T:NetTopologySuite.Simplify.TaggedLineString"/>
            using the distance tolerance specified.
            </summary>
            <param name="line">The linestring to simplify.</param>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineStringSimplifier.Flatten(System.Int32,System.Int32)">
            <summary>
            Flattens a section of the line between
            indexes <paramref name="start"/> and <paramref name="end"/>,
            replacing them with a line between the endpoints.
            The input and output indexes are updated
            to reflect this.
            </summary>
            <param name="start">The start index of the flattened section.</param>
            <param name="end">The end index of the flattened section.</param>
            <returns>The new segment created.</returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineStringSimplifier.IsInLineSection(NetTopologySuite.Simplify.TaggedLineString,System.Int32[],NetTopologySuite.Simplify.TaggedLineSegment)">
            <summary>
            Tests whether a segment is in a section of a <see cref="T:NetTopologySuite.Simplify.TaggedLineString"/>.
            </summary>
            <param name="line"></param>
            <param name="sectionIndex"></param>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.TaggedLineStringSimplifier.Remove(NetTopologySuite.Simplify.TaggedLineString,System.Int32,System.Int32)">
            <summary>
            Remove the segs in the section of the line.
            </summary>
            <param name="line"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="T:NetTopologySuite.Simplify.TopologyPreservingSimplifier">
            <summary>
            Simplifies a point and ensures that
            the result is a valid point having the
            same dimension and number of components as the input,
            and with the components having the same topological 
            relationship.
            <para/>
            If the input is a polygonal geometry
            (<see cref="T:GeoAPI.Geometries.IPolygon"/> or <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>):
            <list type="Bullet">
            <item>The result has the same number of shells and holes as the input,
             with the same topological structure</item>
            <item>The result rings touch at no more than the number of touching points in the input
            (although they may touch at fewer points).
            The key implication of this statement is that if the
            input is topologically valid, so is the simplified output.</item>
            </list>
            For linear geometries, if the input does not contain
            any intersecting line segments, this property
            will be preserved in the output.
            <para/>
            For all geometry types, the result will contain 
            enough vertices to ensure validity.  For polygons
            and closed linear geometries, the result will have at
            least 4 vertices; for open linestrings the result
            will have at least 2 vertices.
            <para/>
            All geometry types are handled. 
            Empty and point geometries are returned unchanged.
            Empty geometry components are deleted.
            <para/>
            The simplification uses a maximum-distance difference algorithm
            similar to the Douglas-Peucker algorithm.
            </summary>
            <remarks>
            <h3>KNOWN BUGS</h3>
            <list type="Bullet">
            <item>May create invalid topology if there are components which are small 
            relative to the tolerance value.
            In particular, if a small hole is very near an edge, 
            it is possible for the edge to be moved by a relatively large tolerance value 
            and end up with the hole outside the result shell (or inside another hole).
            Similarly, it is possible for a small polygon component to end up inside
            a nearby larger polygon.
            A workaround is to test for this situation in post-processing and remove
            any invalid holes or polygons.</item>
            </list>
            </remarks>
            <seealso cref="T:NetTopologySuite.Simplify.DouglasPeuckerSimplifier"/>
        </member>
        <member name="M:NetTopologySuite.Simplify.TopologyPreservingSimplifier.Simplify(GeoAPI.Geometries.IGeometry,System.Double)">
             <summary>
            
             </summary>
             <param name="geom"></param>
             <param name="distanceTolerance"></param>
             <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.TopologyPreservingSimplifier.#ctor(GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="inputGeom"></param>
        </member>
        <member name="P:NetTopologySuite.Simplify.TopologyPreservingSimplifier.DistanceTolerance">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TopologyPreservingSimplifier.GetResultGeometry">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringTransformer">
             <summary>
            
             </summary>
        </member>
        <member name="M:NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
             <summary>
            
             </summary>
             <param name="coords"></param>
             <param name="parent"></param>
             <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringMapBuilderFilter">
            <summary>
            A filter to add linear geometries to the linestring map 
            with the appropriate minimum size constraint.
            Closed <see cref="T:GeoAPI.Geometries.ILineString"/>s (including <see cref="T:GeoAPI.Geometries.ILinearRing"/>s
            have a minimum output size constraint of 4, 
            to ensure the output is valid.
            For all other linestrings, the minimum size is 2 points.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringMapBuilderFilter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            Filters linear geometries.
            </summary>
            <param name="geom">A geometry of any type</param>
        </member>
        <member name="T:NetTopologySuite.Simplify.VWLineSimplifier">
            <summary>
            Simplifies a linestring (sequence of points) using the 
            Visvalingam-Whyatt algorithm.
            The Visvalingam-Whyatt algorithm simplifies geometry 
            by removing vertices while trying to minimize the area changed.
            </summary>
            <version>1.7</version>
        </member>
        <member name="T:NetTopologySuite.Simplify.VWSimplifier">
            <summary>
            Simplifies a <see cref="T:GeoAPI.Geometries.IGeometry"/> using the Visvalingam-Whyatt area-based algorithm. 
            Ensures that any polygonal geometries returned are valid. Simple lines are not
            guaranteed to remain simple after simplification. All geometry types are
            handled. Empty and point geometries are returned unchanged. Empty geometry
            components are deleted.
            The simplification tolerance is specified as a distance. 
            This is converted to an area tolerance by squaring it.   
            <para>
            <b>Known Bugs</b>    
            * Not yet optimized for performance.
            * Does not simplify the endpoint of rings.
            <b>To Do</b>
            * Allow specifying desired number of vertices in the output.
            </para>
            </summary>
            <remarks>
            Note that in general this algorithm does not preserve topology - e.g. polygons can be split,
            collapse to lines or disappear holes can be created or disappear, and lines
            can cross.
            </remarks>
            <version>1.7</version>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.Simplify(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Simplifies a <see cref="T:GeoAPI.Geometries.IGeometry"/> using a given tolerance.
            </summary>
            <param name="geom">The <see cref="T:GeoAPI.Geometries.IGeometry"/> to simplify.</param>
            <param name="distanceTolerance">The tolerance to use.</param>
            <returns>A simplified version of the <see cref="T:GeoAPI.Geometries.IGeometry"/>.</returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a simplifier for a given <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="inputGeom">The <see cref="T:GeoAPI.Geometries.IGeometry"/> to simplify.</param>
        </member>
        <member name="P:NetTopologySuite.Simplify.VWSimplifier.DistanceTolerance">
            <summary>
            Sets the distance tolerance for the simplification. All vertices in the
            simplified <see cref="T:GeoAPI.Geometries.IGeometry"/> will be within this distance of the original geometry.
            The tolerance value must be non-negative.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Simplify.VWSimplifier.IsEnsureValidTopology">
            <summary>
            Controls whether simplified polygons will be "fixed" to have valid
            topology. The caller may choose to disable this because:
            * valid topology is not required.
            * fixing topology is a relative expensive operation.
            * in some pathological cases the topology fixing operation may either
            fail or run for too long.        
            </summary>
            <remarks>The default is to fix polygon topology.</remarks>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.GetResultGeometry">
            <summary>
            Gets the semplified <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <returns>The semplified <see cref="T:GeoAPI.Geometries.IGeometry"/>.</returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.VWTransformer.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            Simplifies a <see cref="T:GeoAPI.Geometries.IPolygon"/>, fixing it if required.
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.VWTransformer.TransformLinearRing(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IGeometry)">
            <summary>
            Simplifies a <see cref="T:GeoAPI.Geometries.ILinearRing"/>. If the simplification results in a degenerate
            ring, remove the component.
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns><c>null</c> if the simplification results in a degenerate ring.</returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.VWTransformer.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            Simplifies a <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>, fixing it if required.
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Simplify.VWSimplifier.VWTransformer.CreateValidArea(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a valid area geometry from one that possibly has bad topology
            (i.e. self-intersections). Since buffer can handle invalid topology, but
            always returns valid geometry, constructing a 0-width buffer "corrects"
            the topology. Note this only works for area geometries, since buffer
            always returns areas. This also may return empty geometries, if the input
            has no actual area.
            </summary>
            <param name="rawAreaGeom">An area geometry possibly containing self-intersections.</param>
            <returns>A valid area geometry.</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder">
            <summary>
            A utility class which creates Conforming Delaunay Trianglulations
            from collections of points and linear constraints, and extract the resulting 
            triangulation edges or triangles as geometries. 
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.SetSites(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets the sites (point or vertices) which will be triangulated.
            All vertices of the given geometry will be used as sites.
            The site vertices do not have to contain the constraint
            vertices as well; any site vertices which are 
            identical to a constraint vertex will be removed
            from the site vertex set.
            </summary>
            <remarks>The geometry from which the sites will be extracted.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.Constraints">
            <summary>
            Sets the linear constraints to be conformed to.
            All linear components in the input will be used as constraints.
            The constraint vertices do not have to be disjoint from 
            the site vertices.
            The constraints must not contain duplicate segments (up to orientation).
            </summary>        
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.Tolerance">
            <summary>
            Sets the snapping tolerance which will be used
            to improved the robustness of the triangulation computation.
            A tolerance of 0.0 specifies that no snapping will take place.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.GetSubdivision">
            <summary>
            Gets the QuadEdgeSubdivision which models the computed triangulation.
            </summary>
            <returns>The subdivision containing the triangulation</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.GetEdges(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the edges of the computed triangulation as a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="geomFact">The geometry factory to use to create the output</param>
            <returns>the edges of the triangulation</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulationBuilder.GetTriangles(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the faces of the computed triangulation as a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> 
            of <see cref="T:NetTopologySuite.Geometries.Polygon"/>.
            </summary>
            <param name="geomFact">the geometry factory to use to create the output</param>
            <returns>the faces of the triangulation</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator" -->
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.#ctor(System.Collections.Generic.IEnumerable{NetTopologySuite.Triangulate.QuadEdge.Vertex},System.Double)">
            <summary>
            Creates a Conforming Delaunay Triangulation based on the given
            unconstrained initial vertices. The initial vertex set should not contain
            any vertices which appear in the constraint set.
            </summary>
            <param name="initialVertices">a collection of <see cref="T:NetTopologySuite.Triangulate.ConstraintVertex"/></param>
            <param name="tolerance">the distance tolerance below which points are considered identical</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.SetConstraints(System.Collections.Generic.IList{NetTopologySuite.Triangulate.Segment},System.Collections.Generic.IList{NetTopologySuite.Triangulate.QuadEdge.Vertex})">
            <summary>
            Sets the constraints to be conformed to by the computed triangulation.
            The constraints must not contain duplicate segments (up to orientation).
            The unique set of vertices (as <see cref="T:NetTopologySuite.Triangulate.ConstraintVertex"/>es) 
            forming the constraints must also be supplied.
            Supplying it explicitly allows the ConstraintVertexes to be initialized
            appropriately(e.g. with external data), and avoids re-computing the unique set
            if it is already available.
            </summary>
            <param name="segments">list of the constraint {@link Segment}s</param>
            <param name="segVertices">the set of unique <see cref="T:NetTopologySuite.Triangulate.ConstraintVertex"/>es referenced by the segments</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.SplitPointFinder">
            <summary>
            Gets or sets the <see cref="T:NetTopologySuite.Triangulate.IConstraintSplitPointFinder"/> to be
            used during constraint enforcement.
            Different splitting strategies may be appropriate
            for special situations. 
            </summary>
            <remarks>the ConstraintSplitPointFinder to be used</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.Tolerance">
            <summary>
            Gets the tolerance value used to construct the triangulation.
            </summary>
            <remarks>a tolerance value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.VertexFactory">
            <summary>
            Gets and sets the <see cref="T:NetTopologySuite.Triangulate.ConstraintVertexFactory"/> used to create new constraint vertices at split points.
            </summary>
            <remarks>Allows the setting of a custom {@link ConstraintVertexFactory} to be used
            to allow vertices carrying extra information to be created.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.Subdivision">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/> which represents the triangulation.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.KDT">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Index.KdTree.KdTree`1"/> which contains the vertices of the triangulation.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.InitialVertices">
            <summary> 
            Gets the sites (vertices) used to initialize the triangulation.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.ConstraintSegments">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Triangulate.Segment"/>s which represent the constraints.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.ConvexHull">
            <summary>
            Gets the convex hull of all the sites in the triangulation,
            including constraint vertices.
            Only valid after the constraints have been enforced.
            </summary>
            <remarks>the convex hull of the sites</remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.CreateVertex(GeoAPI.Geometries.Coordinate,NetTopologySuite.Triangulate.Segment)">
            <summary>
            Creates a vertex on a constraint segment
            </summary>
            <param name="p">the location of the vertex to create</param>
            <param name="seg">the constraint segment it lies on</param>
            <returns>the new constraint vertex</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.InsertSites(System.Collections.Generic.ICollection{NetTopologySuite.Triangulate.QuadEdge.Vertex})">
            <summary>
            Inserts all sites in a collection
            </summary>
            <param name="vertices">a collection of ConstraintVertex</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.InsertSite(GeoAPI.Geometries.Coordinate)">
            <summary>
            Inserts a site into the triangulation, maintaining the conformal Delaunay property.
            This can be used to further refine the triangulation if required
            (e.g. to approximate the medial axis of the constraints,
            or to improve the grading of the triangulation).
            </summary>
            <param name="p">the location of the site to insert</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.FormInitialDelaunay">
            <summary>
            Computes the Delaunay triangulation of the initial sites.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.EnforceConstraints">
            <summary>
            Enforces the supplied constraints into the triangulation.
            </summary>
            <exception cref="T:NetTopologySuite.Triangulate.ConstraintEnforcementException">
            if the constraints cannot be enforced</exception>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConformingDelaunayTriangulator.FindNonGabrielPoint(NetTopologySuite.Triangulate.Segment)">
            <summary>
            Given a set of points stored in the kd-tree and a line segment defined by
            two points in this set, finds a <see cref="T:GeoAPI.Geometries.Coordinate"/> in the circumcircle of
            the line segment, if one exists. This is called the Gabriel point - if none
            exists then the segment is said to have the Gabriel condition. Uses the
            heuristic of finding the non-Gabriel point closest to the midpoint of the
            segment.
            </summary>
            <param name="seg">the line segment</param>
            <returns>
            A point which is non-Gabriel,
            or null if no point is non-Gabriel
            </returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.ConstraintEnforcementException">
            <summary>
            Indicates a failure during constraint enforcement.
            </summary>
            <author>Martin Davis</author>
            <version>1.0</version>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConstraintEnforcementException.#ctor(System.String)">
            <summary>
            Creates a new instance with a given message.
            </summary>
            <param name="msg">a string</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConstraintEnforcementException.#ctor(System.String,GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new instance with a given message and approximate location.
            </summary>
            <param name="msg">a string</param>
            <param name="pt">the location of the error</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConstraintEnforcementException.Coordinate">
            <summary>
            Gets the approximate location of this error.
            </summary>
            <remarks>a location</remarks>
        </member>
        <member name="T:NetTopologySuite.Triangulate.IConstraintSplitPointFinder">
            <summary>
            An interface for strategies for determining the location of split points on constraint segments.
            The location of split points has a large effect on the performance and robustness of enforcing a
            constrained Delaunay triangulation. Poorly chosen split points can cause repeated splitting,
            especially at narrow constraint angles, since the split point will end up encroaching on the
            segment containing the original encroaching point. With detailed knowledge of the geometry of the
            constraints, it is sometimes possible to choose better locations for splitting.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.IConstraintSplitPointFinder.FindSplitPoint(NetTopologySuite.Triangulate.Segment,GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds a point at which to split an encroached segment to allow the original segment to appear
            as edges in a constrained Delaunay triangulation.
            </summary>
            <param name="seg">the encroached segment</param>
            <param name="encroachPt">the encroaching point</param>
            <returns>the point at which to split the encroached segment</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.ConstraintVertex">
            <summary>
            A vertex in a Constrained Delaunay Triangulation.
            The vertex may or may not lie on a constraint.
            If it does it may carry extra information about the original constraint.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConstraintVertex.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates a new constraint vertex
            </summary>
            <param name="p">the location of the vertex</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConstraintVertex.IsOnConstraint">
            <summary>
            Gets or sets whether this vertex lies on a constraint.
            </summary>
            <remarks>true if the vertex lies on a constraint</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.ConstraintVertex.Constraint">
            <summary>
            Gets or sets the external constraint object
            </summary>
            <remarks>object which carries information about the constraint this vertex lies on</remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.ConstraintVertex.Merge(NetTopologySuite.Triangulate.ConstraintVertex)">
            <summary>
            Merges the constraint data in the vertex <tt>other</tt> into this vertex. 
            This method is called when an inserted vertex is
            very close to an existing vertex in the triangulation.
            </summary>
            <param name="other">the constraint vertex to merge</param>
        </member>
        <member name="T:NetTopologySuite.Triangulate.ConstraintVertexFactory">
            <summary>
            An interface for factories which create a {@link ConstraintVertex}
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder">
            <summary>
            A utility class which creates Delaunay Trianglulations
            from collections of points and extract the resulting 
            triangulation edges or triangles as geometries. 
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.ExtractUniqueCoordinates(GeoAPI.Geometries.IGeometry)">
            <summary>
            Extracts the unique <see cref="T:GeoAPI.Geometries.Coordinate"/>s from the given <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="geom">the geometry to extract from</param>
            <returns>a List of the unique Coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.ToVertices(System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})">
            <summary>
            Converts all <see cref="T:GeoAPI.Geometries.Coordinate"/>s in a collection to <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>es.
            </summary>
            <param name="coords">the coordinates to convert</param>
            <returns>a List of Vertex objects</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.Envelope(System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})">
            <summary>
            Computes the <see cref="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.Envelope(System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})"/> of a collection of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="coords">a List of Coordinates</param>
            <returns>the envelope of the set of coordinates</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.SetSites(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets the sites (vertices) which will be triangulated.
            All vertices of the given geometry will be used as sites.
            </summary>
            <param name="geom">the geometry from which the sites will be extracted.</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.SetSites(System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})">
            <summary>
            Sets the sites (vertices) which will be triangulated
            from a collection of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="coords">a collection of Coordinates.</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.Tolerance">
            <summary>
            Sets the snapping tolerance which will be used
            to improved the robustness of the triangulation computation.
            A tolerance of 0.0 specifies that no snapping will take place.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.GetSubdivision">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/> which models the computed triangulation.
            </summary>
            <returns>the subdivision containing the triangulation</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.GetEdges(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the edges of the computed triangulation as a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="geomFact">the geometry factory to use to create the output</param>
            <returns>the edges of the triangulation</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.DelaunayTriangulationBuilder.GetTriangles(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the faces of the computed triangulation as a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> 
            of <see cref="T:NetTopologySuite.Geometries.Polygon"/>.
            </summary>
            <param name="geomFact">the geometry factory to use to create the output</param>
            <returns>the faces of the triangulation</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.IncrementalDelaunayTriangulator">
            <summary>
            Computes a Delauanay Triangulation of a set of <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>es, using an
            incrementatal insertion algorithm.
            </summary>
            <author>Martin Davis</author>
            <version>1.0</version>
        </member>
        <member name="M:NetTopologySuite.Triangulate.IncrementalDelaunayTriangulator.#ctor(NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision)">
            <summary>
            Creates a new triangulator using the given <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>.
            The triangulator uses the tolerance of the supplied subdivision.
            </summary>
            <param name="subdiv">a subdivision in which to build the TIN</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.IncrementalDelaunayTriangulator.InsertSites(System.Collections.Generic.ICollection{NetTopologySuite.Triangulate.QuadEdge.Vertex})">
            <summary>
            Inserts all sites in a collection. The inserted vertices <b>MUST</b> be
            unique up to the provided tolerance value. (i.e. no two vertices should be
            closer than the provided tolerance value). They do not have to be rounded
            to the tolerance grid, however.
            </summary>
            <param name="vertices">a Collection of Vertex</param>
            <exception cref="T:NetTopologySuite.Triangulate.QuadEdge.LocateFailureException">if the location algorithm fails to converge in a reasonable number of iterations</exception>
        </member>
        <member name="M:NetTopologySuite.Triangulate.IncrementalDelaunayTriangulator.InsertSite(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Inserts a new point into a subdivision representing a Delaunay
            triangulation, and fixes the affected edges so that the result is still a
            Delaunay triangulation.
            </summary>
            <returns>a quadedge containing the inserted vertex</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.MidpointSplitPointFinder">
            <summary>
            A simple split point finder which returns the midpoint of the split segment. This is a default
            strategy only. Usually a more sophisticated strategy is required to prevent repeated splitting.
            Other points which could be used are:
            <ul>
            <li>The projection of the encroaching point on the segment</li>
            <li>A point on the segment which will produce two segments which will not be further encroached</li>
            <li>The point on the segment which is the same distance from an endpoint as the encroaching</li>
            point
            </ul>
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.MidpointSplitPointFinder.FindSplitPoint(NetTopologySuite.Triangulate.Segment,GeoAPI.Geometries.Coordinate)">
            <summary>
            Gets the midpoint of the split segment
            </summary>
        </member>
        <member name="T:NetTopologySuite.Triangulate.NonEncroachingSplitPointFinder">
            <summary>
            A strategy for finding constraint split points which attempts to maximise the length of the split
            segments while preventing further encroachment. (This is not always possible for narrow angles).
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.NonEncroachingSplitPointFinder.FindSplitPoint(NetTopologySuite.Triangulate.Segment,GeoAPI.Geometries.Coordinate)">
            <summary>
            A basic strategy for finding split points when nothing extra is known about the geometry of
            the situation.
            </summary>
            <param name="seg">the encroached segment</param>
            <param name="encroachPt">the encroaching point</param>
            <returns>the point at which to split the encroached segment</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.NonEncroachingSplitPointFinder.ProjectedSplitPoint(NetTopologySuite.Triangulate.Segment,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes a split point which is the projection of the encroaching point on the segment
            </summary>
            <param name="seg">The segment</param>
            <param name="encroachPt">The enchroaching point</param>
            <returns>A split point on the segment</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.EdgeConnectedTriangleTraversal">
            <summary>
            A framework to visit sets of edge-connected <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle"/>s in breadth-first order
            </summary>
            <author>Martin Davis</author>
            <version>1.0</version>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.EdgeConnectedTriangleTraversal.Init(System.Collections.Generic.IEnumerable{NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle})">
            <summary>
            Called to initialize the traversal queue with a given set of <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle"/>s
            </summary>
            <param name="tris">a collection of QuadEdgeTriangle</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.EdgeConnectedTriangleTraversal.VisitAll(NetTopologySuite.Triangulate.QuadEdge.ITraversalVisitor)">
            <summary>
            Subclasses call this method to perform the visiting process.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.IQuadEdgeLocator">
            <summary>
            An interface for classes which locate an edge in a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>
            which either contains a given <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/> V 
            or is an edge of a triangle which contains V. 
            Implementors may utilized different strategies for
            optimizing locating containing edges/triangles.
            </summary> 
            <author>Martin Davis</author>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.ITraversalVisitor">
            <summary>
            Interface for classes which process triangles visited during travesals of a
            <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.ITraversalVisitor.Visit(NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle,System.Int32,NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle)">
            <summary>
            Visits a triangle during a traversal of a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>. An implementation of
            this method may perform processing on the current triangle. It must also decide whether a
            neighbouring triangle should be added to the queue so its neighbours are visited. Often it
            will perform processing on the neighbour triangle as well, in order to mark it as processed
            (visited) and/or to determine if it should be visited. Note that choosing <b>not</b> to
            visit the neighbouring triangle is the terminating condition for many traversal algorithms.
            In particular, if the neighbour triangle has already been visited, it should not be visited
            again.
            </summary>
            <param name="currTri">the current triangle being processed</param>
            <param name="edgeIndex">the index of the edge in the current triangle being traversed</param>
            <param name="neighbTri">a neighbouring triangle next in line to visit</param>
            <returns>true if the neighbour triangle should be visited</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.ITriangleVisitor">
            <summary>
            An interface for algorithms which process the triangles in a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>.
            </summary>  
            <author>Martin Davis</author>
            <version>1.0</version>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetTopologySuite.Triangulate.QuadEdge.ITriangleVisitor.Visit(NetTopologySuite.Triangulate.QuadEdge.QuadEdge[])" -->
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.LastFoundQuadEdgeLocator">
            <summary>
            Locates <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>s in a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>,
            optimizing the search by starting in the
            locality of the last edge found.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.LastFoundQuadEdgeLocator.Locate(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Locates an edge e, such that either v is on e, or e is an edge of a triangle containing v.
            The search starts from the last located edge amd proceeds on the general direction of v.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge">
            <summary>
            A class that represents the edge data structure which implements the quadedge algebra. 
            The quadedge algebra was described in a well-known paper by Guibas and Stolfi,
            "Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams", 
            <i>ACM Transactions on Graphics</i>, 4(2), 1985, 75-123.
            <para>
            Each edge object is part of a quartet of 4 edges,
            linked via their <tt>Rot</tt> references.
            Any edge in the group may be accessed using a series of <see cref="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Rot"/> operations.
            Quadedges in a subdivision are linked together via their <tt>Next</tt> references.
            The linkage between the quadedge quartets determines the topology
            of the subdivision. 
            </para>
            <para>
            The edge class does not contain separate information for vertice or faces; a vertex is implicitly
            defined as a ring of edges (created using the <tt>Next</tt> field).
            </para>
            </summary>
            <author>David Skea</author>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.MakeEdge(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Creates a new QuadEdge quartet from <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>o to <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/> d.
            </summary>
            <param name="o">the origin Vertex</param>
            <param name="d">the destination Vertex</param>
            <returns>the new QuadEdge quartet</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Connect(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Creates a new QuadEdge connecting the destination of a to the origin of
            b, in such a way that all three have the same left face after the
            connection is complete. Additionally, the data pointers of the new edge
            are set.
            </summary>
            <returns>the connected edge</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Splice(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Splices two edges together or apart.
            Splice affects the two edge rings around the origins of a and b, and, independently, the two
            edge rings around the left faces of <tt>a</tt> and <tt>b</tt>. 
            In each case, (i) if the two rings are distinct,
            Splice will combine them into one, or (ii) if the two are the same ring, Splice will break it
            into two separate pieces. Thus, Splice can be used both to attach the two edges together, and
            to break them apart.
            </summary>
            <param name="a">an edge to splice</param>
            <param name="b">an edge to splice</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Swap(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Turns an edge counterclockwise inside its enclosing quadrilateral.
            </summary>
            <param name="e">the quadedge to turn</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.#ctor">
            <summary>
            Quadedges must be made using {@link makeEdge}, 
            to ensure proper construction.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.GetPrimary">
            <summary>
            Gets the primary edge of this quadedge and its <tt>sym</tt>.
            The primary edge is the one for which the origin
            and destination coordinates are ordered
            according to the standard <see cref="T:GeoAPI.Geometries.Coordinate"/> ordering
            </summary>
            <returns>the primary quadedge</returns>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Data">
            <summary>
            Gets or sets the external data value for this edge.
            </summary>
            <remarks>
            an object containing external data
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Delete">
            <summary>
            Marks this quadedge as being deleted.
            This does not free the memory used by
            this quadedge quartet, but indicates
            that this edge no longer participates
            in a subdivision.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.IsLive">
            <summary>
            Tests whether this edge has been deleted.
            </summary>
            <returns>true if this edge has not been deleted.</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.SetNext(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Sets the connected edge
            </summary>
            <param name="next">edge</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Rot">
            <summary>
            Gets the dual of this edge, directed from its right to its left.
            </summary>
            <remarks>Gets or Sets the rotated edge</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.InvRot">
            <summary>
            Gets the dual of this edge, directed from its left to its right.
            </summary>
            <remarks>Gets the inverse rotated edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Sym">
            <summary>
            Gets the edge from the destination to the origin of this edge.
            </summary>
            <remarks>Gets the sym of the edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.ONext">
            <summary>
            Gets the next CCW edge around the origin of this edge.
            </summary>
            <remarks>Gets the next linked edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.OPrev">
            <summary>
            Gets the next CW edge around (from) the origin of this edge.
            </summary>
            <remarks>Gets the previous edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.DNext">
            <summary>
            Gets the next CCW edge around (into) the destination of this edge.
            </summary>
            <remarks>Get the next destination edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.DPrev">
            <summary>
            Gets the next CW edge around (into) the destination of this edge.
            </summary>
            <remarks>Get the previous destination edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.LNext">
            <summary>
            Gets the CCW edge around the left face following this edge.
            </summary>
            <remarks>Gets the next left face edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.LPrev">
            <summary>
            Gets the CCW edge around the left face before this edge.
            </summary>
            <remarks>Get the previous left face edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.RNext">
            <summary>
            Gets the edge around the right face ccw following this edge.
            </summary>
            <remarks>Gets the next right face edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.RPrev">
            <summary>
            Gets the edge around the right face ccw before this edge.
            </summary>
            <remarks>Gets the previous right face edge.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Orig">
            <summary>
            Gets or sets the vertex for the edge's origin
            </summary>
            <remarks>Gets the origin vertex</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Dest">
            <summary>
            Gets or sets the vertex for the edge's destination
            </summary>
            <remarks>Gets the destination vertex</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.Length">
            <summary>
            Gets the length of the geometry of this quadedge.
            </summary>
            <remarks>Gets the length of the quadedge</remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.EqualsNonOriented(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Tests if this quadedge and another have the same line segment geometry, 
            regardless of orientation.
            </summary>
            <param name="qe">a quadege</param>
            <returns>true if the quadedges are based on the same line segment regardless of orientation</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.EqualsOriented(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Tests if this quadedge and another have the same line segment geometry
            with the same orientation.
            </summary>
            <param name="qe">a quadege</param>
            <returns>true if the quadedges are based on the same line segment</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.ToLineSegment">
            <summary>
            Creates a <see cref="T:NetTopologySuite.Geometries.LineSegment"/> representing the
            geometry of this edge.
            </summary>
            <returns>a LineSegment</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdge.ToString">
            <summary>
            Converts this edge to a WKT two-point <tt>LINESTRING</tt> indicating 
            the geometry of this edge.
            </summary>
            <returns>a String representing this edge's geometry</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision">
            <summary>
            A class that contains the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>s representing a planar
            subdivision that models a triangulation.
            The subdivision is constructed using the
            quadedge algebra defined in the classs <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>.
            All metric calculations
            are done in the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/> class.
            In addition to a triangulation, subdivisions
            support extraction of Voronoi diagrams.
            This is easily accomplished, since the Voronoi diagram is the dual
            of the Delaunay triangulation.
            <para>
            Subdivisions can be provided with a tolerance value. Inserted vertices which
            are closer than this value to vertices already in the subdivision will be
            ignored. Using a suitable tolerance value can prevent robustness failures
            from happening during Delaunay triangulation.
            </para>
            <para>
            Subdivisions maintain a <b>frame</b> triangle around the client-created
            edges. The frame is used to provide a bounded "container" for all edges
            within a TIN. Normally the frame edges, frame connecting edges, and frame
            triangles are not included in client processing.
            </para>
            </summary>
            <author>David Skea</author>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetTriangleEdges(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,NetTopologySuite.Triangulate.QuadEdge.QuadEdge[])">
            <summary>
            Gets the edges for the triangle to the left of the given <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>.
            </summary>
            <param name="startQE" />
            <param name="triEdge" />
            <exception cref="T:System.ArgumentException">if the edges do not form a triangle</exception>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.#ctor(GeoAPI.Geometries.Envelope,System.Double)">
            <summary>
            Creates a new instance of a quad-edge subdivision based on a frame triangle
            that encloses a supplied bounding box. A new super-bounding box that
            contains the triangle is computed and stored.
            </summary>
            <param name="env">the bouding box to surround</param>
            <param name="tolerance">the tolerance value for determining if two sites are equal</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Tolerance">
            <summary>
            Gets the vertex-equality tolerance value
            used in this subdivision
            </summary>
            <remarks>Gets the tolerance value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Envelope">
            <summary>
            Gets the envelope of the Subdivision (including the frame).
            </summary>
            <remarks>Gets the envelope</remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetEdges">
            <summary>
            Gets the collection of base <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>s (one for every pair of
            vertices which is connected).
            </summary>
            <returns>a collection of QuadEdges</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.SetLocator(NetTopologySuite.Triangulate.QuadEdge.IQuadEdgeLocator)">
            <summary>
            Sets the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.IQuadEdgeLocator"/> to use for locating containing triangles
            in this subdivision.
            </summary>
            <param name="locator">a QuadEdgeLocator</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.MakeEdge(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Creates a new quadedge, recording it in the edges list.
            </summary>
            <param name="o">The origin vertex</param>
            <param name="d">The destination vertex</param>
            <returns>A new quadedge</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Connect(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Creates a new QuadEdge connecting the destination of a to the origin of b,
            in such a way that all three have the same left face after the connection
            is complete. The quadedge is recorded in the edges list.
            </summary>
            <param name="a">A quadedge</param>
            <param name="b">A quadedge</param>
            <returns>A quadedge</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Delete(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Deletes a quadedge from the subdivision. Linked quadedges are updated to
            reflect the deletion.
            </summary>
            <param name="e">the quadedge to delete</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.LocateFromEdge(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Locates an edge of a triangle which contains a location
            specified by a Vertex v.
            The edge returned has the
            property that either v is on e, or e is an edge of a triangle containing v.
            The search starts from startEdge amd proceeds on the general direction of v.
            </summary>
            <remarks>
            This locate algorithm relies on the subdivision being Delaunay. For
            non-Delaunay subdivisions, this may loop for ever.
            </remarks>
            <param name="v">the location to search for</param>
            <param name="startEdge">an edge of the subdivision to start searching at</param>
            <returns>a QuadEdge which contains v, or is on the edge of a triangle containing v</returns>
            <exception cref="T:NetTopologySuite.Triangulate.QuadEdge.LocateFailureException">
            if the location algorithm fails to converge in a reasonable
            number of iterations
            </exception>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Locate(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Finds a quadedge of a triangle containing a location
            specified by a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>, if one exists.
            </summary>
            <param name="v">the vertex to locate</param>
            <returns>a quadedge on the edge of a triangle which touches or contains the location<br/>
            or null if no such triangle exists
            </returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Locate(GeoAPI.Geometries.Coordinate)">
            <summary>
            Finds a quadedge of a triangle containing a location
            specified by a <see cref="T:GeoAPI.Geometries.Coordinate"/>, if one exists.
            </summary>
            <param name="p">the Coordinate to locate</param>
            <returns>a quadedge on the edge of a triangle which touches or contains the location,
            or null if no such triangle exists
            </returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.Locate(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Locates the edge between the given vertices, if it exists in the
            subdivision.
            </summary>
            <param name="p0">a coordinate</param>
            <param name="p1">another coordinate</param>
            <returns>the edge joining the coordinates, if present,
            or null if no such edge exists
            </returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.InsertSite(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Inserts a new site into the Subdivision, connecting it to the vertices of
            the containing triangle (or quadrilateral, if the split point falls on an
            existing edge).
            </summary>
            <remarks>
            <para>
            This method does NOT maintain the Delaunay condition. If desired, this must
            be checked and enforced by the caller.
            </para>
            <para>
            This method does NOT check if the inserted vertex falls on an edge. This
            must be checked by the caller, since this situation may cause erroneous
            triangulation
            </para>
            </remarks>
            <param name="v">the vertex to insert</param>
            <returns>a new quad edge terminating in v</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.IsFrameEdge(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Tests whether a QuadEdge is an edge incident on a frame triangle vertex.
            </summary>
            <param name="e">the edge to test</param>
            <returns>true if the edge is connected to the frame triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.IsFrameBorderEdge(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Tests whether a QuadEdge is an edge on the border of the frame facets and
            the internal facets. E.g. an edge which does not itself touch a frame
            vertex, but which touches an edge which does.
            </summary>
            <param name="e">the edge to test</param>
            <returns>true if the edge is on the border of the frame</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.IsFrameVertex(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Tests whether a vertex is a vertex of the outer triangle.
            </summary>
            <param name="v">the vertex to test</param>
            <returns>true if the vertex is an outer triangle vertex</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.IsOnEdge(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether a {@link Coordinate} lies on a {@link QuadEdge}, up to a
            tolerance determined by the subdivision tolerance.
            </summary>
            <param name="e">a QuadEdge</param>
            <param name="p">a point</param>
            <returns>true if the vertex lies on the edge</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.IsVertexOfEdge(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Tests whether a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/> is the start or end vertex of a
            <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>, up to the subdivision tolerance distance.
            </summary>
            <param name="e" />
            <param name="v" />
            <returns>true if the vertex is a endpoint of the edge</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVertices(System.Boolean)">
            <summary>
            Gets the unique <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>es in the subdivision,
            including the frame vertices if desired.
            </summary>
            <param name="includeFrame">true if the frame vertices should be included</param>
            <returns>a collection of the subdivision vertices</returns>
            <see cref="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVertexUniqueEdges(System.Boolean)"/>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVertexUniqueEdges(System.Boolean)">
            <summary>
            Gets a collection of <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>s whose origin
            vertices are a unique set which includes
            all vertices in the subdivision.
            The frame vertices can be included if required.
            </summary>
            <remarks>
            This is useful for algorithms which require traversing the
            subdivision starting at all vertices.
            Returning a quadedge for each vertex
            is more efficient than
            the alternative of finding the actual vertices
            using <see cref="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVertices(System.Boolean)"/> and then locating
            quadedges attached to them.
            </remarks>
            <param name="includeFrame">true if the frame vertices should be included</param>
            <returns>a collection of QuadEdge with the vertices of the subdivision as their origins</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetPrimaryEdges(System.Boolean)">
            <summary>
            Gets all primary quadedges in the subdivision.
            A primary edge is a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>
            which occupies the 0'th position in its array of associated quadedges.
            These provide the unique geometric edges of the triangulation.
            </summary>
            <param name="includeFrame">true if the frame edges are to be included</param>
            <returns>a List of QuadEdges</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.TriangleCircumcentreVisitor">
            <summary>
            A TriangleVisitor which computes and sets the
            circumcentre as the origin of the dual
            edges originating in each triangle.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="F:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision._triEdges">
            <summary>
            The quadedges forming a single triangle.
            Only one visitor is allowed to be active at a
            time, so this is safe.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.FetchTriangleToVisit(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,System.Collections.Generic.Stack{NetTopologySuite.Triangulate.QuadEdge.QuadEdge},System.Boolean,System.Collections.Generic.HashSet{NetTopologySuite.Triangulate.QuadEdge.QuadEdge})">
            <summary>
            Stores the edges for a visited triangle. Also pushes sym (neighbour) edges
            on stack to visit later.
            </summary>
            <param name="edge" />
            <param name="edgeStack" />
            <param name="includeFrame" />
            <param name="visitedEdges"></param>
            <returns>the visited triangle edges,<br/>
            or <value>null</value> if the triangle should not be visited (for instance, if it is outer)
            </returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetTriangleEdges(System.Boolean)">
            <summary>
            Gets a list of the triangles
            in the subdivision, specified as
            an array of the primary quadedges around the triangle.
            </summary>
            <param name="includeFrame">true if the frame triangles should be included</param>
            <returns>a List of QuadEdge[3] arrays</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetTriangleVertices(System.Boolean)">
            <summary>
            Gets a list of the triangles in the subdivision,
            specified as an array of the triangle <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>es.
            </summary>
            <param name="includeFrame">true if the frame triangles should be included</param>
            <returns>a List of Vertex[3] arrays</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetTriangleCoordinates(System.Boolean)">
            <summary>
            Gets the coordinates for each triangle in the subdivision as an array.
            </summary>
            <param name="includeFrame">true if the frame triangles should be included</param>
            <returns>a list of Coordinate[4] representing each triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetEdges(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the geometry for the edges in the subdivision as a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>
            containing 2-point lines.
            </summary>
            <param name="geomFact">the GeometryFactory to use</param>
            <returns>a IMultiLineString</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetTriangles(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the geometry for the triangles in a triangulated subdivision as a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/>
            of triangular <see cref="T:GeoAPI.Geometries.IPolygon"/>s.
            </summary>
            <param name="geomFact">the GeometryFactory to use</param>
            <returns>a GeometryCollection of triangular Polygons</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVoronoiDiagram(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the cells in the Voronoi diagram for this triangulation.
            The cells are returned as a <see cref="T:GeoAPI.Geometries.IGeometryCollection" /> of <see cref="T:GeoAPI.Geometries.IPolygon"/>s
            </summary>
            <remarks>
            The userData of each polygon is set to be the <see cref="T:GeoAPI.Geometries.Coordinate" />
            of the cell site.  This allows easily associating external
            data associated with the sites to the cells.
            </remarks>
            <param name="geomFact">a geometry factory</param>
            <returns>a GeometryCollection of Polygons</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVoronoiCellPolygons(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets a List of <see cref="T:GeoAPI.Geometries.IPolygon"/>s for the Voronoi cells
            of this triangulation.
            </summary>
            <remarks>
            The UserData of each polygon is set to be the <see cref="T:GeoAPI.Geometries.Coordinate"/>
            of the cell site.  This allows easily associating external
            data associated with the sites to the cells.
            </remarks>
            <param name="geomFact">a geometry factory</param>
            <returns>a List of Polygons</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision.GetVoronoiCellPolygon(NetTopologySuite.Triangulate.QuadEdge.QuadEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the Voronoi cell around a site specified
            by the origin of a QuadEdge.
            </summary>
            <remarks>
            The userData of the polygon is set to be the <see cref="T:GeoAPI.Geometries.Coordinate" />
            of the site.  This allows attaching external
            data associated with the site to this cell polygon.
            </remarks>
            <param name="qe">a quadedge originating at the cell site</param>
            <param name="geomFact">a factory for building the polygon</param>
            <returns>a polygon indicating the cell extent</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle">
            <summary>
            Models a triangle formed from <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>s in a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/> 
            which forms a triangulation. The class provides methods to access the
            topological and geometric properties of the triangle and its neighbours in 
            the triangulation. Triangle vertices are ordered in CCW orientation in the 
            structure.
            </summary>
            <remarks>
            QuadEdgeTriangles support having an external data attribute attached to them.
            Alternatively, this class can be subclassed and attributes can 
            be defined in the subclass.  Subclasses will need to define 
            their own <c>BuilderVisitor</c> class
            and <c>CreateOn</c> method.
            </remarks>
            <author>Martin Davis</author>
            <version>1.0</version>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.CreateOn(NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision)">
            <summary>
            Creates <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle"/>s for all facets of a
            <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/> representing a triangulation.
            The <tt>data</tt> attributes of the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>s in the subdivision
            will be set to point to the triangle which contains that edge.
            This allows tracing the neighbour triangles of any given triangle.
            </summary>
            <param name="subdiv">The QuadEdgeSubdivision to create the triangles on.</param>
            <returns>A List of the created QuadEdgeTriangles</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.Contains(NetTopologySuite.Triangulate.QuadEdge.Vertex[],GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the point pt is contained in the triangle defined by 3 <see cref="T:NetTopologySuite.Triangulate.QuadEdge.Vertex"/>es.
            </summary>
            <param name="tri">an array containing at least 3 Vertexes</param>
            <param name="pt">the point to test</param>
            <returns>true if the point is contained in the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.Contains(NetTopologySuite.Triangulate.QuadEdge.QuadEdge[],GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests whether the point pt is contained in the triangle defined by 3 <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdge"/>es.
            </summary>
            <param name="tri">an array containing at least 3 QuadEdges</param>
            <param name="pt">the point to test</param>
            <returns>true if the point is contained in the triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.#ctor(NetTopologySuite.Triangulate.QuadEdge.QuadEdge[])">
            <summary>
            Creates a new triangle from the given edges.
            </summary>
            <param name="edge">An array of the edges of the triangle in CCW order</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.Data">
            <summary>
            Gets or sets the external data value for this triangle.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.GetVertices">
            <summary>
            Gets the vertices for this triangle.
            </summary>
            <returns>a new array containing the triangle vertices</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.GetEdgeIndex(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Gets the index for the given edge of this triangle
            </summary>
            <param name="e">a QuadEdge</param>
            <returns>the index of the edge in this triangle,<br/>
            or -1 if the edge is not an edge of this triangle
            </returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.GetEdgeIndex(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Gets the index for the edge that starts at vertex v.
            </summary>
            <param name="v">the vertex to find the edge for</param>
            <returns>the index of the edge starting at the vertex, <br/>
            or -1 if the vertex is not in the triangle
            </returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.IsBorder">
            <summary>
            Tests whether this triangle is adjacent to the outside of the subdivision.
            </summary>
            <returns>true if the triangle is adjacent to the subdivision exterior</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.GetTrianglesAdjacentToVertex(System.Int32)">
            <summary>
            Gets the triangles which are adjacent (include) to a 
            given vertex of this triangle.
            </summary>
            <param name="vertexIndex">The vertex to query</param>
            <returns>A list of the vertex-adjacent triangles</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeTriangle.GetNeighbours">
            <summary>
            Gets the neighbours of this triangle. If there is no neighbour triangle, the array element is
            <code>null</code>
            </summary>
            <returns>an array containing the 3 neighbours of this triangle</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeUtil.FindEdgesIncidentOnOrigin(NetTopologySuite.Triangulate.QuadEdge.QuadEdge)">
            <summary>
            Gets all edges which are incident on the origin of the given edge.
            </summary>
            <param name="start">the edge to start at</param>
            <returns>a List of edges which have their origin at the origin of the given
            edge</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate">
            <summary>
            Algorithms for computing values and predicates
            associated with triangles.
            </summary>
            <remarks>
            For some algorithms extended-precision 
            implementations are provided, which are more robust 
            (i.e. they produce correct answers in more cases).
            Also, some more robust formulations of
            some algorithms are provided, which utilize 
            normalization to the origin.
            </remarks>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleNonRobust(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point is inside the circle defined by 
            the triangle with vertices a, b, c (oriented counter-clockwise). 
            This test uses simple
            double-precision arithmetic, and thus is not 100% robust.
            </summary>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
            <returns>true if this point is inside the circle defined by the points a, b, c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleNormalized(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point is inside the circle defined by 
            the triangle with vertices a, b, c (oriented counter-clockwise).
            </summary>
            <remarks>
            <para> This test uses simple
            double-precision arithmetic, and thus is not 100% robust.
            However, by using normalization to the origin
            it provides improved robustness and increased performance.</para>
            <para>Based on code by J.R.Shewchuk.</para>
            </remarks>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
            <returns>true if this point is inside the circle defined by the points a, b, c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.TriArea(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes twice the area of the oriented triangle (a, b, c), i.e., the area is positive if the
            triangle is oriented counterclockwise.
            </summary>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <returns>The area of the triangle defined by the points a, b, c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleRobust(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point is inside the circle defined by 
            the triangle with vertices a, b, c (oriented counter-clockwise). 
            </summary>
            <remarks>
            This method uses more robust computation.
            </remarks>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
            <returns>true if this point is inside the circle defined by the points a, b, c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleDDSlow(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point is inside the circle defined by 
            the triangle with vertices a, b, c (oriented counter-clockwise). 
            </summary>
            <remarks>
            The computation uses <see cref="T:NetTopologySuite.Mathematics.DD"/> arithmetic for robustness.
            </remarks>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
            <returns>true if this point is inside the circle defined by the points a, b, c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.TriAreaDDSlow(NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD,NetTopologySuite.Mathematics.DD)">
            <summary>
            Computes twice the area of the oriented triangle (a, b, c), i.e., the area
            is positive if the triangle is oriented counterclockwise.
            </summary>
            <remarks>
            The computation uses {@link DD} arithmetic for robustness.
            </remarks>
            <param name="ax">x ordinate of a vertex of the triangle</param>
            <param name="ay">y ordinate of a vertex of the triangle</param>
            <param name="bx">x ordinate of a vertex of the triangle</param>
            <param name="by">y ordinate of a vertex of the triangle</param>
            <param name="cx">x ordinate of a vertex of the triangle</param>
            <param name="cy">y ordinate of a vertex of the triangle</param>
            <returns>The area of a triangle defined by the points a, b and c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleDDFast(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Tests if a point is inside the circle defined by 
            the triangle with vertices a, b, c (oriented counter-clockwise). 
            </summary>
            <remarks>
            The computation uses <see cref="T:NetTopologySuite.Mathematics.DD"/> arithmetic for robustness, but a faster approach.
            </remarks>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
            <returns>true if this point is inside the circle defined by the points a, b, c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.TriAreaDDFast(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes twice the area of the oriented triangle (a, b, c), i.e., the area
            is positive if the triangle is oriented counterclockwise.
            </summary>
            <remarks>
            The computation uses {@link DD} arithmetic for robustness.
            </remarks>
            <param name="a">a vertex of the triangle</param>
            <param name="b">a vertex of the triangle</param>
            <param name="c">a vertex of the triangle</param>
            <returns>The area of a triangle defined by the points a, b and c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleDDNormalized(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.IsInCircleCC(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the inCircle test using distance from the circumcentre. 
            Uses standard double-precision arithmetic.
            </summary>
            <remarks>
            In general this doesn't
            appear to be any more robust than the standard calculation. However, there
            is at least one case where the test point is far enough from the
            circumcircle that this test gives the correct answer. 
            <pre>
            LINESTRING (1507029.9878 518325.7547, 1507022.1120341457 518332.8225183258,
            1507029.9833 518325.7458, 1507029.9896965567 518325.744909031)
            </pre>
            </remarks>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
            <returns>The area of a triangle defined by the points a, b and c</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.TrianglePredicate.CheckRobustInCircle(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Checks if the computed value for isInCircle is correct, using
            double-double precision arithmetic.
            </summary>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <param name="p">The point to test</param>
        </member>
        <member name="T:NetTopologySuite.Triangulate.QuadEdge.Vertex">
            <summary>
            Models a site (node) in a <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/>. 
            The sites can be points on a line string representing a
            linear site.<para/> 
            The vertex can be considered as a vector with a norm, length, inner product, cross
            product, etc. Additionally, point relations (e.g., is a point to the left of a line, the circle
            defined by this point and two others, etc.) are also defined in this class.
            <para/>
            It is common to want to attach user-defined data to 
            the vertices of a subdivision.  
            One way to do this is to subclass <tt>Vertex</tt>
            to carry any desired information.
            </summary>
            <author>David Skea</author>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of this class using the given x- and y-ordinate valuse
            </summary>
            <param name="x">x-ordinate value</param>
            <param name="y">y-ordinate value</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of this class using the given x-, y- and z-ordinate values
            </summary>
            <param name="x">x-ordinate value</param>
            <param name="y">y-ordinate value</param>
            <param name="z">z-ordinate value</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.#ctor(GeoAPI.Geometries.Coordinate)">
            <summary>
            Creates an instance of this class using a clone of the given <see cref="P:NetTopologySuite.Triangulate.QuadEdge.Vertex.Coordinate"/>.
            </summary>
            <param name="p">The coordinate</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.Vertex.X">
            <summary>
            Gets the x-ordinate value
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.Vertex.Y">
            <summary>
            Gets the y-ordinate value
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.Vertex.Z">
            <summary>
            Gets the z-ordinate value
            </summary>
        </member>
        <member name="P:NetTopologySuite.Triangulate.QuadEdge.Vertex.Coordinate">
            <summary>
            Gets the coordinate
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.CrossProduct(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Computes the cross product k = u X v.
            </summary>
            <param name="v">a vertex</param>
            <returns>returns the magnitude of u X v</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.Dot(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Computes the inner or dot product
            </summary>
            <param name="v">A vertex</param>
            <returns>The dot product u.v</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.Times(System.Double)">
            <summary>
            Computes the scalar product c(v)
            </summary>
            <param name="c">A vertex</param>
            <returns>The scaled vector</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.IsInCircle(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Tests if this is inside the circle defined by the points a, b, c. This test uses simple
            double-precision arithmetic, and thus may not be robust.
            </summary>
            <param name="a">A vertex of the triangle</param>
            <param name="b">A vertex of the triangle</param>
            <param name="c">A vertex of the triangle</param>
            <returns>true if this vertex is inside the circumcircle (a, b, c)</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.IsCcw(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Tests whether the triangle formed by this vertex and two
            other vertices is in CCW orientation.
            </summary>
            <param name="b">a vertex</param>
            <param name="c">a vertex</param>
            <returns>true if the triangle is oriented CCW</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.CircumRadiusRatio(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Computes the value of the ratio of the circumradius to shortest edge. If smaller than some
            given tolerance B, the associated triangle is considered skinny. For an equal lateral
            triangle this value is 0.57735. The ratio is related to the minimum triangle angle theta by:
            circumRadius/shortestEdge = 1/(2sin(theta)).
            </summary>
            <param name="b">second vertex of the triangle</param>
            <param name="c">third vertex of the triangle</param>
            <returns>ratio of circumradius to shortest edge.</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.MidPoint(NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            returns a new vertex that is mid-way between this vertex and another end point.
            </summary>
            <param name="a">the other end point.</param>
            <returns>the point mid-way between this and that.</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.CircleCenter(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            Computes the centre of the circumcircle of this vertex and two others.
            </summary>
            <param name="b" />
            <param name="c" />
            <returns>the Coordinate which is the circumcircle of the 3 points.</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.InterpolateZValue(NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex,NetTopologySuite.Triangulate.QuadEdge.Vertex)">
            <summary>
            For this vertex enclosed in a triangle defined by three vertices v0, v1 and v2, interpolate
            a z value from the surrounding vertices.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.InterpolateZ(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Interpolates the Z-value (height) of a point enclosed in a triangle
            whose vertices all have Z values.
            The containing triangle must not be degenerate
            (in other words, the three vertices must enclose a 
            non-zero area).
            </summary>
            <param name="p">The point to interpolate the Z value of</param>
            <param name="v0">A vertex of a triangle containing the <paramref name="p"/></param>
            <param name="v1">A vertex of a triangle containing the <paramref name="p"/></param>
            <param name="v2">A vertex of a triangle containing the <paramref name="p"/></param>
            <returns>The interpolated Z-value (height) of the point</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.QuadEdge.Vertex.InterpolateZ(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary>
            Computes the interpolated Z-value for a point p lying on the segment p0-p1
            </summary>  
            <param name="p">The point to interpolate the Z value of</param>
            <param name="p0">A vertex of the segment <paramref name="p"/> is lying on</param>
            <param name="p1">A vertex of the segment <paramref name="p"/> is lying on</param>
            <returns>The interpolated Z-value (height) of the point</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetTopologySuite.Triangulate.Segment" -->
        <member name="M:NetTopologySuite.Triangulate.Segment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> 
            Creates a new instance for the given ordinates.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.Segment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Object)">
            <summary> 
            Creates a new instance for the given ordinates,  with associated external data. 
            </summary>
        </member>
        <member name="M:NetTopologySuite.Triangulate.Segment.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate,System.Object)">
            <summary> 
            Creates a new instance for the given points, with associated external data.
            </summary>
            <param name="p0">the start point</param>
            <param name="p1">the end point</param>
            <param name="data">an external data object</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.Segment.#ctor(GeoAPI.Geometries.Coordinate,GeoAPI.Geometries.Coordinate)">
            <summary> 
            Creates a new instance for the given points.
            </summary>
            <param name="p0">the start point</param>
            <param name="p1">the end point</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.Start">
            <summary>
            Gets the start coordinate of the segment
            </summary>
            <remarks>a Coordinate</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.End">
            <summary>
            Gets the end coordinate of the segment
            </summary>
            <remarks>a Coordinate</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.StartX">
            <summary>
            Gets the start X ordinate of the segment
            </summary>
            <remarks>the X ordinate value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.StartY">
            <summary>
            Gets the start Y ordinate of the segment
            </summary>
            <remarks>the Y ordinate value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.StartZ">
            <summary>
            Gets the start Z ordinate of the segment
            </summary>
            <remarks>the Z ordinate value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.EndX">
            <summary>
            Gets the end X ordinate of the segment
            </summary>
            <remarks>the X ordinate value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.EndY">
            <summary>
            Gets the end Y ordinate of the segment
            </summary>
            <remarks>he Y ordinate value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.EndZ">
            <summary>
            Gets the end Z ordinate of the segment
            </summary>
            <remarks>the Z ordinate value</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.LineSegment">
            <summary>
            Gets a <tt>LineSegment</tt> modelling this segment.
            </summary>
            <remarks>a LineSegment</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.Segment.Data">
            <summary>
            Gets or sets the external data associated with this segment
            </summary>
            <remarks>a data object</remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.Segment.EqualsTopologically(NetTopologySuite.Triangulate.Segment)">
            <summary>
            Determines whether two segments are topologically equal.
            I.e. equal up to orientation.
            </summary>
            <param name="s">a segment</param>
            <returns>true if the segments are topologically equal</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.Segment.Intersection(NetTopologySuite.Triangulate.Segment)">
            <summary>
            Computes the intersection point between this segment and another one.
            </summary>
            <param name="s">a segment</param>
            <returns>the intersection point, or <code>null</code> if there is none</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.Segment.ToString">
            <summary>
            Computes a string representation of this segment.
            </summary>
            <returns>a string</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.SplitSegment">
            <summary>
            Models a constraint segment which can be split in two in various ways, 
            according to certain geometric constraints.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.SplitSegment.PointAlongReverse(NetTopologySuite.Geometries.LineSegment,System.Double)">
            <summary>
            Computes the {@link Coordinate} that lies a given fraction along the line defined by the
            reverse of the given segment. A fraction of <code>0.0</code> returns the end point of the
            segment; a fraction of <code>1.0</code> returns the start point of the segment.
            </summary>
            <param name="seg">the LineSegment</param>
            <param name="segmentLengthFraction">the fraction of the segment length along the line</param>
            <returns>the point at that distance</returns>
        </member>
        <member name="T:NetTopologySuite.Triangulate.VertexTaggedGeometryDataMapper">
            <summary>
            Creates a map between the vertex <see cref="T:GeoAPI.Geometries.Coordinate"/>s of a 
            set of <see cref="T:NetTopologySuite.Geometries.Geometry"/>s,
            and the parent geometry, and transfers the source geometry
            data objects to geometry components tagged with the coordinates.
            </summary>
            <remarks>
            This class can be used in conjunction with <see cref="T:NetTopologySuite.Triangulate.VoronoiDiagramBuilder"/>
            to transfer data objects from the input site geometries
            to the constructed Voronoi polygons.
            </remarks>
            <author>Martin Davis</author>
            <see cref="T:NetTopologySuite.Triangulate.VoronoiDiagramBuilder"/>
        </member>
        <member name="M:NetTopologySuite.Triangulate.VertexTaggedGeometryDataMapper.TransferData(GeoAPI.Geometries.IGeometry)">
            <summary>
            Input is assumed to be a multiGeometry
            in which every component has its userData
            set to be a Coordinate which is the key to the output data.
            The Coordinate is used to determine
            the output data object to be written back into the component. 
            </summary>
            <param name="targetGeom" />
        </member>
        <member name="T:NetTopologySuite.Triangulate.VoronoiDiagramBuilder">
            <summary>
            A utility class which creates Voronoi Diagrams
            from collections of points.
            The diagram is returned as a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> of <see cref="T:NetTopologySuite.Geometries.Polygon"/>s,
            representing the faces of the Voronoi diagram.
            /// The faces are clipped to the larger of:
            <list type="bullet">    
            <item>
                <description>an envelope supplied by <see cref="M:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.set_ClipEnvelope(GeoAPI.Geometries.Envelope)"/>.</description>
            </item>
            <item>
                <description>an envelope determined by the input sites.</description>
            </item>
            </list>
            The <tt>userData</tt> attribute of each face <tt>Polygon</tt> is set to 
            the <tt>Coordinate</tt>  of the corresponding input site.
            This allows using a <tt>Map</tt> to link faces to data associated with sites.
            </summary>
            <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.SetSites(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets the sites (point or vertices) which will be diagrammed.
            All vertices of the given geometry will be used as sites.
            </summary>
            <param name="geom">geom the geometry from which the sites will be extracted.</param>
        </member>
        <member name="M:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.SetSites(System.Collections.Generic.ICollection{GeoAPI.Geometries.Coordinate})">
            <summary>
            Sets the sites (point or vertices) which will be diagrammed
            from a collection of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="coords">a collection of Coordinates.</param>
        </member>
        <member name="P:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.ClipEnvelope">
            <summary>
            Sets the envelope to clip the diagram to.
            The diagram will be clipped to the larger
            of this envelope or an envelope surrounding the sites.
            </summary>
            <remarks>the clip envelope.</remarks>
        </member>
        <member name="P:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.Tolerance">
            <summary>
            Sets the snapping tolerance which will be used
            to improved the robustness of the triangulation computation.
            A tolerance of 0.0 specifies that no snapping will take place.
            </summary>
            <remarks>tolerance the tolerance distance to use</remarks>
        </member>
        <member name="M:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.GetSubdivision">
            <summary>
            Gets the <see cref="T:NetTopologySuite.Triangulate.QuadEdge.QuadEdgeSubdivision"/> which models the computed diagram.
            </summary>
            <returns>the subdivision containing the triangulation</returns>
        </member>
        <member name="M:NetTopologySuite.Triangulate.VoronoiDiagramBuilder.GetDiagram(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Gets the faces of the computed diagram as a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> 
            of <see cref="T:NetTopologySuite.Geometries.Polygon"/>s, clipped as specified.
            <para/>
            The <see cref="P:GeoAPI.Geometries.IGeometry.UserData"/> attribute of each face <see cref="T:GeoAPI.Geometries.IPolygon"/> is set to 
            the <c>Coordinate</c> of the corresponding input site.
            This allows using a <see cref="T:System.Collections.Generic.IDictionary`2"/> to link faces to data associated with sites.
            </summary>
            <param name="geomFact">the geometry factory to use to create the output</param>
            <returns>a <see cref="T:GeoAPI.Geometries.IGeometryCollection"/> containg the face <see cref="T:GeoAPI.Geometries.IPolygon"/>s of the diagram</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2">
            <summary>
            An alternative implementation of the priority queue abstract data type.
            This allows us to do more than <see cref="T:NetTopologySuite.Utilities.PriorityQueue`1"/>, which we
            got from JTS.  Ultimately, this queue enables scenarios that have more
            favorable execution speed characteristics at the cost of less favorable
            memory and usability characteristics.
            </summary>
            <typeparam name="TPriority">
            The type of the priority for each queue node.
            </typeparam>
            <typeparam name="TData">
            The type of data stored in the queue.
            </typeparam>
            <remarks>
            When enumerating over the queue, note that the elements will not be in
            sorted order.  To get at the elements in sorted order, use the copy
            constructor and repeatedly <see cref="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Dequeue"/> elements from it.
            </remarks>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/> class.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/> class.
            </summary>
            <param name="capacity">
            The initial queue capacity.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 1.
            </exception>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/> class.
            </summary>
            <param name="priorityComparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare priority values,
            or <see langword="null"/> to use the default comparer for the type.
            </param>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/> class.
            </summary>
            <param name="capacity">
            The initial queue capacity.
            </param>
            <param name="priorityComparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare priority values,
            or <see langword="null"/> to use the default comparer for the type.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 1.
            </exception>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.#ctor(NetTopologySuite.Utilities.AlternativePriorityQueue{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/> class.
            </summary>
            <param name="copyFrom">
            The <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/> to
            copy from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="copyFrom"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Count">
            <summary>
            Gets the number of nodes currently stored in this queue.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Head">
            <summary>
            Gets the node at the head of the queue.
            This is the node whose <typeparamref name="TPriority"/> compares
            less than or equal to the priority of all other nodes in the queue.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Clear">
            <summary>
            Removes all nodes from this queue.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Contains(NetTopologySuite.Utilities.PriorityQueueNode{`0,`1})">
            <summary>
            Determines whether the given node is contained within this queue.
            </summary>
            <param name="node">
            The node to locate in the queue.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="node"/> is found in the
            queue, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Enqueue(NetTopologySuite.Utilities.PriorityQueueNode{`0,`1},`0)">
            <summary>
            Adds a given node to the queue with the given priority.
            </summary>
            <param name="node">
            The node to add to the queue.
            </param>
            <param name="priority">
            The priority for the node.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Dequeue">
            <summary>
            Removes and returns the head of the queue.
            </summary>
            <returns>
            The removed element.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.ChangePriority(NetTopologySuite.Utilities.PriorityQueueNode{`0,`1},`0)">
            <summary>
            Changes the priority of the given node.
            </summary>
            <param name="node">
            The node whose priority to change.
            </param>
            <param name="priority">
            The new priority for the node.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.Remove(NetTopologySuite.Utilities.PriorityQueueNode{`0,`1})">
            <summary>
            Removes the given node from this queue if it is present.
            </summary>
            <param name="node">
            The node to remove if present.
            </param>
            <returns>
            A value indicating whether the node was removed.
            </returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NetTopologySuite.Utilities.AlternativePriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:NetTopologySuite.Utilities.PriorityQueueNode`2">
            <summary>
            A container for a prioritized node that sites in an
            <see cref="T:NetTopologySuite.Utilities.AlternativePriorityQueue`2"/>.
            </summary>
            <typeparam name="TPriority">
            The type to use for the priority of the node in the queue.
            </typeparam>
            <typeparam name="TData">
            The type to use for the data stored by the node in the queue.
            </typeparam>
        </member>
        <member name="M:NetTopologySuite.Utilities.PriorityQueueNode`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:NetTopologySuite.Utilities.PriorityQueueNode`2"/> class.
            </summary>
            <param name="data">
            The <typeparamref name="TData"/> to store in this node.
            </param>
        </member>
        <member name="P:NetTopologySuite.Utilities.PriorityQueueNode`2.Data">
            <summary>
            Gets the <typeparamref name="TData"/> that is stored in this node.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.PriorityQueueNode`2.Priority">
            <summary>
            Gets the <typeparamref name="TPriority"/> of this node in the queue.
            </summary>
            <remarks>
            The queue may update this priority while the node is still in the queue.
            </remarks>
        </member>
        <member name="P:NetTopologySuite.Utilities.PriorityQueueNode`2.QueueIndex">
            <summary>
            Gets or sets the index of this node in the queue.
            </summary>
            <remarks>
            This should only be read and written by the queue itself.
            It has no "real" meaning to anyone else.
            </remarks>
        </member>
        <member name="T:NetTopologySuite.Utilities.Assert">
            <summary>
            A utility for making programming assertions.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Utilities.AssertionFailedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.AssertionFailedException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.AssertionFailedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NetTopologySuite.Utilities.BitConverter">
            <summary>
            A supoort class: the purpose is to integrate System.BitConverter methods not presents in .NET Compact Framework.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.BitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.BitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.Caster">
            <summary>
            Static utility class for casting objects
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.Caster.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Cast function from arbitrary-type to <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The output type</typeparam>
            <param name="inputs">The sequence of items to cast.</param>
            <returns><paramref name="inputs"/> as an enumerable of <typeparamref name="T"/></returns>
            <exception cref="T:System.InvalidCastException">Thrown if cast cannot be performed</exception>
        </member>
        <member name="M:NetTopologySuite.Utilities.Caster.Upcast``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Cast function from sub-type to super-type
            </summary>
            <typeparam name="TSuper">The output (super/base) type</typeparam>
            <typeparam name="TSub">The input (sub/derived) type</typeparam>
            <param name="inputs">The sequence of items to cast.</param>
            <returns><paramref name="inputs"/> as an enumerable of <typeparamref name="TSuper"/></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.Caster.Downcast``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Cast function from super-type to sub-type
            </summary>
            <typeparam name="TSub">The input (sub/derived) type</typeparam>
            <typeparam name="TSuper">The output (super/base) type</typeparam>
            <param name="inputs">The sequence of items to cast.</param>
            <returns><paramref name="inputs"/> as an enumerable of <typeparamref name="TSub"/></returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.CollectionUtil">
            <summary>
            Executes a transformation function on each element of a collection
            and returns the results in a new List.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Transform(System.Collections.ICollection,NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{System.Object})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection" />
            and returns the results in a new <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Cast``1(System.Collections.ICollection)">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection" />
            and returns the results in a new <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Cast``2(System.Collections.Generic.ICollection{``0})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.ICollection`1" />
            and returns the results in a new <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Transform``1(System.Collections.Generic.IList{``0},NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{``0})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.IList`1" />
            and returns the results in a new <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="list"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Transform``2(System.Collections.Generic.IList{``0},NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{``0,``1})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.IList`1" />
            and returns the results in a new <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="list"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Apply(System.Collections.ICollection,NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{System.Object})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection" /> 
            but does not accumulate the result.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Apply``1(System.Collections.Generic.IEnumerable{``0},NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{``0})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.IEnumerable`1" /> 
            but does not accumulate the result.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Select(System.Collections.ICollection,NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{System.Object,System.Boolean})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection" />
            and collects all the entries for which the result
            of the function is equal to <c>true</c>.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Select``1(System.Collections.Generic.IEnumerable{``0},NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{``0,System.Boolean})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection" />
            and collects all the entries for which the result
            of the function is equal to <c>true</c>.
            </summary>
            <param name="items"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.CollectionUtil.Cast``2(``0[])">
            <summary>
            Copies <typeparamref name="T"/>s in an array to an object array
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="array">the source array</param>
            <returns>An array of objects</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.CoordinateArrayFilter">
            <summary>
            A <c>CoordinateFilter</c> that creates an array containing every coordinate in a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.CoordinateArrayFilter.#ctor(System.Int32)">
            <summary>
            Constructs a <c>CoordinateArrayFilter</c>.
            </summary>
            <param name="size">The number of points that the <c>CoordinateArrayFilter</c> will collect.</param>
        </member>
        <member name="P:NetTopologySuite.Utilities.CoordinateArrayFilter.Coordinates">
            <summary>
            Returns the <c>Coordinate</c>s collected by this <c>CoordinateArrayFilter</c>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.CoordinateArrayFilter.Filter(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:NetTopologySuite.Utilities.CoordinateCompare">
            <summary>
            CoordinateCompare is used in the sorting of arrays of Coordinate objects.
            Implements a lexicographic comparison.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.CoordinateCompare.Compare(System.Object,System.Object)">
             <summary>
             Compares two object and returns a value indicating whether one is less than, equal to or greater
             than the other.
             </summary>
             <param name="x">First Coordinate object to compare.</param>
             <param name="y">Second Coordinate object to compare.</param>
             <returns>
            &lt;table cellspacing="0" class="dtTABLE"&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TH width=50%&gt;Value&lt;/TH&gt;
            &lt;TH width=50%&gt;Condition&lt;/TH&gt;
            &lt;/TR&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TD width=50%&gt;Less than zero&lt;/TD&gt;
            &lt;TD width=50%&gt;&lt;I&gt;a&lt;/I&gt; is less than &lt;I&gt;b&lt;/I&gt;.&lt;/TD&gt;
            &lt;/TR&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TD width=50%&gt;Zero&lt;/TD&gt;
            &lt;TD width=50%&gt;&lt;I&gt;a&lt;/I&gt; equals &lt;I&gt;b&lt;/I&gt;.&lt;/TD&gt;
            &lt;/TR&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TD width=50%&gt;Greater than zero&lt;/TD&gt;
            &lt;TD width=50%&gt;&lt;I&gt;a&lt;/I&gt; is greater than &lt;I&gt;b&lt;/I&gt;.&lt;/TD&gt;
            &lt;/TR&gt;
            &lt;/table&gt;
             </returns>
             <remarks>If a implements IComparable, then a. CompareTo (b) is returned; otherwise, if b 
             implements IComparable, then b. CompareTo (a) is returned.
             Comparing a null reference (Nothing in Visual Basic) with any type is allowed and does not
             generate an exception when using IComparable. When sorting, a null reference (Nothing) is 
             considered to be less than any other object.
             </remarks>
        </member>
        <member name="T:NetTopologySuite.Utilities.CoordinateCountFilter">
            <summary>
            A <c>CoordinateFilter</c> that counts the total number of coordinates
            in a <c>Geometry</c>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.CoordinateCountFilter.Count">
            <summary>
            Returns the result of the filtering.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.CoordinateCountFilter.Filter(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:NetTopologySuite.Utilities.Degrees">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.Degrees.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.GeometricShapeFactory">
            <summary>
            Computes various kinds of common geometric shapes.
            Allows various ways of specifying the location and extent of the shapes,
            as well as number of line segments used to form them.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.#ctor">
            <summary>
            Create a shape factory which will create shapes using the default GeometryFactory.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a shape factory which will create shapes using the given GeometryFactory.
            </summary>
            <param name="geomFact">The factory to use.</param>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Base">
            <summary>
            Gets/Sets the location of the shape by specifying the base coordinate
            (which in most cases is the
            lower left point of the envelope containing the shape).
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Centre">
            <summary>
            Gets/Sets the location of the shape by specifying the centre of
            the shape's bounding box.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Envelope">
            <summary>
            Gets or sets the envelope of the shape
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.NumPoints">
            <summary>
            Gets/Sets the total number of points in the created Geometry.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Size">
            <summary>
            Gets/Sets the size of the extent of the shape in both x and y directions.        
            </summary>                
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Width">
            <summary>
            Gets/Sets the width of the shape.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Height">
            <summary>
            Gets/Sets the height of the shape.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Utilities.GeometricShapeFactory.Rotation">
            <summary>
            Gets/Sets the rotation angle, in radians, to use for the shape.
            The rotation is applied relative to the centre of the shape.
            </summary>        
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CreateRectangle">
            <summary>
            Creates a rectangular <c>Polygon</c>.
            </summary>
            <returns>A rectangular polygon.</returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CreateCircle">
            <summary>
            Creates a circular <c>Polygon</c>.
            </summary>
            <returns>A circular polygon.</returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CeateEllipse">
            <summary>
            Creates an elliptical <c>Polygon</c>.
            If the supplied envelope is square the 
            result will be a circle. 
            </summary>
            <returns>An an ellipse or circle.</returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CreateSquircle">
            <summary>
            Creates a squircular <see cref="T:NetTopologySuite.Geometries.Polygon"/>.
            </summary>
            <returns>a squircle</returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CreateSupercircle(System.Double)">
            <summary>
            Creates a supercircular <see cref="T:NetTopologySuite.Geometries.Polygon"/>
            of a given positive power.
            </summary>
            <returns>a supercircle</returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CreateArc(System.Double,System.Double)">
            <summary>
            Creates a elliptical arc, as a LineString.
            </summary><remarks>
            The arc is always created in a counter-clockwise direction.
            </remarks>
            <param name="startAng">Start angle in radians</param>
            <param name="angExtent">Size of angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.GeometricShapeFactory.CreateArcPolygon(System.Double,System.Double)">
            <summary>
             Creates an elliptical arc polygon.
            </summary>
             <remarks>
             The polygon is formed from the specified arc of an ellipse
             and the two radii connecting the endpoints to the centre of the ellipse.
             </remarks>
             <param name="startAng">Start angle in radians</param>
             <param name="angExtent">Size of angle in radians</param>
             <returns>An elliptical arc polygon</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.HexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.HexConverter.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.HexConverter.ConvertAny2Any(System.String,System.Int32,System.Int32)">
            <summary>
            Convert the given numeric value (passed as string) of the base specified by <c>baseIn</c>
            to the value specified by <c>baseOut</c>.
            </summary>
            <param name="valueIn">Numeric value to be converted, as string.</param>
            <param name="baseIn">Base of input value.</param>
            <param name="baseOut">Base to use for conversion.</param>
            <returns>Converted value, as string.</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.Global">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.Global.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetTopologySuite.Utilities.Global.global">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.Global.GetNfi">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.Memory">
            <summary>
            Utility functions to report memory usage.
            </summary>
            <author>mbdavis</author>
        </member>
        <member name="T:NetTopologySuite.Utilities.PriorityQueue`1">
            <summary>
             A priority queue over a set of <see cref="T:System.IComparable`1"/> objects.
            </summary>
             <typeparam name="T">Objects to add</typeparam>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Utilities.PriorityQueue`1.Add(`0)">
            <summary>Insert into the priority queue. Duplicates are allowed.
            </summary>
             <param name="x">The item to insert.</param>
        </member>
        <member name="M:NetTopologySuite.Utilities.PriorityQueue`1.IsEmpty">
            <summary>
             Test if the priority queue is logically empty.
            </summary>
             <returns><c>true</c> if empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:NetTopologySuite.Utilities.PriorityQueue`1.Size">
            <summary>
             Returns size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.PriorityQueue`1.Clear">
            <summary>
             Make the priority queue logically empty.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.PriorityQueue`1.Poll">
            <summary>
             Remove the smallest item from the priority queue.
            </summary>
             <remarks>The smallest item, or <value>default(T)</value> if empty.</remarks>
        </member>
        <member name="T:NetTopologySuite.Utilities.Radians">
            <summary>
            Converts radians to degress.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.Radians.ToDegrees(System.Double)">
            <summary>
            Converts radians to degress.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.ReverseOrder">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.ReverseOrder.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NetTopologySuite.Utilities.StringEx.IsNullOrWhitespaceNTS(System.String)">
            <summary>
            Framework replacement for string.IsNullOrWhitespace
            </summary>
            <param name="s">The string to test</param>
            <returns>A value indicating if <paramref name="s"/> is null, empty or only contains whitespace characters</returns>
        </member>
        <member name="T:NetTopologySuite.Utilities.UniqueCoordinateArrayFilter">
            <summary>
            A <c>CoordinateFilter</c> that builds a set of <c>Coordinate</c>s.
            The set of coordinates contains no duplicate points.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.FilterCoordinates(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Convenience method which allows running the filter over an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
            <param name="coords">an array of coordinates</param>
            <returns>an array of the unique coordinates</returns>
        </member>
        <member name="P:NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.Coordinates">
            <summary>
            Returns the gathered <see cref="T:GeoAPI.Geometries.Coordinate"/>s.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.Filter(GeoAPI.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:RTools_NTS.Util.CharBuffer">
            <summary>
            Buffer for characters.  This approximates StringBuilder
            but is designed to be faster for specific operations.
            This is about 30% faster for the operations I'm interested in
            (Append, Clear, Length, ToString).
            This trades off memory for speed.
            </summary>
            <remarks>
            <para>To make Remove from the head fast, this is implemented
            as a ring buffer.</para>
            <para>This uses head and tail indices into a fixed-size 
            array. This will grow the array as necessary.</para>
            </remarks>
        </member>
        <member name="P:RTools_NTS.Util.CharBuffer.Length">
            <summary>
            Gets/Sets the number of characters in the character buffer.
            Increasing the length this way provides indeterminate results.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.CharBuffer.Capacity">
            <summary>
            Returns the capacity of this character buffer.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.#ctor(System.Int32)">
            <summary>
            Construct with a specific capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Grow(System.Int32)">
            <summary>
            Reallocate the buffer to be larger. For the new size, this
            uses the max of the requested length and double the current
            capacity.
            This does not shift, meaning it does not change the head or
            tail indices.
            </summary>
            <param name="requestedLen">The new requested length.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.CheckCapacity(System.Int32)">
            <summary>
            Ensure that we're set for the requested length by 
            potentially growing or shifting contents.
            </summary>
            <param name="requestedLength"></param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.ShiftToZero">
            <summary>
            Move the buffer contents such that headIndex becomes 0.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.SetBuffer(System.Char[],System.Int32)">
            <summary>
            Overwrite this object's underlying buffer with the specified
            buffer.
            </summary>
            <param name="b">The character array.</param>
            <param name="len">The number of characters to consider filled
            in the input buffer.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Append(System.Char)">
            <summary>
            Append a character to this buffer.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Append(System.String)">
            <summary>
            Append a string to this buffer.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Append(RTools_NTS.Util.CharBuffer)">
            <summary>
            Append a string to this buffer.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Remove(System.Int32)">
            <summary>
            Remove a character at the specified index.
            </summary>
            <param name="i">The index of the character to remove.</param>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a specified number of characters at the specified index.
            </summary>
            <param name="i">The index of the characters to remove.</param>
            <param name="n">The number of characters to remove.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.IndexOf(System.Char)">
            <summary>
            Find the first instance of a character in the buffer, and
            return its index.  This returns -1 if the character is
            not found.
            </summary>
            <param name="c">The character to find.</param>
            <returns>The index of the specified character, or -1
            for not found.</returns>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Clear">
            <summary>
            Empty the buffer.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.CharBuffer.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.ToString">
            <summary>
            Return the current contents as a string.
            </summary>
            <returns>The new string.</returns>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerUntermException">
            <summary>
            Exception class for unterminated tokens.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerUntermException.#ctor(System.String)">
            <summary>
            Construct with a particular message.
            </summary>
            <param name="msg">The message to store in this object.</param>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerUntermQuoteException">
            <summary>
            Exception class for unterminated quotes.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerUntermQuoteException.#ctor(System.String)">
            <summary>
            Construct with a particular message.
            </summary>
            <param name="msg">The message to store in this object.</param>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerUntermCommentException">
            <summary>
            Exception class for unterminated block comments.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerUntermCommentException.#ctor(System.String)">
            <summary>
            Construct with a particular message.
            </summary>
            <param name="msg">The message to store in this object.</param>
        </member>
        <member name="T:RTools_NTS.Util.CharTypeBits">
            <summary>
            Bitwise enumeration for character types.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Word">
            <summary>word characters (usually alpha, digits, and domain specific)</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Comment">
            <summary># or something for line comments</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Whitespace">
            <summary>whitespace</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Quote">
            <summary>' or " type</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Digit">
            <summary>usually 0 to 9</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.HexDigit">
            <summary>usually 0 to 9, a-f and A-F</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Eof">
            <summary>eof char</summary>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerSettings">
            <summary>
            This contains the settings that control the behavior of the tokenizer.
            This is separated from the StreamTokenizer so that common settings
            are easy to package and keep together.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.CharTypes">
            <summary>
            This is the character type table.  Each byte is bitwise encoded
            with the character attributes, such as whether that character is
            word or whitespace.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.GrabWhitespace">
            <summary>
            Whether or not to return whitespace tokens.  If not, they're ignored.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.GrabEol">
            <summary>
            Whether or not to return EolTokens on end of line.  Eol tokens will not
            break up other tokens which can be multi-line.  For example block comments 
            and quotes will not be broken by Eol tokens.  Therefore the number of
            Eol tokens does not give you the line count of a stream.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.SlashSlashComments">
            <summary>
            Whether or not to look for // comments
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.SlashStarComments">
            <summary>
            Whether or not to look for /* */ block comments.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.GrabComments">
            <summary>
            Whether or not to return comments.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.DoUntermCheck">
            <summary>
            Whether or not to check for unterminated quotes and block comments.
            If true, and one is encoutered, an exception is thrown of the appropriate type.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.ParseNumbers">
            <summary>
            Whether or not digits are specified as Digit type in the
            character table.
            This setting is based on the character types table, so this
            setting interacts with character type table manipulation.
            This setting may become incorrect if you modify the character
            types table directly.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.ParseHexNumbers">
            <summary>
            Whether or not to parse Hex (0xABCD...) numbers.
            This setting is based on the character types table, so this
            setting interacts with character type table manipulation.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.#ctor(RTools_NTS.Util.StreamTokenizerSettings)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.Copy(RTools_NTS.Util.StreamTokenizerSettings)">
            <summary>
            Sets this object to be the same as the specified object.
            Note that some settings which are entirely embodied by the character
            type table.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.SetDefaults">
            <summary>
            Setup default parse behavior.
            This resets to same behavior as on construction.
            </summary>
            <returns>bool - true for success.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.SetupForCodeParse">
            <summary>
            Apply settings which are commonly used for code parsing
            C-endCapStyle code, including C++, C#, and Java.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.ResetCharTypeTable">
            <summary>
            Clear the character type settings.  This leaves them unset,
            as opposed to the default.  Use SetDefaults() for default
            settings.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WordChar(System.Int32)">
            <summary>
            Specify that a particular character is a word character.
            Character table type manipulation method.
            This adds the type to the char(s), rather
            than overwriting other types.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WordChars(System.Int32,System.Int32)">
            <summary>
            Specify that a range of characters are word characters.
            Character table type manipulation method.
            This adds the type to the char(s), rather
            than overwriting other types.
            </summary>
            <param name="startChar">First character.</param>
            <param name="endChar">Last character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WordChars(System.String)">
            <summary>
            Specify that a string of characters are word characters.
            Character table type manipulation method.
            This adds the type to the char(s), rather
            than overwriting other types.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WhitespaceChar(System.Int32)">
            <summary>
            Specify that a character is a whitespace character.
            Character table type manipulation method.
            This type is exclusive with other types.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WhitespaceChars(System.Int32,System.Int32)">
            <summary>
            Specify that a range of characters are whitespace characters.
            Character table type manipulation method.
            This adds the characteristic to the char(s), rather
            than overwriting other characteristics.
            </summary>
            <param name="startChar">First character.</param>
            <param name="endChar">Last character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.OrdinaryChars(System.Int32,System.Int32)">
            <summary>
            Remove other type settings from a range of characters.
            Character table type manipulation method.
            </summary>
            <param name="startChar"></param>
            <param name="endChar"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.OrdinaryChar(System.Int32)">
            <summary>
            Remove other type settings from a character.
            Character table type manipulation method.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.CommentChar(System.Int32)">
            <summary>
            Specify that a particular character is a comment-starting character.
            Character table type manipulation method.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.QuoteChar(System.Int32)">
            <summary>
            Specify that a particular character is a quote character.
            Character table type manipulation method.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.CharTypeToString(System.Byte)">
            <summary>
            Return a string representation of a character type setting.
            Since the type setting is bitwise encoded, a character
            can have more than one type.
            </summary>
            <param name="ctype">The character type byte.</param>
            <returns>The string representation of the type flags.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.IsCharType(System.Byte,RTools_NTS.Util.CharTypeBits)">
            <summary>
            Check whether the specified char type byte has a 
            particular type flag set.
            </summary>
            <param name="ctype">The char type byte.</param>
            <param name="type">The CharTypeBits entry to compare to.</param>
            <returns>bool - true or false</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.IsCharType(System.Char,RTools_NTS.Util.CharTypeBits)">
            <summary>
            Check whether the specified char has a 
            particular type flag set.
            </summary>
            <param name="c">The character.</param>
            <param name="type">The CharTypeBits entry to compare to.</param>
            <returns>bool - true or false</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.IsCharType(System.Int32,RTools_NTS.Util.CharTypeBits)">
            <summary>
            Check whether the specified char has a 
            particular type flag set.
            </summary>
            <param name="c">The character.</param>
            <param name="type">The CharTypeBits entry to compare to.</param>
            <returns>bool - true or false</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.Display">
            <summary>
            Display the state of this object.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.Display(System.String)">
            <summary>
            Display the state of this object, with a per-line prefix.
            </summary>
            <param name="prefix">The pre-line prefix.</param>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizer">
            <summary>
            A StreamTokenizer similar to Java's.  This breaks an input stream
            (coming from a TextReader) into Tokens based on various settings.  The settings
            are stored in the TokenizerSettings property, which is a
            StreamTokenizerSettings instance.
            </summary>
            <remarks>
            <para>
            This is configurable in that you can modify TokenizerSettings.CharTypes[] array
            to specify which characters are which type, along with other settings
            such as whether to look for comments or not.
            </para>
            <para>
            WARNING: This is not internationalized.  This treats all characters beyond
            the 7-bit ASCII range (decimal 127) as Word characters.
            </para>
            <para>
            There are two main ways to use this: 1) Parse the entire stream at
            once and get an ArrayList of Tokens (see the Tokenize* methods), 
            and 2) call NextToken() successively.
            This reads from a TextReader, which you can set directly, and this
            also provides some convenient methods to parse files and strings.
            This returns an Eof token if the end of the input is reached.
            </para>
            <para>
            Here's an example of the NextToken() endCapStyle of use:
            <code>
            StreamTokenizer tokenizer = new StreamTokenizer();
            tokenizer.GrabWhitespace = true;
            tokenizer.Verbosity = VerbosityLevel.Debug; // just for debugging
            tokenizer.TextReader = File.OpenText(fileName);
            Token token;
            while (tokenizer.NextToken(out token)) log.Info("Token = '{0}'", token);
            </code>
            </para>
            <para>
            Here's an example of the Tokenize... endCapStyle of use:
            <code>
            StreamTokenizer tokenizer = new StreamTokenizer("some string");
            ArrayList tokens = new ArrayList();
            if (!tokenizer.Tokenize(tokens)) 
            { 
            	// error handling
            }
            foreach (Token t in tokens) Console.WriteLine("t = {0}", t);
            </code>
            </para>
            <para>
            Comment delimiters are hardcoded (// and /*), not affected by char type table.
            </para>
            <para>
            This sets line numbers in the tokens it produces.  These numbers are normally
            the line on which the token starts.
            There is one known caveat, and that is that when GrabWhitespace setting
            is true, and a whitespace token contains a newline, that token's line number
            will be set to the following line rather than the line on which the token
            started.
            </para>
            </remarks>
        </member>
        <member name="F:RTools_NTS.Util.StreamTokenizer.NChars">
            <summary>
            This is the number of characters in the character table.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizer.TextReader">
            <summary>
            This is the TextReader that this object will read from.
            Set this to set the input reader for the parse.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizer.Settings">
            <summary>
            The settings which govern the behavior of the tokenization.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Construct and set this object's TextReader to the one specified.
            </summary>
            <param name="sr">The TextReader to read from.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.#ctor(System.String)">
            <summary>
            Construct and set a string to tokenize.
            </summary>
            <param name="str">The string to tokenize.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Initialize">
            <summary>
            Utility function, things common to constructors.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.InitializeStream">
            <summary>
            Clear the stream settings.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Display">
            <summary>
            Display the state of this object.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Display(System.String)">
            <summary>
            Display the state of this object, with a per-line prefix.
            </summary>
            <param name="prefix">The pre-line prefix.</param>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizer.NextTokenState">
            <summary>
            The states of the state machine.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.PickNextState(System.Byte,System.Int32)">
            <summary>
            Pick the next state given just a single character.  This is used
            at the start of a new token.
            </summary>
            <param name="ctype">The type of the character.</param>
            <param name="c">The character.</param>
            <returns>The state.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.PickNextState(System.Byte,System.Int32,RTools_NTS.Util.StreamTokenizer.NextTokenState)">
            <summary>
            Pick the next state given just a single character.  This is used
            at the start of a new token.
            </summary>
            <param name="ctype">The type of the character.</param>
            <param name="c">The character.</param>
            <param name="excludeState">Exclude this state from the possible next state.</param>
            <returns>The state.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.GetNextChar">
            <summary>
            Read the next character from the stream, or from backString
            if we backed up.
            </summary>
            <returns>The next character.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.NextToken(RTools_NTS.Util.Token@)">
            <summary>
            Get the next token.  The last token will be an EofToken unless
            there's an unterminated quote or unterminated block comment
            and Settings.DoUntermCheck is true, in which case this throws
            an exception of type StreamTokenizerUntermException or sub-class.
            </summary>
            <param name="token">The output token.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.GrabInt(RTools_NTS.Util.CharBuffer,System.Boolean,System.Char@)">
            <summary>
            Starting from current stream location, scan forward
            over an int.  Determine whether it's an integer or not.  If so, 
            push the integer characters to the specified CharBuffer.  
            If not, put them in backString (essentially leave the
            stream as it was) and return false.
            <para>
            If it was an int, the stream is left 1 character after the
            end of the int, and that character is output in the thisChar parameter.
            </para>
            <para>The formats for integers are: 1, +1, and -1</para>
            The + and - signs are included in the output buffer.
            </summary>
            <param name="sb">The CharBuffer to append to.</param>
            <param name="allowPlus">Whether or not to consider + to be part
            of an integer.</param>
            <param name="thisChar">The last character read by this method.</param>
            <returns>true for parsed an int, false for not an int</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Tokenize(System.Collections.Generic.IList{RTools_NTS.Util.Token})">
            <summary>
            Parse the rest of the stream and put all the tokens
            in the input ArrayList. This resets the line number to 1.
            </summary>
            <param name="tokens">The ArrayList to append to.</param>
            <returns>bool - true for success</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeReader(System.IO.TextReader,System.Collections.Generic.IList{RTools_NTS.Util.Token})">
            <summary>
            Parse all tokens from the specified TextReader, put
            them into the input ArrayList.
            </summary>
            <param name="tr">The TextReader to read from.</param>
            <param name="tokens">The ArrayList to append to.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeFile(System.String,System.Collections.Generic.IList{RTools_NTS.Util.Token})">
            <summary>
            Parse all tokens from the specified file, put
            them into the input ArrayList.
            </summary>
            <param name="fileName">The file to read.</param>
            <param name="tokens">The ArrayList to put tokens in.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeFile(System.String)">
            <summary>
            Tokenize a file completely and return the tokens in a Token[].
            </summary>
            <param name="fileName">The file to tokenize.</param>
            <returns>A Token[] with all tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeString(System.String,System.Collections.Generic.IList{RTools_NTS.Util.Token})">
            <summary>
            Parse all tokens from the specified string, put
            them into the input ArrayList.
            </summary>
            <param name="str"></param>
            <param name="tokens">The ArrayList to put tokens in.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeStream(System.IO.Stream,System.Collections.Generic.IList{RTools_NTS.Util.Token})">
            <summary>
            Parse all tokens from the specified Stream, put
            them into the input ArrayList.
            </summary>
            <param name="s"></param>
            <param name="tokens">The ArrayList to put tokens in.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.GetEnumerator">
            <summary>
            Gibt einen Enumerator zurück, der die Auflistung durchläuft.
            </summary>
            <returns>
            Ein <see cref="T:System.Collections.Generic.IEnumerator`1"/>, der zum Durchlaufen der Auflistung verwendet werden kann.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gibt einen Enumerator zurück, der eine Auflistung durchläuft.
            </summary>
            <returns>
            Ein <see cref="T:System.Collections.IEnumerator"/>-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:RTools_NTS.Util.Token">
            <summary>
            Token class used by StreamTokenizer.
            This represents a single token in the input stream.
            This is subclassed to provide specific token types,
            such as CharToken, FloatToken, etc.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token._lineNumber">
            <summary>
            The line number in the input stream where this token originated.
            This is base-1.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.LineNumber">
            <summary>
            The line number where this token was found.  This is base-1.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.obj">
            <summary>
            A storage object for the data of this token.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.Object">
            <summary>
            The Object stored by this token.  This will be
            a primitive C# type.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.untermError">
            <summary>
            Backer for UntermError.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.UntermError">
            <summary>
            Whether or not there was an unterminated token problem
            when creating this token.  See UntermErrorMessage for
            a message associated with the problem.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.untermErrorMsg">
            An error message associated with unterm error.
        </member>
        <member name="P:RTools_NTS.Util.Token.UntermErrorMsg">
            <summary>
            The error message if there was an unterminated token error
            creating this token.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Token.#ctor(System.Int32)">
            <summary>
            Construct a Token with the specified line number.
            </summary>
            <param name="line">The line number where this
            token comes from.</param>
        </member>
        <member name="M:RTools_NTS.Util.Token.Equals(System.Object)">
            <summary>
            Equals override.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>bool - true for equals, false otherwise.</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.Equals(System.String)">
            <summary>
            Equals overload.
            </summary>
            <param name="s">The string to compare to.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.Equals(System.Char)">
            <summary>
            Equals overload.
            </summary>
            <param name="c">The char to compare to.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Equality(RTools_NTS.Util.Token,System.Object)">
            <summary>
            Operator== overload.  Compare a token and an object.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="o">The other object.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Inequality(RTools_NTS.Util.Token,System.Object)">
            <summary>
            Operator!= overload.  Compare a token and an object.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="o">The other object.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Equality(RTools_NTS.Util.Token,System.Char)">
            <summary>
            Operator== overload.  Compare a token and a char.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="c">The char.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Inequality(RTools_NTS.Util.Token,System.Char)">
            <summary>
            Operator!= overload.  Compare a token and a char.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="c">The char.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Equality(RTools_NTS.Util.Token,System.String)">
            <summary>
            Operator== overload.  Compare a token and a string.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="s">The string.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Inequality(RTools_NTS.Util.Token,System.String)">
            <summary>
            Operator!= overload.  Compare a token and a string.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="s">The string.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.GetHashCode">
            <summary>
            Override.  Returns the ToString().GetHashCode().
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:RTools_NTS.Util.Token.StringValue">
            <summary>
            Return this token's value as a string.
            </summary>
            <returns>This token's value as a string.</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.ToLineString">
            <summary>
            Produce a string which includes the line number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.ToDebugString">
            <summary>
            Produce a string which includes the token type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.ConvertToType(System.Type)">
            <summary>
            Create an object of the specified type corresponding to
            this token.
            </summary>
            <param name="t">The type of object to create.</param>
            <returns>The new object, or null for error.</returns>
        </member>
        <member name="T:RTools_NTS.Util.EolToken">
            <summary>
            Represents end-of-lines (line separator characters).
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.#ctor(System.Int32)">
            <summary>Constructor that takes line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.EolToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.EofToken">
            <summary>
            Represents end of file/stream.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.#ctor(System.Int32)">
            <summary>Constructor that takes line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.EofToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.StringToken">
            <summary>
            Abstract base class for string tokens.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.#ctor(System.String)">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.StringToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.WordToken">
            <summary>
            Token type for words, meaning sequences of word
            characters.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.WordToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.WordToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.QuoteToken">
            <summary>
            Token type for Quotes such as "this is a quote".
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.QuoteToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.QuoteToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.CommentToken">
            <summary>
            Token type for comments, including line and block
            comments.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CommentToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CommentToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.WhitespaceToken">
            <summary>
            Token type for whitespace such as spaces and tabs.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.WhitespaceToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.WhitespaceToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.CharToken">
            <summary>
            Token type for characters, meaning non-word characters.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.#ctor(System.Char)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.#ctor(System.Char,System.Int32)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.CharToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.FloatToken">
            <summary>
            Token type for floating point numbers, stored internally as a Double.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.String)">
            <summary>
            Constructor with the specified value.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.Single)">
            <summary>
            Constructor with the specified value.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.Double)">
            <summary>
            Constructor with the specified value.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.String,System.Int32)">
            <summary>
            Constructor with the specified value and line number.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.Double,System.Int32)">
            <summary>
            Constructor with the specified value and line number.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.ToDebugString">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.ToString">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.GetHashCode">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.FloatToken.StringValue">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.Equals(System.Object)">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.IntToken">
            <summary>
            Token type for integer tokens. This handles both Int32 and Int64.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int32)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int64)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int32,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int64,System.Int32)">
            <summary> 
            Constructor for a 64 bit int 
            </summary> 
        </member>
        <member name="M:RTools_NTS.Util.IntToken.ParseHex(System.String,System.Int32)">
            <summary>
            Parse a string known to be a hex string.  This is faster
            than Parse which doesn't assume the number is Hex.  This will
            throw an exception if the input number isn't hex.
            </summary>
            <param name="s">The hex number as a string.</param>
            <param name="lineNumber">The line where this token was found.</param>
            <returns>A new IntToken set to the value in the input string.</returns>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.Parse(System.String)">
            <summary>
            Convert the input string to an integer, if possible
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.IntToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.VerbosityLevel">
            <summary>
            This enumerates verbosity levels.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Error">
            <summary>For error messages.</summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Warn">
            <summary>For warn messages.</summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Info">
            <summary>For info messages.</summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Debug">
            <summary>For debug messages.</summary>
        </member>
    </members>
</doc>
