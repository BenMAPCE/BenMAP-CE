<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotSpatial.Positioning</name>
    </assembly>
    <members>
        <member name="T:DotSpatial.Positioning.Angle">
             <summary>
             Represents an angular measurement around a circle.
             </summary>
             <seealso cref="T:DotSpatial.Positioning.Azimuth">Azimuth Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Elevation">Elevation Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Latitude">Latitude Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Longitude">Longitude Class</seealso>
            
             <example>
             These examples create new instances of Angle objects.
               <code lang="VB" description="Create an angle of 90°">
             Dim MyAngle As New Angle(90)
               </code>
               <code lang="CS" description="Create an angle of 90°">
             Angle MyAngle = new Angle(90);
               </code>
               <code lang="C++" description="Create an angle of 90°">
             Angle MyAngle = new Angle(90);
               </code>
               <code lang="VB" description="Create an angle of 105°30'21.4">
             Dim MyAngle1 As New Angle(105, 30, 21.4)
               </code>
               <code lang="CS" description="Create an angle of 105°30'21.4">
             Angle MyAngle = new Angle(105, 30, 21.4);
               </code>
               <code lang="C++" description="Create an angle of 105°30'21.4">
             Angle MyAngle = new Angle(105, 30, 21.4);
               </code>
               </example>
             <remarks><para>This class serves as the base class for angular measurement classes within
             the framework, such as the <strong>Azimuth</strong>, <strong>Elevation</strong>,
               <strong>Latitude</strong> and <strong>Longitude</strong> classes. An "angular
             measurement" is a measurement around a circle. Typically, angular measurements are
             between 0° and 360°.</para>
               <para>Angles can be represented in two forms: decimal and sexagesimal. In decimal
             form, angles are represented as a single number. In sexagesimal form, angles are
             represented in three components: hours, minutes, and seconds, very much like a
             clock.</para>
               <para>Upon creating an <strong>Angle</strong> object, other properties such as
               <strong>DecimalDegrees</strong>, <strong>DecimalMinutes</strong>,
               <strong>Hours</strong>, <strong>Minutes</strong> and <strong>Seconds</strong> are
             calculated automatically.</para>
               <para>Instances of this class are guaranteed to be thread-safe because they are
             immutable (properties can only be modified via constructors).</para></remarks>
        </member>
        <member name="T:DotSpatial.Positioning.ICloneable`1">
            <summary>
            Facilitates the creation of a deep copy of an object.
            </summary>
            <typeparam name="T">The destination type for the ICloneable interface.</typeparam>
        </member>
        <member name="M:DotSpatial.Positioning.ICloneable`1.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:DotSpatial.Positioning.Angle.MAXIMUM_PRECISION_DIGITS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Angle._decimalDegrees">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Angle.Minimum">
             <summary>
             Represents the minimum value of an angle in one turn of a circle.
             </summary>
             <example>
             This example creates an angle representing the minimum allowed value.
               <code lang="VB">
             Dim MyAngle As Angle = Angle.Minimum
               </code>
               <code lang="CS">
             Angle MyAngle = Angle.Minimum;
               </code>
               <code lang="C++">
             Angle MyAngle = Angle.Minimum;
               </code>
               </example>
            
             <value>An Angle with a value of -359.999999°.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Angle.Empty">
             <summary>
             Represents an angle with no value.
             </summary>
             <value>An Angle containing a value of zero (0°).</value>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.Angle.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Angle.Maximum">
            <summary>
            Represents the maximum value of an angle in one turn of a circle.
            </summary>
            <example>
            This example creates an angle representing the maximum allowed value of 359.9999°.
              <code lang="VB">
            Dim MyAngle As Angle = Angle.Maximum
              </code>
              <code lang="CS">
            Angle MyAngle = Angle.Maximum;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Angle.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.Double)">
             <summary>
             Creates a new instance with the specified decimal degrees.
             </summary>
             <param name="decimalDegrees">The decimal degrees.</param>
             <example>
             This example demonstrates how to create an angle with a measurement of 90°.
               <code lang="VB">
             Dim MyAngle As New Angle(90)
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(90);
               </code>
               </example>
            
             <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.Int32,System.Int32,System.Double)">
             <summary>
             Creates a new instance with the specified hours, minutes and
             seconds.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <example>
             This example demonstrates how to create an angular measurement of 34°12'29.2 in
             hours, minutes and seconds.
               <code lang="VB">
             Dim MyAngle As New Angle(34, 12, 29.2)
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(34, 12, 29.2);
               </code>
               </example>
            
             <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance with the specified hours and decimal minutes.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <example>
            This example demonstrates how an angle can be created when only the hours and
            minutes (in decimal form) are known. This creates a value of 12°42.345'.
              <code lang="VB">
            Dim MyAngle As New Angle(12, 42.345)
              </code>
              <code lang="VB">
            Angle MyAngle = new Angle(12, 42.345);
              </code>
              </example>
            <remarks>An <strong>Angle</strong> containing the specified value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.String)">
             <summary>
             Creates a new instance by converting the specified string.
             </summary>
             <param name="value">The value.</param>
             <seealso cref="M:DotSpatial.Positioning.Angle.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example creates a new instance by parsing a string. (Notice The double-quote is
             doubled up to represent a single double-quote in the string.)
               <code lang="VB">
             Dim MyAngle As New Angle("123°45'67.8""")
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle("123°45'67.8\"");
               </code>
               </example>
            
             <returns>An <strong>Angle</strong> containing the specified value.</returns>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This constructor parses the specified string into an <strong>Angle</strong>
             object using the current culture. This constructor can parse any strings created via
             the <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.String,System.Globalization.CultureInfo)">
             <summary>
             Creates a new instance by converting the specified string using the specified
             culture.
             </summary>
             <param name="value">The value.</param>
             <param name="culture">The culture.</param>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This constructor parses the specified string into an <strong>Angle</strong>
             object using a specific culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.GreaterOf(DotSpatial.Positioning.Angle)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value">An <strong>Angle</strong> object to compare to the current instance.</param>
            <returns>An <strong>Angle</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.LesserOf(DotSpatial.Positioning.Angle)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value">An <strong>Angle</strong> object to compare to the current instance.</param>
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Mirror">
            <summary>
            Returns an angle opposite of the current instance.
            </summary>
            <returns>An <strong>Angle</strong> representing the mirrored value.</returns>
            <example>
            This example creates a new <strong>Angle</strong> of 45° then calculates its mirror
            of 225°. (45 + 180)
              <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(45)
            Dim Angle2 As Angle = Angle1.Mirror()
            Debug.WriteLine(Angle2.ToString())
            ' Output: 225
              </code>
              <code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(45);
            Angle Angle2 = Angle1.Mirror();
            Console.WriteLine(Angle2.ToString());
            // Output: 225
              </code>
              </example>
            <remarks>This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Normalize">
             <summary>
             Modifies a value to its equivalent between 0° and 360°.
             </summary>
             <returns>An <strong>Angle</strong> representing the normalized angle.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.Normalize(System.Double)">Normalize(Angle) Method</seealso>
            
             <example>
             This example demonstrates how normalization is used. The Stop statement is hit.
             This example demonstrates how the Normalize method can ensure that an angle fits
             between 0° and 359.9999°. This example normalizes 725° into 5°.
               <code lang="VB">
             Dim MyAngle As New Angle(720)
             MyAngle = MyAngle.Normalize()
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(720);
             MyAngle = MyAngle.Normalize();
               </code>
               <code lang="VB">
             Dim MyValue As New Angle(725)
             MyValue = MyValue.Normalize()
               </code>
               <code lang="CS">
             Angle MyValue = new Angle(725);
             MyValue = MyValue.Normalize();
               </code>
               </example>
             <remarks>This function is used to ensure that an angular measurement is within the
             allowed bounds of 0° and 360°. If a value of 360° or 720° is passed, a value of 0°
             is returned since 360° and 720° represent the same point on a circle. For the Angle
             class, this function is the same as "value Mod 360".</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToRadians">
             <summary>
             Converts the current instance into radians.
             </summary>
             <returns>A <see cref="T:DotSpatial.Positioning.Radian">Radian</see> object.</returns>
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <overloads>Converts an angular measurement into radians before further processing.</overloads>
            
             <example>
             This example converts a measurement of 90° into radians.
               <code lang="VB">
             Dim MyAngle As New Angle(90)
             Dim MyRadians As Radian = MyAngle.ToRadians()
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(90);
             Radian MyRadians = MyAngle.ToRadians();
               </code>
               </example>
             <remarks>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToString(System.String)">
             <summary>
             Outputs the angle as a string using the specified format.
             </summary>
             <param name="format">The format.</param>
             <returns>A <strong>String</strong> in the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.ToString(System.String,System.IFormatProvider)">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Angle.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an angle in a
             custom format. The " <strong>h°</strong> " code represents hours along with a
             degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
             the minutes out to two decimals. Mmm.
               <code lang="VB">
             Dim MyAngle As New Angle(45, 16.772)
             Debug.WriteLine(MyAngle.ToString("h°m.mm"))
             ' Output: 45°16.78
               </code>
               <code lang="CS">
             Dim MyAngle As New Angle(45, 16.772);
             Debug.WriteLine(MyAngle.ToString("h°m.mm"));
             // Output: 45°16.78
               </code>
               </example>
             <remarks>This method returns the current instance output in a specific format. If no
             value for the format is specified, a default format of "d.dddd°" is used. Any
             string output by this method can be converted back into an Angle object using the
             <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Ceiling">
            <summary>
            Returns the smallest integer greater than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Floor">
            <summary>
            Returns the largest integer which is smaller than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.RoundSeconds">
            <summary>
            Returns a new instance whose Seconds property is evenly divisible by 15.
            </summary>
            <returns>An <strong>Angle</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <param name="interval">A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.</param>
            <returns>An <strong>Angle</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Equals(System.Object)">
            <summary>
            Compares the current value to another Angle object's value.
            </summary>
            <param name="obj">An <strong>Angle</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.</returns>
            <remarks>This</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.GetHashCode">
            <summary>
            Returns a unique code for this instance.
            </summary>
            <returns>An <strong>Integer</strong> representing a unique code for the current
            instance.</returns>
            <remarks>Since the <strong>Angle</strong> class is immutable, this property may be used
            safely with hash tables.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToString">
             <summary>
             Outputs the angle as a string using the default format.
             </summary>
             <returns>A <strong>String</strong> created using the default format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example outputs a value of 90 degrees in the default format of ###.#°.
               <code lang="VB">
             Dim MyAngle As New Angle(90)
             Debug.WriteLine(MyAngle.ToString)
             ' Output: "90°"
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(90);
             Debug.WriteLine(MyAngle.ToString());
             // Output: "90°"
               </code>
               </example>
             <remarks>This method formats the current instance using the default format of
             "d.dddd°." Any string output by this method can be converted back into an Angle
             object using the <strong>Parse</strong> method or <strong>Angle(string)</strong>
             constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Normalize(System.Double)">
            <summary>
            Converts the specified value to its equivalent between 0° and 360°.
            </summary>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
            <returns>An Angle containing a value equivalent to the value specified, but between 0° and
            360°.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToRadians(DotSpatial.Positioning.Angle)">
            <summary>
            Converts an angular measurement into radians.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:DotSpatial.Positioning.Radian"><strong>Radian</strong></see> object.</returns>
            <example>
            This example shows a quick way to convert an angle of 90° into radians.
              <code lang="VB">
            Dim MyRadian As Radian = Angle.ToRadians(90)
              </code>
              <code lang="CS">
            Radian MyRadian = Angle.ToRadians(90);
              </code>
              </example>
            <remarks>This function is typically used to convert an angular measurement into
            radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.FromRadians(DotSpatial.Positioning.Radian)">
             <summary>
             Converts a value in radians into an angular measurement.
             </summary>
             <param name="radians">The radians.</param>
             <returns></returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.ToRadians">ToRadians</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <example>
             This example uses the <strong>FromRadians</strong> method to convert a value of one
             radian into an <strong>Angle</strong> of 57°.
               <code lang="VB">
             ' Create a new angle equal to one radian
             Dim MyRadians As New Radian(1)
             Dim MyAngle As Angle = Angle.FromRadians(MyRadians)
             Debug.WriteLine(MyAngle.ToString())
             ' Output: 57°
               </code>
               <code lang="CS">
             // Create a new angle equal to one radian
             Radian MyRadians = new Radian(1);
             Angle MyAngle = Angle.FromRadians(MyRadians);
             Console.WriteLine(MyAngle.ToString());
             // Output: 57°
               </code>
               </example>
             <remarks>This function is typically used in conjunction with the
             <see cref="M:DotSpatial.Positioning.Angle.ToRadians">ToRadians</see>
             method after a trigonometric function has completed. The converted value is stored in
             the <see cref="P:DotSpatial.Positioning.Angle.DecimalDegrees">DecimalDegrees</see> property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.FromRadians(System.Double)">
            <summary>
            Froms the radians.
            </summary>
            <param name="radians">The radians.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.FromSexagesimal(System.Double)">
            <summary>
            Convers a sexagesimal number into an Angle.
            </summary>
            <param name="dms">A Double value, a number in the form of DDD.MMSSSSS format</param>
            <returns>An <strong>Angle</strong> object.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.LesserOf(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value1">A <strong>Angle</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Angle</strong> object to compare to value1.</param>
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.GreaterOf(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value1">A <strong>Angle</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Angle</strong> object to compare to value1</param>
            <returns>A <strong>Angle</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Random">
            <summary>
            Returns a random angle between 0° and 360°.
            </summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Random(System.Random)">
            <summary>
            Returns a random Angle between 0° and 360°
            </summary>
            <param name="generator">A <strong>Random</strong> object used to ogenerate random values.</param>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(System.Double)~DotSpatial.Positioning.Angle">
            <summary>
            Converts a decimal degree measurement as a Double into an Angle.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(System.Single)~DotSpatial.Positioning.Angle">
            <summary>
            Converts a decimal degree measurement as a Single into an Angle.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Radian)~DotSpatial.Positioning.Angle">
            <summary>
            Converts a measurement in Radians into an Angle.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Angle)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Angle into an Double.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Angle)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Angle into a Single.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(System.Int32)~DotSpatial.Positioning.Angle">
            <summary>
            Converts a measurement in degrees as an Integer into an Angle.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Azimuth)~DotSpatial.Positioning.Angle">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Azimuth"/> to <see cref="T:DotSpatial.Positioning.Angle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Elevation)~DotSpatial.Positioning.Angle">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Elevation"/> to <see cref="T:DotSpatial.Positioning.Angle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Latitude)~DotSpatial.Positioning.Angle">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Latitude"/> to <see cref="T:DotSpatial.Positioning.Angle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Longitude)~DotSpatial.Positioning.Angle">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Longitude"/> to <see cref="T:DotSpatial.Positioning.Angle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(System.String)~DotSpatial.Positioning.Angle">
            <summary>
            Converts a measurement in the form of a formatted String into an Angle.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Explicit(DotSpatial.Positioning.Angle)~System.String">
            <summary>
            Converts an Angle into a String.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Addition(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Addition(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Subtraction(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Subtraction(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Multiply(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Multiply(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Division(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Division(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Equality(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Equality(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Inequality(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_Inequality(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_GreaterThan(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_GreaterThan(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_GreaterThanOrEqual(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_GreaterThanOrEqual(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_LessThan(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_LessThan(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_LessThanOrEqual(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Angle)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.op_LessThanOrEqual(DotSpatial.Positioning.Angle,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <example>
            This example uses the <strong>Increment</strong> method to increase an angle's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Increment</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Angle1 As New Angle(89)
            Angle1 = Angle1.Increment()
            ' Incorrect use of Increment
            Dim Angle1 = New Angle(89)
            Angle1.Increment()
            ' Notice: Angle1 will still be 89°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Angle Angle1 = new Angle(89);
            Angle1 = Angle1.Increment();
            // Incorrect use of Increment
            Angle Angle1 = new Angle(89);
            Angle1.Increment();
            // Notice: Angle1 will still be 89°!
              </code>
              </example>
            <remarks><para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Angle</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Add(System.Double)">
            <summary>
            Increases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
            <returns>A new <strong>Angle</strong> containing the summed values.</returns>
            <example>
            This example adds 45° to the current instance of 45°, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(45)
            Angle1 = Angle1.Add(45)
              </code>
              <code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(45);
            Angle1 = Angle1.Add(45);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Add(DotSpatial.Positioning.Angle)">
            <summary>
            Adds the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <example>
            This example uses the <strong>Decrement</strong> method to decrease an angle's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Decrement</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Angle1 As New Angle(91)
            Angle1 = Angle1.Decrement()
            ' Incorrect use of Decrement
            Dim Angle1 = New Angle(91)
            Angle1.Increment()
            ' NOTE: Angle1 will still be 91°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Angle Angle1 = new Angle(91);
            Angle1 = Angle1.Decrement();
            // Incorrect use of Decrement
            Angle Angle1 = new Angle(91);
            Angle1.Decrement();
            // NOTE: Angle1 will still be 91°!
              </code>
              </example>
            <remarks><para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Angle</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Subtract(System.Double)">
            <summary>
            Decreases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
            <returns>A new <strong>Angle</strong> containing the new value.</returns>
            <example>
            This example subtracts 30° from the current instance of 90°, returning 60°.
              <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(90)
            Angle1 = Angle1.Subtract(30)
              </code>
              <code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(90);
            Angle1 = Angle1.Subtract(30);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Subtract(DotSpatial.Positioning.Angle)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Multiply(System.Double)">
            <summary>
            Multiplies the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
            <returns>A new <strong>Angle</strong> containing the product of the two numbers.</returns>
            <example>
            This example multiplies 30° with three, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(30)
            Angle1 = Angle1.Multiply(3)
              </code>
              <code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(30);
            Angle1 = Angle1.Multiply(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Multiply(DotSpatial.Positioning.Angle)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Divide(System.Double)">
            <summary>
            Divides the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
            <returns>An <strong>Angle</strong> containing the new value.</returns>
            <example>
            This example divides 90° by three, returning 30°.
              <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(90)
            Angle1 = Angle1.Divide(3)
              </code>
              <code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(90);
            Angle1 = Angle1.Divide(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Divide(DotSpatial.Positioning.Angle)">
            <summary>
            Divides the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsLessThan(DotSpatial.Positioning.Angle)">
            <summary>
            Indicates if the current instance is smaller than the specified value.
            </summary>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsLessThan(System.Double)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsLessThanOrEqualTo(DotSpatial.Positioning.Angle)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.</returns>
            <remarks>This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsLessThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsGreaterThan(DotSpatial.Positioning.Angle)">
            <summary>
            Indicates if the current instance is larger than the specified value.
            </summary>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsGreaterThan(System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Angle)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Angle</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Parse(System.String)">
             <summary>
             Converts the specified string into an Angle object.
             </summary>
             <param name="value">The value.</param>
             <returns>A new <strong>Angle</strong> object populated with the specified
             values.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.ToString">ToString Method</seealso>
            
             <example>
             This example creates a new angular measurement using the <strong>Parse</strong>
             method.
               <code lang="VB">
             Dim NewAngle As Angle = Angle.Parse("123.45°")
               </code>
               <code lang="CS">
             Angle NewAngle = Angle.Parse("123.45°");
               </code>
               </example>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This method parses the specified string into an <strong>Angle</strong> object
             using the current culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Angle</strong> object using the
            specified culture.
            </summary>
            <param name="value">A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.</param>
            <returns>A new <strong>Angle</strong> object equivalent to the specified string.</returns>
            <remarks>This powerful method is typically used to process data from a data store or a
            value input by the user in any culture. This function can accept any format which
            can be output by the ToString method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
             <summary>
             Converts arbitrary hour, minute and seconds into decimal degrees.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <returns>A <strong>Double</strong> containing the decimal degree version of the specified
             values.</returns>
             <seealso cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Latitude.Normalize">Normalize Method</seealso>
            
             <example>
             This example converts a value of 10°30'0" into decimal degrees (10.5).
               <code lang="VB" title="ToDecimalDegrees Example (VB)">
             Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
               </code>
               <code lang="CS" title="ToDecimalDegrees Example (C#)">
             double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
               </code>
               </example>
             <remarks>This function is used to convert three-part measurements into a single value. The
             result of this method is typically assigned to the
             <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
             DecimalDegrees</see> property. Values are rounded to thirteen decimal
             places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToDecimalDegrees(System.Int32)">
            <summary>
            Converts an hour value into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to a double value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>An <strong>Angle</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.CompareTo(DotSpatial.Positioning.Angle)">
            <summary>
            Returns a value indicating the relative order of two objects.
            </summary>
            <param name="other">An <strong>Angle</strong> object to compare with.</param>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>This method allows collections of <strong>Azimuth</strong> objects to be sorted.
            The <see cref="P:DotSpatial.Positioning.Angle.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Equals(DotSpatial.Positioning.Angle)">
             <summary>
             Compares the current instance to another instance using the specified
             precision.
             </summary>
             <param name="angle">The angle.</param>
             <returns>A <strong>Boolean</strong>, <strong>True</strong> if the
             <strong>DecimalDegrees</strong> property of the current instance matches the
             specified instance's <strong>DecimalDegrees</strong> property.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.Equals(DotSpatial.Positioning.Angle,System.Int32)">Equals Method</seealso>
            
             <example>
             These examples compare two fractional values using specific numbers of digits for
             comparison.
               <code lang="VB" title="[New Example]">
             ' Equals will return False
             Dim Angle1 As New Angle(90.15);
             Dim Angle2 As New Angle(90.12);
             If Angle1.Equals(Angle2, 2) Then
             Debug.WriteLine("The values are the same to two digits of precision.");
             ' Equals will return True
             Dim Angle1 As New Angle(90.15);
             Dim Angle2 As New Angle(90.12);
             If Angle1.Equals(Angle2, 1) Then
             Debug.WriteLine("The values are the same to one digit of precision.");
               </code>
               <code lang="CS" title="[New Example]">
             // Equals will return False
             Angle Angle1 = new Angle(90.15);
             Angle Angle2 = new Angle(90.12);
             if (Angle1.Equals(Angle2, 2))
             Console.WriteLine("The values are the same to two digits of precision.");
             // Equals will return True
             Angle Angle1 = new Angle(90.15);
             Angle Angle2 = new Angle(90.12);
             if (Angle1.Equals(Angle2, 1))
             Console.WriteLine("The values are the same to one digits of precision.");
               </code>
               </example>
             <remarks><para>This is typically used in cases where precision is only significant for a few
             digits and exact comparison is not necessary.</para>
               <para><em>NOTE: This method compares objects by value, not by
             reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.Equals(DotSpatial.Positioning.Angle,System.Int32)">
             <summary>
             Compares the current instance to another instance using the specified
             precision.
             </summary>
             <param name="angle">The angle.</param>
             <param name="decimals">The decimals.</param>
             <returns>A <strong>Boolean</strong>, <strong>True</strong> if the
             <strong>DecimalDegrees</strong> property of the current instance matches the
             specified instance's <strong>DecimalDegrees</strong> property.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.Equals(DotSpatial.Positioning.Angle,System.Int32)">Equals Method</seealso>
            
             <example>
             These examples compare two fractional values using specific numbers of digits for
             comparison.
               <code lang="VB" title="[New Example]">
             ' Equals will return False
             Dim Angle1 As New Angle(90.15);
             Dim Angle2 As New Angle(90.12);
             If Angle1.Equals(Angle2, 2) Then
             Debug.WriteLine("The values are the same to two digits of precision.");
             ' Equals will return True
             Dim Angle1 As New Angle(90.15);
             Dim Angle2 As New Angle(90.12);
             If Angle1.Equals(Angle2, 1) Then
             Debug.WriteLine("The values are the same to one digit of precision.");
               </code>
               <code lang="CS" title="[New Example]">
             // Equals will return False
             Angle Angle1 = new Angle(90.15);
             Angle Angle2 = new Angle(90.12);
             if (Angle1.Equals(Angle2, 2))
             Console.WriteLine("The values are the same to two digits of precision.");
             // Equals will return True
             Angle Angle1 = new Angle(90.15);
             Angle Angle2 = new Angle(90.12);
             if (Angle1.Equals(Angle2, 1))
             Console.WriteLine("The values are the same to one digits of precision.");
               </code>
               </example>
             <remarks><para>This is typically used in cases where precision is only significant for a few
             digits and exact comparison is not necessary.</para>
               <para><em>NOTE: This method compares objects by value, not by
             reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ToString(System.String,System.IFormatProvider)">
             <summary>
             Outputs the angle as a string using the specified format.
             </summary>
             <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
             <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
             <returns>A <strong>String</strong> in the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Angle.ToString">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Angle.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an angle in a
             custom format. The " <strong>h°</strong> " code represents hours along with a
             degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
             the minutes out to two decimals. Mmm.
               <code lang="VB">
             Dim MyAngle As New Angle(45, 16.772)
             Debug.WriteLine(MyAngle.ToString("h°m.mm", CultureInfo.CurrentCulture))
             ' Output: 45°16.78
               </code>
               <code lang="CS">
             Dim MyAngle As New Angle(45, 16.772);
             Debug.WriteLine(MyAngle.ToString("h°m.mm", CultureInfo.CurrentCulture));
             // Output: 45°16.78
               </code>
               </example>
             <remarks>This method returns the current instance output in a specific format. If no
             value for the format is specified, a default format of "d.dddd" is used. Any string
             output by this method can be converted back into an Angle object using the
             <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Angle.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.DecimalDegrees">
             <summary>
             Returns the value of the angle as decimal degrees.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Angle.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.Seconds">Seconds Property</seealso>
            
             <example>
             This example demonstrates how the
               <see cref="P:DotSpatial.Positioning.Angle.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
             calculated automatically when creating an angle using hours, minutes and seconds.
               <code lang="VB">
             ' Create an angle of 20°30'
             Dim MyAngle As New Angle(20, 30)
             ' Setting the DecimalMinutes recalculated other properties
             Debug.WriteLine(MyAngle.DecimalDegrees)
             ' Output: "20.5"  the same as 20°30'
               </code>
               <code lang="CS">
             // Create an angle of 20°30'
             Angle MyAngle = New Angle(20, 30);
             // Setting the DecimalMinutes recalculated other properties
             Console.WriteLine(MyAngle.DecimalDegrees)
             // Output: "20.5"  the same as 20°30'
               </code>
               </example>
             <remarks>This property returns the value of the angle as a single number.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.DecimalMinutes">
             <summary>
             Returns the minutes and seconds as a single numeric value.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Angle.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <example>
             This example demonstrates how the <strong>DecimalMinutes</strong> property is
             automatically calculated when creating a new angle.
               <code lang="VB">
             ' Create an angle of 20°10'30"
             Dim MyAngle As New Angle(20, 10, 30)
             ' The DecimalMinutes property is automatically calculated
             Debug.WriteLine(MyAngle.DecimalMinutes)
             ' Output: "10.5"
               </code>
               <code lang="CS">
             // Create an angle of 20°10'30"
             Angle MyAngle = new Angle(20, 10, 30);
             // The DecimalMinutes property is automatically calculated
             Console.WriteLine(MyAngle.DecimalMinutes)
             // Output: "10.5"
               </code>
               </example>
             <remarks>This property is used when minutes and seconds are represented as a single
             decimal value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.Hours">
             <summary>
             Returns the integer hours (degrees) portion of an angular
             measurement.
             </summary>
             <value>An <strong>Integer</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Angle.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 60.5° then outputs the value of the
               <strong>Hours</strong> property, 60.
               <code lang="VB">
             Dim MyAngle As New Angle(60.5)
             Debug.WriteLine(MyAngle.Hours)
             ' Output: 60
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(60.5);
             Console.WriteLine(MyAngle.Hours);
             // Output: 60
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Angle.Minutes">Minutes</see>
             and <see cref="P:DotSpatial.Positioning.Angle.Seconds">Seconds</see> properties to create a full angular measurement.
             This property is the same as <strong>DecimalDegrees</strong> without any fractional
             value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.Minutes">
             <summary>
             Returns the integer minutes portion of an angular measurement.
             </summary>
             <value>An <strong>Integer</strong>.</value>
             <seealso cref="P:DotSpatial.Positioning.Angle.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 45.5° then outputs the value of the
               <strong>Minutes</strong> property, 30.
               <code lang="VB">
             Dim MyAngle As New Angle(45.5)
             Debug.WriteLine(MyAngle.Minutes)
             ' Output: 30
               </code>
               <code lang="CS">
             Angle MyAngle = new Angle(45.5);
             Console.WriteLine(MyAngle.Minutes);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Angle.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Angle.Seconds">Seconds</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.Seconds">
             <summary>
             Returns the seconds minutes portion of an angular measurement.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Angle.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Angle.Minutes">Minutes Property</seealso>
            
             <example>
             This example creates an angle of 45°10.5' then outputs the value of the
               <strong>Seconds</strong> property, 30.
               <code lang="VB">
             Dim MyAngle As New Angle(45, 10.5)
             Debug.WriteLine(MyAngle.Seconds)
             ' Output: 30
               </code>
               <code lang="CS">
             Dim MyAngle As New Angle(45, 10.5);
             Console.WriteLine(MyAngle.Seconds);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Angle.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Angle.Minutes">Minutes</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.IsEmpty">
            <summary>
            Indicates if the current instance has a non-zero value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.</value>
            <seealso cref="F:DotSpatial.Positioning.Angle.Empty">Empty Field</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.IsInfinity">
            <summary>
            Indicates if the current instance represents an infinite value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Angle.IsNormalized">
            <summary>
            Indicates whether the value has been normalized and is within the
            allowed bounds of 0° and 360°.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Area">
            <summary>
            Represents the measurement of surface area of a polygon on Earth's
            surface.
            </summary>
            <example>
            This example demonstrates how to create an <strong>Area</strong> structure and
            convert it to another unit type.
              <code lang="VB">
            ' Declare a Area of 50 meters
            Dim Area1 As New Area(50, AreaUnit.SquareMeters)
            ' Convert it into acres
            Dim Area2 As Area = Area2.ToAcres()
              </code>
              <code lang="CS">
            // Declare a Area of 50 meters
            Area Area1 = new Area(50, AreaUnit.SquareMeters);
            // Convert it into acres
            Area Area2 = Area2.ToAcres();
              </code>
              </example>
            <remarks><para>This structure is used to represent measurements of arbitrary polygons on
            Earth's surface. Measurements can be converted to different unit types, such as
            acres, square kilometers, and square miles.</para>
              <para>Instances of this structure are guaranteed to be thread-safe because they are
            immutable (properties can only be modified via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.ACRES_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_FEET_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_INCHES_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_STATUTE_MILES_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_NAUTICAL_MILES_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_CENTIMETERS_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_SQUARE_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_METERS_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_SQUARE_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_SQUARE_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_SQUARE_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_SQUARE_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_SQUARE_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_SQUARE_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.SQUARE_KILOMETERS_PER_ACRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area._units">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.Empty">
            <summary>
            Represents an area with no value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.Infinity">
            <summary>
            Represents an area of infinite value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.Maximum">
            <summary>
            Represents the largest possible area which can be stored.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.Minimum">
            <summary>
            Represents the smallest possible area which can be stored.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Area.Invalid">
            <summary>
            Represents an invalid or unspecified area.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Area.#ctor(System.Double,DotSpatial.Positioning.AreaUnit)">
            <summary>
            Creates a new instance using the specified value and unit type.
            </summary>
            <param name="value">The value.</param>
            <param name="units">The units.</param>
            <example>
            This example uses a constructor to create a new <strong>Area</strong> of fifty
            square kilometers.
              <code lang="VB">
            Dim MyArea As New Area(50, AreaUnit.SquareKilometers)
              </code>
              <code lang="CS">
            Area MyArea = new Area(50, AreaUnit.SquareKilometers);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Area.#ctor(System.String)">
             <summary>
             Creates a new instance using the specified string.
             </summary>
             <param name="value">The value.</param>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
             2. The Area unit type was not recognized or not specified.</exception>
            
             <example>
             This example demonstrates how the to use this constructor.
               <code lang="VB">
             Dim MyArea As Area
             ' Create a Area of 50 square kilometers
             MyArea = New Area("50 sq. km")
             ' Create a Area of 14, 387 miles, then convert it into square inches
             MyArea = New Area("14, 387 sq. statute miles").ToSquareInches()
             ' Create a Area of 50 square feet
             MyArea = New Area("    50 sq '       ")
               </code>
               <code lang="CS">
             Area MyArea;
             ' Create a Area of 50 square kilometers
             MyArea = new Area("50 sq. km");
             ' Create a Area of 14, 387 miles, then convert it into square inches
             MyArea = new Area("14, 387 sq. statute miles").ToSquareInches();
             ' Create a Area of 50 square feet
             MyArea = new Area("    50 sq '       ");
               </code>
               </example>
            
             <returns>An <strong>Area</strong> object.</returns>
            
             <seealso cref="M:DotSpatial.Positioning.Area.Parse(System.String)">Parse(string) Method</seealso>
             <remarks>This powerful constructor is used to convert an area measurement in the form of a
             string into an object, such as one entered by a user or read from a file. This
             constructor can accept any output created via the <see cref="M:DotSpatial.Positioning.Area.ToString">ToString</see>
             method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.#ctor(System.String,System.Globalization.CultureInfo)">
             <summary>
             Creates a new instance using the specified string and culture.
             </summary>
             <param name="value">The value.</param>
             <param name="culture">The culture.</param>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
             2. The Area unit type was not recognized or not specified.</exception>
            
             <example>
             This example demonstrates how the to use this constructor.
               <code lang="VB">
             Dim MyArea As Area
             ' Create a Area of 50 square kilometers
             MyArea = New Area("50 sq. km", CultureInfo.CurrentCulture)
             ' Create a Area of 14, 387 miles, then convert it into square inches
             MyArea = New Area("14, 387 sq. statute miles", CultureInfo.CurrentCulture).ToSquareInches()
             ' Create a Area of 50 square feet
             MyArea = New Area("    50 sq '       ", CultureInfo.CurrentCulture)
               </code>
               <code lang="CS">
             Area MyArea;
             ' Create a Area of 50 square kilometers
             MyArea = new Area("50 sq. km", CultureInfo.CurrentCulture);
             ' Create a Area of 14, 387 miles, then convert it into square inches
             MyArea = new Area("14, 387 sq. statute miles", CultureInfo.CurrentCulture).ToSquareInches();
             ' Create a Area of 50 square feet
             MyArea = new Area("    50 sq '       ", CultureInfo.CurrentCulture);
               </code>
               </example>
            
             <returns>An <strong>Area</strong> object.</returns>
            
             <seealso cref="M:DotSpatial.Positioning.Area.Parse(System.String)">Parse(string) Method</seealso>
             <remarks>This powerful constructor is used to convert an area measurement in the form of a
             string into an object, such as one entered by a user or read from a file. This
             constructor can accept any output created via the <see cref="M:DotSpatial.Positioning.Area.ToString">ToString</see>
             method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareFeet">
             <summary>
             Converts the current measurement into square feet.
             </summary>
             <returns>A new <strong>Area</strong> object containing the converted
             value.</returns>
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareInches">ToSquareInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
            
             <example>
             This example converts various three <strong>Area</strong> objects, each with a
             different unit type, into square feet.
               <code lang="VB">
             ' Create Areas of different unit types
             Dim Area1 As New Area(10, AreaUnit.SquareInches)
             Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
             Dim Area3 As New Area(50, AreaUnit.SquareKilometers)
             ' Convert the Area measurements to square feet and output the result
             Debug.WriteLine(Area1.ToSquareFeet().ToString())
             Debug.WriteLine(Area2.ToSquareFeet().ToString())
             Debug.WriteLine(Area3.ToSquareFeet().ToString())
               </code>
               <code lang="CS">
             // Create Areas of different unit types
             Area Area1 = new Area(10, AreaUnit.SquareInches);
             Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
             Area Area3 = new Area(50, AreaUnit.SquareKilometers);
             // Convert the Area measurements to square feet and output the result
             Console.WriteLine(Area1.ToSquareFeet().ToString());
             Console.WriteLine(Area2.ToSquareFeet().ToString());
             Console.WriteLine(Area3.ToSquareFeet().ToString());
               </code>
               </example>
             <remarks>This method will perform a conversion regardless of the current unit type. You
             may convert from any unit type to any other unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareInches">
             <summary>
             Converts the current measurement into square inches.
             </summary>
             <returns>A new <strong>Area</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various three <strong>Area</strong> objects, each with a
             different unit type, into square inches.
               <code lang="VB">
             ' Create Areas of different unit types
             Dim Area1 As New Area(10, AreaUnit.SquareFeet)
             Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
             Dim Area3 As New Area(50, AreaUnit.SquareKilometers)
             ' Convert the Area measurements to square inches and output the result
             Debug.WriteLine(Area1.ToSquareInches().ToString())
             Debug.WriteLine(Area2.ToSquareInches().ToString())
             Debug.WriteLine(Area3.ToSquareInches().ToString())
               </code>
               <code lang="CS">
             // Create Areas of different unit types
             Area Area1 = new Area(10, AreaUnit.SquareFeet);
             Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
             Area Area3 = new Area(50, AreaUnit.SquareKilometers);
             // Convert the Area measurements to square inches and output the result
             Console.WriteLine(Area1.ToSquareInches().ToString());
             Console.WriteLine(Area2.ToSquareInches().ToString());
             Console.WriteLine(Area3.ToSquareInches().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion regardless of the current unit type. You
             may convert from any unit type to any other unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareKilometers">
             <summary>
             Converts the current measurement into square kilometers.
             </summary>
             <returns>A new <strong>Area</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various three <strong>Area</strong> objects, each with a
             different unit type, into square kilometers.
               <code lang="VB">
             ' Create Areas of different unit types
             Dim Area1 As New Area(10, AreaUnit.SquareFeet)
             Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
             Dim Area3 As New Area(50, AreaUnit.SquareInches)
             ' Convert the Area measurements to square kilometers and output the result
             Debug.WriteLine(Area1.ToSquareKilometers().ToString())
             Debug.WriteLine(Area2.ToSquareKilometers().ToString())
             Debug.WriteLine(Area3.ToSquareKilometers().ToString())
               </code>
               <code lang="CS">
             // Create Areas of different unit types
             Area Area1 = new Area(10, AreaUnit.SquareFeet);
             Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
             Area Area3 = new Area(50, AreaUnit.SquareInches);
             // Convert the Area measurements to square kilometers and output the result
             Console.WriteLine(Area1.ToSquareKilometers().ToString());
             Console.WriteLine(Area2.ToSquareKilometers().ToString());
             Console.WriteLine(Area3.ToSquareKilometers().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareInches">ToSquareInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion regardless of the current unit type. You
             may convert from any unit type to any other unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareMeters">
             <summary>
             Converts the current measurement into square meters.
             </summary>
             <returns>A new <strong>Area</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various three <strong>Area</strong> objects, each with a
             different unit type, into square meters.
               <code lang="VB">
             ' Create Areas of different unit types
             Dim Area1 As New Area(10, AreaUnit.SquareFeet)
             Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
             Dim Area3 As New Area(50, AreaUnit.SquareInches)
             ' Convert the Area measurements to square meters and output the result
             Debug.WriteLine(Area1.ToSquareMeters().ToString())
             Debug.WriteLine(Area2.ToSquareMeters().ToString())
             Debug.WriteLine(Area3.ToSquareMeters().ToString())
               </code>
               <code lang="CS">
             // Create Areas of different unit types
             Area Area1 = new Area(10, AreaUnit.SquareFeet);
             Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
             Area Area3 = new Area(50, AreaUnit.SquareInches);
             // Convert the Area measurements to square meters and output the result
             Console.WriteLine(Area1.ToSquareMeters().ToString());
             Console.WriteLine(Area2.ToSquareMeters().ToString());
             Console.WriteLine(Area3.ToSquareMeters().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareInches">ToSquareInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion regardless of the current unit type. You
             may convert from any unit type to any other unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareNauticalMiles">
             <summary>
             Converts the current measurement into square nautical miles.
             </summary>
             <returns>A new <strong>Area</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various three <strong>Area</strong> objects, each with a
             different unit type, into square nautical miles.
               <code lang="VB">
             ' Create Areas of different unit types
             Dim Area1 As New Area(10, AreaUnit.SquareFeet)
             Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
             Dim Area3 As New Area(50, AreaUnit.SquareInches)
             ' Convert the Area measurements to square nautical miles and output the result
             Debug.WriteLine(Area1.ToSquareNauticalMiles().ToString())
             Debug.WriteLine(Area2.ToSquareNauticalMiles().ToString())
             Debug.WriteLine(Area3.ToSquareNauticalMiles().ToString())
               </code>
               <code lang="CS">
             // Create Areas of different unit types
             Area Area1 = new Area(10, AreaUnit.SquareFeet);
             Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
             Area Area3 = new Area(50, AreaUnit.SquareInches);
             // Convert the Area measurements to square nautical miles and output the result
             Console.WriteLine(Area1.ToSquareNauticalMiles().ToString());
             Console.WriteLine(Area2.ToSquareNauticalMiles().ToString());
             Console.WriteLine(Area3.ToSquareNauticalMiles().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareInches">ToSquareInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion regardless of the current unit type. You
             may convert from any unit type to any other unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareStatuteMiles">
             <summary>
             Converts the current measurement into square miles.
             </summary>
             <returns>A new <strong>Area</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various three <strong>Area</strong> objects, each with a
             different unit type, into square miles.
               <code lang="VB">
             ' Create Areas of different unit types
             Dim Area1 As New Area(10, AreaUnit.SquareFeet)
             Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
             Dim Area3 As New Area(50, AreaUnit.SquareInches)
             ' Convert the Area measurements to square statute miles and output the result
             Debug.WriteLine(Area1.ToSquareStatuteMiles().ToString())
             Debug.WriteLine(Area2.ToSquareStatuteMiles().ToString())
             Debug.WriteLine(Area3.ToSquareStatuteMiles().ToString())
               </code>
               <code lang="CS">
             // Create Areas of different unit types
             Area Area1 = new Area(10, AreaUnit.SquareFeet);
             Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
             Area Area3 = new Area(50, AreaUnit.SquareInches);
             // Convert the Area measurements to square statute miles and output the result
             Console.WriteLine(Area1.ToSquareStatuteMiles().ToString());
             Console.WriteLine(Area2.ToSquareStatuteMiles().ToString());
             Console.WriteLine(Area3.ToSquareStatuteMiles().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareInches">ToSquareInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
             <remarks>This method will perform a conversion regardless of the current unit type. A
             "statute mile" is frequently referred to as "mile" by itself.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToAcres">
            <summary>
            Converts the current measurement into acres.
            </summary>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <example>
            This example converts various three <strong>Area</strong> objects, each with a
            different unit type, into acres.
              <code lang="VB" title="[New Example]">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to acres and output the result
            Debug.WriteLine(Area1.ToAcres().ToString())
            Debug.WriteLine(Area2.ToAcres().ToString())
            Debug.WriteLine(Area3.ToAcres().ToString())
              </code>
              <code lang="CS" title="[New Example]">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to acres and output the result
            Console.WriteLine(Area1.ToAcres().ToString());
            Console.WriteLine(Area2.ToAcres().ToString());
            Console.WriteLine(Area3.ToAcres().ToString());
              </code>
              </example>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToSquareCentimeters">
            <summary>
            Converts the current measurement into square centimeters.
            </summary>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <example>
            This example converts various three <strong>Area</strong> objects, each with a
            different unit type, into square centimeters.
              <code lang="VB" title="[New Example]">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square centimeters and output the result
            Debug.WriteLine(Area1.ToSquareCentimeters().ToString())
            Debug.WriteLine(Area2.ToSquareCentimeters().ToString())
            Debug.WriteLine(Area3.ToSquareCentimeters().ToString())
              </code>
              <code lang="CS" title="[New Example]">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square centimeters and output the result
            Console.WriteLine(Area1.ToSquareCentimeters().ToString());
            Console.WriteLine(Area2.ToSquareCentimeters().ToString());
            Console.WriteLine(Area3.ToSquareCentimeters().ToString());
              </code>
              </example>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToImperialUnitType">
            <summary>
            Converts the current instance to an Imperial unit type which minimizes numeric
            value.
            </summary>
            <returns>An <strong>Area</strong> converted to Imperial units. (i.e. feet, inches,
            miles)</returns>
            <example>
            This example converts a measurement of 10560 feet into 1 square statute mile using
            the <strong>ToMetricUnitType</strong> method.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(27878400, AreaUnit.SquareFeet)
            Dim Area2 As Area = Area1.ToImperialUnitType()
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square statute mile
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 = new Area(27878400, AreaUnit.SquareFeet);
            Area Area2 = Area1.ToImperialUnitType();
            Console.WriteLine(Area2.ToString());
            // Output: 1 square statute mile
              </code>
              </example>
            <remarks>This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "27, 878, 400 square feet" would be easier to
            understand as "1 square statute mile." This method converts the current instance to
            Metric unit which brings the <strong>Value</strong> closest to 1, then returns the
            new value. This method will perform a conversion regardless of the current unit
            type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToMetricUnitType">
            <summary>
            Converts the current instance to a Metric unit type which minimizes numeric
            value.
            </summary>
            <returns>An <strong>Area</strong> converted to Metric units. (i.e. centimeter, meter,
            kilometer)</returns>
            <example>
            This example converts a measurement of 0.0001 kilometers into 1 meter using the
              <strong>ToMetricUnitType</strong> method.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(0.0001, AreaUnit.SquareKilometers)
            Dim Area2 As Area = Area1.ToMetricUnitType()
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square meter
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 = new Area(0.0001, AreaUnit.SquareKilometers);
            Area Area2 = Area1.ToMetricUnitType();
            Console.WriteLine(Area2.ToString());
            // Output: 1 square meter
              </code>
              </example>
            <remarks>This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "0.0002 kilometers" would be easier to read as "2
            meters." This method converts the current instance to Metric unit which brings the
            <strong>Value</strong> closest to 1, then returns the new value. This method will
            perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToLocalUnitType">
            <summary>
            Converts the current instance to a Metric or Imperial unit type depending on the
            local culture.
            </summary>
            <returns>An <strong>Area</strong> converted to Metric or Imperial units, depending on the
            local culture.</returns>
            <example>
            See
              <see cref="M:DotSpatial.Positioning.Area.ToImperialUnitType"><strong>ToImperialUnitType</strong></see> and
              <see cref="M:DotSpatial.Positioning.Area.ToMetricUnitType"><strong>ToMetricUnitType</strong></see> methods
            for examples.
              </example>
            <remarks>This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "0.0002 kilometers" would be easier to read as "2
            meters." This method converts the current instance to either a Metric or an Imperial
            unit (depending on the local culture) which brings the <strong>Value</strong> closest
            to 1. This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToUnitType(DotSpatial.Positioning.AreaUnit)">
            <summary>
            Converts the current instance into the specified unit type.
            </summary>
            <param name="value">An <strong>AreaUnit</strong> value specifying the unit type to convert to.</param>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <example>
            This example uses the <strong>ToUnitType</strong> method to convert an area
            measurement of 27, 878, 400 square feet into 1 square statute mile.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(27878400, AreaUnit.SquareFeet)
            Dim Area2 As Area = Area1.ToUnitType(AreaUnit.SquareStatuteMiles)
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square statute mile
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 As New Area(27878400, AreaUnit.SquareFeet);
            Area Area2 As Area = Area1.ToUnitType(AreaUnit.SquareStatuteMiles);
            Console.WriteLine(Area2.ToString());
            // Output: 1 square statute mile
              </code>
              </example>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>A <strong>String</strong> containing the Area in the specified format.</returns>
            <example>
            This example uses the ToString method to populate a TextBox with a Area measurement
            using a custom format.
              <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString("v.v uuu"))
            ' Output: 75.0 square statute miles
              </code>
              <code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea As New Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString("v.v uuu"));
            // Output: 75.0 square statute miles
              </code>
              </example>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Add(DotSpatial.Positioning.Area)">
            <summary>
            Adds the specified area to the current instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A new <strong>Area</strong> structure containing the summed values.</returns>
            <example>
            This example demonstrates how two areas of different unit types can be safely added
            together. A value of 144 square inches (which is the same as one square foot) is
            added to one square foot, producing two square feet.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareFeet)
            Dim Area2 As New Area(144, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Add(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 2 square feet
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareFeet);
            Area Area2 = new Area(144, AreaUnit.SquareInches);
            Area Area3 = Area1.Add(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 2 square feet
              </code>
              </example>
            <remarks>This method can add any <strong>Area</strong> object to the current instance. If
            the unit type of the <strong>Value</strong> parameter does not match that of the
            current instance, the value is converted to the unit type of the current instance
            before adding.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Subtract(DotSpatial.Positioning.Area)">
            <summary>
            Subtracts the specified area from the current instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
            This example demonstrates how two areas of different unit types can be safely
            subtracted. A value of 144 square inches (which is the same as one square foot) is
            subtracted from one square foot, producing a result of zero.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareFeet)
            Dim Area2 As New Area(144, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Subtract(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 0 square feet
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareFeet);
            Area Area2 = new Area(144, AreaUnit.SquareInches);
            Area Area3 = Area1.Subtract(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 0 square feet
              </code>
              </example>
            <remarks>This method will subtract any <strong>Area</strong> object from the current
            instance. If the unit type of the <strong>Value</strong> parameter does not match that
            of the current instance, the value is converted to the unit type of the current
            instance before subtracting.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Multiply(DotSpatial.Positioning.Area)">
            <summary>
            Multiplies the specified area with the current instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A new <strong>Area</strong> structure containing the product of the two
            values.</returns>
            <example>
            This example demonstrates how two areas can be multiplied together. A value of 50
            square inches is multiplied by two square inches, producing a result of 100 square
            inches.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(50, AreaUnit.SquareInches)
            Dim Area2 As New Area(2, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Multiply(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 100 square inches
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 = new Area(50, AreaUnit.SquareInches);
            Area Area2 = new Area(2, AreaUnit.SquareInches);
            Area Area3 = Area1.Multiply(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 100 square inches
              </code>
              </example>
            <remarks>This method will multiply any <strong>Area</strong> object from the current
            instance. If the unit type of the <strong>Value</strong> parameter does not match that
            of the current instance, the value is converted to the unit type of the current
            instance before multiplication.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Divide(DotSpatial.Positioning.Area)">
            <summary>
            Divides the current instance by the specified area.
            </summary>
            <param name="value">The value.</param>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
            This example demonstrates how two areas can be divided. A value of 100 square
            inches is divided by two square inches, producing a result of 50 square inches.
              <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(100, AreaUnit.SquareInches)
            Dim Area2 As New Area(2, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Divide(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 50 square inches
              </code>
              <code lang="CS" title="[New Example]">
            Area Area1 = new Area(100, AreaUnit.SquareInches);
            Area Area2 = new Area(2, AreaUnit.SquareInches);
            Area Area3 = Area1.Divide(Area2);
            Debug.WriteLine(Area3.ToString());
            // Output: 50 square inches
              </code>
              </example>
            <remarks>This method will devide the current instance by any <strong>Area</strong> object.
            If the unit type of the <strong>Value</strong> parameter does not match that of the
            current instance, the value is converted to the unit type of the current instance
            before devision.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
            This example uses the <strong>Increment</strong> method to increase an area's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Increment</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1 = Area1.Increment()
            ' Incorrect use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1.Increment()
            ' NOTE: Area1 will still be 1 square meter, not 2!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1 = Area1.Increment();
            // Incorrect use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1.Increment();
            // NOTE: Area1 will still be 1 square meter, not 2!
              </code>
              </example>
            <remarks><para>This method increases the <strong>Value</strong> property by 1.0, returned as
            a new instance. The <strong>Units</strong> property is preserved.</para>
              <para><font color="red"><font color="red">NOTE: Since the <strong>Area</strong>
            class is immutable, this method will not modify the current
            instance.</font></font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
            This example uses the <strong>Decrement</strong> method to decrease an area's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Decrement</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1 = Area1.Increment()
            ' Incorrect use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1.Increment()
            ' NOTE: Area1 will still be 1 square meter, not 0!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1 = Area1.Decrement();
            // Incorrect use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1.Decrement();
            // NOTE: Area1 will still be 1 square meter, not 0!
              </code>
              </example>
            <remarks><para>This method decreases the <strong>Value</strong> property by 1.0, returned as
            a new instance. The <strong>Units</strong> property is preserved.</para>
              <para><font color="red">NOTE: Since the <strong>Area</strong> class is immutable,
            this method will not modify the current instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.IsLessThan(DotSpatial.Positioning.Area)">
            <summary>
            Indicates if the current instance is smaller than the specified value.
            </summary>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the <strong>Value</strong> parameter.</returns>
            <remarks>If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.IsLessThanOrEqualTo(DotSpatial.Positioning.Area)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the <strong>Value</strong> parameter.</returns>
            <remarks>If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.IsGreaterThan(DotSpatial.Positioning.Area)">
            <summary>
            Indicates if the current instance is larger than the specified value.
            </summary>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            larger than the <strong>Value</strong> parameter.</returns>
            <remarks>If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Area)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            larger than or equal to the <strong>Value</strong> parameter.</returns>
            <remarks>If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Parse(System.String)">
             <summary>
             Creates a new instance using the specified string.
             </summary>
             <param name="value">The value.</param>
             <returns>A new Area object containing the parsed <see cref="P:DotSpatial.Positioning.Area.Value">value</see> and
             <see cref="P:DotSpatial.Positioning.Area.Units">unit</see> type.</returns>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
             2. The Area unit type was not recognized or not specified.</exception>
            
             <example>
             This example demonstrates how the Parse method can convert several string formats
             into a Area object.
               <code lang="VB">
             Dim NewArea As Area
             ' Create a Area of 50 kilometers
             NewArea = Area.Parse("50 km")
             ' Create a Area of 14, 387 miles, then convert it into square inches
             NewArea = Area.Parse("14, 387 statute miles").ToSquareInches()
             ' Parse an untrimmed measurement into 50 feet
             NewArea = Area.Parse("    50 '       ")
               </code>
               <code lang="CS">
             Area NewArea;
             // Create a Area of 50 kilometers
             NewArea = Area.Parse("50 km");
             // Create a Area of 14, 387 miles, then convert it into square inches
             NewArea = Area.Parse("14, 387 statute miles").ToInches();
             // Parse an untrimmed measurement into 50 feet
             NewArea = Area.Parse("    50 '       ");
               </code>
               </example>
             <remarks>This powerful method is typically used to convert a string-based Area
             measurement, such as one entered by a user or read from a file, into a
             <strong>Area</strong> object. This method will accept any output created via the
             <see cref="M:DotSpatial.Positioning.Area.ToString">ToString</see> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance using the specified string and culture.
            </summary>
            <param name="value">A <strong>String</strong> describing an area measurement.</param>
            <param name="culture">A <strong>CultureInfo</strong> object specifying which numeric and text formats to use during parsing.</param>
            <returns></returns>
            <example>
              <code lang="VB" title="[New Example]">
            Dim NewArea As Area
            ' Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km", CultureInfo.CurrentCulture)
            ' Create a Area of 14, 387 miles, then convert it into inches
            NewArea = Area.Parse("14, 387 statute miles", CultureInfo.CurrentCulture).ToSquareInches()
            ' Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ", CultureInfo.CurrentCulture)
              </code>
              <code lang="CS" title="[New Example]">
            Area NewArea;
            // Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km", CultureInfo.CurrentCulture);
            // Create a Area of 14, 387 miles, then convert it into square inches
            NewArea = Area.Parse("14, 387 statute miles", CultureInfo.CurrentCulture).ToInches();
            // Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ", CultureInfo.CurrentCulture);
              </code>
              </example>
            <remarks>This powerful method is typically used to convert a string-based Area
            measurement, such as one entered by a user or read from a file, into a
            <strong>Area</strong> object. This method will accept any output created via the
            <see cref="M:DotSpatial.Positioning.Area.ToString">ToString</see> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Random">
            <summary>
            Returns a random distance between 0 and 1, 000 square meters.
            </summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Random(System.Random)">
            <summary>
            Returns a random distance between 0 and 1, 000 square meters.
            </summary>
            <param name="generator">A <strong>Random</strong> object used to ogenerate random values.</param>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Equals(System.Object)">
            <summary>
            Compares the current instance with the specified object.
            </summary>
            <param name="obj">An <strong>Area</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the two objects have the
            same value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.GetHashCode">
            <summary>
            Returns a unique code for the current instance.
            </summary>
            <returns>An <strong>Integer</strong> representing a unique code for the current
            instance.</returns>
            <remarks>Since the <strong>Area</strong> class is immutable, this property may be used
            safely with hash tables.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> containing the current Area in the default format.</returns>
            <example>
            This example uses the ToString method to populate a TextBox with a Area
            measurement.
              <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString())
            ' Output: 75 sq. statute miles
              </code>
              <code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea = nre Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString());
            // Output: 75 sq. statute miles
              </code>
              </example>
            <remarks>The default format used is "<strong>v uu</strong>" where <strong>v</strong>
            represents the numerical portion of the area and <strong>uu</strong> is the unit
            type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Addition(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Subtraction(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Multiply(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Division(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_LessThan(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_LessThanOrEqual(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Equality(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Inequality(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_GreaterThanOrEqual(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_GreaterThan(DotSpatial.Positioning.Area,DotSpatial.Positioning.Area)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Explicit(System.String)~DotSpatial.Positioning.Area">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.Area"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.op_Explicit(DotSpatial.Positioning.Area)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Area"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.CompareTo(DotSpatial.Positioning.Area)">
            <summary>
            Compares the current instance to the specified area.
            </summary>
            <param name="other">An <strong>Area</strong> object to compare with.</param>
            <returns>An <strong>Integer</strong>: 0 if the object's values are equivalent, -1 if the
            current instance is smaller, or 1 if the current instance is larger.</returns>
            <remarks>If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Equals(DotSpatial.Positioning.Area)">
            <summary>
            Compares the current instance to the specified <strong>Area</strong>
            object.
            </summary>
            <param name="value">A <strong>Area</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks><para>This method will compare the <em>value</em> of the current instance against
            the <strong>Value</strong> parameter. If the <strong>Value</strong> parameter's
            unit type does not match the current instance, it will be converted to the current
            instance's unit type before performing the comparison.</para>
              <para><em>NOTE: This method compares objects by value, not by
            reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.Equals(DotSpatial.Positioning.Area,System.Int32)">
            <summary>
            Compares the current instance to the specified <strong>Area</strong>
            object.
            </summary>
            <param name="value">A <strong>Area</strong> object to compare with.</param>
            <param name="decimals">An <strong>integer</strong> specifies the precision for the comparison.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks><para>This method will compare the <em>value</em> of the current instance against
            the <strong>Value</strong> parameter. If the <strong>Value</strong> parameter's
            unit type does not match the current instance, it will be converted to the current
            instance's unit type before performing the comparison.</para>
              <para><em>NOTE: This method compares objects by value, not by
            reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and local culture.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <strong>String</strong> containing the Area in the specified format.</returns>
            <example>
            This example uses the ToString method to populate a TextBox with a Area measurement
            using a custom format and culture information.
              <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString("v.v uuu", CultureInfo.CurrentCulture))
            ' Output: 75.0 square statute miles
              </code>
              <code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea As New Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString("v.v uuu", CultureInfo.CurrentCulture));
            // Output: 75.0 square statute miles
              </code>
              </example>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Area.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Area.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Area.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Area.Units">
            <summary>
            Returns the units portion of an area measurement.
            </summary>
            <value>An <strong>AreaUnit</strong> value. Default is <strong>Meters</strong>.</value>
            <seealso cref="P:DotSpatial.Positioning.Area.Value">Value Property</seealso>
            <remarks>Each area measurement consists of a numeric value paired with a unit type
            describing the value. It is not possible to create an area measurement without also
            specifying a value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Area.Value">
            <summary>
            Returns the numeric portion of an area measurement.
            </summary>
            <value>A <strong>Double</strong> value.</value>
            <seealso cref="P:DotSpatial.Positioning.Area.Units">Units Property</seealso>
            <remarks>This property is paired with the <strong>Units</strong> property to form a
            complete area measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Area.IsEmpty">
            <summary>
            Indicates if the value of the current instance is zero.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the <strong>Value</strong>
            property is zero.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Area.IsMetric">
            <summary>
            Indicates if the current instance is using a Metric unit.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the <strong>Units</strong>
            property is <strong>SquareCentimeters</strong>, <strong>SquareMeters</strong> or
            <strong>SquareKilometers</strong>.</value>
            <remarks>This property is typically used to see if an area measurement is in a unit type
            used by a specific culture. Area measurements can be adjusted to either Metric or
            Imperial units using the <strong>ToMetricUnitType</strong> and
            <strong>ToImperialUnitType</strong> methods.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Area.IsInfinity">
            <summary>
            Indicates if the current instance represents an infinite value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the current instance
            represents an infinite value.</value>
        </member>
        <member name="T:DotSpatial.Positioning.AreaUnit">
             <summary>
             Indicates the unit of measure for area measurements.
             </summary>
             <seealso cref="P:DotSpatial.Positioning.Area.Value">Value Property (Area Class)</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Area.Units">Units Property (Area Class)</seealso>
            
             <example>
             This example uses the <strong>AreaUnit</strong> enumeration to create a new
               <strong>Area</strong> object.
               <code lang="VB" title="[New Example]">
             Dim Area1 As New Area(1, AreaUnit.SquareKilometers)
               </code>
               <code lang="CS" title="[New Example]">
             Area Area1 = new Area(1, AreaUnit.SquareKilometers);
               </code>
               </example>
             <remarks>This enumeration is most frequently used by the Units property of the Area
             structure to describe an area measurement.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareKilometers">
            <summary>Metric System. Kilometers (thousands of meters).</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareMeters">
            <summary>Metric System. 1/1000th of a square kilometer.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareCentimeters">
            <summary>Metric System. 1/100th of a square meter.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareStatuteMiles">
            <summary>Imperial System. A statute mile, most often referred to just as "mile."</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareNauticalMiles">
            <summary>Nautical miles, also known as "sea miles".</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareFeet">
            <summary>Imperial System. Feet.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.SquareInches">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.AreaUnit.Acres">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.Azimuth">
            <summary>
            Represents an angular measurement around the horizon between 0° and
            360°.
            </summary>
            <example>
            These examples create new instances of an Azimuth object using different
            techniques.
              <code lang="VB" description="Create a new instance of 45° (northeast).">
            Dim MyAzimuth As New Azimuth(45)
              </code>
              <code lang="CS" description="Create a new instance of 45° (northeast).">
            Azimuth MyAzimuth = new Azimuth(45);
              </code>
              <code lang="VB" description="Create a new instance of 45°30'15.">
            Dim MyAzimuth As New Azimuth(45, 30, 15)
              </code>
              <code lang="CS" description="Create a new instance of 45°30'15.">
            Azimuth MyAzimuth = new Azimuth(45, 30, 15);
              </code>
              <code lang="VB" description="Create a new instance equal to a known compass direction.">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNorthwest
              </code>
              <code lang="CS" description="Create a new instance equal to a known compass direction.">
            Azimuth MyAzimuth = Azimuth.NorthNorthwest;
              </code>
              </example>
            <remarks>This class is used to indicate a horizontal direction of travel, such as the
            bearing from one point on Earth to another. This class can also be combined with an
            Elevation object to form a three-dimensional direction towards an object in space,
            such as a GPS satellite.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.MAXIMUM_PRECISION_DIGITS">
            <summary>
            Controls the number of digits of precision supported by the class.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth._decimalDegrees">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.Double)">
             <summary>
             Creates a new instance with the specified decimal degrees.
             </summary>
             <param name="decimalDegrees">The decimal degrees.</param>
             <example>
             This example demonstrates how to create an angle with a measurement of 90°.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(90)
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(90);
               </code>
               </example>
            
             <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.Int32,System.Int32,System.Double)">
             <summary>
             Creates a new instance with the specified hours, minutes and
             seconds.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <example>
             This example demonstrates how to create an angular measurement of 34°12'29.2 in
             hours, minutes and seconds.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(34, 12, 29.2)
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(34, 12, 29.2);
               </code>
               </example>
            
             <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance with the specified hours and decimal minutes.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <example>
            This example demonstrates how an angle can be created when only the hours and
            minutes (in decimal form) are known. This creates a value of 12°42.345'.
              <code lang="VB">
            Dim MyAzimuth As New Azimuth(12, 42.345)
              </code>
              <code lang="VB">
            Azimuth MyAzimuth = new Azimuth(12, 42.345);
              </code>
              </example>
            <remarks>An <strong>Azimuth</strong> containing the specified value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.String)">
             <summary>
             Creates a new instance by converting the specified string.
             </summary>
             <param name="value">The value.</param>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example creates a new instance by parsing a string. (Notice The double-quote is
             doubled up to represent a single double-quote in the string.)
               <code lang="VB">
             Dim MyAzimuth As New Azimuth("123°45'67.8""")
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth("123°45'67.8\"");
               </code>
               </example>
            
             <example>
             This example creates a new <strong>Azimuth</strong> object by converting the string
             "NW," short for Northwest. or 315°.
               <code lang="VB" title="[New Example]">
             Dim NewAzimuth As New Azimuth("NW")
               </code>
               <code lang="CS" title="[New Example]">
             Azimuth NewAzimuth = new Azimuth("NW");
               </code>
               </example>
            
             <returns>An <strong>Azimuth</strong> containing the specified value.</returns>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This constructor parses the specified string into an <strong>Azimuth</strong>
             object using the current culture. This constructor can parse any strings created via
             the <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <example>
            This example creates a new <strong>Azimuth</strong> object by converting the string
            "NW," short for Northwest. or 315°.
              <code lang="VB" title="[New Example]">
            Dim NewAzimuth As New Azimuth("NW", CultureInfo.CurrentCulture)
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = new Azimuth("NW", CultureInfo.CurrentCulture);
              </code>
              </example>
            <remarks>This constructor parses the specified string into an <strong>Azimuth</strong>
            object using the specified culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Minimum">
             <summary>
             Represents the minimum value of an angle in one turn of a circle.
             </summary>
             <example>
             This example creates an angle representing the minimum allowed value.
               <code lang="VB">
             Dim MyAzimuth As Azimuth = Azimuth.Minimum
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = Azimuth.Minimum;
               </code>
               <code lang="C++">
             Azimuth MyAzimuth = Azimuth.Minimum;
               </code>
               </example>
            
             <value>An Azimuth with a value of -359.999999°.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Empty">
             <summary>
             Represents an angle with no value.
             </summary>
             <value>An Azimuth containing a value of zero (0°).</value>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Maximum">
            <summary>
            Represents the maximum value of an angle in one turn of a circle.
            </summary>
            <example>
            This example creates an angle representing the maximum allowed value of 359.9999°.
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Maximum
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.Maximum;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.North">
            <summary>
            Represents a direction of travel of 0°.
            </summary>
            <example>
            This example creates an Azimuth representing North.
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.North
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.North;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.NorthNortheast">
            <summary>
            Represents a direction of travel of 22.5°, between north and northeast.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNortheast
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.NorthNortheast;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Northeast">
            <summary>
            Represents a direction of travel of 45°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Northeast
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.Northeast;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.EastNortheast">
            <summary>
            Represents a direction of travel of 67.5°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.EastNortheast
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.EastNortheast;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.East">
            <summary>
            Represents a direction of travel of 90°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.East
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.East;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.EastSoutheast">
            <summary>
            Represents a direction of travel of 112.5°, between east and southeast.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.EastSoutheast
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.EastSoutheast;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Southeast">
            <summary>
            Represents a direction of travel of 135°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Southeast
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.Southeast;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.SouthSoutheast">
            <summary>
            Represents a direction of travel of 157.5°, between south and southeast.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.SouthSoutheast
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.SouthSoutheast;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.South">
            <summary>
            Represents a direction of travel of 180°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.South
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.South;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.SouthSouthwest">
            <summary>
            Represents a direction of travel of 202.5°, between south and southwest.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.SouthSouthwest
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.SouthSouthwest;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Southwest">
            <summary>
            Represents a direction of travel of 225°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Southwest
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.Southwest;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.WestSouthwest">
            <summary>
            Represents a direction of travel of 247.5°, between west and southwest.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.WestSouthwest
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.WestSouthwest;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.West">
            <summary>
            Represents a direction of travel of 270°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.West
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.West;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.WestNorthwest">
            <summary>
            Represents a direction of travel of 292.5°, between west and northwest.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.WestNorthwest
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.WestNorthwest;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Northwest">
            <summary>
            Represents a direction of travel of 315°.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Northwest
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.Northwest;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.NorthNorthwest">
            <summary>
            Represents a direction of travel of 337.5°, between north and northwest.
            </summary>
            <example>
              <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNorthwest
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = Azimuth.NorthNorthwest;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Azimuth.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Normalize">
             <summary>
             Modifies a value to its equivalent between 0° and 360°.
             </summary>
             <returns>An <strong>Azimuth</strong> representing the normalized angle.</returns>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.Normalize">Normalize(Azimuth) Method</seealso>
            
             <example>
             This example demonstrates how normalization is used. The Stop statement is hit.
             This example demonstrates how the Normalize method can ensure that an angle fits
             between 0° and 359.9999°. This example normalizes 725° into 5°.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(720)
             MyAzimuth = MyAzimuth.Normalize()
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(720);
             MyAzimuth = MyAzimuth.Normalize();
               </code>
               <code lang="VB">
             Dim MyValue As New Azimuth(725)
             MyValue = MyValue.Normalize()
               </code>
               <code lang="CS">
             Azimuth MyValue = new Azimuth(725);
             MyValue = MyValue.Normalize();
               </code>
               </example>
             <remarks>This function is used to ensure that an angular measurement is within the
             allowed bounds of 0° and 360°. If a value of 360° or 720° is passed, a value of 0°
             is returned since 360° and 720° represent the same point on a circle. For the Azimuth
             class, this function is the same as "value Mod 360".</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsBetween(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Returns whether the current value is between the specified values.
            </summary>
            <param name="start">An <strong>Azimuth</strong> marking the start of a range.</param>
            <param name="end">An <strong>Azimuth</strong> marking the end of a range.</param>
            <returns>A <strong>Boolean</strong> value.</returns>
            <remarks>This property is used to determine whether a value is within a specified range.  If the
            starting value is less than the end value, a basic greater-than or less-than comparison is performed.
            If, however, the end value is greater than the start, it is assumed that the range crosses the 0/360
            boundary.  For example, if the start is 270 and the end is 90, a value of <strong>True</strong> is
            returned if the current value is between 270 and 360, or 0 and 90.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Ceiling">
            <summary>
            Returns the smallest integer greater than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Floor">
            <summary>
            Returns the largest integer which is smaller than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.RoundSeconds">
            <summary>
            Returns a new instance whose Seconds property is evenly divisible by 15.
            </summary>
            <returns>An <strong>Azimuth</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <param name="interval">A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.</param>
            <returns>An <strong>Azimuth</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToString(System.String)">
             <summary>
             Outputs the azimuth as a string using the specified format.
             </summary>
             <param name="format"><para>A <strong>String</strong> consisting of any number of the following
             codes:</para>
               <para>
               <list type="table">
               <item>
               <term><strong>c</strong></term>
               <description>The object is output as an abbreviated direction.
               <strong>N</strong>, <strong>NE</strong>,
               <strong>NNW</strong></description>
               </item>
               <item>
               <term><strong>cc</strong></term>
               <description>The object is output as a full direction.
               <strong>North</strong>, <strong>Northeast</strong>,
               <strong>North-Northwest</strong></description>
               </item>
               <item>
               <term><strong>d</strong></term>
               <description>Represents one digit from the
               <strong>DecimalDegrees</strong> property.</description>
               </item>
               <item>
               <term><strong>h</strong></term>
               <description>Represents one digit from the
               <strong>Hours</strong> property.</description>
               </item>
               <item>
               <term><strong>m</strong></term>
               <description>Represents one digit from the <strong>Minutes</strong>
             property.</description>
               </item>
               <item>
               <term><strong>s</strong></term>
               <description>Represents one digit from the <strong>Seconds</strong>
             property.</description>
               </item>
               </list>
               </para></param>
             <returns>A <strong>String</strong> in the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.ToString">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Azimuth.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an azimuth in a
             custom format. The " <strong>d.dd</strong> " code represents decimal degrees
             rounded to two digits, and " <strong>cc</strong> " represents the direction in
             verbose form.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(90.946)
             Debug.WriteLine(MyAzimuth.ToString("d.dd (cc)"))
             ' Output: 90.95 (East)
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(90.946);
             Console.WriteLine(MyAzimuth.ToString("d.dd (cc)"));
             // Output: 90.95 (East)
               </code>
               </example>
             <remarks>This method returns the current instance output in a specific format. If no
             value for the format is specified, a default format of "cc" is used. Any string
             output by this method can be converted back into an Azimuth object using the
             <strong>Parse</strong> method or <strong>Azimuth(string)</strong>
             constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.LesserOf(DotSpatial.Positioning.Azimuth)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value">An <strong>Azimuth</strong> object to compare to the current instance.</param>
            <returns>The <strong>Azimuth</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.GreaterOf(DotSpatial.Positioning.Azimuth)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value">An <strong>Azimuth</strong> object to compare to the current instance.</param>
            <returns>An <strong>Azimuth</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Mirror">
            <summary>
            Returns an angle opposite of the current instance.
            </summary>
            <returns>An <strong>Azimuth</strong> representing the mirrored value.</returns>
            <example>
            This example creates a new <strong>Azimuth</strong> of 45° then calculates its mirror
            of 225°. (45 + 180)
              <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(45)
            Dim Azimuth2 As Azimuth = Azimuth1.Mirror()
            Debug.WriteLine(Azimuth2.ToString())
            ' Output: 225
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(45);
            Azimuth Azimuth2 = Azimuth1.Mirror();
            Console.WriteLine(Azimuth2.ToString());
            // Output: 225
              </code>
              </example>
            <remarks>This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToRadians">
             <summary>
             Converts the current instance into radians.
             </summary>
             <returns>A <see cref="T:DotSpatial.Positioning.Radian">Radian</see> object.</returns>
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <overloads>Converts an angular measurement into radians before further processing.</overloads>
            
             <example>
             This example converts a measurement of 90° into radians.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(90)
             Dim MyRadians As Radian = MyAzimuth.ToRadians()
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(90);
             Radian MyRadians = MyAzimuth.ToRadians();
               </code>
               </example>
             <remarks>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Equals(System.Object)">
            <summary>
            Compares the current value to another Azimuth object's value.
            </summary>
            <param name="obj">An <strong>Azimuth</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.</returns>
            <remarks>This</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.GetHashCode">
            <summary>
            Returns a unique code for this instance.
            </summary>
            <returns>An <strong>Integer</strong> representing a unique code for the current
            instance.</returns>
            <remarks>Since the <strong>Azimuth</strong> class is immutable, this property may be used
            safely with hash tables.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToString">
             <summary>
             Outputs the current instance as a string using the default format.
             </summary>
             <returns>A <strong>String</strong> representing the current instance.</returns>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example outputs a value of 90 degrees in the default format of ###.#°.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(90)
             Debug.WriteLine(MyAzimuth.ToString)
             ' Output: "90°"
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(90);
             Debug.WriteLine(MyAzimuth.ToString());
             // Output: "90°"
               </code>
               </example>
             <remarks>This method formats the current instance using the default format of "cc." Any
             string output by this method can be converted back into an Azimuth object using the
             <strong>Parse</strong> method or <strong>Azimuth(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Normalize(System.Double)">
            <summary>
            Converts the specified value to its equivalent between 0° and 360°.
            </summary>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
            <returns>An Azimuth containing a value equivalent to the value specified, but between 0° and
            360°.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.FromDirection(DotSpatial.Positioning.Direction)">
            <summary>
            Converts a <strong>Direction</strong> value into an <strong>Azimuth</strong>
            object.
            </summary>
            <param name="direction">A value from the <strong>Direction</strong> enumeration to convert.</param>
            <returns>An <strong>Azimuth</strong> equivalent to the specified direction.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Random">
            <summary>
            Returns a random angle between 0° and 360°.
            </summary>
            <returns>An <strong>Azimuth</strong> containing a random value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Random(System.Random)">
            <summary>
            Returns a random Azimuth between 0° and 360° using the specified random number
            seed.
            </summary>
            <param name="generator">A <strong>Random</strong> object used to generate random values.</param>
            <returns>An <strong>Azimuth</strong> containing a random value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
             <summary>
             Converts arbitrary hour, minute and seconds into decimal degrees.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <returns>A <strong>Double</strong> containing the decimal degree version of the specified
             values.</returns>
             <seealso cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Latitude.Normalize">Normalize Method</seealso>
            
             <example>
             This example converts a value of 10°30'0" into decimal degrees (10.5).
               <code lang="VB" title="ToDecimalDegrees Example (VB)">
             Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
               </code>
               <code lang="CS" title="ToDecimalDegrees Example (C#)">
             double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
               </code>
               </example>
             <remarks>This function is used to convert three-part measurements into a single value. The
             result of this method is typically assigned to the
             <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
             DecimalDegrees</see> property. Values are rounded to thirteen decimal
             places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToDecimalDegrees(System.Int32)">
            <summary>
            Converts an hour value into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to a double value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.LesserOf(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value1">A <strong>Azimuth</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Azimuth</strong> object to compare to value1.</param>
            <returns>The <strong>Azimuth</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.GreaterOf(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value1">A <strong>Azimuth</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Azimuth</strong> object to compare to value1.</param>
            <returns>A <strong>Azimuth</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Parse(System.String)">
             <summary>
             Converts the specified string into an Azimuth object.
             </summary>
             <param name="value">The value.</param>
             <returns>A new <strong>Azimuth</strong> object populated with the specified
             values.</returns>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.ToString">ToString Method</seealso>
            
             <example>
             This example creates a new angular measurement using the <strong>Parse</strong>
             method.
               <code lang="VB">
             Dim NewAzimuth As Azimuth = Azimuth.Parse("123.45°")
               </code>
               <code lang="CS">
             Azimuth NewAzimuth = Azimuth.Parse("123.45°");
               </code>
               </example>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This method parses the specified string into an <strong>Azimuth</strong> object
             using the current culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Azimuth</strong> object using the
            specified culture.
            </summary>
            <param name="value">A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.</param>
            <returns>A new <strong>Azimuth</strong> object equivalent to the specified string.</returns>
            <example>
            This example creates a new <strong>Azimuth</strong> object by converting the string
            "NW," short for Northwest. or 315°.
              <code lang="VB" title="[New Example]">
            Dim NewAzimuth As Azimuth = Azimuth.Parse("NW", CultureInfo.CurrentCulture)
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = Azimuth.Parse("NW", CultureInfo.CurrentCulture);
              </code>
              </example>
            <remarks>This method parses the specified string into an <strong>Azimuth</strong>
            object using the specified culture. This method can parse any string created via
            the <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToRadians(DotSpatial.Positioning.Azimuth)">
            <summary>
            Converts an angular measurement into radians.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:DotSpatial.Positioning.Radian"><strong>Radian</strong></see> object.</returns>
            <example>
            This example shows a quick way to convert an angle of 90° into radians.
              <code lang="VB">
            Dim MyRadian As Radian = Azimuth.ToRadians(90)
              </code>
              <code lang="CS">
            Radian MyRadian = Azimuth.ToRadians(90);
              </code>
              </example>
            <remarks>This function is typically used to convert an angular measurement into
            radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.FromRadians(DotSpatial.Positioning.Radian)">
             <summary>
             Converts a value in radians into an angular measurement.
             </summary>
             <param name="radians">The radians.</param>
             <returns></returns>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.ToRadians">ToRadians</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <example>
             This example uses the <strong>FromRadians</strong> method to convert a value of one
             radian into an <strong>Azimuth</strong> of 57°.
               <code lang="VB">
             ' Create a new angle equal to one radian
             Dim MyRadians As New Radian(1)
             Dim MyAzimuth As Azimuth = Azimuth.FromRadians(MyRadians)
             Debug.WriteLine(MyAzimuth.ToString())
             ' Output: 57°
               </code>
               <code lang="CS">
             // Create a new angle equal to one radian
             Radian MyRadians = new Radian(1);
             Azimuth MyAzimuth = Azimuth.FromRadians(MyRadians);
             Console.WriteLine(MyAzimuth.ToString());
             // Output: 57°
               </code>
               </example>
             <remarks>This function is typically used in conjunction with the
             <see cref="M:DotSpatial.Positioning.Azimuth.ToRadians">ToRadians</see>
             method after a trigonometric function has completed. The converted value is stored in
             the <see cref="P:DotSpatial.Positioning.Azimuth.DecimalDegrees">DecimalDegrees</see> property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.FromRadians(System.Double)">
            <summary>
            Froms the radians.
            </summary>
            <param name="radians">The radians.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Radian)~DotSpatial.Positioning.Azimuth">
            <summary>
            Converts a measurement in Radians into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(System.Double)~DotSpatial.Positioning.Azimuth">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(System.Single)~DotSpatial.Positioning.Azimuth">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Azimuth)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Azimuth)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Azimuth)~DotSpatial.Positioning.Direction">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Azimuth"/> to <see cref="T:DotSpatial.Positioning.Direction"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Direction)~DotSpatial.Positioning.Azimuth">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Direction"/> to <see cref="T:DotSpatial.Positioning.Azimuth"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(System.Int32)~DotSpatial.Positioning.Azimuth">
            <summary>
            Converts a measurement in degrees as an Integer into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Angle)~DotSpatial.Positioning.Azimuth">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Angle"/> to <see cref="T:DotSpatial.Positioning.Azimuth"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Elevation)~DotSpatial.Positioning.Azimuth">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Elevation"/> to <see cref="T:DotSpatial.Positioning.Azimuth"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Latitude)~DotSpatial.Positioning.Azimuth">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Latitude"/> to <see cref="T:DotSpatial.Positioning.Azimuth"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Longitude)~DotSpatial.Positioning.Azimuth">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Longitude"/> to <see cref="T:DotSpatial.Positioning.Azimuth"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(System.String)~DotSpatial.Positioning.Azimuth">
            <summary>
            Converts a measurement in the form of a formatted String into an Azimuth.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Explicit(DotSpatial.Positioning.Azimuth)~System.String">
            <summary>
            Converts an Azimuth into a String.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Addition(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Addition(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Subtraction(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Subtraction(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Multiply(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Multiply(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Division(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Division(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Equality(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Equality(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Inequality(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_Inequality(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_GreaterThan(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_GreaterThan(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_GreaterThanOrEqual(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_GreaterThanOrEqual(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_LessThan(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_LessThan(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_LessThanOrEqual(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.op_LessThanOrEqual(DotSpatial.Positioning.Azimuth,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns>An <strong>Azimuth</strong> object.</returns>
            <example>
            This example uses the <strong>Increment</strong> method to increase an Azimuth's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Increment</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Azimuth1 As New Azimuth(89)
            Azimuth1 = Azimuth1.Increment()
            ' Incorrect use of Increment
            Dim Azimuth1 = New Azimuth(89)
            Azimuth1.Increment()
            ' NOTE: Azimuth1 will still be 89°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Azimuth Azimuth1 = new Azimuth(89);
            Azimuth1 = Azimuth1.Increment();
            // Incorrect use of Increment
            Azimuth Azimuth1 = new Azimuth(89);
            Azimuth1.Increment();
            // NOTE: Azimuth1 will still be 89°!
              </code>
              </example>
            <remarks><para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Azimuth</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Add(System.Double)">
            <summary>
            Increases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
            <returns>A new <strong>Azimuth</strong> containing the summed values.</returns>
            <example>
            This example adds 45° to the current instance of 45°, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(45)
            Azimuth1 = Azimuth1.Add(45)
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(45);
            Azimuth1 = Azimuth1.Add(45);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Add(DotSpatial.Positioning.Azimuth)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns>An <strong>Azimuth</strong> object.</returns>
            <example>
            This example uses the <strong>Decrement</strong> method to decrease an Azimuth's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Decrement</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Azimuth1 As New Azimuth(91)
            Azimuth1 = Azimuth1.Decrement()
            ' Incorrect use of Decrement
            Dim Azimuth1 = New Azimuth(91)
            Azimuth1.Increment()
            ' NOTE: Azimuth1 will still be 91°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Azimuth Azimuth1 = new Azimuth(91);
            Azimuth1 = Azimuth1.Decrement();
            // Incorrect use of Decrement
            Azimuth Azimuth1 = new Azimuth(91);
            Azimuth1.Decrement();
            // NOTE: Azimuth1 will still be 91°!
              </code>
              </example>
            <remarks><para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Azimuth</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Subtract(System.Double)">
            <summary>
            Decreases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
            <returns>A new <strong>Azimuth</strong> containing the new value.</returns>
            <example>
            This example subtracts 30° from the current instance of 90°, returning 60°.
              <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(90)
            Azimuth1 = Azimuth1.Subtract(30)
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(90);
            Azimuth1 = Azimuth1.Subtract(30);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Subtract(DotSpatial.Positioning.Azimuth)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Multiply(System.Double)">
            <summary>
            Multiplies the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
            <returns>A new <strong>Azimuth</strong> containing the product of the two numbers.</returns>
            <example>
            This example multiplies 30° with three, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(30)
            Azimuth1 = Azimuth1.Multiply(3)
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(30);
            Azimuth1 = Azimuth1.Multiply(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Multiply(DotSpatial.Positioning.Azimuth)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Divide(System.Double)">
            <summary>
            Divides the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
            <returns>An <strong>Azimuth</strong> containing the new value.</returns>
            <example>
            This example divides 90° by three, returning 30°.
              <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(90)
            Azimuth1 = Azimuth1.Divide(3)
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(90);
            Azimuth1 = Azimuth1.Divide(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Divide(DotSpatial.Positioning.Azimuth)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsLessThan(DotSpatial.Positioning.Azimuth)">
            <summary>
            Indicates if the current instance is smaller than the specified value.
            </summary>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsLessThan(System.Double)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsLessThanOrEqualTo(DotSpatial.Positioning.Azimuth)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.</returns>
            <remarks>This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsLessThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsGreaterThan(DotSpatial.Positioning.Azimuth)">
            <summary>
            Indicates if the current instance is larger than the specified value.
            </summary>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsGreaterThan(System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Azimuth)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Azimuth</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>An <strong>Azimuth</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.CompareTo(DotSpatial.Positioning.Azimuth)">
            <summary>
            Returns a value indicating the relative order of two objects.
            </summary>
            <param name="other">An <strong>Azimuth</strong> object to compare with.</param>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>This method allows collections of <strong>Azimuth</strong> objects to be sorted.
            The <see cref="P:DotSpatial.Positioning.Azimuth.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Equals(DotSpatial.Positioning.Azimuth,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <param name="value">The value.</param>
            <param name="decimals">The decimals.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property of the current instance matches the
            specified instance's <strong>DecimalDegrees</strong> property.</returns>
            <example>
            These examples compare two fractional values using specific numbers of digits for
            comparison.
              <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Azimuth1 As New Azimuth(90.15);
            Dim Azimuth2 As New Azimuth(90.12);
            If Azimuth1.Equals(Azimuth2, 2) Then
            Debug.WriteLine("The values are the same to two digits of precision.");
            ' Equals will return True
            Dim Azimuth1 As New Azimuth(90.15);
            Dim Azimuth2 As New Azimuth(90.12);
            If Azimuth1.Equals(Azimuth2, 1) Then
            Debug.WriteLine("The values are the same to one digit of precision.");
              </code>
              <code lang="CS" title="[New Example]">
            // Equals will return False
            Azimuth Azimuth1 = new Azimuth(90.15);
            Azimuth Azimuth2 = new Azimuth(90.12);
            if (Azimuth1.Equals(Azimuth2, 2))
            Console.WriteLine("The values are the same to two digits of precision.");
            // Equals will return True
            Azimuth Azimuth1 = new Azimuth(90.15);
            Azimuth Azimuth2 = new Azimuth(90.12);
            if (Azimuth1.Equals(Azimuth2, 1))
            Console.WriteLine("The values are the same to one digits of precision.");
              </code>
              </example>
            <remarks><para>This is typically used in cases where precision is only significant for a few
            digits and exact comparison is not necessary.</para>
              <para><em>NOTE: This method compares objects by value, not by
            reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Equals(DotSpatial.Positioning.Azimuth)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.Equals(DotSpatial.Positioning.Direction)">
            <summary>
            Compares the current instance to the specified compass direction.
            </summary>
            <param name="value">A <strong>Direction</strong> value to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance's
            Direction property matches the specified value.</returns>
            <remarks>This method is typically used to approximate if two directions are equivalent.
            For example, if two objects are traveling at a bearing of 41° and 46°, they both could
            be considered to be traveling Northeast even though their bearings are not precisely
            the same.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ToString(System.String,System.IFormatProvider)">
             <summary>
             Outputs the azimuth as a string using the specified format.
             </summary>
             <param name="format"><para>A <strong>String</strong> consisting of any number of the following
             codes:</para>
               <para>
               <list type="table">
               <item>
               <term><strong>c</strong></term>
               <description>The object is output as an abbreviated direction.
               <strong>N</strong>, <strong>NE</strong>,
               <strong>NNW</strong></description>
               </item>
               <item>
               <term><strong>cc</strong></term>
               <description>The object is output as a full direction.
               <strong>North</strong>, <strong>Northeast</strong>,
               <strong>North-Northwest</strong></description>
               </item>
               <item>
               <term><strong>d</strong></term>
               <description>Represents one digit from the
               <strong>DecimalDegrees</strong> property.</description>
               </item>
               <item>
               <term><strong>h</strong></term>
               <description>Represents one digit from the
               <strong>Hours</strong> property.</description>
               </item>
               <item>
               <term><strong>m</strong></term>
               <description>Represents one digit from the <strong>Minutes</strong>
             property.</description>
               </item>
               <item>
               <term><strong>s</strong></term>
               <description>Represents one digit from the <strong>Seconds</strong>
             property.</description>
               </item>
               </list>
               </para></param>
             <param name="formatProvider">A <strong>CultureInfo</strong> object used to properly format numeric
             information.</param>
             <returns>A <strong>String</strong> in the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Azimuth.ToString">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Azimuth.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an azimuth in a
             custom format. The " <strong>d.dd</strong> " code represents decimal degrees
             rounded to two digits, and " <strong>cc</strong> " represents the direction in
             verbose form.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(90.946)
             Debug.WriteLine(MyAzimuth.ToString("d.dd (cc)", CultureInfo.CurrentCulture))
             ' Output: 90.95 (East)
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(90.946);
             Console.WriteLine(MyAzimuth.ToString("d.dd (cc)", CultureInfo.CurrentCulture));
             // Output: 90.95 (East)
               </code>
               </example>
             <remarks>This method returns the current instance output in a specific format. If no
             value for the format is specified, a default format of "cc" is used. Any string
             output by this method can be converted back into an Azimuth object using the
             <strong>Parse</strong> method or <strong>Azimuth(string)</strong>
             constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Azimuth.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.DecimalDegrees">
             <summary>
             Returns the value of the angle as decimal degrees.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Seconds">Seconds Property</seealso>
            
             <example>
             This example demonstrates how the
               <see cref="P:DotSpatial.Positioning.Azimuth.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
             calculated automatically when creating an angle using hours, minutes and seconds.
               <code lang="VB">
             ' Create an angle of 20°30'
             Dim MyAzimuth As New Azimuth(20, 30)
             ' Setting the DecimalMinutes recalculated other properties
             Debug.WriteLine(MyAzimuth.DecimalDegrees)
             ' Output: "20.5"  the same as 20°30'
               </code>
               <code lang="CS">
             // Create an angle of 20°30'
             Azimuth MyAzimuth = New Azimuth(20, 30);
             // Setting the DecimalMinutes recalculated other properties
             Console.WriteLine(MyAzimuth.DecimalDegrees)
             // Output: "20.5"  the same as 20°30'
               </code>
               </example>
             <remarks>This property returns the value of the angle as a single number.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.DecimalMinutes">
             <summary>
             Returns the minutes and seconds as a single numeric value.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <example>
             This example demonstrates how the <strong>DecimalMinutes</strong> property is
             automatically calculated when creating a new angle.
               <code lang="VB">
             ' Create an angle of 20°10'30"
             Dim MyAzimuth As New Azimuth(20, 10, 30)
             ' The DecimalMinutes property is automatically calculated
             Debug.WriteLine(MyAzimuth.DecimalMinutes)
             ' Output: "10.5"
               </code>
               <code lang="CS">
             // Create an angle of 20°10'30"
             Azimuth MyAzimuth = new Azimuth(20, 10, 30);
             // The DecimalMinutes property is automatically calculated
             Console.WriteLine(MyAzimuth.DecimalMinutes)
             // Output: "10.5"
               </code>
               </example>
             <remarks>This property is used when minutes and seconds are represented as a single
             decimal value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.Hours">
             <summary>
             Returns the integer hours (degrees) portion of an angular
             measurement.
             </summary>
             <value>An <strong>Integer</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 60.5° then outputs the value of the
               <strong>Hours</strong> property, 60.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(60.5)
             Debug.WriteLine(MyAzimuth.Hours)
             ' Output: 60
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(60.5);
             Console.WriteLine(MyAzimuth.Hours);
             // Output: 60
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Azimuth.Minutes">Minutes</see>
             and <see cref="P:DotSpatial.Positioning.Azimuth.Seconds">Seconds</see> properties to create a full angular measurement.
             This property is the same as <strong>DecimalDegrees</strong> without any fractional
             value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.Minutes">
             <summary>
             Returns the integer minutes portion of an angular measurement.
             </summary>
             <value>An <strong>Integer</strong>.</value>
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 45.5° then outputs the value of the
               <strong>Minutes</strong> property, 30.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(45.5)
             Debug.WriteLine(MyAzimuth.Minutes)
             ' Output: 30
               </code>
               <code lang="CS">
             Azimuth MyAzimuth = new Azimuth(45.5);
             Console.WriteLine(MyAzimuth.Minutes);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Azimuth.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Azimuth.Seconds">Seconds</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.Seconds">
             <summary>
             Returns the seconds minutes portion of an angular measurement.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Azimuth.Minutes">Minutes Property</seealso>
            
             <example>
             This example creates an angle of 45°10.5' then outputs the value of the
               <strong>Seconds</strong> property, 30.
               <code lang="VB">
             Dim MyAzimuth As New Azimuth(45, 10.5)
             Debug.WriteLine(MyAzimuth.Seconds)
             ' Output: 30
               </code>
               <code lang="CS">
             Dim MyAzimuth As New Azimuth(45, 10.5);
             Console.WriteLine(MyAzimuth.Seconds);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Azimuth.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Azimuth.Minutes">Minutes</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.Direction">
            <summary>
            Returns the current instance expressed as a compass direction.
            </summary>
            <value>A <strong>Direction</strong> value.</value>
            <example>
            This example outputs the direction associated 272°, which is <strong>West</strong>.
              <code lang="VB">
            Dim MyAzimuth As New Azimuth(272)
            Debug.WriteLine(MyAzimuth.Direction.ToString())
            ' Output: West
              </code>
              <code lang="CS">
            Azimuth MyAzimuth = new Azimuth(272);
            Console.WriteLine(MyAzimuth.Direction.ToString());
            // Output: West
              </code>
              </example>
            <remarks>This property converts an azimuth to the nearest of sixteen compass directions.
            For example, an azimuth of 89° points almost east, therefore a value of
            <strong>East</strong> would be returned. This property is typically used for user
            interfaces to express an azimuth in a form that is easy to understand.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.IsEmpty">
            <summary>
            Indicates if the current instance has a non-zero value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.</value>
            <seealso cref="F:DotSpatial.Positioning.Azimuth.Empty">Empty Field</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.IsInfinity">
            <summary>
            Indicates if the current instance represents an infinite value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Azimuth.IsNormalized">
            <summary>
            Indicates whether the value has been normalized and is within the
            allowed bounds of 0° and 360°.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Direction">
            <summary>
            Represents an approximate direction of motion.
            </summary>
            <example>
            This example outputs the direction associated 272Â°, which is <strong>West</strong>
            .
              <code lang="VB" title="[New Example]">
            Dim MyAzimuth As New Azimuth(272)
            Debug.WriteLine(MyAzimuth.Direction.ToString())
            ' Output: West
              </code>
              <code lang="CS" title="[New Example]">
            Azimuth MyAzimuth = new Azimuth(272);
            Console.WriteLine(MyAzimuth.Direction.ToString());
            // Output: West
              </code>
              </example>
            <remarks>This enumeration is used primarily by the <strong>Azimuth</strong> class when
            converting a numeric angle measurement into a compass direction.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.North">
            <summary>An azimuth of approximately 0°</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.NorthNortheast">
            <summary>Between north and northeast</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.Northeast">
            <summary>Between north and east</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.EastNortheast">
            <summary>Between east and northeast</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.East">
            <summary>An azimuth of approximately 90°</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.EastSoutheast">
            <summary>Between east and southeast</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.Southeast">
            <summary>Between south and east</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.SouthSoutheast">
            <summary>Between south and southeast</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.South">
            <summary>An azimuth of approximately 180°</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.SouthSouthwest">
            <summary>Between south and southwest</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.Southwest">
            <summary>Between south and west</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.WestSouthwest">
            <summary>Between west and southwest</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.West">
            <summary>An azimuth of approximately 270°</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.WestNorthwest">
            <summary>Between west and northwest</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.Northwest">
            <summary>Between north and west</summary>
        </member>
        <member name="F:DotSpatial.Positioning.Direction.NorthNorthwest">
            <summary>Between north and northwest</summary>
        </member>
        <member name="T:DotSpatial.Positioning.BinaryPacket">
            <summary>
            Represents a base class for designing GPS packets which store binary data.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Packet">
            <summary>
            Represents a base class for designing GPS data packets.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Packet.ToByteArray">
            <summary>
            Converts the packet into an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Packet.ToString">
            <summary>
            Returns a string representation of the packet
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Packet.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representing the packet
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Packet.IsValid">
            <summary>
            Returns whether the pack data is well-formed.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BinaryPacket._data">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.#ctor">
            <summary>
            Creates a BinaryPacket
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.#ctor(System.Int32)">
            <summary>
            BinaryPacket with the specified capacity
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a BinaryPacket from an IEnumerable
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.IndexOf(System.Byte)">
            <summary>
            Returns the index of the specified byte
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.Insert(System.Int32,System.Byte)">
             <summary>
             Inserts a byte at the specified index
             </summary>
             <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
             <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item to remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.Add(System.Byte)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.Contains(System.Byte)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.Remove(System.Byte)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BinaryPacket.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.BinaryPacket.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
             <returns>
             The element at the specified index.
               </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="P:DotSpatial.Positioning.BinaryPacket.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:DotSpatial.Positioning.BinaryPacket.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:DotSpatial.Positioning.BluetoothAddress">
            <summary>
            Represents an address used to identify a unique Bluetooth device.
            </summary>
            <remarks>Each Bluetooth device has a unique address, in the form of a six-byte address.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothAddress._bytes">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.#ctor(System.Byte[])">
            <summary>
            Creates a new instance from the specified byte array.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.#ctor(System.UInt64)">
            <summary>
            Creates a new instance using the specified unsigned 64-bit integer.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.#ctor(System.Int64)">
            <summary>
            Creates a new instance using the specified 64-bit integer.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.#ctor(System.String)">
            <summary>
            Creates a new instance using the specified string.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.ToInt64">
            <summary>
            Returns the address as a 64-bit integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.Parse(System.String)">
            <summary>
            Converts the specified string into an address.
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.op_Explicit(System.String)~DotSpatial.Positioning.BluetoothAddress">
            <summary>
            Bluetooth Address
            </summary>
            <param name="address">The address.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.op_Explicit(System.Int64)~DotSpatial.Positioning.BluetoothAddress">
            <summary>
            Bluetooth address
            </summary>
            <param name="address">The address.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.op_Explicit(System.UInt64)~DotSpatial.Positioning.BluetoothAddress">
            <summary>
            Bluetooth address
            </summary>
            <param name="address">The address.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.op_Explicit(DotSpatial.Positioning.BluetoothAddress)~System.String">
            <summary>
            Bluetooth address
            </summary>
            <param name="address">The address.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothAddress.Equals(DotSpatial.Positioning.BluetoothAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothAddress.Address">
            <summary>
            Returns the bytes of the address.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.BluetoothDevice">
            <summary>
            Represents a service on a Bluetooth(tm) device.
            </summary>
            <remarks>Bluetooth GPS devices often provide access to data using sockets.  In order to establish a connection
            to a Bluetooth GPS device,</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.NetworkDevice">
            <summary>
            Represents a GPS device which is accessed via a socket connection.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Device">
            <summary>
            Represents a device on the local machine.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device.DEFAULT_REGISTRY_VALUE_NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._allowConnections">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._isGpsDevice">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._isDetectionCompleted">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._isOpen">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._successfulDetectionCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._failedDetectionCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._dateDetected">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._dateConnected">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._connectionStarted">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._connectionTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._baseStream">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._detectionThread">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._detectionStartedWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._detectionCompleteWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._syncRoot">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._defaultReadTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Device._defaultWriteTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:DotSpatial.Positioning.Device"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnConnecting">
            <summary>
            Occurs when a connection is about to be attempted.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnConnected">
            <summary>
            Occurs when a connection has been successfully established.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnDisconnecting">
            <summary>
            Occurs when an open connection is about to be closed.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnDisconnected">
            <summary>
            Occurs when an open connection has been successfully closed.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.SetDateConnected(System.DateTime)">
            <summary>
            Updates the date a connection was last opened.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Device.SetDateDetected(System.DateTime)">
            <summary>
            Updates the date the device was last confirmed as a GPS device.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Device.SetTotalConnectionTime(System.TimeSpan)">
            <summary>
            Updates the total time spent connecting to this device.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Device.SetFailedDetectionCount(System.Int32)">
            <summary>
            Updates the number of times detection has failed.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Device.SetSuccessfulDetectionCount(System.Int32)">
            <summary>
            Updates the number of times detection has succeeded.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OpenStream(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates a new Stream object for the device.
            </summary>
            <param name="access">The access.</param>
            <param name="sharing">The sharing.</param>
            <returns>A <strong>Stream</strong> object.</returns>
            <remarks>Developers who design their own GPS device classes will need to override this method and use it to establish
            a new connection.  This method is called by the <strong>Open</strong> method.  The <strong>Stream</strong> returned by
            this method will be assigned to the <strong>BaseStream</strong> property, it it will be used for all device communications,
            including GPS protocol detection.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnCacheWrite">
            <summary>
            Records information about this device to the registry.
            </summary>
            <remarks>In order to organize and maximize performance of GPS device detection, information about devices
            is saved to the registry.  This method, when overridden, serializes the device to the registry.  All registry
            keys should be saved under the branch <strong>HKLM\Software\DotSpatial.Positioning\GPS.NET\3.0\Devices\[Type]\[ID]</strong>, where
            <strong>[Type]</strong> is the name of the technology used by the device (e.g. Serial, Bluetooth, etc.), and <strong>[ID]</strong>
            is a unique ID for the device (e.g. "COM3", an address, etc.).  Enough information should be written to be able to
            establish a connection to the device after reading registry values.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnCacheRead">
            <summary>
            Reads information about this device from the registry.
            </summary>
            <remarks>In order to organize and maximize performance of GPS device detection, information about devices
            is saved to the registry.  This method, when overridden, reads information for this device from the registry.  All registry
            values should have been previously saved via the <strong>OnCacheWrite</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.OnCacheRemove">
            <summary>
            Removes previously cached information for this device from the registry.
            </summary>
            <remarks>In some cases, the information about previously detected devices may interfere with system changes such as adding
            a replacement GPS device.  This method will remove the entire registry key for a device, causing GPS.NET 3.0 to start over when
            GPS devices need to be detected.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.DetectProtocol">
            <summary>
            Performs a test on the device to confirm that it transmits GPS data.
            </summary>
            <returns>A <strong>Boolean</strong> value, <strong>True</strong> if the device is confirmed.</returns>
            <remarks><para>This method will open a connection if necessary via the <strong>Open</strong> method, then proceed to
            examine it for GPS data.  This method will always be called on a separate thread to keep detection from slowing
            down or blocking the main application.</para>
              <para>Developers who override this method should ensure that the method can clean up any resources used, even if a
            ThreadAbortException is raised, as a result of the detection thread being aborted.  This can be done by wrapping all code in a
              <strong>try..catch</strong> block, and placing all clean-up code in a <strong>finally</strong> block.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Open">
            <summary>
            Opens a new connection to the device.
            </summary>
            <remarks>This method will create a new connection to the device.  The connection will be created in the form of a
            <strong>Stream</strong> object.  If a connection is already open, this method has no effect.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Open(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a new connection to the device.
            </summary>
            <param name="access">The access.</param>
            <param name="sharing">The sharing.</param>
            <remarks>This method will create a new connection to the device.  The connection will be created in the form of a
            <strong>Stream</strong> object.  If a connection is already open, this method has no effect.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Reset">
            <summary>
            Forces a device to a closed state without disposing the underlying stream.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Undetect">
            <summary>
            Cancels detection and removes any cached information about the device.
            Use the <see cref="M:DotSpatial.Positioning.Device.BeginDetection"/> method to re-detect the device and re-add it to the device cache.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Test">
            <summary>
            Performs an analysis of the device and its capabilities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Device.BeginDetection">
            <summary>
            Starts a new thread which checks the device for GPS data in the background.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Close">
            <summary>
            Closes any open connection to the device.
            </summary>
            <remarks>This method will close any open connection to the device.  Any associated <strong>Stream</strong> object
            will be disposed.  If no open connection exists, this method has no effect.  This method is called automatically
            when the device is disposed, either manually or automatically via the finalizer.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.WaitForDetection">
            <summary>
            Waits for the device to be checked for GPS data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Device.WaitForDetection(System.TimeSpan)">
            <summary>
            Waits for the device to be checked for GPS data, up to the specified timeout period.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Device.CancelDetection">
            <summary>
            Stops any GPS protocol detection in progress.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.DetectionThreadProc">
            <summary>
            Detections the thread proc.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Device.SetIsGpsDevice(System.Boolean)">
            <summary>
            Sets the is GPS device.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:DotSpatial.Positioning.Device.PrecisionEstimate(DotSpatial.Positioning.FixQuality)">
            <summary>
            Esitmates device prcision based on the fix quality.
            </summary>
            <param name="quality">The current fix quality of a device or emulation</param>
            <returns>The estimated error of latitude/longitude coordinates attributed to the device.</returns>
            <remarks>If a the fix quality is unknown or NoFix, this method returns the value stored
            in the DillutionOfPrecision.CurrentAverageDevicePrecision property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.BestDeviceComparer(DotSpatial.Positioning.Device,DotSpatial.Positioning.Device)">
            <summary>
            Compares two devices for the purpose of finding the device most likely to provide a successful connection.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>An <strong>Integer</strong> value.</returns>
            <remarks>This method is used during <strong>Sort</strong> methods to choose the device most likely to respond.
            The date the device last successfully opened a connection is examined, along with historical connection statistics.
            The "best" device is the device which has most recently opened a connection successfully, with the fewest amount of
            connection failures.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Dispose">
            <summary>
            Disposes of any managed or unmanaged resources used by the device.
            </summary>
            <remarks>Since the <strong>Device</strong> class implements the <strong>IDisposable</strong> interface, all managed or
            unmanaged resources used by the class will be disposed.  Any open connection will be closed.  The <strong>Dispose</strong>
            method is also called (if necessary) during the finalizer for this class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.Dispose(System.Boolean)">
            <summary>
            Disposes of any unmanaged (or optionally, managed) resources used by the device.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
            <remarks>This method is called when the object is no longer needed.  Typically, this happens during the shutdown of the parent
            application.  If device detection is in progress, it will be immediately cancelled.  If any connection is open, it will immediately
            be closed and disposed.  This method is called via the finalizer if necessary, thus removing the need for explicit calls.  Developers
            who prefer to call this method explicitly, however, may do so.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Device.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Device.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Device.CompareTo(DotSpatial.Positioning.Device)">
            <summary>
            Compares two devices for the purpose of finding the device most likely to provide a successful connection.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>An <strong>Integer</strong> value.</returns>
            <remarks>This method is used during <strong>Sort</strong> methods to choose the device most likely to respond.
            The date the device last successfully opened a connection is examined, along with historical connection statistics.
            The "best" device is the device which has most recently opened a connection successfully, with the fewest amount of
            connection failures.</remarks>
        </member>
        <member name="E:DotSpatial.Positioning.Device.Connecting">
            <summary>
            Occurs when a connection is about to be opened.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Device.Connected">
            <summary>
            Occurs when a new connection has opened successfully.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Device.Disconnecting">
            <summary>
            Occurs when an open connection is about to be closed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Device.Disconnected">
            <summary>
            Occurs when an open connection has been closed.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.Name">
            <summary>
            Returns a natural language name for the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.DetectionWaitHandle">
            <summary>
            Returns a reset event used to determine when GPS detection has completed.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.IsOpen">
            <summary>
            Returns whether a connection is established with the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.BaseStream">
            <summary>
            Returns the stream associated with this device.
            </summary>
            <remarks>This property is provided solely for more advanced developers who need to interact directly with a device.
            During normal operations, the stream returned by this property is managed by this class.  As a result, it is not necessary
            to dispose of this stream.  If no connection is open, this property will return <strong>null</strong>.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Device.DateDetected">
            <summary>
            Returns the date and time the device was last confirmed as a GPS device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.DateConnected">
            <summary>
            Returns the date and time the device last opened a connection.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.IsDetectionInProgress">
            <summary>
            Returns whether the device is currently being examined for GPS data.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.AllowConnections">
            <summary>
            Controls whether the device can be queried for GPS data.
            </summary>
            <value><c>true</c> if [allow connections]; otherwise, <c>false</c>.</value>
            <remarks>In some cases, an attempt to open a connection to a device can cause problems.  For example,
            a serial port may be assigned to a barcode reader, or a Bluetooth device may represent a downstairs neighbor's
            computer.  This property allows a device to be left alone; no connection will be attempted to the device
            for any reason.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Device.IsDetectionCompleted">
            <summary>
            Returns whether GPS protocol detection has been completed.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.IsGpsDevice">
            <summary>
            Returns whether the device has been confirmed as a GPS device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.SuccessfulDetectionCount">
            <summary>
            Controls the number of times this device has been confirmed as a GPS device.
            </summary>
            <remarks>In order to maximize the performance of detecting GPS devices, statistics are maintained for each device.  This
            property indicates how many times the device has been confirmed as a GPS device.  It will be incremented automatcially if
            a call to <strong>DetectProtocol</strong> has been successful.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Device.FailedDetectionCount">
            <summary>
            Controls the number of times this device has failed to identify itself as a GPS device.
            </summary>
            <remarks>In order to prioritize and maximize performance of GPS device detection, statistics are kept for each device.
            These statistics control how detection is performed in the future.  For example, a device with a success rate of 100 and a failure
            rate of 1 would be tested before a device with a success rate of zero.  This property is updated automatically based on the
            results of a call to <strong>DetectProtocol</strong>.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Device.Reliability">
            <summary>
            Returns the chance that a connection to the device will be successful.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.AverageConnectionTime">
            <summary>
            Returns the average amount of time required to open a connection.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.TotalConnectionTime">
            <summary>
            Returns the total amount of time spent so far opening a connection.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Device.DefaultReadTimeout">
            <summary>
            Controls the amount of time to wait before aborting a read operation.
            </summary>
            <value>The default read timeout.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Device.DefaultWriteTimeout">
            <summary>
            Controls the amount of time to wait before aborting a write operation.
            </summary>
            <value>The default write timeout.</value>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice.ROOT_KEY_NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice._addressFamily">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice._socketType">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice._protocolType">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice._endPoint">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice._socket">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NetworkDevice._defaultConnectTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates a NetworkDevice from the specified parameters
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.EndPoint)">
            <summary>
            Creates a NetworkDevice from the specified parameters
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.Open(System.Net.EndPoint)">
            <summary>
            Creates a new connection to the specified endpoint.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.OnConfigureSocket">
            <summary>
            Occurs immediately before a socket is opened.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.OpenStream(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates a new Stream object for the device.
            </summary>
            <param name="access">The access.</param>
            <param name="sharing">The sharing.</param>
            <returns>A <strong>Stream</strong> object.</returns>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.Dispose(System.Boolean)">
            <summary>
            Disposes of any unmanaged (or optionally, managed) resources used by the device.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.OnCacheRemove">
            <summary>
            Removes previously cached information for this device from the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.OnCacheWrite">
            <summary>
            Records information about this device to the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NetworkDevice.OnCacheRead">
            <summary>
            Reads information about this device from the registry.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.AddressFamily">
            <summary>
            Returns the addressing scheme the socket can use.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.SocketType">
            <summary>
            Returns the type of protocol used by the socket.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.ProtocolType">
            <summary>
            Returns the protocol supported by the socket.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.EndPoint">
            <summary>
            Returns the network address for the device.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.Socket">
            <summary>
            Returns the socket associated with this device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.DefaultConnectTimeout">
            <summary>
            Controls the amount of time allowed for a connection to be successfully opened.
            </summary>
            <value>The default connect timeout.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NetworkDevice.Name">
            <summary>
            Returns a natural language name for the device.
            </summary>
            <inheritdocs/>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice.MY_ROOT_KEY_NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice.BLUETOOTH_FAMILY">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice.RF_COMM">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._address">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._virtualSerialPort">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._class">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._minorClass">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._serviceClass">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice.DeviceDiscoveryThread">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._discoveryStartedWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._isDeviceDiscoveryInProgress">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._isDeviceDiscoveryCacheFlushed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._discoveryTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._maximumAllowedFailures">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothDevice._rfCommServiceGuid">
            <summary>
            Returns a GUID which represents the RFComm service.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.#ctor(DotSpatial.Positioning.BluetoothAddress)">
            <summary>
            Creates a new instance using the specified address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.#ctor(DotSpatial.Positioning.BluetoothAddress,System.String)">
            <summary>
            Creates a new instance using the specified address and name.
            </summary>
            <param name="address">The address.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.#ctor(DotSpatial.Positioning.BluetoothEndPoint,System.String)">
            <summary>
            Creates a new instance using the specified endpoint and friendly name.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.DetectProtocol">
            <summary>
            Performs a test on the device to confirm that it transmits GPS data.
            </summary>
            <returns>A <strong>Boolean</strong> value, <strong>True</strong> if the device is confirmed.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.OnCacheRemove">
            <summary>
            Called when [cache remove].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.OnCacheWrite">
            <summary>
            Called when [cache write].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.OnCacheRead">
            <summary>
            Called when [cache read].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.DiscoverDevices">
            <summary>
            Searches the room for Bluetooth devices.
            </summary>
            <remarks>This method will perform discovery of nearby Bluetooth devices.  Discovery will take place on a separate thread,
            and the <strong>DeviceDiscovered</strong> event will be raised for each device service discovered.  If a device publishes multiple
            services, multiple events will be raised for each service.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.DiscoverDevices(System.Boolean)">
            <summary>
            Searches the room for Bluetooth devices.
            </summary>
            <param name="isCacheFlushed">A <strong>Boolean</strong> indicating whether the cache of Bluetooth information should be cleared.</param>
            <remarks><para>This method will perform discovery of nearby Bluetooth devices.  Discovery will take place on a separate thread,
            and the <strong>DeviceDiscovered</strong> event will be raised for each device service discovered.  If a device publishes multiple
            services, multiple events will be raised for each service.</para>
              <para>If the <strong>IsCacheFlushed</strong> parameter is <strong>True</strong>, any cached information will be cleared, and a
            wireless scan of devices will be performed.  This kind of scan is preferable since it can detect which devices are actually responding
            right now, even though the query will take several seconds to occur.  A value of <strong>False</strong> is typically used if a
            device scan was recently performed and responsiveness is necessary.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.WaitForDiscovery">
            <summary>
            Wait for discovery
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.WaitForDiscovery(System.TimeSpan)">
            <summary>
            Waits for discovery, specifying a timeout
            </summary>
            <param name="timeout">The TimeSpan specifying the timeout where waiting ends.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.DiscoverDevicesThreadProc">
            <summary>
            Discovers the devices thread proc.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.LoadCachedDevices(System.Collections.Generic.IList{DotSpatial.Positioning.BluetoothDevice})">
            <summary>
            Loads the Bluetooth devices that have been cached by GPS.Net. This list contains previously-detected GPS devices,
            along with devices which were tested but found to NOT be GPS devices. By keeping these statistics,
            the detection system can become faster over time by first testing devices which have a better success rate.
            </summary>
            <param name="devices">The list to which the cached devices are added.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.LoadWindowsDevices(System.Collections.Generic.IList{DotSpatial.Positioning.BluetoothDevice})">
            <summary>
            Loads the Bluetooth devices that have already been discovered by Windows. This list includes non-GPS devices.
            </summary>
            <param name="devices">The list to which the devices are added.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothDevice.Equals(DotSpatial.Positioning.BluetoothDevice)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="E:DotSpatial.Positioning.BluetoothDevice.DeviceDiscovered">
            <summary>
            Occurs when a new Bluetooth device has been detected.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.Address">
            <summary>
            Returns the address of the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.Class">
            <summary>
            Returns the primary purpose of the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.MinorClass">
            <summary>
            Returns a sub-category describing the purpose of the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.ServiceClass">
            <summary>
            Returns the major type of device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.VirtualSerialPort">
            <summary>
            Returns a serial device which has been linked to this device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.Name">
            <summary>
            Returns the name of the Bluetooth device.
            </summary>
            <inheritdocs/>
            <remarks>If the device has been identified, the actual name of the device will be returned.  Otherwise, the
            device's address will be returned.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.AllowConnections">
            <summary>
            Controls whether the device can be queried for GPS data.
            </summary>
            <value><c>true</c> if [allow connections]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.MaximumAllowedFailures">
            <summary>
            Controls the maximum allowed detection failures before a device is excluded from detection.
            </summary>
            <value>The maximum allowed failures.</value>
            <remarks>Some devices involved with device detection are not GPS devices.  For example, a Bluetooth search
            could return wireless headphones, or the neighbor's computer.  This property controls how many times a device will be
            tested before it is no longer included for searches.  If a device's failure count goes beyond this number, attempts
            will no longer be made to connect to the device.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.Cache">
            <summary>
            Returns a list of known Bluetooth devices.
            </summary>
            <remarks><para>To maximize performance, GPS.NET will record information about each device it encounters for the purposes of organizing
            and speeding up the GPS device detection process.  This property returns a list of all known Bluetooth devices.</para>
              <para>Since this list is managed automatically, it should not be modified.</para></remarks>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothDevice.DiscoveryTimeout">
            <summary>
            Controls the amount of time spent searching for Bluetooth devices.
            </summary>
            <value>The discovery timeout.</value>
        </member>
        <member name="T:DotSpatial.Positioning.DeviceClass">
            <summary>
            Indicates the classification of a Bluetooth device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.Miscellaneous">
            <summary>
            Misc
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.Computer">
            <summary>
            Computer
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.LAN">
            <summary>
            Lan
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.AudioVideo">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.Peripheral">
            <summary>
            Peripheral
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.Imaging">
            <summary>
            Imaging
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceClass.Unclassified">
            <summary>
            Unclassified
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.ServiceClass">
            <summary>
            Indicates the kind of service provided by a Bluetooth device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.LimitedDiscoverableMode">
            <summary>
            Limited Disoverable mode
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Positioning">
            <summary>
            Positioning
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Networking">
            <summary>
            Networking
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Rendering">
            <summary>
            Rendering
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Capturing">
            <summary>
            Capturing
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.ObjectTransfer">
            <summary>
            Object Transfer
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Telephony">
            <summary>
            Telephony
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ServiceClass.All">
            <summary>
            all
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.BluetoothEndPoint">
            <summary>
            Represents a Bluetooth service on a device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint.BLUETOOTH_FAMILY">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint.PACKET_SIZE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint.ADDRESS_OFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint.SERVICE_GUID_OFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint.PORT_OFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint.DEFAULT_PORT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._socketAddress">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._address">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._service">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._port">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._successfulDetectionCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothEndPoint._failedDetectionCount">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.#ctor(DotSpatial.Positioning.BluetoothAddress)">
            <summary>
            Creates a new instance using the specified address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.#ctor(DotSpatial.Positioning.BluetoothAddress,System.Guid)">
            <summary>
            Creates a new instance using the specified address and service GUID.
            </summary>
            <param name="address">The address.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.#ctor(DotSpatial.Positioning.BluetoothAddress,System.Guid,System.Int32)">
            <summary>
            Creates a new instance using the specified address, service GUID, and remote port number.
            </summary>
            <param name="address">The address.</param>
            <param name="service">The service.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.#ctor(System.Net.SocketAddress)">
            <summary>
            Creates a new instance from the specified socket address.
            </summary>
            <param name="socketAddress">The socket address.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.SetName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.Create(System.Net.SocketAddress)">
             <summary>
             Creates an <see cref="T:System.Net.EndPoint"/> instance from a <see cref="T:System.Net.SocketAddress"/> instance.
             </summary>
             <param name="socketAddress">The socket address that serves as the endpoint for a connection.</param>
             <returns>A new <see cref="T:System.Net.EndPoint"/> instance that is initialized from the specified <see cref="T:System.Net.SocketAddress"/> instance.</returns>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
            
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
               </PermissionSet>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.Serialize">
             <summary>
             Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
             </summary>
             <returns>A <see cref="T:System.Net.SocketAddress"/> instance that contains the endpoint information.</returns>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
            
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
               </PermissionSet>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.Equals(DotSpatial.Positioning.BluetoothEndPoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothEndPoint.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.Service">
            <summary>
            Returns a GUID indentifying the service.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.Port">
            <summary>
            Returns the port used for opening connections.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.Name">
            <summary>
            Returns a friendly name for the endpoint.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.Address">
            <summary>
            Returns the unique address of the device, used for connections.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.SuccessfulDetectionCount">
            <summary>
            Controls the number of times this endpoint has been identified as a GPS service.
            </summary>
            <value>The successful detection count.</value>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.FailedDetectionCount">
            <summary>
            Controls the number of times this endpoint has failed to identify itself as a GPS service.
            </summary>
            <value>The failed detection count.</value>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothEndPoint.AddressFamily">
             <summary>
             Gets the address family to which the endpoint belongs.
             </summary>
             <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</returns>
            
             <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property when the property is not overridden in a descendant class. </exception>
            
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
               </PermissionSet>
        </member>
        <member name="T:DotSpatial.Positioning.BluetoothRadio">
            <summary>
            Represents a Bluetooth radio.
            </summary>
            <remarks>Most computers have a single Bluetooth radio attached to them.  The radio is responsible for wireless communications
            with all Bluetooth devices.  This class provides the ability to enable or disable the radio, as well as to access devices which
            the radio can detect.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothRadio._handle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothRadio._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothRadio._class">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothRadio._minorClass">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothRadio._serviceClass">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.BluetoothRadio._current">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.BluetoothRadio"/> class.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.GetIsConnectable">
            <summary>
            Controls whether the radio can accept incoming connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.SetIsConnectable(System.Boolean)">
            <summary>
            Controls whether the radio can accept incoming connections.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.BluetoothRadio.Equals(DotSpatial.Positioning.BluetoothRadio)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothRadio.Current">
            <summary>
            Returns the current Bluetooth radio if one is installed.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothRadio.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothRadio.Name">
            <summary>
            Returns the name of the radio.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothRadio.Class">
            <summary>
            Returns the primary purpose of the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothRadio.MinorClass">
            <summary>
            Returns a sub-category describing the purpose of the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.BluetoothRadio.ServiceClass">
            <summary>
            Returns the major type of device.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.CartesianPoint">
            <summary>
            Represents an Earth-centered, Earth-fixed (ECEF) Cartesian coordinate.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.CartesianPoint._x">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.CartesianPoint._y">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.CartesianPoint._z">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.#ctor(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Creates a new instance using the specified X, Y and Z values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the specified block of GML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="F:DotSpatial.Positioning.CartesianPoint.Empty">
            <summary>
            Returns a cartesian coordinate with empty values.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.CartesianPoint.Infinity">
            <summary>
            Returns a cartesian point with infinite values.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.CartesianPoint.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.ToPosition3D">
            <summary>
            Converts the current instance to a geodetic (latitude/longitude) coordinate.
            </summary>
            <returns>A <strong>Position</strong> object containing the converted result.</returns>
            <remarks>The conversion formula will convert the Cartesian coordinate to
            latitude and longitude using the WGS1984 ellipsoid (the default ellipsoid for
            GPS coordinates).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.ToPosition3D(DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Converts the current instance to a geodetic (latitude/longitude) coordinate using the specified ellipsoid.
            </summary>
            <param name="ellipsoid">The ellipsoid.</param>
            <returns>A <strong>Position</strong> object containing the converted result.</returns>
            <remarks>The conversion formula will convert the Cartesian coordinate to
            latitude and longitude using the WGS1984 ellipsoid (the default ellipsoid for
            GPS coordinates).  The resulting three-dimensional coordinate is accurate to within two millimeters
            (2 mm).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.DistanceTo(DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Returns the distance from the current instance to the specified cartesian point.
            </summary>
            <param name="point">A <strong>CartesianPoint</strong> object representing the end of a segment.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.Equals(DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.op_Addition(DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.op_Subtraction(DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.op_Multiply(DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.op_Division(DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.op_Explicit(DotSpatial.Positioning.Position)~DotSpatial.Positioning.CartesianPoint">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Position"/> to <see cref="T:DotSpatial.Positioning.CartesianPoint"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.CartesianPoint.op_Explicit(DotSpatial.Positioning.Position3D)~DotSpatial.Positioning.CartesianPoint">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Position3D"/> to <see cref="T:DotSpatial.Positioning.CartesianPoint"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.CartesianPoint.X">
            <summary>
            Returns the horizontal (longitude) portion of a Cartesian coordinate.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.CartesianPoint.Y">
            <summary>
            Returns the vertical (latitude) portion of a Cartesian coordinate.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.CartesianPoint.Z">
            <summary>
            Returns the altitude portion of a Cartesian coordinate.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.CartesianPoint.IsEmpty">
            <summary>
            Indicates whether the current instance has no value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.CartesianPoint.IsInvalid">
            <summary>
            Indicates whether the current instance is invalid or unspecified.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DeviceEventArgs">
            <summary>
            Represents information about a GPS device when a device-related event is raised.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceEventArgs._device">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceEventArgs.Empty">
            <summary>
            A default instance
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceEventArgs.#ctor(DotSpatial.Positioning.Device)">
            <summary>
            Creates a new instance of the event args
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceEventArgs.Device">
            <summary>
            The device
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DeviceAnalysis">
            <summary>
            Represents an examination of a GPS device for its capabilities and health.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._device">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isWorkingProperly">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._log">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._supportedSentences">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isPositionSupported">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isAltitudeSupported">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isBearingSupported">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isPrecisionSupported">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isSpeedSupported">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceAnalysis._isSatellitesSupported">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceAnalysis.#ctor(DotSpatial.Positioning.Device,System.Boolean,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.DeviceAnalysis"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="isWorkingProperly">if set to <c>true</c> [is working properly].</param>
            <param name="log">The log.</param>
            <param name="supportedSentences">The supported sentences.</param>
            <param name="isPositionSupported">if set to <c>true</c> [is position supported].</param>
            <param name="isAltitudeSupported">if set to <c>true</c> [is altitude supported].</param>
            <param name="isBearingSupported">if set to <c>true</c> [is bearing supported].</param>
            <param name="isPrecisionSupported">if set to <c>true</c> [is precision supported].</param>
            <param name="isSpeedSupported">if set to <c>true</c> [is speed supported].</param>
            <param name="isSatellitesSupported">if set to <c>true</c> [is satellites supported].</param>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceAnalysis.SendAnonymousLog">
            <summary>
            Sends this analysis anonymously to DotSpatial.Positioning for further study.
            </summary>
            <returns>A <strong>Boolean</strong> value, <strong>True</strong> if the HTTP response indicates success.</returns>
            <remarks><para>DotSpatial.Positioning collects device detection information for the purposes of improving
            software, widening support for devices, and providing faster technical support.  This method
            will cause an HTTP POST to be sent to the DotSpatial.Positioning web server with the values in this class.
            The information is collected anonymously.</para>
              <para>One benefit of sending an analysis is that it can instantly update statistics for supported
            GPS devices.  The anonymous results will be compiled into an RSS feed which developers can use to
            instantly be notified of both healthy and problematic devices.</para>
              <para>The DotSpatial.Positioning server can handle repeated calls to this method, though requests should not
            be sent more than every few seconds.  Duplicate reports are automatically ignored by our system.  So
            long as customers are aware of the implications of an HTTP request (such as possible cell phone charges),
            you are welcome to use this functionality in your application.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceAnalysis.SendAnonymousLog(System.Uri)">
            <summary>
            Sends this analysis anonymously to the specified Uri for further study.
            </summary>
            <param name="uri">The URI.</param>
            <returns>A <strong>Boolean</strong> value, <strong>True</strong> if the HTTP response indicates success.</returns>
            <remarks><para>Developers may wish to generate detection logs from customers for the purposes of
            improving technical support.  This can also be used to collect statistics about GPS devices which
            customers use.  This method will create an HTTP POST to the specified address with the information in this
            class.</para>
              <para>The actual fields sent will vary depending on the type of object being reported.  Currently, this
            feature works for SerialDevice, BluetoothDevice, and GpsIntermediateDriver device objects.</para></remarks>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.Log">
            <summary>
            Returns a log of activity while the device was tested.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsWorkingProperly">
            <summary>
            Returns whether the device is healthy
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.SupportedSentences">
            <summary>
            Returns NMEA sentences discovered during analysis.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsPositionSupported">
            <summary>
            Returns whether real-time latitude and longitude are reported by the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsAltitudeSupported">
            <summary>
            Returns whether the distance above sea level is reported by the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsBearingSupported">
            <summary>
            Returns whether the real-time direction of travel is reported by the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsPrecisionSupported">
            <summary>
            Returns whether dilution of precision information is reported by the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsSpeedSupported">
            <summary>
            Returns whether the real-time rate of travel is reported by the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceAnalysis.IsSatellitesSupported">
            <summary>
            Returns whether real-time satellite information is reported by the device.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Devices">
            <summary>
            Encapsulates GPS device detection features and information about known devices.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices.DEBUG_CATEGORY">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices.ROOT_KEY_NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._currentlyDetectingWaitHandles">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._serialDevices">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._bluetoothDevices">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._gpsDevices">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._detectionThread">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._isDetectionInProgress">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._isClockSynchronizationEnabled">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._deviceDetectedWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._detectionCompleteWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._deviceDetectionTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._isStreamNeeded">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._isOnlyFirstDeviceDetected">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._allowBluetoothConnections">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._allowSerialConnections">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._allowExhaustiveSerialPortScanning">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._maximumSerialPortNumber">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._altitude">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._utcDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._speed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Devices._satellites">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.CancelDetection">
            <summary>
            Aborts the process of finding GPS devices and blocks until the cancellation is complete.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.CancelDetection(System.Boolean)">
            <summary>
            Aborts the process of finding GPS devices and optionally blocks until the cancellation is complete.
            </summary>
            <param name="isAsync">If set to <see langword="true"/>, then the method will return immediately rather than waiting
            for the cancellation to complete.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.BeginDetection">
            <summary>
            Starts looking for GPS devices on a separate thread.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.Undetect">
            <summary>
            Cancels detection and removes any cached information about known devices.
            Use the <see cref="M:DotSpatial.Positioning.Devices.BeginDetection"/> method to re-detect devices and re-create the device cache.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.WaitForDevice">
            <summary>
            Waits for any GPS device to be detected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.WaitForDevice(System.TimeSpan)">
            <summary>
            Waits for any GPS device to be detected up to the specified timeout period.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.WaitForDetection">
            <summary>
            Waits for device detection to complete.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.WaitForDetection(System.TimeSpan)">
            <summary>
            Waits for device detection to complete up to the specified timeout period.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.RaiseFixLost(DotSpatial.Positioning.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:DotSpatial.Positioning.Devices.FixLost"/> event.
            </summary>
            <param name="e">The <see cref="T:DotSpatial.Positioning.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.RaiseFixAcquired(DotSpatial.Positioning.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:DotSpatial.Positioning.Devices.FixAcquired"/> event.
            </summary>
            <param name="e">The <see cref="T:DotSpatial.Positioning.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.BluetoothDevice_DeviceDiscovered(System.Object,DotSpatial.Positioning.DeviceEventArgs)">
            <summary>
            Handles the DeviceDiscovered event of the BluetoothDevice control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:DotSpatial.Positioning.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.DetectionThreadProc">
            <summary>
            Detections the thread proc.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.DetectionThreadProcWatcher(System.Object)">
            <summary>
            This method, spawned by the ThreadPool, monitors detection and aborts it if it's taking too long.
            </summary>
            <param name="over9000">The over9000.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.BeginBluetoothDetection">
            <summary>
            Begins detecting all bluetooth devices to determine if they are GPS devices.
            All detection is done asynchronously, so this method returns immediately.
            Use the <see cref="M:DotSpatial.Positioning.Devices.WaitForDetection"/> method if you need to block until detection is completed.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.BeginSerialDetection(System.Boolean)">
            <summary>
            Begins detecting all serial devices to determine if they are GPS devices.
            All detection is done asynchronously, so this method returns immediately.
            Use the <see cref="M:DotSpatial.Positioning.Devices.WaitForDetection"/> method if you need to block until detection is completed.
            </summary>
            <param name="omitColonSuffix">If set to <see langword="true"/>, the colon character (":") will be omitted from the port names.
            This is required on some systems in order for the device to be detected properly.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.DiscoverBluetoothDevices">
            <summary>
            Discovers any new bluetooth devices.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.WaitForDetectionInternal">
            <summary>
            Waits for device detection to complete.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.RenameDevice(DotSpatial.Positioning.SerialDevice,System.String)">
            <summary>
            Renames the specified serial device, only if there is not already another serial device with the specified name.
            </summary>
            <param name="device">The device to be renamed.</param>
            <param name="newName">The new name for the device.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.ClearDeviceCache">
            <summary>
            Clears the <see cref="P:DotSpatial.Positioning.Devices.BluetoothDevices"/>, <see cref="P:DotSpatial.Positioning.Devices.SerialDevices"/>, and <see cref="P:DotSpatial.Positioning.Devices.GpsDevices"/> lists.
            This will cause the lists to be rebuilt the next time the <see cref="M:DotSpatial.Positioning.Devices.BeginBluetoothDetection"/> or
            <see cref="M:DotSpatial.Positioning.Devices.BeginSerialDetection(System.Boolean)"/> methods are called.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.OnDeviceDetectionAttempted(DotSpatial.Positioning.Device)">
            <summary>
            Called when [device detection attempted].
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.OnDeviceDetectionAttemptFailed(DotSpatial.Positioning.DeviceDetectionException)">
            <summary>
            Called when [device detection attempt failed].
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.OnDeviceDetectionStarted">
            <summary>
            Called when [device detection started].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.OnDeviceDetectionCompleted">
            <summary>
            Called when [device detection completed].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.OnDeviceDiscovered(DotSpatial.Positioning.Device)">
            <summary>
            Called when [device discovered].
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Devices.Add(DotSpatial.Positioning.Device)">
            <summary>
            Adds a GPS device to the list of known GPS devices.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDetectionStarted">
            <summary>
            Occurs when the process of finding GPS devices has begun.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDetectionAttempted">
            <summary>
            Occurs immediately before a device is about to be tested for GPS data.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDetectionAttemptFailed">
            <summary>
            Occurs when a device has failed to transmit recognizable GPS data.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDetected">
            <summary>
            Occurs when a device is responding and transmitting GPS data.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDiscovered">
            <summary>
            Occurs when a Bluetooth device has been found.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDetectionCanceled">
            <summary>
            Occurs when the process of finding GPS devices has been interrupted.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.DeviceDetectionCompleted">
            <summary>
            Occurs when the process of finding GPS devices has finished.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.PositionChanged">
            <summary>
            Occurs when any interpreter detects a change in the current location.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.AltitudeChanged">
            <summary>
            Occurs when any interpreter detects a change in the distance above sea level.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.SpeedChanged">
            <summary>
            Occurs when any interpreter detects a change in the current rate of travel.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.SatellitesChanged">
            <summary>
            Occurs when any interpreter detects a change in GPS satellite information.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.BearingChanged">
            <summary>
            Occurs when any interpreter detects a change in the direction of travel.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.FixLost">
            <summary>
            Occurs when any interpreter detects when a GPS device can no longer calculate the current location.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.FixAcquired">
            <summary>
            Occurs when any interpreter detects when a GPS device becomes able to calculate the current location.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Devices.UtcDateTimeChanged">
            <summary>
            Occurs when any interpreter detects a change in the satellite-derived date and time.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.Any">
            <summary>
            Returns a GPS device which is connectable and is reporting data.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.AllowBluetoothConnections">
            <summary>
            Controls whether Bluetooth devices are included in the search for GPS devices.
            </summary>
            <value><c>true</c> if [allow bluetooth connections]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.AllowSerialConnections">
            <summary>
            Controls whether serial devices are included in the search for GPS devices.
            </summary>
            <value><c>true</c> if [allow serial connections]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.AllowExhaustiveSerialPortScanning">
            <summary>
            Controls whether a complete range of serial devices is searched, regardless of which device appear to actually exist.
            </summary>
            <value><c>true</c> if [allow exhaustive serial port scanning]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.MaximumSerialPortNumber">
            <summary>
            Controls the maximum serial port to test when exhaustive detection is enabled.
            </summary>
            <value>The maximum serial port number.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.GpsDevices">
            <summary>
            Returns a list of confirmed GPS devices.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.BluetoothDevices">
            <summary>
            Returns a list of known wireless Bluetooth devices (not necessarily GPS devices).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.SerialDevices">
            <summary>
            Returns a list of known serial devices (not necessarily GPS devices).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.DeviceDetectionTimeout">
            <summary>
            Controls the amount of time allowed for device detection to complete before it is aborted.
            </summary>
            <value>The device detection timeout.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsOnlyFirstDeviceDetected">
            <summary>
            Controls whether detection is aborted once one device has been found.
            </summary>
            <value><c>true</c> if this instance is only first device detected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsClockSynchronizationEnabled">
            <summary>
            Controls whether the system clock should be synchronized to GPS-derived date and time.
            </summary>
            <value><c>true</c> if this instance is clock synchronization enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsBluetoothEnabled">
            <summary>
            Controls whether the Bluetooth receiver is on and accepting connections.
            </summary>
            <value><c>true</c> if this instance is bluetooth enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsBluetoothSupported">
            <summary>
            Returns whether the Bluetooth stack on the local machine is supported by GPS.NET.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsDeviceDetected">
            <summary>
            Returns whether a GPS device has been found.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsDetectionInProgress">
            <summary>
            Returns whether the process of finding a GPS device is still working.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.Position">
            <summary>
            Controls the current location on Earth's surface.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.Speed">
            <summary>
            Controls the current rate of travel.
            </summary>
            <value>The speed.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.Satellites">
            <summary>
            Controls the current list of GPS satellites.
            </summary>
            <value>The satellites.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.UtcDateTime">
            <summary>
            Controls the current satellite-derived date and time.
            </summary>
            <value>The UTC date time.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.DateTime">
            <summary>
            Controls the current satellite-derived date and time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.Altitude">
            <summary>
            Controls the current distance above sea level.
            </summary>
            <value>The altitude.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.Bearing">
            <summary>
            Controls the current direction of travel.
            </summary>
            <value>The bearing.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Devices.IsStreamNeeded">
            <summary>
            Gets a value indicating whether this instance is stream needed.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DeviceDetectionException">
            <summary>
            Represents a problem which has occured during device detection.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceDetectionException._device">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceDetectionException.#ctor(DotSpatial.Positioning.Device,System.Exception)">
            <summary>
            Creates a new instance of a DeviceDetectionException
            </summary>
            <param name="device">The device.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceDetectionException.#ctor(DotSpatial.Positioning.Device,System.String)">
            <summary>
            Creates a new instance of a DeviceDetectionException
            </summary>
            <param name="device">The device.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceDetectionException.#ctor(DotSpatial.Positioning.Device,System.String,System.Exception)">
            <summary>
            Creates a new instance of a DeviceDetectionException
            </summary>
            <param name="device">The device.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceDetectionException.Device">
            <summary>
            The device that caused the exception
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DeviceDetectionExceptionEventArgs">
            <summary>
            Represents information about a device detection problem during detection-related events.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DeviceDetectionExceptionEventArgs._exception">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DeviceDetectionExceptionEventArgs.#ctor(DotSpatial.Positioning.DeviceDetectionException)">
            <summary>
            Creates a new instance of the DeviceDetectionException event arguments.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceDetectionExceptionEventArgs.Device">
            <summary>
            The device that is involved in the event
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DeviceDetectionExceptionEventArgs.Exception">
            <summary>
            The exception
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DilutionOfPrecision">
            <summary>
            Represents a confidence level in the precision of GPS data.
            </summary>
            <remarks><para>Dilution of Precision (or "DOP" for short) is a very important concept for GPS software
            developers.  When GPS devices calculate the current location on Earth's surface, inaccuracies
            can cause the calculated position to be incorrect by as much as an American football field!  To
            help minimize these effects, the GPS device also reports DOP values.  A low DOP value (such as 2)
            indicates excellent precision, whereas a high value (such as 50) indicates that precision is very
            poor.</para>
              <para>As a rule of thumb, a DOP value can be multiplied by the average precision of a GPS device
            to get a measurable amount of error.  Most consumer GPS devices are capable of about four to six meters
            of precision at their best, or as low as one to three meters if DGPS services such as WAAS or EGNOS are
            being utilized.  Or, an average of five meters without DGPS, and an average of two meters with DGPS.
            So, if the current Dilution of Precision is four, and WAAS is in effect, the current precision is
            "2 meters * four = 8 meters" of precision.</para>
              <para>GPS.NET includes features to help you monitor and control the precision of your GPS devices.  Properties
            such as <strong>MaximumHorizontalDilutionOfPrecision</strong> will cause a GPS.NET interpreter to throw out
            any real-time data until the DOP is at or below a specific number.  To help you determine this maximum number for
            your application, an article is available to help you.  You can find it online at the DotSpatial.Positioning web site here:
            http://dotspatial.codeplex.com/Articles/WritingApps2_1.aspx. </para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.TypicalPrecision">
            <summary>
            Represents the typical precision of a consumer-grade GPS device: six meters.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.TypicalPrecisionWithDgps">
            <summary>
            Represents the typical precision of a consumer-grade GPS device with WAAS, MSAS or EGNOS: two meters.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Maximum">
            <summary>
            Represents the worst possible DOP value of fifty.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Minimum">
            <summary>
            Represents the best possible DOP value of one.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Excellent">
            <summary>
            Represents a DOP reading signifying nearly-ideal precision.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Fair">
            <summary>
            Represents a DOP reading signifying inaccurate positional measurements.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Poor">
            <summary>
            Represents a FOP reading signifying grossly inaccurate positional
            measurements.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Ideal">
            <summary>
            Represents a value of 1, where the GPS device is making the most accurate
            measurements possible.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Moderate">
            <summary>
            Represents a DOP reading signifying inaccurate positional measurements.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Good">
            <summary>
            Represents a DOP reading signifying fairly accurate positional
            measurements.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision.Invalid">
            <summary>
            Represents an invalid or unspecified DOP value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecision._currentAverageDevicePrecision">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.#ctor(System.Single)">
            <summary>
            Creates a new instance using the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.Equals(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecision.CompareTo(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecision.Value">
            <summary>
            Returns the numeric value of the rating.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecision.IsEmpty">
            <summary>
            Returns whether the value is zero.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecision.IsInvalid">
            <summary>
            Returns whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecision.EstimatedPrecision">
            <summary>
            Returns the estimated precision as a measurable distance.
            </summary>
            <remarks>The precision estimate is a product of this value and the value of the
            CurrentAverageDevicePrecision static property.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecision.Rating">
            <summary>
            Returns a friendly name for the level of precision.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecision.CurrentAverageDevicePrecision">
            <summary>
            Controls the estimated average precision possible by the current GPS device.
            </summary>
            <value>The current average device precision.</value>
            <remarks>Most consumer GPS devces are capable of about six meters of precision without DGPS features
            such as WAAS or EGNOS.  When DGPS features are utilized, a typical cunsumer device is capable of about
            two meters of precision.  If you know of a specific amount for your device, you can set this property to
            assist GPS.NET in calculating the current estimated measurable amount of error in latitude/longitude reports.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.DilutionOfPrecisionRating">
            <summary>
            Indicates an interpretation of the accuracy of a measurement made by the GPS
            device.
            </summary>
            <remarks>This enumeration is used by the
            <see cref="P:DotSpatial.Positioning.DilutionOfPrecision.Rating">Rating</see> property of the
            <see cref="T:DotSpatial.Positioning.DilutionOfPrecision">
            DilutionOfPrecision</see> class. This interpretation is subject to discussion as to
            what precisely constitutes a "good" versus "bad" DOP. Use your own best judgement based
            on the needs of your application. Generally speaking, a DOP of six or less is
            recommended for en-route navigation, and three or less for highly-precise measurements.
            A rating of <strong>Moderate</strong> corresponds with six or better, a rating of
            <strong>Excellent</strong> means three or less, and a rating of <strong>Ideal</strong>
            means the best value of one.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Unknown">
            <summary>The rating is unknown or not yet available.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Ideal">
            <summary>
            Represents a value of 1, where the GPS device is making the most accurate
            measurements possible.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Excellent">
            <summary>
            The GPS device is making high-quality measurements, good enough for applications
            requiring higher levels of precision. Represents a value of 2 or 3.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Good">
            <summary>
            The GPS device is making measurements accurate enough for en-route navigation.
            Represents a value between 4 and 6.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Moderate">
            <summary>
            The GPS device is making measurements good enough to indicate the approximate
            location, but should be ignored by applications requiring high accuracy. Represents a
            value of 7 or 8.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Fair">
            <summary>
            The GPS device is making measurements with an accuracy which should only be used
            to indicate the approximate location, but is not accurate enough for en-route
            navigation. Represents a value between 9 and 20.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionRating.Poor">
            <summary>
            The GPS device is calculating the current location, but the accuracy is extremely
            low and may be off by a factor of fifty. Represents a value between 21 and the maximum
            possible of 50.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DilutionOfPrecisionEventArgs">
             <summary>
             Represents information about a DOP measurement when an DOP-related event is raised.
             </summary>
             <example>This example demonstrates how to use this class when raising an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyDilutionOfPrecisionEvent As EventHandler
             ' Create a DilutionOfPrecision of 30 horizontal
             Dim MyDilutionOfPrecision As New DilutionOfPrecision(DilutionOfPrecisionType.Horizontal, 30.0)
             Sub Main()
             ' Raise our custom event
             RaiseEvent MyDilutionOfPrecisionEvent(Me, New DilutionOfPrecisionEventArgs(MyDilutionOfPrecision))
             End Sub
               </code>
               <code lang="C#">
             // Declare a new event
             EventHandler MyDilutionOfPrecisionEvent;
             // Create a DilutionOfPrecision of 30 horizontal
             DilutionOfPrecision MyDilutionOfPrecision = new DilutionOfPrecision(DilutionOfPrecisionType.Horizontal, 30.0);
             void Main()
             {
             // Raise our custom event
             MyDilutionOfPrecisionEvent(this, New DilutionOfPrecisionEventArgs(MyDilutionOfPrecision));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.DilutionOfPrecisionEventArgs.DilutionOfPrecision">DilutionOfPrecision Class</seealso>
            
             <seealso cref="T:System.EventHandler">EventHandler Delegate</seealso>
             <remarks>This class is typically used for events in the <see cref="P:DotSpatial.Positioning.DilutionOfPrecisionEventArgs.DilutionOfPrecision">DilutionOfPrecision</see> class to
             provide notification when hours, minutes, decimal minutes or seconds properties have changed.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.DilutionOfPrecisionEventArgs._dilutionOfPrecision">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DilutionOfPrecisionEventArgs.#ctor(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Creates a new instance with the specified DOP measurement.
            </summary>
            <param name="dilutionOfPrecision">The dilution of precision.</param>
        </member>
        <member name="P:DotSpatial.Positioning.DilutionOfPrecisionEventArgs.DilutionOfPrecision">
            <summary>
            A DilutionOfPrecision object which is the target of the event.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Emulator">
            <summary>
            Represents a simulated GPS device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._readDataAvailableWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._readBuffer">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._writeDataAvailableWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._writeBuffer">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._thread">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._emulationIntervalWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._readTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._writeTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._isDisposed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._isRunning">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._utcDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._speed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._currentPosition">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._currentDestination">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._altitude">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._route">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._routeIndex">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._satellites">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._fixMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._fixMethod">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._fixStatus">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._horizontalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._verticalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._meanDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._interval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._seed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._speedLow">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._speedHigh">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._bearingStart">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._bearingArc">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._isRandom">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._defaultReadBufferSize">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._defaultWriteBufferSize">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._defaultReadTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator._defaultWriteTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Emulator.ExceptionOccurred">
            <summary>
            An Excpetion occured
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Emulator"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.EmulatorThreadProc">
            <summary>
            Emulators the thread proc.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.OnEmulation">
            <summary>
            Called when [emulation].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.SetRandom(System.Boolean)">
            <summary>
            Toggles the IsRandom flag.
            </summary>
            <param name="isRandom">The state to toggle the flag.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Randomize">
            <summary>
            Randomizes the emulation by changing speed and direction
            </summary>
            <remarks>GPS coordinate emulation can be randomized by any number of factors, depending on the emulator type used.
            Any emulation can have it's direction and speed randomized within specified tolerances. By default, speed is
            limited to between 0 (low) and 5 (high) meters/second and bearing changes are limited to +/- 45 degrees
            (a 90 degree arc) from North (0) degrees.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Randomize(System.Random,DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth)">
            <summary>
            Randomizes the emulation by changing speed and direction
            </summary>
            <param name="seed">The randomizer to use.</param>
            <param name="speedLow">The minimum travel speed.</param>
            <param name="speedHigh">The maximum travel speed.</param>
            <param name="bearingStart">The initial direction of travel.</param>
            <param name="bearingArc">The arc in which random directional changes will occur.</param>
            <remarks>GPS coordinate emulation can be randomized by any number of factors, depending on the emulator type used.
            Any emulation can have it's direction and speed randomized within specified tolerances. By default, speed is
            limited to between 0 (low) and 5 (high) meters/second and bearing changes are limited to +/- 45 degrees
            (a 90 degree arc) from North (0) degrees.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             When overridden in a derived class, sets the position within the current stream.
             </summary>
             <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
             <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
             <returns>The new position within the current stream.</returns>
             <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            
             <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.SetLength(System.Int64)">
             <summary>
             When overridden in a derived class, sets the length of the current stream.
             </summary>
             <param name="value">The desired length of the current stream in bytes.</param>
             <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            
             <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
             </summary>
             <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
             <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
             <param name="count">The maximum number of bytes to be read from the current stream.</param>
             <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
             <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            
             <exception cref="T:System.ArgumentNullException">
               <paramref name="buffer"/> is null. </exception>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            
             <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            
             <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.ReadByte">
             <summary>
             Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
             </summary>
             <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
             <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
             </summary>
             <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
             <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
             <param name="count">The number of bytes to be written to the current stream.</param>
             <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            
             <exception cref="T:System.ArgumentNullException">
               <paramref name="buffer"/> is null. </exception>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            
             <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            
             <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.WriteByte(System.Byte)">
             <summary>
             Writes a byte to the current position in the stream and advances the position within the stream by one byte.
             </summary>
             <param name="value">The byte to write to the stream.</param>
             <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            
             <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Close">
            <summary>
            Closes the emulation stream, but doesn't dispose of it.
            </summary>
            <remarks>The Emulator.Close() method simply terminates the thread that feeds data to
            a virtual Device. This allows the emulator to be reused indefinately.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Emulator.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.DefaultReadBufferSize">
            <summary>
            Default Read Buffer Size
            </summary>
            <value>The default size of the read buffer.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.DefaultWriteBufferSize">
            <summary>
            Default Write Buffer Size
            </summary>
            <value>The default size of the write buffer.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.DefaultReadTimeout">
            <summary>
            Default Read Timeout
            </summary>
            <value>The default read timeout.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.DefaultWriteTimeout">
            <summary>
            The Timespan of before the write operation times out.
            </summary>
            <value>The default write timeout.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.IsEmulationThreadAlive">
            <summary>
            Gets a value indicating whether this instance is emulation thread alive.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Seed">
            <summary>
            Returns the current randomizer for emulation.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Interval">
            <summary>
            Returns the amount of time the emulator waits before processing new data.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.IsFixed">
            <summary>
            Indicates whether enough satellite signals exist to determine the current location.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.IsRandom">
            <summary>
            Gets a value indicating whether or not the emulator is generating data that
            changes in random manner.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Name">
            <summary>
            the string Name ofhte emulator
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Altitude">
            <summary>
            The string altitude
            </summary>
            <value>The altitude.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Speed">
            <summary>
            the speed
            </summary>
            <value>The speed.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Bearing">
            <summary>
            The Directional azimuth angle
            </summary>
            <value>The bearing.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.FixedSatelliteCount">
            <summary>
            The integer count of fixed satellites
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.FixQuality">
            <summary>
            The quality of the GPS signal
            </summary>
            <value>The fix quality.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.FixMode">
            <summary>
            The mode of the signal fix
            </summary>
            <value>The fix mode.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.FixMethod">
            <summary>
            the fix method
            </summary>
            <value>The fix method.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.FixStatus">
            <summary>
            The status of the fix
            </summary>
            <value>The fix status.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.HorizontalDilutionOfPrecision">
            <summary>
            the Horizontal Dilution of Precision (HPDOP)
            </summary>
            <value>The horizontal dilution of precision.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.VerticalDilutionOfPrecision">
            <summary>
            The Vertical Dilution of Precision (VPDOP)
            </summary>
            <value>The vertical dilution of precision.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.MeanDilutionOfPrecision">
            <summary>
            The average of the Dilution of precision values.
            </summary>
            <value>The mean dilution of precision.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Satellites">
            <summary>
            Gets the list of satellites.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Route">
            <summary>
            Gets the list of positions that make up this route
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.CurrentPosition">
            <summary>
            Gets the Position structure for the current position
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.CurrentDestination">
            <summary>
            Gets or sets the position with the new destination
            </summary>
            <value>The current destination.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.DateTime">
            <summary>
            Gets the DateTime structure for Now
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.UtcDateTime">
            <summary>
            Gets the UtcCorrected value for Now
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <returns>A value that determines whether the current stream can time out.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.ReadBuffer">
            <summary>
            Gets the read buffer.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.ReadDataAvailableWaitHandle">
            <summary>
            Gets the read data available wait handle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.WriteBuffer">
            <summary>
            Gets the write buffer.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.WriteDataAvailableWaitHandle">
            <summary>
            Gets the write data available wait handle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Position">
             <summary>
             When overridden in a derived class, gets or sets the position within the current stream.
             </summary>
             <value>The position.</value>
             <returns>The current position within the stream.</returns>
            
             <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            
             <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.Length">
             <summary>
             When overridden in a derived class, gets the length in bytes of the stream.
             </summary>
             <returns>A long value representing the length of the stream in bytes.</returns>
            
             <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            
             <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.ReadTimeout">
             <summary>
             Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
             </summary>
             <value>The read timeout.</value>
             <returns>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</returns>
            
             <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception>
        </member>
        <member name="P:DotSpatial.Positioning.Emulator.WriteTimeout">
             <summary>
             Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
             </summary>
             <value>The write timeout.</value>
             <returns>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</returns>
            
             <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception>
        </member>
        <member name="T:DotSpatial.Positioning.FixQuality">
            <summary>
            Indicates which devices are being used to obtain a fix, other than the GPS device
            itself.
            </summary>
            <example>
              <code lang="VB">
            ' Declare a new receiver
            Private WithEvents MyReceiver As New Receiver()
            ' Raised when the fix quality has changed
            Private Sub OnFixQualityChanged(ByVal sender As Object, ByVal e As FixQualityEventArgs)
            ' What is the new fix quality°
            Select Case e.FixQuality
            Case FixQuality.NoFix
            ' No fix is obtained
            Debug.WriteLine("No fix is currently obtained.")
            Case FixQuality.GpsFix
            ' A fix is present
            Debug.WriteLine("A fix has been obtained using only GPS satellites.")
            Case FixQuality.DifferentialGpsFix
            ' A differential fix is present
            Debug.WriteLine("A fix has been obtained using GPS satellites and correction information from DGPS/WAAS ground stations.")
            Case FixQuality.Estimated
            ' A fix is being estimated (not an actual fix)
            Debug.WriteLine("A fix is currently being estimated. ")
            End Select
            End Sub
              </code>
              <code lang="C#">
            // Declare a new receiver
            Receiver MyReceiver = new Receiver();
            // Raised when the fix quality has changed
            void OnFixQualityChanged(Object sender, FixQualityEventArgs e)
            {
            // What is the new fix quality°
            switch (e.FixQuality)
            {
            case FixQuality.NoFix:
            // No fix is obtained
            Debug.WriteLine("No fix is currently obtained.");
            case FixQuality.GpsFix:
            // A fix is present
            Debug.WriteLine("A fix has been obtained using only GPS satellites.");
            case FixQuality.DifferentialGpsFix:
            // A differential fix is present
            Debug.WriteLine("A fix has been obtained using GPS satellites and correction information from DGPS/WAAS ground stations.");
            case FixQuality.Estimated:
            // A fix is being estimated (not an actual fix)
            Debug.WriteLine("A fix is currently being estimated. ");
            }
            }
              </code>
              </example>
            <remarks>This enumeration is typically used by the</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.Unknown">
            <summary>
            Not enough information is available to specify the current fix quality.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.NoFix">
            <summary>No fix is currently obtained.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.GpsFix">
            <summary>A fix is currently obtained using GPS satellites only.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.DifferentialGpsFix">
            <summary>A fix is obtained using both GPS satellites and DGPS/WAAS ground
            stations.  Position error is as low as 0.5-5 meters.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.PulsePerSecond">
            <summary>
            A PPS or pulse-per-second fix.  PPS signals very accurately indicate the start of a second.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.FixedRealTimeKinematic">
            <summary>
            Used for surveying.  A fix is obtained with the assistance of a reference station.  Position error is as low as 1-5 centimeters.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.FloatRealTimeKinematic">
            <summary>
            Used for surveying.  A fix is obtained with the assistance of a reference station.  Position error is as low as 20cm to 1 meter.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.Estimated">
            <summary>
            The fix is being estimated.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.ManualInput">
            <summary>
            The fix is being input manually.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixQuality.Simulated">
            <summary>
            The fix is being simulated.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.FixMethod">
            <summary>
            Indicates whether a fix is present and if altitude can be calculated along with
            latitude and longitude.
            </summary>
            <example>
            This example demonstrates how to use the FixMethod enumeration to tell if altitude
            measurements can be made.  Notice: Some devices have built-in altimeters.  These devices
            can report altitude even when there is no fix present.  To support such devices, avoid
            using this property entirely and use any non-zero altitude measurement.
              <code lang="VB">
            Private WithEvents MyReceiver As New Receiver()
            ' Raised whenever the fix method has changed
            Private Sub OnFixMethodChanged(ByVal sender As Object, ByVal e As FixMethodEventArgs)
            ' What is the new fix method°
            Select Case e.FixMethod
            Case FixMethod.NoFix
            ' We have neither position or altitude
            Debug.WriteLine("Your position is: Not Yet Available")
            Debug.WriteLine("Your altitude is: Not Yet Available")
            Case FixMethod.Fix2D
            ' We have a position but no altitude
            Debug.WriteLine("Your position is: " &amp; MyReceiver.Position.ToString)
            Debug.WriteLine("Your altitude is: Not Yet Available")
            Case FixMethod.Fix3D
            ' We have both position and altitude
            Debug.WriteLine("Your position is: " &amp; MyReceiver.Position.ToString)
            Debug.WriteLine("Your altitude is: " &amp; MyReceiver.Altitude.ToString)
            End Select
            End Sub
              </code>
              <code lang="C#">
            // Declare a new receiver
            Private WithEvents MyReceiver As New Receiver()
            // Raised whenever the fix method has changed
            void OnFixMethodChanged(Object sender, FixMethodEventArgs e)
            {
            // What is the new fix method°
            switch (e.FixMethod)
            {
            case FixMethod.NoFix:
            // We have neither position or altitude
            Debug.WriteLine("Your position is: Not Yet Available");
            Debug.WriteLine("Your altitude is: Not Yet Available");
            case FixMethod.Fix2D:
            // We have a position but no altitude
            Debug.WriteLine("Your position is: " &amp; MyReceiver.Position.ToString());
            Debug.WriteLine("Your altitude is: Not Yet Available");
            case FixMethod.Fix3D:
            // We have both position and altitude
            Debug.WriteLine("Your position is: " &amp; MyReceiver.Position.ToString());
            Debug.WriteLine("Your altitude is: " &amp; MyReceiver.Altitude.ToString());
            }
            }
              </code>
              </example>
            <remarks>This enumeration is used by the
            class to indicate if altitude measurements are possible. Altitude measurements are
            possible whenever there are four or more satellites involved in a fix.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixMethod.NoFix">
            <summary>The GPS device does not have a fix on the current position.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixMethod.Fix2D">
            <summary>The GPS device is reporting latitude and longitude.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixMethod.Fix3D">
            <summary>The GPS device is reporting latitude, longitude, and altitude.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixMethod.Unknown">
            <summary>
            The fix method is not yet known.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.FixStatus">
            <summary>
            Indicates whether a satellite fix is currently active.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixStatus.Unknown">
            <summary>
            The satellite fix is untested
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixStatus.NoFix">
            <summary>
            The satellite fix is inactive
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixStatus.Fix">
            <summary>
            The satellite fix is active
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.FixLikelihood">
            <summary>
            Indicates the likelihood that a GPS satellite fix will be obtained or
            sustained.
            </summary>
            <example>
            This example uses the FixLikelihood enumeration to make a judgement call on the
            stability of the fix.
              <code lang="VB">
            ' Declare a new receiver
            Private WithEvents MyReceiver As New Receiver()
            Sub Main()
            ' Start listening for messages
            MyReceiver.Start
            End Sub
            Sub OnFixLikelihoodChanged(ByVal sender As Object, ByVal e As FixLikelihoodEventArgs) Handles MyReceiver.FixLikelihoodChanged
            ' Do we have a fix currently°
            If MyReceiver.IsFixObtained Then
            ' Yes.  What's the likelihood that the fix will be sustained°
            Select Case MyReceiver.FixLikelihood
            Case FixLikelihood.Unlikely
            Debug.WriteLine("The current fix is about to be lost!")
            Case FixLikelihood.Possible
            Debug.WriteLine("The current fix is unstable.  Find a more open view of the sky soon.")
            Case FixLikelihood.Likely
            Debug.WriteLine("The current fix is nearly stable.")
            Case FixLikelihood.Certain
            Debug.WriteLine("The current fix is stable.")
            End Select
            Else
            ' No. What's the likelihood that a fix will be obtained°
            Select Case MyReceiver.FixLikelihood
            Case FixLikelihood.Unlikely
            Debug.WriteLine("A fix is not possible.  Find a more open view of the sky.")
            Case FixLikelihood.Possible
            Debug.WriteLine("A fix is possible, but satellite signals are still mostly obscured.")
            Case FixLikelihood.Likely
            Debug.WriteLine("A fix should occur within the next several seconds.")
            Case FixLikelihood.Certain
            Debug.WriteLine("A fix will occur in a few seconds.")
            End Select
            End If
            End Sub
              </code>
              <code lang="CS">
            ' Declare a new receiver
            Private Receiver MyReceiver = new Receiver();
            void Main()
            {
            // Start listening for messages
            MyReceiver.Start();
            }
            void OnFixLikelihoodChanged(Object sender, FixLikelihoodEventArgs e)
            {
            // Do we have a fix currently°
            if (MyReceiver.IsFixObtained)
            {
            // Yes.  What's the likelihood that the fix will be sustained°
            switch (MyReceiver.FixLikelihood)
            {
            case FixLikelihood.Unlikely:
            Debug.WriteLine("The current fix is about to be lost!");
            break;
            case FixLikelihood.Possible:
            Debug.WriteLine("The current fix is unstable.  Find a more open view of the sky soon.");
            break;
            case FixLikelihood.Likely:
            Debug.WriteLine("The current fix is nearly stable.");
            break;
            case FixLikelihood.Certain:
            Debug.WriteLine("The current fix is stable.");
            break;
            }
            }
            else
            {
            // No. What's the likelihood that a fix will be obtained°
            switch (MyReceiver.FixLikelihood)
            {
            case FixLikelihood.Unlikely:
            Debug.WriteLine("A fix is not possible.  Find a more open view of the sky.");
            break;
            case FixLikelihood.Possible:
            Debug.WriteLine("A fix is possible, but satellite signals are still mostly obscured.");
            break;
            case FixLikelihood.Likely:
            Debug.WriteLine("A fix should occur within the next several seconds.");
            break;
            case FixLikelihood.Certain:
            Debug.WriteLine("A fix will occur in a few seconds.");
            break;
            }
            }
            }
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.FixLikelihood.Unlikely">
            <summary>Indicates that a fix would probably be lost if a fix is acquired.</summary>
            <remarks>When this value is returned, nearly all of the available GPS satellite signals are being obscured by buildings, trees, or other solid objects.  The device should be moved into a more open view of the sky.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixLikelihood.Possible">
            <summary>
            Indicates that a fix would probably be lost after a short period of time if a fix
            is acquired.
            </summary>
            <remarks>When this value is returned, a few satellite signals are available, but the combined signals are too weak to maintain a fix for long.  The device should be moved into a more open view of the sky.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixLikelihood.Likely">
            <summary>
            Indicates that a fix would probably last for a longer period of time if a fix is
            acquired.
            </summary>
            <remarks>When this value is returned, at least three satellite signals are being received clearly.  If conditions stay the same or improve, a fix is imminent.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixLikelihood.Certain">
            <summary>
            Indicates that a fix is very likely to be sustained given the current satellite
            signal strengths.
            </summary>
            <remarks>When this value is returned, several satellite signals are being received and are strong enough to maintain a fix.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.FixMode">
            <summary>
            Indicates if the GPS device is automatically deciding between a 2-D and a 3-D
            fix.
            </summary>
            <remarks>This enumeration is used by the
            class. A vast majority of GPS devices use a setting of Automatic because there is no
            complicated math behind figuring out if a 2-D fix or 3-D fix is present. If there are
            three satellites involved in a fix, only the latitude and longitude can be calculated,
            so the fix is 2-D. If more than three involved, the fix is 3-D.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixMode.Automatic">
            <summary>Typical value.  The GPS device is automatically deciding between a two- and three-dimensional fix.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixMode.Manual">
            <summary>Rare value.  The user must specify whether a two- or three-dimensional fix is to be used.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.FixMode.Unknown">
            <summary>
            The fix mode is not yet known.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.FixMethodEventArgs">
            <summary>
            Represents information about the method used to obtain a fix when a fix-related event is raised.
            </summary>
            <example>This example demonstrates how to use this class when raising an event.
              <code lang="VB">
            ' Declare a new event
            Dim MyFixMethodEvent As EventHandler
            ' Create a FixMethod signifying a 3-D fix (both position and altitude)
            Dim MyFixMethod As FixMethod = FixMethod.Fix3D
            Sub Main()
            ' Raise our custom event
            RaiseEvent MyFixMethodEvent(Me, New FixMethodEventArgs(MyFixMethod))
            End Sub
              </code>
              <code lang="C#">
            // Declare a new event
            EventHandler MyFixMethodEvent;
            // Create a FixMethod signifying a 3-D fix (both position and altitude)
            FixMethod MyFixMethod = FixMethod.Fix3D;
            void Main()
            {
            // Raise our custom event
            MyFixMethodEvent(this, New FixMethodEventArgs(MyFixMethod));
            }
              </code>
              </example>
            <remarks>This object is used primarily by the FixMethodChanged
            event of the Receiver class to provide notification when
            updated fix method information has been received from the GPS device.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixMethodEventArgs._fixMethod">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.FixMethodEventArgs.#ctor(DotSpatial.Positioning.FixMethod)">
            <summary>
            Creates a new instance with the specified fix method.
            </summary>
            <param name="fixMethod">The fix method.</param>
        </member>
        <member name="P:DotSpatial.Positioning.FixMethodEventArgs.FixMethod">
            <summary>
            Indicates if the GPS device has no fix, a 2-D fix, or a 3-D fix.
            </summary>
            <value>A value from the <strong>FixMethod</strong> enumeration.</value>
            <seealso cref="P:DotSpatial.Positioning.FixMethodEventArgs.FixMethod">FixMethod Property (Receiver Class)</seealso>
            <remarks>A device is considered to have a "2-D" fix if there are three satellites
            involved in the fix.  A 2-D fix means that position information is available, but not
            altitude.  If at least four satellites are fixed, both position and altitude are known,
            and the fix is considered 3-D.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.FixLikelihoodEventArgs">
            <summary>
            Represents information about the likelihood that a fix will be sustained (or obtained) when a when a fix-related event is raised.
            </summary>
            <example>This example demonstrates how to use this class when raising an event.
              <code lang="VB">
            ' Declare a new event
            Dim MyFixLikelihoodEvent As FixLikelihoodEventHandler
            ' Create a FixLikelihood signifying a 3-D fix (both position and altitude)
            Dim MyFixLikelihood As FixLikelihood = FixLikelihood.Fix3D
            Sub Main()
            ' Raise our custom event
            RaiseEvent MyFixLikelihoodEvent(Me, New FixLikelihoodEventArgs(MyFixLikelihood))
            End Sub
              </code>
              <code lang="C#">
            // Declare a new event
            FixLikelihoodEventHandler MyFixLikelihoodEvent;
            // Create a FixLikelihood signifying a 3-D fix (both position and altitude)
            FixLikelihood MyFixLikelihood = FixLikelihood.Fix3D;
            void Main()
            {
            // Raise our custom event
            MyFixLikelihoodEvent(this, New FixLikelihoodEventArgs(MyFixLikelihood));
            }
              </code>
              </example>
            <remarks>This object is used primarily by the FixLikelihoodChanged
            event of the Receiver class to provide notification when
            combined satellite radio signal strength has changed.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixLikelihoodEventArgs._fixLikelihood">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.FixLikelihoodEventArgs.#ctor(DotSpatial.Positioning.FixLikelihood)">
            <summary>
            Creates a new instance with the specified fix Likelihood.
            </summary>
            <param name="fixLikelihood">The fix likelihood.</param>
        </member>
        <member name="P:DotSpatial.Positioning.FixLikelihoodEventArgs.FixLikelihood">
            <summary>
            Indicates if the GPS device has no fix, a 2-D fix, or a 3-D fix.
            </summary>
            <value>A value from the <strong>FixLikelihood</strong> enumeration.</value>
            <remarks>A device is considered to have a "2-D" fix if there are three satellites
            involved in the fix.  A 2-D fix means that position information is available, but not
            altitude.  If at least four satellites are fixed, both position and altitude are known,
            and the fix is considered 3-D.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.FixModeEventArgs">
            <summary>
            Represents information about whether the fix method is chosen automatically when a fix-related event is raised.
            </summary>
            <example>This example demonstrates how to use this class when raising an event.
              <code lang="VB">
            ' Declare a new event
            Dim MyFixModeEvent As EventHandler
            ' Create a FixMode signifying that the fix method is being chosen automatically
            Dim MyFixMode As FixMode = FixMode.Automatic
            Sub Main()
            ' Raise our custom event
            RaiseEvent MyFixModeEvent(Me, New FixModeEventArgs(MyFixMode))
            End Sub
              </code>
              <code lang="C#">
            // Declare a new event
            EventHandler MyFixModeEvent;
            // Create a FixMode signifying that the fix method is being chosen automatically
            FixMode MyFixMode = FixMode.Automatic;
            void Main()
            {
            // Raise our custom event
            MyFixModeEvent(this, New FixModeEventArgs(MyFixMode));
            }
              </code>
              </example>
            <remarks>This object is used primarily by the FixModeChanged
            event of the Receiver class to provide notification when
            the receiver switches fix modes from <strong>Automatic</strong> to <strong>Manual</strong> or vice-versa.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixModeEventArgs._fixMode">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.FixModeEventArgs.#ctor(DotSpatial.Positioning.FixMode)">
            <summary>
            Creates a new instance with the specified fix method.
            </summary>
            <param name="fixMode">The fix mode.</param>
        </member>
        <member name="P:DotSpatial.Positioning.FixModeEventArgs.FixMode">
            <summary>
            Indicates if the GPS device is choosing the <see cref="T:DotSpatial.Positioning.FixMethod">fix method</see> automatically.
            </summary>
            <value>A value from the <strong>FixMode</strong> enumeration.</value>
            <seealso cref="P:DotSpatial.Positioning.FixModeEventArgs.FixMode">FixMode Property (Receiver Class)</seealso>
            <remarks>A vast majority of GPS devices calculate the fix mode automatically.  This is because
            the process of determining the fix mode is a simple process: if there are three fixed satellites,
            a 2-D fix is obtained; if there are four or more fixed satellites, a 3-D fix is in progress. Any
            less than three satellites means that no fix is possible.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.FixQualityEventArgs">
            <summary>
            Represents information about the type of fix obtained when fix-related event is raised.
            </summary>
            <example>This example demonstrates how to use this class when raising an event.
              <code lang="VB">
            ' Declare a new event
            Dim MyFixQualityEvent As EventHandler
            ' Create a FixQuality signifying that a differential GPS fix is obtained
            Dim MyFixQuality As FixQuality = FixQuality.DifferentialGpsFix
            Sub Main()
            ' Raise our custom event
            RaiseEvent MyFixQualityEvent(Me, New FixQualityEventArgs(MyFixQuality))
            End Sub
              </code>
              <code lang="C#">
            // Declare a new event
            EventHandler MyFixQualityEvent;
            // Create a FixQuality signifying that a differential GPS fix is obtained
            FixQuality MyFixQuality = FixQuality.DifferentialGpsFix;
            void Main()
            {
            // Raise our custom event
            MyFixQualityEvent(this, New FixQualityEventArgs(MyFixQuality));
            }
              </code>
              </example>
            <remarks>This object is used primarily by the FixQualityChanged
            event of the Receiver class to provide notification when
            the receiver switches fix modes from <strong>Automatic</strong> to <strong>Manual</strong> or vice-versa.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.FixQualityEventArgs._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.FixQualityEventArgs.#ctor(DotSpatial.Positioning.FixQuality)">
            <summary>
            Creates a new instance with the specified fix quality measurement.
            </summary>
            <param name="fixQuality">The fix quality.</param>
        </member>
        <member name="P:DotSpatial.Positioning.FixQualityEventArgs.FixQuality">
            <summary>
            Indicates whether the current fix involves satellites and/or DGPS/WAAS ground stations.
            </summary>
            <value>A value from the <strong>FixQuality</strong> enumeration.</value>
        </member>
        <member name="T:DotSpatial.Positioning.PrecisionFilter">
            <summary>
            Kalman filter for improved positioning
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PrecisionFilter._defaultFilter">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PrecisionFilter.Initialize(DotSpatial.Positioning.Position)">
            <summary>
            Initialise the filter from a specified Position
            </summary>
            <param name="gpsPosition">The GPS position.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PrecisionFilter.Initialize(DotSpatial.Positioning.Position3D)">
            <summary>
            Initialise the filter from a specified Position3D
            </summary>
            <param name="gpsPosition">The GPS position.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PrecisionFilter.Filter(DotSpatial.Positioning.Position)">
            <summary>
            Filter the Position
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PrecisionFilter.Filter(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Return filtered position from specified parameters
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="bearing">The bearing.</param>
            <param name="speed">The speed.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PrecisionFilter.Filter(DotSpatial.Positioning.Position3D)">
            <summary>
            Return a filtered Position3d
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PrecisionFilter.Filter(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Return a filtered Position3D from the specified parameters
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="bearing">The bearing.</param>
            <param name="speed">The speed.</param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.Default">
            <summary>
            The default Kalman filter
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.ObservedPosition">
            <summary>
            The obsedrved position
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.FilteredPosition">
            <summary>
            The filtered position
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.ObservedLocation">
            <summary>
            The observed location
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.FilteredLocation">
            <summary>
            The filtered location
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.IsInitialized">
            <summary>
            Is the precision filter enabled
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PrecisionFilter.Delay">
            <summary>
            Gets the delay
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GpggaSentence">
            <summary>
            $GPGGA, hhmmss.ss, ddmm.mmmm, n, dddmm.mmmm, e, q, ss, y.y, a.a, z, g.g, z, t.t, iii*CC
            http://aprs.gids.nl/nmea/#gga
            Global Positioning System Fix Data. Time, location and fix related data for a GPS receiver.
            eg2. $--GGA, hhmmss.ss, llll.ll, a, yyyyy.yy, a, x, xx, x.x, x.x, M, x.x, M, x.x, xxxx
            hhmmss.ss = UTC of location
            llll.ll = latitude of location
            a = N or S
            yyyyy.yy = Longitude of location
            a = E or W
            x = GPS Quality indicator (0=no fix, 1=GPS fix, 2=Dif. GPS fix)
            xx = number of satellites in use
            x.x = horizontal dilution of precision
            x.x = Antenna altitude above mean-sea-level
            M = units of antenna altitude, meters
            x.x = Geoidal separation
            M = units of geoidal separation, meters
            x.x = Age of Differential GPS data (seconds)
            xxxx = Differential reference station ID
            eg3. $GPGGA, hhmmss.ss, hhmm.mm, i, hhhmm.mm, i, f, ss, x.x, x.x, M, x.x, M, x.x, xxxx*hh
            0    = Time in UTC
            1    = Latitude
            2    = N or S
            3    = Longitude
            4    = E or W
            5    = GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
            6    = Number of satellites in use [not those in view]
            7    = Horizontal dilution of precision
            8    = Antenna altitude above/below mean sea level (geoid)
            9    = Meters  (Antenna height unit)
            10   = Geoidal separation (Diff. between WGS-84 earth ellipsoid and
            mean sea level.  -=geoid is below WGS-84 ellipsoid)
            11   = Meters  (Units of geoidal separation)
            12   = Age in seconds since last update from diff. reference station
            13   = Diff. reference station ID#
            14   = Checksum
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NmeaSentence">
            <summary>
            Represents a single line of NMEA GPS data.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaSentence.NmeaCultureInfo">
            <summary>
            Represents the culture used to process all NMEA GPS data, including numbers and dates.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.#ctor(System.String)">
            <summary>
            Creates a new instance from the specified string.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Creates a new instance from known values.
            </summary>
            <param name="sentence">A <strong>String</strong> containing the entire text of the sentence.</param>
            <param name="commandWord">A <strong>String</strong>, the first word of the sentence.</param>
            <param name="words">A <strong>String</strong> array, the comma-separated strings between the command word and checksum.</param>
            <param name="validChecksum">A <strong>String</strong>, the correct checksum for the sentence.</param>
            <remarks>This constructor is typically used when it some processing of the sentence has already occurred.
            GPS.NET performs an analysis of the sentence to determine its type.  For the sake of speed, processed information can
            be preserved using this constructor.  To process an entire sentence, use the entire NMEA string as a constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.SetSentence(System.String)">
            <summary>
            Sets the sentence.
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.AppendChecksum">
            <summary>
            Calculates and adds a checksum to the end of the sentence.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.ToByteArray">
            <summary>
            Converts the packet into an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentence.Equals(DotSpatial.Positioning.NmeaSentence)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentence.Words">
            <summary>
            Returns the body of the sentence split by commas into strings.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentence.CommandWord">
            <summary>
            Returns the first word of the sentence which indicates its purpose.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentence.ExistingChecksum">
            <summary>
            Returns the current checksum of the sentence.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentence.CorrectChecksum">
            <summary>
            Returns the checksum which matches the content of the sentence.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentence.Sentence">
            <summary>
            Returns a string representing the entire NMEA sentence.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentence.IsValid">
            <summary>
            Returns whether the pack data is well-formed.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IPositionSentence">
            <summary>
            Represents an NMEA sentence which contains latitude and longitude values.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IPositionSentence.Position">
            <summary>
            Represents an NMEA sentence which contains a position.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IUtcTimeSentence">
            <summary>
            Represents an NMEA sentence which contains time in UTC.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IUtcTimeSentence.UtcTime">
            <summary>
            Gets the time in UTC from the IUtcTimeSentence
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IAltitudeSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IAltitudeSentence.Altitude">
            <summary>
            The Altitude
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IGeoidalSeparationSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IGeoidalSeparationSentence.GeoidalSeparation">
            <summary>
            The Geoidal Separation
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IDifferentialGpsSentence">
            <summary>
            Represents an NMEA sentence which contains differential GPS information.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IDifferentialGpsSentence.DifferentialGpsStationID">
            <summary>
            Gets the Differential Gps Station ID
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IDifferentialGpsSentence.DifferentialGpsAge">
            <summary>
            Gets the age of the Differential Gps
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IFixQualitySentence">
            <summary>
            Represents an NMEA sentence which describes how the fix is being obtained.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IFixQualitySentence.FixQuality">
            <summary>
            The Fix Quality
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IHorizontalDilutionOfPrecisionSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IHorizontalDilutionOfPrecisionSentence.HorizontalDilutionOfPrecision">
            <summary>
            The Horizontal Dilution of Precision
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IFixedSatelliteCountSentence">
            <summary>
            Represents an NMEA sentence which returns the number of GPS satellites involved in the current fix.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IFixedSatelliteCountSentence.FixedSatelliteCount">
            <summary>
            The Fixed Satellite Count
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._utcTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._fixedSatelliteCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._altitude">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._geoidalSeparation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._horizontalDilutionOfPrecision">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._differentialGpsStationID">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggaSentence._differentialGpsAge">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpggaSentence.#ctor(System.String)">
            <summary>
            Creates a new GpggaSentence
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpggaSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GpggaSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpggaSentence.#ctor(System.TimeSpan,DotSpatial.Positioning.Position,DotSpatial.Positioning.FixQuality,System.Int32,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance,System.TimeSpan,System.Int32)">
            <summary>
            Creates a new sentence
            </summary>
            <param name="utcTime">The UTC time.</param>
            <param name="position">The position.</param>
            <param name="fixQuality">The fix quality.</param>
            <param name="trackedSatelliteCount">The tracked satellite count.</param>
            <param name="horizontalDilutionOfPrecision">The horizontal dilution of precision.</param>
            <param name="altitude">The altitude.</param>
            <param name="geoidalSeparation">The geoidal separation.</param>
            <param name="differentialGpsAge">The differential GPS age.</param>
            <param name="differentialGpsStationID">The differential GPS station ID.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpggaSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.Position">
            <summary>
            Represents an NMEA sentence which contains a position.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.UtcTime">
            <summary>
            Gets the time in UTC from the IUtcTimeSentence
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.Altitude">
            <summary>
            The Altitude
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.HorizontalDilutionOfPrecision">
            <summary>
            The Horizontal Dilution of Precision
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.GeoidalSeparation">
            <summary>
            The Geoidal Separation
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.FixQuality">
            <summary>
            The Fix Quality
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.DifferentialGpsStationID">
            <summary>
            The integer ID of the GPS Station
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.DifferentialGpsAge">
            <summary>
            Differntial GPS Age
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggaSentence.FixedSatelliteCount">
            <summary>
            The Fixed Satellite Count
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GpggkSentence">
            <summary>
            $--GGK Header including Talker ID
            hhmmss.ss UTC time of location
            mmddyy    UTC date
            llll.ll(Latitude)
            a(Hemisphere, North Or South)
            yyyyy.yy(Longitude)
            a(East Or West)
            x GPS quality indicator
            0 = Fix not available or invalid
            1 = No real-time location, navigation fix
            2 = Real-time location, ambiguities not fixed
            3 = Real-time location, ambiguities fixed
            xx Number of satellites in use, 00 to 12.
            x.x(GDOP)
            EHT Ellipsoidal height
            x.x Altitude of location marker as local ellipsoidal height. If the local ellipsoidal
            height is not available, the WGS 1984 ellipsoidal height will be exported.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IUtcDateTimeSentence">
            <summary>
            Represents an NMEA sentence which contains date and time in UTC.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IUtcDateTimeSentence.UtcDateTime">
            <summary>
            Represents an NMEA sentence which contains date and time in UTC.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IPositionDilutionOfPrecisionSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IPositionDilutionOfPrecisionSentence.PositionDilutionOfPrecision">
            <summary>
            The Position Dilution of Precision (PDOP)
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IAltitudeAboveEllipsoidSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IAltitudeAboveEllipsoidSentence.AltitudeAboveEllipsoid">
            <summary>
            The Altitude Above Ellipsoid
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggkSentence._utcDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggkSentence._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggkSentence._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggkSentence._meanDilutionOfPrecision">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpggkSentence._altitudeAboveEllipsoid">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpggkSentence.#ctor(System.String)">
            <summary>
            Creates a GpggkSentence from the specified string
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpggkSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GpggkSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpggkSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggkSentence.Position">
            <summary>
            Represents an NMEA sentence which contains a position.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggkSentence.FixQuality">
            <summary>
            The Fix Quality
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggkSentence.PositionDilutionOfPrecision">
            <summary>
            The Position Dilution of Precision (PDOP)
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggkSentence.AltitudeAboveEllipsoid">
            <summary>
            The Altitude Above Ellipsoid
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpggkSentence.UtcDateTime">
            <summary>
            Represents an NMEA sentence which contains date and time in UTC.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GpgllSentence">
            <summary>
            $GPGLL
            Geographic Position, Latitude / Longitude and time.
            http://aprs.gids.nl/nmea/#gll
            eg1. $GPGLL, 3751.65, S, 14507.36, E*77
            eg2. $GPGLL, 4916.45, N, 12311.12, W, 225444, A
            4916.46, N    Latitude 49 deg. 16.45 min. North
            12311.12, W   Longitude 123 deg. 11.12 min. West
            225444       Fix taken at 22:54:44 UTC
            A            Data valid
            eg3. $GPGLL, 5133.81, N, 00042.25, W*75
            1    2     3    4 5
            1    5133.81   Current latitude
            2    N         North/South
            3    00042.25  Current longitude
            4    W         East/West
            5    *75       checksum
            $--GLL, lll.ll, a, yyyyy.yy, a, hhmmss.ss, A
            llll.ll = Latitude of location
            a = N or S
            yyyyy.yy = Longitude of location
            a = E or W
            hhmmss.ss = UTC of location
            A = status: A = valid data
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IFixStatusSentence">
            <summary>
            Represents an NMEA sentence which contains whether a fix is currently acquired.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IFixStatusSentence.FixStatus">
            <summary>
            The Fix Status
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgllSentence._utcTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgllSentence._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgllSentence._fixStatus">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpgllSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GpgllSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgllSentence.#ctor(System.String)">
            <summary>
            Creates a GpgllSentence from the specified string
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgllSentence.#ctor(DotSpatial.Positioning.Position,System.TimeSpan,DotSpatial.Positioning.FixStatus)">
            <summary>
            Creates a GpgllSentence from the specified parameters
            </summary>
            <param name="position">The position.</param>
            <param name="utcTime">The UTC time.</param>
            <param name="fixStatus">The fix status.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgllSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgllSentence.UtcTime">
            <summary>
            Gets the time in UTC from the IUtcTimeSentence
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgllSentence.Position">
            <summary>
            Represents an NMEA sentence which contains a position.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgllSentence.FixStatus">
            <summary>
            The Fix Status
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GpgsaSentence">
            <summary>
            $GPGSA
            GPS DOP and active satellites
            eg1. $GPGSA, A, 3, ,, ,, ,16, 18, ,22, 24, ,, 3.6, 2.1, 2.2*3C
            $GPGSA, A, 1, ,, ,, ,, ,, ,, ,, 6, 6, 6
            eg2. $GPGSA, A, 3, 19, 28, 14, 18, 27, 22, 31, 39, ,, ,, 1.7, 1.0, 1.3*35
            1    = Method:
            M=Manual, forced to operate in 2D or 3D
            A=Automatic, 3D/2D
            2    = Mode:
            1=Fix not available
            2=2D
            3=3D
            3-14 = IDs of SVs used in position fix (null for unused fields)
            15   = PDOP
            16   = HDOP
            17   = VDOP
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IFixMethodSentence">
            <summary>
            Represents an NMEA sentence which contains the method used to acquire a fix.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IFixMethodSentence.FixMethod">
            <summary>
            The Fix Method
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IFixModeSentence">
            <summary>
            Represents an NMEA sentence which describes the current fix.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IFixModeSentence.FixMode">
            <summary>
            Gets the fix mode
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IFixedSatellitesSentence">
            <summary>
            Represents an NMEA sentence which contains a list of fixed GPS satellites.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IFixedSatellitesSentence.FixedSatellites">
            <summary>
            the list of FixedSatellites
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IVerticalDilutionOfPrecisionSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IVerticalDilutionOfPrecisionSentence.VerticalDilutionOfPrecision">
            <summary>
            The Vertical Dilution of Precision
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsaSentence._fixMethod">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsaSentence._fixMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsaSentence._fixedSatellites">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsaSentence._positionDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsaSentence._horizontalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsaSentence._verticalDop">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsaSentence.#ctor(System.String)">
            <summary>
            Creates a GpgsaSentence from the specified string
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsaSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GpgsaSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsaSentence.#ctor(DotSpatial.Positioning.FixMode,DotSpatial.Positioning.FixMethod,System.Collections.Generic.IEnumerable{DotSpatial.Positioning.Satellite},DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Creates a new GpgsaSentence
            </summary>
            <param name="fixMode">The fix mode.</param>
            <param name="fixMethod">The fix method.</param>
            <param name="satellites">The satellites.</param>
            <param name="positionDilutionOfPrecision">The position dilution of precision.</param>
            <param name="horizontalDilutionOfPrecision">The horizontal dilution of precision.</param>
            <param name="verticalDilutionOfPrecision">The vertical dilution of precision.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsaSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsaSentence.FixedSatellites">
            <summary>
            the list of FixedSatellites
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsaSentence.FixMethod">
            <summary>
            The Fix Method
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsaSentence.PositionDilutionOfPrecision">
            <summary>
            The Position Dilution of Precision (PDOP)
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsaSentence.VerticalDilutionOfPrecision">
            <summary>
            The Vertical Dilution of Precision
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsaSentence.HorizontalDilutionOfPrecision">
            <summary>
            The Horizontal Dilution of Precision
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsaSentence.FixMode">
            <summary>
            Gets the fix mode
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GpgsvSentence">
            <summary>
            Represents a $GPGSV sentence describing the location and signal strength of GPS
            satellites.
            </summary>
            <remarks>This sentence is used to determine the location of GPS satellites relative
            to the current location, as well as to indicate the strength of a satellite's radio
            signal.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.ISatelliteCollectionSentence">
            <summary>
            Represents an NMEA sentence which contains GPS satellite information.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.ISatelliteCollectionSentence.Satellites">
            <summary>
            The Satellites
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsvSentence._totalMessageCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsvSentence._currentMessageNumber">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsvSentence._satellitesInView">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpgsvSentence._satellites">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsvSentence.#ctor(System.String)">
            <summary>
            Creates a GPSV sentence instance from the specified string
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsvSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GpgsvSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsvSentence.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{DotSpatial.Positioning.Satellite})">
            <summary>
            Creates a GPSV sentence instance from the specified parameters describing the location and signal strength of GPS satellites
            </summary>
            <param name="totalMessageCount">The total message count.</param>
            <param name="currentMessageNumber">The current message number.</param>
            <param name="satellitesInView">The satellites in view.</param>
            <param name="satellites">The satellites.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsvSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpgsvSentence.FromSatellites(System.Collections.Generic.IList{DotSpatial.Positioning.Satellite})">
            <summary>
            Returns a collection of $GPGSV sentences fully describing the specified
            collection of satellites.
            </summary>
            <param name="satellites">The satellites.</param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsvSentence.Satellites">
            <summary>
            Returns a collection of <strong>Satellite</strong> objects describing current
            satellite information.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsvSentence.TotalMessageCount">
            <summary>
            Returns the total number of $GPGSV sentence in a sequence.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsvSentence.CurrentMessageNumber">
            <summary>
            Returns the current message index when the sentence is one of several
            messages.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpgsvSentence.SatellitesInView">
            <summary>
            Returns the number of satellites whose signals are detected by the GPS
            device.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GprmcSentence">
            <summary>
            Represents the "recommended minimum" GPS sentence.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IBearingSentence">
            <summary>
            Represents an NMEA sentence which contains the direction of travel.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IBearingSentence.Bearing">
            <summary>
            the Bearing
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.ISpeedSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.ISpeedSentence.Speed">
            <summary>
            The Speed
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.IMagneticVariationSentence">
            <summary>
            Represents an NMEA sentence which contains
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.IMagneticVariationSentence.MagneticVariation">
            <summary>
            The Magnetic Variation
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GprmcSentence._utcDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GprmcSentence._fixStatus">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GprmcSentence._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GprmcSentence._speed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GprmcSentence._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GprmcSentence._magneticVariation">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GprmcSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GprmcSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GprmcSentence.#ctor(System.String)">
            <summary>
            Creates a GprmcSentence from the specified string
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GprmcSentence.#ctor(System.DateTime,System.Boolean,DotSpatial.Positioning.Position,DotSpatial.Positioning.Speed,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Longitude)">
            <summary>
            Creates a GprmcSentence from the specified parameters
            </summary>
            <param name="utcDateTime">The UTC date time.</param>
            <param name="isFixAcquired">if set to <c>true</c> [is fix acquired].</param>
            <param name="position">The position.</param>
            <param name="speed">The speed.</param>
            <param name="bearing">The bearing.</param>
            <param name="magneticVariation">The magnetic variation.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GprmcSentence.OnSentenceChanged">
            <summary>
            Called when [sentence changed].
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GprmcSentence.Position">
            <summary>
            Represents an NMEA sentence which contains a position.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GprmcSentence.UtcDateTime">
            <summary>
            Represents an NMEA sentence which contains date and time in UTC.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GprmcSentence.Bearing">
            <summary>
            the Bearing
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GprmcSentence.Speed">
            <summary>
            The Speed
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GprmcSentence.MagneticVariation">
            <summary>
            The Magnetic Variation
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GprmcSentence.FixStatus">
            <summary>
            The Fix Status
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GpvtgSentence">
            <summary>
            Track made good and ground speed sentence
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpvtgSentence._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpvtgSentence._magneticVariation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GpvtgSentence._speed">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GpvtgSentence.#ctor(System.String)">
            <summary>
            Creates a track made good and ground speed sentence instance from the specified sentence
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpvtgSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GpvtgSentence"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GpvtgSentence.OnSentenceChanged">
            <summary>
            Overrides OnSentanceChanged for the GPVTGSentence
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpvtgSentence.Bearing">
            <summary>
            the Bearing
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpvtgSentence.Speed">
            <summary>
            The Speed
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GpvtgSentence.MagneticVariation">
            <summary>
            The Magnetic Variation
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Interpreter">
            <summary>
            Represents a base class for designing a GPS data interpreter.
            </summary>
            <seealso cref="M:DotSpatial.Positioning.Interpreter.OnReadPacket">OnReadPacket Method</seealso>
            <remarks><para>This class serves as the base class for all GPS data interpreters, regardless
            of the protocol being used. For example, the <strong>NmeaInterpreter</strong> class
            inherits from this class to process NMEA-0183 data from any data source. This class
            provides basic functionality to start, pause, resume and stop the processing of GPS
            data, and provides management of a thread used to process the next set of incoming
            data.</para>
              <para>Inheritors should override the <strong>OnReadPacket</strong> event and
            provide functionality to read the next packet of data from the underlying stream.
            All raw GPS data must be provided in the form of a <strong>Stream</strong> object,
            and the method should read and process only a single packet of data.</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._utcDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._dateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._geoidalSeparation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._altitude">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._altitudeAboveEllipsoid">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._speed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._magneticVariation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._fixStatus">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._fixMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._fixMethod">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._fixedSatelliteCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._isFixRequired">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._maximumHorizontalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._maximumVerticalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._horizontalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._verticalDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._meanDop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._satellites">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._filter">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._isFilterEnabled">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._isRunning">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._device">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._threadPriority">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._parsingThread">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._pausedWaitHandle">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._maximumReconnectionAttempts">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._reconnectionAttemptCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._recordingStream">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._isDisposed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._allowAutomaticReconnection">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._positionChangedAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._commandTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter._readTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter.SyncRoot">
            <summary>
            Represents a synchronization object which is locked during state changes.
            </summary>
            <value>An <strong>Object</strong>.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Interpreter.RecordingSyncRoot">
            <summary>
            Represents a synchronization object which is locked during state changes to recording.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnStarting">
            <summary>
            Occurs immediately before a connection is attempted.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnStarted">
            <summary>
            Occurs immediately before data is processed.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnStopping">
            <summary>
            Occurs immediately before the interpreter is shut down.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnStopped">
            <summary>
            Occurs immediately after the interpreter has been shut down.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnConnectionLost(System.Exception)">
            <summary>
            Occurs when a connection to a GPS device is suddenly lost.
            </summary>
            <param name="ex">An <strong>Exception</strong> which further explains why the connection was lost.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnPaused">
            <summary>
            Occurs when the interpreter has temporarily stopped processing data.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnResumed">
            <summary>
            Occurs when the interpreter is no longer paused.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnExceptionOccurred(System.Exception)">
            <summary>
            Occurs when an exception is trapped by the interpreter's thread.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Start">
            <summary>
            Starts processing GPS data using any available GPS device.
            </summary>
            <remarks>This method is used to begin processing GPS data.  If no GPS devices are known, GPS.NET will search for GPS devices and use the
            first device it finds.  If no device can be found, an exception is raised.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Start(DotSpatial.Positioning.Device)">
            <summary>
            Starts processing GPS data from the specified stream.
            </summary>
            <param name="device">A device object providing GPS data to process.</param>
            <remarks>This method will start the <strong>Interpreter</strong> using a separate thread.
            The <strong>OnReadPacket</strong> is then called repeatedly from that thread to process
            incoming data. The Pause, Resume and Stop methods are typically called after this
            method to change the interpreter's behavior. Finally, a call to
            <strong>Dispose</strong> will close the underlying stream, stop all processing, and
            shut down the processing thread.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.StartRecording(System.IO.Stream)">
            <summary>
            Begins recording all received data to the specified stream.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.StopRecording">
            <summary>
            Causes the interpreter to no longer record incoming GPS data.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Stop">
            <summary>
            Stops all processing of GPS data.
            </summary>
            <remarks>This method is used some time after a call to the <strong>Start</strong> method.
            When called, the GPS processing thread is immediately shut down and all processing
            stops.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Pause">
            <summary>
            Temporarily halts processing of GPS data.
            </summary>
            <remarks>This method will suspend the processing of GPS data, but will keep the thread and
            raw GPS data stream open. This method is intended as a temporary means of stopping
            processing. An interpreter should not be paused for an extended period of time because
            it can cause a backlog of GPS data</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Resume">
            <summary>
            Un-pauses the interpreter from a previously paused state.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Initialize">
            <summary>
            Resets the interpreter to it's default values.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.DoInitialize">
            <summary>
            Does the initialize.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetDateTimes(System.DateTime)">
            <summary>
            Updates the UTC and local date/time to the specified UTC value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetFixQuality(DotSpatial.Positioning.FixQuality)">
            <summary>
            Updates the fix quality to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetFixMode(DotSpatial.Positioning.FixMode)">
            <summary>
            Updates the fix mode to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetFixMethod(DotSpatial.Positioning.FixMethod)">
            <summary>
            Updates the fix method to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetHorizontalDilutionOfPrecision(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Updates the precision as it relates to latitude and longitude.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetVerticalDilutionOfPrecision(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Updates the precision as it relates to altitude.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetMeanDilutionOfPrecision(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Updates the precision as it relates to latitude, longitude and altitude.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetFixStatus(DotSpatial.Positioning.FixStatus)">
            <summary>
            Updates the fix status to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetMagneticVariation(DotSpatial.Positioning.Longitude)">
            <summary>
            Updates the difference between Magnetic North and True North.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetPosition(DotSpatial.Positioning.Position)">
            <summary>
            Updates the current location on Earth's surface.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetBearing(DotSpatial.Positioning.Azimuth)">
            <summary>
            Updates the current direction of travel.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.AppendSatellites(System.Collections.Generic.IList{DotSpatial.Positioning.Satellite})">
            <summary>
            Updates the list of known GPS satellites.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetFixedSatelliteCount(System.Int32)">
            <summary>
            Sets the fixed satellite count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetFixedSatellites(System.Collections.Generic.IList{DotSpatial.Positioning.Satellite})">
            <summary>
            Updates the list of fixed GPS satellites.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetSpeed(DotSpatial.Positioning.Speed)">
            <summary>
            Updates the current rate of travel.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetGeoidalSeparation(DotSpatial.Positioning.Distance)">
            <summary>
            Updates the distance between the ellipsoid surface and the current altitude.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetAltitude(DotSpatial.Positioning.Distance)">
            <summary>
            Updates the current distance above sea level.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.SetAltitudeAboveEllipsoid(DotSpatial.Positioning.Distance)">
            <summary>
            Updates the current distance above the ellipsoid surface.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnReadPacket">
            <summary>
            Occurs when new data should be read from the underlying device.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.OnDeviceChanged">
            <summary>
            Occurs when the interpreter is using a different device for raw data.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.ParsingThreadProc">
            <summary>
            Parsings the thread proc.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.Reset">
            <summary>
            Forces the current device to a closed state without disposing the underlying stream.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpreter.QueryReconnectAllowed">
            <summary>
            Determines if automatic reconnection is currently allowed, based on the values of
            <see cref="P:DotSpatial.Positioning.Interpreter.AllowAutomaticReconnection"/>, <see cref="P:DotSpatial.Positioning.Interpreter.MaximumReconnectionAttempts"/>, and <see cref="F:DotSpatial.Positioning.Interpreter._reconnectionAttemptCount"/>.
            If reconnection is allowed, then <see cref="F:DotSpatial.Positioning.Interpreter._reconnectionAttemptCount"/> is incremented after a short delay.
            </summary>
            <returns><see langword="true">True</see> if another reconnection attempt should be made; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.AltitudeChanged">
            <summary>
            Occurs when the current distance above sea level has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.AltitudeReceived">
            <summary>
            Occurs when a new altitude report has been received, even if the value has not changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.AltitudeAboveEllipsoidChanged">
            <summary>
            Occurs when the current distance above the ellipsoid has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.AltitudeAboveEllipsoidReceived">
            <summary>
            Occurs when a new altitude-above-ellipsoid report has been received, even if the value has not changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.BearingChanged">
            <summary>
            Occurs when the current direction of travel has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.BearingReceived">
            <summary>
            Occurs when a new bearing report has been received, even if the value has not changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.FixQualityChanged">
            <summary>
            Occurs when the fix quality has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.FixModeChanged">
            <summary>
            Occurs when the fix mode has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.FixMethodChanged">
            <summary>
            Occurs when the fix method has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.GeoidalSeparationChanged">
            <summary>
            Occurs when the geodal separation changes
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.UtcDateTimeChanged">
            <summary>
            Occurs when the GPS-derived date and time has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.DateTimeChanged">
            <summary>
            Occurs when the GPS-derived local time has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.FixAcquired">
            <summary>
            Occurs when at least three GPS satellite signals are available to calculate the current location.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.FixLost">
            <summary>
            Occurs when less than three GPS satellite signals are available.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.PositionChanged">
            <summary>
            Occurs when the current location on Earth has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.PositionReceived">
            <summary>
            Occurs when a new position report has been received, even if the value has not changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.MagneticVariationAvailable">
            <summary>
            Occurs when the magnetic variation for the current location becomes known.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.SpeedChanged">
            <summary>
            Occurs when the current rate of travel has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.SpeedReceived">
            <summary>
            Occurs when a new speed report has been received, even if the value has not changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.HorizontalDilutionOfPrecisionChanged">
            <summary>
            Occurs when precision as it relates to latitude and longitude has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.VerticalDilutionOfPrecisionChanged">
            <summary>
            Occurs when precision as it relates to altitude has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.MeanDilutionOfPrecisionChanged">
            <summary>
            Occurs when precision as it relates to latitude, longitude and altitude has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.SatellitesChanged">
            <summary>
            Occurs when GPS satellite information has changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.Starting">
            <summary>
            Occurs when the interpreter is about to start.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.Started">
            <summary>
            Occurs when the interpreter is now processing GPS data.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.Stopping">
            <summary>
            Occurs when the interpreter is about to stop.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.Stopped">
            <summary>
            Occurs when the interpreter has stopped processing GPS data.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.Paused">
            <summary>
            Occurs when the interpreter has temporarily stopped processing GPS data.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.Resumed">
            <summary>
            Occurs when the interpreter is no longer paused.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.ExceptionOccurred">
            <summary>
            Occurs when an exception has happened during processing.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.Interpreter.ConnectionLost">
            <summary>
            Occurs when the flow of GPS data has been suddenly interrupted.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.ReadTimeout">
            <summary>
            Controls the amount of time to wait for the next packet of GPS data to arrive.
            </summary>
            <value>The read timeout.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.CommandTimeout">
            <summary>
            Controls the amount of time allowed to perform a start, stop, pause or resume action.
            </summary>
            <value>The command timeout.</value>
            <remarks>The <strong>Interpreter</strong> class is multithreaded and is also thread-safe.  Still, however, in some rare cases,
            two threads may attempt to change the state of the interpreter at the same time.  Critical sections will allow both threads to
            succees whenever possible, but in the event of a deadlock, this property control how much time to allow before giving up.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Device">
            <summary>
            Returns the device providing raw GPS data to the interpreter.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.ThreadPriority">
            <summary>
            Controls the priority of the thread which processes GPS data.
            </summary>
            <value>The thread priority.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.DateTime">
            <summary>
            Returns the GPS-derived date and time, adjusted to the local time zone.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.UtcDateTime">
            <summary>
            Returns the GPS-derived date and time in UTC (GMT-0).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.HorizontalDilutionOfPrecision">
            <summary>
            Returns the current estimated precision as it relates to latitude and longitude.
            </summary>
            <remarks>Horizontal Dilution of Precision (HDOP) is the accumulated
            error of latitude and longitude coordinates in X and Y directions
            (displacement on the surface of the ellipsoid).</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.VerticalDilutionOfPrecision">
            <summary>
            Returns the current estimated precision as it relates to altitude.
            </summary>
            <remarks>Vertical Dilution of Precision (VDOP) is the accumulated
            error of latitude and longitude coordinates in the Z direction (measurement
            from the center of the ellipsoid).</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.FixMode">
            <summary>
            Returns the kind of fix acquired by the GPS device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.FixedSatelliteCount">
            <summary>
            Returns the number of satellites being used to calculate the current location.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.FixQuality">
            <summary>
            Returns the quality of the fix and what kinds of technologies are involved.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.IsFixRequired">
            <summary>
            Controls whether GPS data is ignored until a fix is acquired.
            </summary>
            <value><c>true</c> if this instance is fix required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.IsFixed">
            <summary>
            Returns whether a fix is currently acquired by the GPS device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.MagneticVariation">
            <summary>
            Returns the difference between magnetic North and True North.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Position">
            <summary>
            Returns the current location on Earth's surface.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.FixPrecisionEstimate">
            <summary>
            Returns the avereage precision tolerance based on the fix quality reported
            by the device.
            </summary>
            <remarks>This property returns the estimated error attributed to the device. To get
            a total error estimation, add the Horizontal or the Mean DOP to the
            FixPrecisionEstimate.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Speed">
            <summary>
            Returns the current rate of travel.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Altitude">
            <summary>
            Returns the current distance above sea level.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Bearing">
            <summary>
            Gets the current direction of travel as an Azimuth
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.MaximumHorizontalDilutionOfPrecision">
            <summary>
            Controls the largest amount of precision error allowed before GPS data is ignored.
            </summary>
            <value>The maximum horizontal dilution of precision.</value>
            <remarks>This property is important for commercial GPS softwaqre development because it helps the interpreter determine
            when GPS data reports are precise enough to utilize.  Live GPS data can be inaccurate by up to a factor of fifty, or nearly
            the size of an American football field!  As a result, setting a vlue for this property can help to reduce precision errors.
            When set, reports of latitude, longitude, speed, and bearing are ignored if precision is not at or below the set value.
            For more on Dilution of Precision and how to determine your precision needs, please refer to our online article here:
            http://dotspatial.codeplex.com/Articles/WritingApps2_1.aspx.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.MaximumReconnectionAttempts">
            <summary>
            Controls the maximum number of consecutive reconnection retries allowed.
            </summary>
            <value>The maximum reconnection attempts.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.MaximumVerticalDilutionOfPrecision">
            <summary>
            Controls the largest amount of precision error allowed before GPS data is ignored.
            </summary>
            <value>The maximum vertical dilution of precision.</value>
            <remarks>This property is important for commercial GPS softwaqre development because it helps the interpreter determine
            when GPS data reports are precise enough to utilize.  Live GPS data can be inaccurate by up to a factor of fifty, or nearly
            the size of an American football field!  As a result, setting a vlue for this property can help to reduce precision errors.
            When set, reports of altitude are ignored if precision is not at or below the set value.
            For more on Dilution of Precision and how to determine your precision needs, please refer to our online article here:
            http://dotspatial.codeplex.com/Articles/WritingApps2_1.aspx.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.IsFilterEnabled">
            <summary>
            Controls whether real-time GPS data is made more precise using a filter.
            </summary>
            <value><c>true</c> if this instance is filter enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Filter">
            <summary>
            Controls the technology used to reduce GPS precision error.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.AllowAutomaticReconnection">
            <summary>
            Controls whether the interpreter will try to automatically attempt to reconnect anytime a connection is lost.
            </summary>
            <value><c>true</c> if [allow automatic reconnection]; otherwise, <c>false</c>.</value>
            <remarks><para>Interpreters are able to automatically try to recover from connection failures.  When this property is set to <strong>True</strong>,
            the interpreter will detect a sudden loss of connection, then attempt to make a new connection to restore the flow of data.  If multiple GPS
            devices have been detected, any of them may be utilized as a "fail-over device."  Recovery attempts will continue repeatedly until a connection
            is restored, the interpreter is stopped, or the interpreter is disposed.</para>
              <para>For most applications, this property should be enabled to help improve the stability of the application.  In most cases, a sudden loss of
            data is only temporary, caused by a loss of battery power or when a wireless device moves too far out of range.</para></remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.Satellites">
            <summary>
            Returns a list of known GPS satellites.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.IsDisposed">
            <summary>
            Returns whether resources in this object has been shut down.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpreter.RecordingStream">
            <summary>
            Returns the stream used to output data received from the GPS device.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.KalmanSystemState">
            <summary>
            Represents the state of a KalmanFilter
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._interval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._lastObservation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._delay">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._deviceError">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._horizontalDOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._verticalDOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._errorState">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._ellipsoid">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._x">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._z">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._u">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._a">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._p">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._b">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._q">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._r">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanSystemState._h">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.#ctor(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.KalmanSystemState"/> struct.
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="meanDOP">The mean DOP.</param>
            <param name="ellipsoid">The ellipsoid.</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.#ctor(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.KalmanSystemState"/> struct.
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="ellipsoid">The ellipsoid.</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.#ctor(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid,DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.CartesianPoint,DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.KalmanSystemState"/> struct.
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="ellipsoid">The ellipsoid.</param>
            <param name="u">The u.</param>
            <param name="x">The x.</param>
            <param name="z">The z.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="h">The h.</param>
            <param name="p">The p.</param>
            <param name="q">The q.</param>
            <param name="r">The r.</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.ObservedLocation">
            <summary>
            The position reported by the GPS device
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.CorrectedLocation">
            <summary>
            The corrected position
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.Initialize(DotSpatial.Positioning.Position3D)">
            <summary>
            Initializes the state to the supplied observation.
            </summary>
            <param name="z">The z.</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.UpdateState(DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Position3D)">
            <summary>
            Updates the state.
            </summary>
            <param name="currentDOP">The current DOP.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanSystemState.UpdateState(DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed,DotSpatial.Positioning.Position3D)">
            <summary>
            Updates the state.
            </summary>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="bearing">The bearing.</param>
            <param name="speed">The speed.</param>
            <param name="z">The z.</param>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.Delay">
            <summary>
            Gets the delay.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.CurrentError">
            <summary>
            Gets the current error.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.ErrorState">
            <summary>
            Gets the state of the error.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.DeviceError">
            <summary>
            Gets the device error.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.HorizontalDilutionOfPrecision">
            <summary>
            Gets the horizontal dilution of precision.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.VerticalDilutionOfPrecision">
            <summary>
            Gets the vertical dilution of precision.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.IsInitialized">
            <summary>
            Determines if the Kalman state has an initial observation
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanSystemState.IntervalCount">
            <summary>
            Returns the number of intervals that have been applied to the Kalman state
            </summary>
            <remarks>The number of intervals is the number of observations accumulated in the state
            interval. The greater the number of observations, the more precise the filter
            becomes.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.KalmanFilter">
            <summary>
            A class that employs a Kalman Filter algorithm to reduce error in GPS
            precision.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.KalmanFilter._currentState">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.#ctor">
            <summary>
            Kalman Filter
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.#ctor(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Kalman Filter with parameters
            </summary>
            <param name="initialObservation">The initial observation.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="ellipsoid">The ellipsoid.</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <remarks>The results of a Kalman filter are cumulative. Each
            position processed changes the state of the filter, thus making
            the results more accurate with each subsequent position.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">Distance of the error</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="meanDOP">The mean dilution of precision</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">Distance of the error</param>
            <param name="meanDOP">The mean dilution of precision</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">Distance of the error</param>
            <param name="meanDOP">The mean dilution of precision</param>
            <param name="ellipsoid">The ellipsoid</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">Distance of the error</param>
            <param name="horizontalDOP">The horizontal dilution of precision</param>
            <param name="verticalDOP">The vertical dilution of precision</param>
            <param name="ellipsoid">The ellipsoid</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position3D)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <remarks>The results of a Kalman filter are cumulative. Each
            position processed changes the state of the filter, thus making
            the results more accurate with each subsequent position.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">A distance measure of device error</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="meanDOP">The mean dilution of precision</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">A distance measure of device error</param>
            <param name="meanDOP">The mean dilution of precision</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">A distance measure of device error</param>
            <param name="meanDOP">The mean dilution of precision</param>
            <param name="ellipsoid">The ellipsoid</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Initialize(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Initializes the Kalman Filter using an initial observation (position)
            </summary>
            <param name="gpsPosition">The position at which tfilter is to begin opperating.</param>
            <param name="deviceError">A distance measure of device error</param>
            <param name="horizontalDOP">The horizontal dilution of precision</param>
            <param name="verticalDOP">The vertical dilution of precision</param>
            <param name="ellipsoid">The ellipsoid</param>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position)">
            <summary>
            Filter the Position
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <returns></returns>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Returns the position
            </summary>
            <param name="gpsPosition">The gps Position</param>
            <param name="currentDOP">The current dilution of precision</param>
            <returns>A Position sturcture</returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Returns the position
            </summary>
            <param name="gpsPosition">The gps Position</param>
            <param name="currentDOP">The current dilution of precision</param>
            <param name="bearing">the directional azimuth</param>
            <param name="speed">the magnitude of the velocity</param>
            <returns>A Position sturcture</returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Return filtered position from specified parameters
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="bearing">The bearing.</param>
            <param name="speed">The speed.</param>
            <returns></returns>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position3D)">
            <summary>
            Returns the 3D position
            </summary>
            <param name="gpsPosition">The gps Position</param>
            <returns>A Position3D sturcture</returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Returns the 3D position
            </summary>
            <param name="gpsPosition">The gps Position</param>
            <param name="currentDOP">The current dilution of precision</param>
            <returns>A Position3D sturcture</returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Returns the 3D position
            </summary>
            <param name="gpsPosition">The gps Position</param>
            <param name="currentDOP">The current dilution of precision</param>
            <param name="bearing">the directional azimuth</param>
            <param name="speed">the magnitude of the velocity</param>
            <returns>A Position3D sturcture</returns>
        </member>
        <member name="M:DotSpatial.Positioning.KalmanFilter.Filter(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Return a filtered Position3D from the specified parameters
            </summary>
            <param name="gpsPosition">The GPS position.</param>
            <param name="deviceError">The device error.</param>
            <param name="horizontalDOP">The horizontal DOP.</param>
            <param name="verticalDOP">The vertical DOP.</param>
            <param name="bearing">The bearing.</param>
            <param name="speed">The speed.</param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.FilteredLocation">
            <summary>
            The filtered location
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.ObservedLocation">
            <summary>
            The observed location
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.Delay">
            <summary>
            Represents the latency between the current obervation and the filter state
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.IsInitialized">
            <summary>
            Returns a value indicationg whether or not the filter has been initialized.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.CurrentMeanDilutionOfPrecision">
            <summary>
            Returns the DilutionOfPrecision used in the most recent
            Kalman filter calculation.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.CurrentDeviceError">
            <summary>
            Returns the device error margin used in the most recent
            Kalman filter calculation.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.CurrentStateSampleCount">
            <summary>
            Retrns the of position samples that have been evaluated by
            the current Kalman state.
            </summary>
            <remarks>The results of a Kalman filter are cumulative. Each
            position processed changes the state of the filter, thus making
            the results more accurate with each subsequent position.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.ErrorState">
            <summary>
            Returns the accumulated average error accounted for the Kalman system.
            </summary>
            <remarks>The results of a Kalman filter are cumulative. Each
            position processed changes the state of the filter, thus making
            the results more accurate with each subsequent position.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.KalmanFilter.CurrentErrorEstimate">
            <summary>
            Returns the current precision estimate for the Kalman state
            </summary>
            <remarks>The results of a Kalman filter are cumulative. Each
            position processed changes the state of the filter, thus making
            the results more accurate with each subsequent position.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2">
            <summary>
            An internal class for hosting windows members.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.KERNEL32">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BTHNS_RESULT_DEVICE_CONNECTED">
            <summary>
            Device Connected
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BTHNS_RESULT_DEVICE_REMEMBERED">
            <summary>
            Device Remembered
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BTHNS_RESULT_DEVICE_AUTHENTICATED">
            <summary>
            Device Authenticated
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.NS_BTH">
            <summary>
            The namespace of Bluetooth, used by the WSAQUERYSET structure
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.ERROR_SUCCESS">
            <summary>
            The error code for success
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.DIGCF_DEFAULT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.DIGCF_PRESENT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.DIGCF_ALLCLASSES">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.DIGCF_PROFILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.DIGCF_DEVICEINTERFACE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.InvalidHandle">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="handle">A valid handle to an open object.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <param name="hDevice">A handle to the device on which the operation is to be performed. The device is typically a volume,
            directory, file, or stream. To retrieve a device handle, use the CreateFile function. For more information, see Remarks.</param>
            <param name="dwIoControlCode">The control code for the operation. This value identifies the specific operation to be
            performed and the type of device on which to perform it.  For a list of the control codes, see Remarks.
            The documentation for each control code provides usage details for the lpInBuffer, nInBufferSize, lpOutBuffer,
            and nOutBufferSize parameters.</param>
            <param name="lpInBuffer">A pointer to the input buffer that contains the data required to perform the operation. The format of this data depends on the value of the dwIoControlCode parameter.
            This parameter can be NULL if dwIoControlCode specifies an operation that does not require input data.</param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">A pointer to the output buffer that is to receive the data returned by the operation. The format of this data
            depends on the value of the dwIoControlCode parameter.
            This parameter can be NULL if dwIoControlCode specifies an operation that does not return data.</param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">The number of bytes returned in the out buffer.</param>
            <param name="lpOverlapped">A pointer to a callback for async commands.</param>
            <returns>If the operation completes successfully, the return value is nonzero.
            If the operation fails or is pending, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.UInt32,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream,
            directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            The function returns a handle that can be used to access the file or device for various types of I/O depending
            on the file or device and the flags and attributes specified.
            To perform this operation as a transacted operation, which results in a handle that can be used for transacted
            I/O, use the CreateFileTransacted function.
            </summary>
            <param name="lpFileName">The name of the file or device to be created or opened.</param>
            <param name="dwDesiredAccess">The requested access to the file or device, which can be summarized as read, write, both or neither zero).</param>
            <param name="dwShareMode">The requested sharing mode of the file or device, which can be read, write, both,
            delete, all of these, or none (refer to the following table). Access requests to attributes or extended
            attributes are not affected by this flag.</param>
            <param name="lpSecurityAttributes">A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but related data members:
            an optional security descriptor, and a Boolean value that determines whether the returned handle can be
            inherited by child processes.</param>
            <param name="dwCreationDisposition">An action to take on a file or device that exists or does not exist.</param>
            <param name="dwFlagsAndAttributes">The file or device attributes and flags, FILE_ATTRIBUTE_NORMAL being the most common default value for files.</param>
            <param name="hTemplateFile">A valid handle to a template file with the GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created.</param>
            <returns>A handle to the device.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.ReadFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Reads data from the specified file or input/output (I/O) device. Reads occur at the position
            specified by the file pointer if supported by the device.
            </summary>
            <param name="handle">A handle to the device (for example, a file, file stream, physical disk, volume, console buffer,
            tape drive, socket, communications resource, mailslot, or pipe).</param>
            <param name="lpBuffer">A pointer to the buffer that receives the data read from a file or device.</param>
            <param name="nNumberOfBytesToRead">The maximum number of bytes to be read.</param>
            <param name="lpNumberOfBytesRead">A pointer to the variable that receives the number of bytes read when using
            a synchronous hFile parameter. ReadFile sets this value to zero before doing any work or error checking.
            Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.</param>
            <param name="lpOverlapped">A pointer to an OVERLAPPED structure is required if the hFile parameter was opened
            with FILE_FLAG_OVERLAPPED, otherwise it can be NULL.</param>
            <returns>If the function succeeds, the return value is nonzero (TRUE).</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WriteFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Writes data to the specified file or input/output (I/O) device.
            This function is designed for both synchronous and asynchronous operation. For a similar function
            designed solely for asynchronous operation, see WriteFileEx.
            </summary>
            <param name="handle">A handle to the file or I/O device (for example, a file, file stream, physical disk, volume,
            console buffer, tape drive, socket, communications resource, mailslot, or pipe).</param>
            <param name="lpBuffer">A pointer to the buffer containing the data to be written to the file or device.</param>
            <param name="nNumberOfBytesToWrite">The number of bytes to be written to the file or device.</param>
            <param name="lpNumberOfBytesWritten">A pointer to the variable that receives the number of bytes written when using
            a synchronous hFile parameter. WriteFile sets this value to zero before doing any work or error checking.
            Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.</param>
            <param name="lpOverlapped">A pointer to an OVERLAPPED structure is required if the hFile parameter was opened
            with FILE_FLAG_OVERLAPPED, otherwise this parameter can be NULL.</param>
            <returns>If the function succeeds, the return value is nonzero (TRUE).</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetLocalTime(DotSpatial.Positioning.NativeMethods2.SystemTime@)">
            <summary>
            Sets the current local time and date.
            </summary>
            <param name="time">A pointer to a SYSTEMTIME structure that contains the new local date and time.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetSystemTime(DotSpatial.Positioning.NativeMethods2.SystemTime@)">
            <summary>
            Sets the current system time and date. The system time is expressed in Coordinated Universal Time (UTC).
            </summary>
            <param name="time">A pointer to a SYSTEMTIME structure that contains the new system date and time.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetupDiClassGuidsFromName(System.Text.StringBuilder,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            The SetupDiClassGuidsFromName function retrieves the GUID(s) associated with the specified class name.
            This list is built based on the classes currently installed on the system.
            </summary>
            <param name="className">Supplies the name of the class for which to retrieve the class GUID.</param>
            <param name="classGuidList">Supplies a pointer to an array to receive the list of GUIDs associated with the specified class name.</param>
            <param name="classGuidListSize">Supplies the number of GUIDs in the ClassGuidList array.</param>
            <param name="requiredSize">Supplies a pointer to a variable that receives the number of GUIDs associated with the class name.
            If this number is greater than the size of the ClassGuidList buffer, the number indicates how large
            the array must be in order to store all the GUIDs.</param>
            <returns>The function returns TRUE if it is successful. Otherwise, it returns FALSE and the logged
            error can be retrieved with a call to GetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.CM_Get_Parent(System.UInt32@,System.UInt32,System.Int32)">
            <summary>
            The CM_Get_Parent function obtains a device instance handle to the parent node of a
            specified device node (devnode) in the local machine's device tree.
            </summary>
            <param name="pdnDevInst">Caller-supplied pointer to the device instance handle to the
            parent node that this function retrieves. The retrieved handle is bound to the local machine.</param>
            <param name="dnDevInst">Caller-supplied device instance handle that is bound to the local machine.</param>
            <param name="ulFlags">Not used, must be zero.</param>
            <returns>If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns one of the
            CR_-prefixed error codes defined in Cfgmgr32.h.</returns>
            <remarks>For information about using a device instance handle that is bound to the local machine, see CM_Get_Child.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.CM_Get_Device_ID(System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance on the local machine.
            </summary>
            <param name="dnDevInst">Caller-supplied device instance handle that is bound to the local machine.</param>
            <param name="buffer">Address of a buffer to receive a device instance ID string. The required buffer size
            can be obtained by calling CM_Get_Device_ID_Size, then incrementing the received value to allow room for
            the string's terminating NULL.</param>
            <param name="bufferLen">Caller-supplied length, in characters, of the buffer specified by Buffer.</param>
            <param name="ulFlags">Not used, must be zero.</param>
            <returns>If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns one of the CR_-prefixed error codes defined in Cfgmgr32.h.</returns>
            <remarks>The function appends a NULL terminator to the supplied device instance ID string, unless the buffer is too
            small to hold the string. In this case, the function supplies as much of the identifier string as will fit
            into the buffer, and then returns CR_BUFFER_SMALL.
            For information about device instance IDs, see Device Identification Strings.
            For information about using device instance handles that are bound to the local machine, see CM_Get_Child.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetupDiDestroyDeviceInfoList(System.IntPtr)">
            <summary>
            The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.
            </summary>
            <param name="hDevInfo">A handle to the device information set to delete.</param>
            <returns>The function returns TRUE if it is successful. Otherwise, it returns FALSE and the
            logged error can be retrieved with a call to GetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetupDiGetClassDevs(System.Guid@,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            The SetupDiGetClassDevs function returns a handle to a device information set that contains requested
            device information elements for a local computer.
            </summary>
            <param name="classGuid">A pointer to the GUID for a device setup class or a device interface class.
            This pointer is optional and can be NULL. For more information about how to set ClassGuid, see the
            following Remarks section.</param>
            <param name="enumerator">A pointer to a NULL-terminated string that specifies:
            * An identifier (ID) of a Plug and Play (PnP) enumerator. This ID can either be the value's globally
            unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP value.
            Other examples of symbolic names for PnP values include "USB," "PCMCIA," and "SCSI".
            * A PnP device instance ID. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set
            in the Flags parameter.
            This pointer is optional and can be NULL. If an enumeration value is not used to select devices,
            set Enumerator to NULL
            For more information about how to set the Enumerator value, see the following Remarks section.</param>
            <param name="hwndParent">A handle to the top-level window to be used for a user interface that is
            associated with installing a device instance in the device information set. This handle is optional
            and can be NULL.</param>
            <param name="flags">A variable of type DWORD that specifies control options that filter the device information
            elements that are added to the device information set. This parameter can be a bitwise OR of zero
            or more of the following flags. For more information about combining these flags, see the following
            Remarks section.
            DIGCF_ALLCLASSES
            Return a list of installed devices for all device setup classes or all device interface classes.
            DIGCF_DEVICEINTERFACE
            Return devices that support device interfaces for the specified device interface classes.
            This flag must be set in the Flags parameter if the Enumerator parameter specifies a device instance ID.
            DIGCF_DEFAULT
            Return only the device that is associated with the system default device interface, if one is set,
            for the specified device interface classes.
            DIGCF_PRESENT
            Return only devices that are currently present in a system.
            DIGCF_PROFILE
            Return only devices that are a part of the current hardware profile.</param>
            <returns>If the operation succeeds, SetupDiGetClassDevs returns a handle to a device information set that contains
            all installed devices that matched the supplied parameters. If the operation fails, the function returns
            INVALID_HANDLE_VALUE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetupDiEnumDeviceInfo(System.IntPtr,System.UInt32,DotSpatial.Positioning.NativeMethods2.SpDevinfoData@)">
            <summary>
            The SetupDiEnumDeviceInfo function returns a SP_DEVINFO_DATA structure that specifies a device
            information element in a device information set.
            </summary>
            <param name="hDevInfo">A handle to the device information set for which to return an SP_DEVINFO_DATA
            structure that represents a device information element.</param>
            <param name="memberIndex">A zero-based index of the device information element to retrieve.</param>
            <param name="devInfo">A pointer to an SP_DEVINFO_DATA structure to receive information about an enumerated device information
            element. The caller must set DeviceInfoData.cbSize to sizeof(SP_DEVINFO_DATA).</param>
            <returns>The function returns TRUE if it is successful. Otherwise, it returns FALSE and the logged error
            can be retrieved with a call to GetLastError.</returns>
            <remarks>Repeated calls to this function return a device information element for a different device. This function
            can be called repeatedly to get information about all devices in the device information set.
            To enumerate device information elements, an installer should initially call SetupDiEnumDeviceInfo with
            the MemberIndex parameter set to 0. The installer should then increment MemberIndex and call
            SetupDiEnumDeviceInfo until there are no more values (the function fails and a call to GetLastError
            returns ERROR_NO_MORE_ITEMS).
            Call SetupDiEnumDeviceInterfaces to get a context structure for a device interface element (versus a device information element).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetupDiEnumDeviceInterfaces(System.IntPtr,System.IntPtr,System.Guid@,System.UInt32,DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData@)">
            <summary>
            The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that are contained in a device information set.
            </summary>
            <param name="hDevInfo">A pointer to a device information set that contains the device interfaces for which to return information.
            This handle is typically returned by SetupDiGetClassDevs.</param>
            <param name="devInfo">A pointer to an SP_DEVINFO_DATA structure that specifies a device information element in DeviceInfoSet.
            This parameter is optional and can be NULL. If this parameter is specified, SetupDiEnumDeviceInterfaces
            constrains the enumeration to the interfaces that are supported by the specified device. If this parameter
            is NULL, repeated calls to SetupDiEnumDeviceInterfaces return information about the interfaces that are
            associated with all the device information elements in DeviceInfoSet. This pointer is typically returned
            by SetupDiEnumDeviceInfo.</param>
            <param name="interfaceClassGuid">A pointer to a GUID that specifies the device interface class for the requested interface.</param>
            <param name="memberIndex">A zero-based index into the list of interfaces in the device information set. The caller should call
            this function first with MemberIndex set to zero to obtain the first interface. Then, repeatedly increment
            MemberIndex and retrieve an interface until this function fails and GetLastError returns ERROR_NO_MORE_ITEMS.
            If DeviceInfoData specifies a particular device, the MemberIndex is relative to only the interfaces exposed
            by that device.</param>
            <param name="deviceInterfaceData">A pointer to a caller-allocated buffer that contains, on successful return, a completed SP_DEVICE_INTERFACE_DATA
            structure that identifies an interface that meets the search parameters. The caller must set DeviceInterfaceData.cbSize
            to sizeof(SP_DEVICE_INTERFACE_DATA) before calling this function.</param>
            <returns>SetupDiEnumDeviceInterfaces returns TRUE if the function completed without error. If the function completed
            with an error, FALSE is returned and the error code for the failure can be retrieved by calling GetLastError.</returns>
            <remarks>Repeated calls to this function return an SP_DEVICE_INTERFACE_DATA structure for a different device interface.
            This function can be called repeatedly to get information about interfaces in a device information set that
            are associated with a particular device information element or that are associated with all device information
            elements.
            DeviceInterfaceData points to a structure that identifies a requested device interface. To get detailed
            information about an interface, call SetupDiGetDeviceInterfaceDetail. The detailed information includes
            the name of the device interface that can be passed to a Win32 function such as CreateFile
            (described in Microsoft Windows SDK documentation) to get a handle to the interface.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SetupDiGetDeviceInterfaceDetail(System.IntPtr,DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData@,DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceDetailData@,System.UInt32,System.UInt32@,DotSpatial.Positioning.NativeMethods2.SpDevinfoData@)">
            <summary>
            The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.
            </summary>
            <param name="hDevInfo">A pointer to the device information set that contains the interface
            for which to retrieve details. This handle is typically returned by SetupDiGetClassDevs.</param>
            <param name="deviceInterfaceData">A pointer to an SP_DEVICE_INTERFACE_DATA structure that specifies
            the interface in DeviceInfoSet for which to retrieve details. A pointer of this type is typically
            returned by SetupDiEnumDeviceInterfaces.</param>
            <param name="deviceInterfaceDetailData">A pointer to an SP_DEVICE_INTERFACE_DETAIL_DATA structure to receive information about the specified
            interface. This parameter is optional and can be NULL. This parameter must be NULL if
            DeviceInterfaceDetailSize is zero. If this parameter is specified, the caller must set
            DeviceInterfaceDetailData.cbSize to sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA) before calling this function.
            The cbSize member always contains the size of the fixed part of the data structure, not a size reflecting
            the variable-length string at the end.</param>
            <param name="deviceInterfaceDetailDataSize">The size of the DeviceInterfaceDetailData buffer. The buffer must be at least
            (offsetof(SP_DEVICE_INTERFACE_DETAIL_DATA, DevicePath) + sizeof(TCHAR)) bytes, to contain the fixed part
            of the structure and a single NULL to terminate an empty MULTI_SZ string.
            This parameter must be zero if DeviceInterfaceDetailData is NULL.</param>
            <param name="requiredSize">A pointer to a variable of type DWORD that receives the required size of the DeviceInterfaceDetailData buffer.
            This size includes the size of the fixed part of the structure plus the number of bytes required for the
            variable-length device path string. This parameter is optional and can be NULL.</param>
            <param name="deviceInfoData">A pointer to a buffer that receives information about the device that supports the requested interface.
            The caller must set DeviceInfoData.cbSize to sizeof(SP_DEVINFO_DATA). This parameter is optional and can
            be NULL.</param>
            <returns>SetupDiGetDeviceInterfaceDetail returns TRUE if the function completed without error. If the function
            completed with an error, FALSE is returned and the error code for the failure can be retrieved by calling
            GetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothGetDeviceInfo(System.IntPtr,DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo@)">
            <summary>
            The BluetoothGetDeviceInfo function retrieves information about a remote Bluetooth device.
            The Bluetooth device must have been previously identified through a successful device inquiry function call.
            </summary>
            <param name="hRadio">A handle to a local radio, obtained from a call to the BluetoothFindFirstRadio or similar functions,
            or from a call to the SetupDiEnumerateDeviceInterfaces function.</param>
            <param name="pbtdi">A pointer to a BLUETOOTH_DEVICE_INFO structure into which data about the first Bluetooth device will be placed.
            For more information, see Remarks.</param>
            <returns>Returns ERROR_SUCCESS upon success, indicating that data about the remote Bluetooth device was retrieved.
            Returns error codes upon failure. The following table lists common error codes associated with the
            BluetoothGetDeviceInfo function.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothGetRadioInfo(System.IntPtr,DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo@)">
            <summary>
            The BluetoothGetRadioInfo function obtains information about a Bluetooth radio.
            </summary>
            <param name="hRadio">A handle to a local Bluetooth radio, obtained by calling the
            BluetoothFindFirstRadio or similar functions, or the SetupDiEnumerateDeviceInterfances function.</param>
            <param name="pbtdi">A pointer to a BLUETOOTH_RADIO_INFO structure into which information about the radio
            will be placed. The dwSize member of the BLUETOOTH_RADIO_INFO structure must match the size of the structure.</param>
            <returns>The following table lists common return values.
            ERROR_SUCCESS - The radio information was retrieved successfully.
            ERROR_INVALID_PARAMETER - The hRadio or pRadioInfo parameter is NULL.
            ERROR_REVISION_MISMATCH - The dwSize member of the BLUETOOTH_RADIO_INFO structure pointed to by pRadioInfo is not valid.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothFindFirstRadio(DotSpatial.Positioning.NativeMethods2.BluetoothFindRadioParams,System.IntPtr@)">
            <summary>
            The BluetoothFindFirstRadio function begins the enumeration of local Bluetooth radios.
            </summary>
            <param name="pbtfrp">Pointer to a BLUETOOTH_FIND_RADIO_PARAMS structure. The dwSize member of the BLUETOOTH_FIND_RADIO_PARAMS
            structure pointed to by pbtfrp must match the size of the structure. See Return Values for additional
            information about this parameter.</param>
            <param name="phRadio">Pointer to where the first enumerated radio handle will be returned. When no longer needed, this handle
            must be closed via CloseHandle.</param>
            <returns>In addition to the handle indicated by phRadio, calling this function will also create a
            HBLUETOOTH_RADIO_FIND handle for use with the BluetoothFindNextRadio function. When this handle
            is no longer needed, it must be closed via the BluetoothFindRadioClose.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothFindRadioClose(System.IntPtr)">
            <summary>
            The BluetoothFindRadioClose function closes the enumeration handle associated with finding Bluetooth radios.
            </summary>
            <param name="hFind">Enumeration handle to close, obtained with a previous call to the BluetoothFindFirstRadio function.</param>
            <returns>Returns TRUE when the handle is successfully closed. Returns FALSE if the attempt fails to close the
            enumeration handle. For additional information on possible errors associated with closing the handle,
            call the GetLastError function.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothIsConnectable(System.IntPtr)">
            <summary>
            The BluetoothIsConnectable function determines whether a Bluetooth radio or radios is connectable.
            </summary>
            <param name="hRadio">Valid local radio handle, or NULL. If NULL, all local radios are checked for
            connectability; if any radio is connectable, the function call succeeds.</param>
            <returns>Returns TRUE if at least one Bluetooth radio is accepting incoming connections.
            Returns FALSE if no radios are accepting incoming connections.</returns>
            <remarks>If multiple Bluetooth radios exist, the first radio to return that it is connectable causes the
            BluetoothIsConnectable function to succeed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothIsDiscoverable(System.IntPtr)">
            <summary>
            The BluetoothIsDiscoverable function determines whether a Bluetooth radio or radios is discoverable.
            </summary>
            <param name="hRadio">Valid local radio handle, or NULL. If NULL, discovery is determined for all local radios;
            if any radio is discoverable, the function call succeeds.</param>
            <returns>Returns TRUE if at least one Bluetooth radio is discoverable. Returns FALSE if no Bluetooth radios are discoverable.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothEnableDiscovery(System.IntPtr,System.Boolean)">
            <summary>
            The BluetoothEnableDiscovery function changes the discovery state of a local Bluetooth radio or radios.
            </summary>
            <param name="hRadio">Valid local radio handle, or NULL. If NULL, discovery is modified on all local radios;
            if any radio is modified by the call, the function call succeeds.</param>
            <param name="fEnabled">Flag specifying whether discovery is to be enabled or disabled. Set to TRUE to enable discovery,
            set to FALSE to disable discovery.</param>
            <returns>Returns TRUE if the discovery state was successfully changed. If hRadio is NULL, a return value of
            TRUE indicates that at least one local radio state was successfully changed. Returns FALSE if discovery
            state was not changed; if hRadio was NULL, no radio accepted the state change.</returns>
            <remarks>Use the BluetoothIsDiscoverable function to determine the current state of a Bluetooth radio. Windows ensures that a discoverable system is connectable, and as such, the radio must allow incoming connections prior to making a radio discoverable. Failure to allow incoming connections results in the BluetoothEnableDiscovery function call failing.
            When BluetoothEnableDiscovery changes the discovery state, the new state is valid for the lifetime of the
            calling application. Additionally, if a Bluetooth radio previously made discoverable with this function
            is disabled and re-enabled via the application, discoverability will not persist. Once the calling application
            terminates, the discovery state of the specified Bluetooth radio reverts to the state it was in before
            BluetoothEnableDiscovery was called.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothEnableIncomingConnections(System.IntPtr,System.Boolean)">
            <summary>
            The BluetoothEnableIncomingConnections function modifies whether a local Bluetooth radio accepts incoming connections.
            </summary>
            <param name="hRadio">Valid local radio handle for which to change whether incoming connections are enabled, or NULL. If NULL,
            the attempt to modify incoming connection acceptance iterates through all local radios; if any radio is
            modified by the call, the function call succeeds.</param>
            <param name="fEnabled">Flag specifying whether incoming connection acceptance is to be enabled or disabled. Set to TRUE to
            enable incoming connections, set to FALSE to disable incoming connections.</param>
            <returns>Returns TRUE if the incoming connection state was successfully changed. If hRadio is NULL, a return
            value of TRUE indicates that at least one local radio state was successfully changed. Returns FALSE
            if incoming connection state was not changed; if hRadio was NULL, no radio accepted the state change.</returns>
            <remarks>A radio that is non-connectable is non-discoverable. The radio must be made non-discoverable prior
            to making a radio non-connectable. Failure to make a radio non-discoverable prior to making it
            non-connectable will result in failure of the BluetoothEnableIncomingConnections function call.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WSAStartup(System.UInt16,DotSpatial.Positioning.NativeMethods2.WsaData)">
            <summary>
            The WSAStartup function initiates use of the Winsock DLL by a process.
            </summary>
            <param name="wVersionRequested">The highest version of Windows Sockets specification that the caller can use.
            The high-order byte specifies the minor version number; the low-order byte specifies the major version number.</param>
            <param name="wsaData">A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.</param>
            <returns>If successful, the WSAStartup function returns zero. Otherwise, it returns one of the error codes listed below.
            WSASYSNOTREADY - The underlying network subsystem is not ready for network communication.
            WSAVERNOTSUPPORTED - The version of Windows Sockets support requested is not provided by this particular Windows Sockets implementation.
            WSAEINPROGRESS - A blocking Windows Sockets 1.1 operation is in progress.
            WSAEPROCLIM - A limit on the number of tasks supported by the Windows Sockets implementation has been reached.
            WSAEFAULT - The lpWSAData parameter is not a valid pointer.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WSACleanup">
            <summary>
            The WSACleanup function terminates use of the Winsock 2 DLL (Ws2_32.dll).
            </summary>
            <returns>The return value is zero if the operation was successful.
            Otherwise, the value SOCKET_ERROR is returned, and a specific error number
            can be retrieved by calling WSAGetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WSALookupServiceBegin(DotSpatial.Positioning.NativeMethods2.WsaQuerySet,DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions,System.IntPtr@)">
            <summary>
            The WSALookupServiceBegin function initiates a client query that is constrained by the
            information contained within a WSAQUERYSET structure. WSALookupServiceBegin only returns a
            handle, which should be used by subsequent calls to WSALookupServiceNext to get the actual results.
            </summary>
            <param name="qsRestrictions">Pointer to the search criteria. See the following for details.</param>
            <param name="dwControlControlOptions">Flag that controls the depth of the search.</param>
            <param name="lphLookup">Handle to be used when calling WSALookupServiceNext in order to start retrieving the results set.</param>
            <returns>The return value is zero if the operation was successful. Otherwise, the value SOCKET_ERROR is returned,
            and a specific error number can be retrieved by calling WSAGetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WSALookupServiceNext(System.IntPtr,DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions,System.Int32@,System.Byte[])">
            <summary>
            The WSALookupServiceNext function is called after obtaining a handle from a previous call to
            WSALookupServiceBegin in order to retrieve the requested service information.
            The provider will pass back a WSAQUERYSET structure in the lpqsResults buffer. The client should
            continue to call this function until it returns WSA_E_NO_MORE, indicating that all of WSAQUERYSET
            has been returned.
            </summary>
            <param name="hLookup">Handle returned from the previous call to WSALookupServiceBegin.</param>
            <param name="dwControlControlOptions">Flags to control the next operation. Currently, only LUP_FLUSHPREVIOUS is defined as a means to cope
            with a result set that is too large. If an application does not (or cannot) supply a large enough buffer,
            setting LUP_FLUSHPREVIOUS instructs the provider to discard the last result set—which was too large—and
            move on to the next set for this call.</param>
            <param name="lpdwBufferLength">On input, the number of bytes contained in the buffer pointed to by lpqsResults.
            On output, if the function fails and the error is WSAEFAULT, then it contains the minimum number
            of bytes to pass for the lpqsResults to retrieve the record.</param>
            <param name="pqsResults">Pointer to a block of memory, which will contain one result set in a WSAQUERYSET structure on return.</param>
            <returns>The return value is zero if the operation was successful. Otherwise, the value SOCKET_ERROR is returned,
            and a specific error number can be retrieved by calling WSAGetLastError.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WSALookupServiceEnd(System.IntPtr)">
            <summary>
            The WSALookupServiceEnd function is called to free the handle after previous calls to WSALookupServiceBegin and WSALookupServiceNext.
            If you call WSALookupServiceEnd from another thread while an existing WSALookupServiceNext is blocked, the end call will have the same effect as a cancel and will cause the WSALookupServiceNext call to return immediately.
            </summary>
            <param name="hLookup">Handle previously obtained by calling WSALookupServiceBegin.</param>
            <returns>The return value is zero if the operation was successful. Otherwise, the value SOCKET_ERROR is returned,
            and a specific error number can be retrieved by calling WSAGetLastError.</returns>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.Blob">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.Blob.Size">
            <summary>
            Size of the block of data pointed to by pBlobData, in bytes.  cbSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.Blob.Info">
            <summary>
            Pointer to a block of data.  pInfo.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.AddressCode">
            <summary>
            The blue tooth address.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.ClassOfDevice">
            <summary>
            The unsigned integer representing the class of the device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.NameBinary">
            <summary>
            The binary representation of the name.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.ToDevice">
            <summary>
            Converts the object into a BluetoothDevice object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.Address">
            <summary>
            Returns the address of the device.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NativeMethods2.BthDeviceInfo.Name">
            <summary>
            Returns the friendly nameof the device.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags">
            <summary>
            Bluetooth device status states that can be combined.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags.AddressIsPresent">
            <summary>
            The bluetooth address is present.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags.ClassOfDeviceIsPresent">
            <summary>
            The class of the device is present.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags.NameIsPresent">
            <summary>
            The name of the device is present.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags.Paired">
            <summary>
            Whether or not the device is paired.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags.Remembered">
            <summary>
            The bluetooth device is remembered.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceFlags.Connected">
            <summary>
            The bluetooth device is connected.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.BluetoothFindRadioParams">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothFindRadioParams.ByteSize">
            <summary>
            Size of the BLUETOOTH_FIND_RADIO_PARAMS structure, in bytes. dwSize.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.ByteSize">
            <summary>
            Size of the BluetoothDeviceInfo structure, in bytes. dwSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.Address">
            <summary>
            Address of the device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.DeviceClass">
            <summary>
            Class of the device. ulClassofDevice.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.Connected">
            <summary>
            Specifies whether the device is connected. fConnected.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.Remembered">
            <summary>
            Specifies whether the device is a remembered device. Not all remembered devices are authenticated. fRemembered.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.Authenticated">
            <summary>
            Specifies whether the device is authenticated, paired, or bonded. All authenticated devices are remembered. fAuthenticated.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.LastSeen">
            <summary>
            Last time the device was seen, in the form of a SYSTEMTIME structure.  stLastSeen.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.LastUsed">
            <summary>
            Last time the device was used, in the form of a SYSTEMTIME structure. stLastUsed.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.Name">
            <summary>
            Name of the device. szName.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.NativeMethods2.BluetoothDeviceInfo"/> struct.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo.ByteSize">
            <summary>
            Size, in bytes, of the structure. dwSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo.Address">
            <summary>
            Address of the local Bluetooth radio.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo.Name">
            <summary>
            Name of the local Bluetooth radio.  szName.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo.DeviceClass">
            <summary>
            Device class for the local Bluetooth radio.  ClassofDevice.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo.Subversion">
            <summary>
            This member contains data specific to individual Bluetooth device manufacturers.  lmpSubversion.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BluetoothRadioInfo.Manufacturer">
            <summary>
            Manufacturer of the Bluetooth radio, expressed as a BTH_MFG_Xxx value. For more
            information about the Bluetooth assigned numbers document and a current list of values,
            see the Bluetooth specification at www.bluetooth.com.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.BthQueryDevice">
            <summary>
            The BTH_QUERY_DEVICE structure is used when querying for the presence of a Bluetooth device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BthQueryDevice.LAP">
            <summary>
            Reserved. Must be set to zero.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.BthQueryDevice.Length">
            <summary>
            Requested length of the inquiry, in seconds.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.BthQueryDevice.#ctor">
            <summary>
            Initializes a new instance of the BthQueryDevice structure.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.SystemTime">
            <summary>
            Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second,
            and millisecond. The time is either in coordinated universal time (UTC) or local time, depending on the
            function that is being called.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Year">
            <summary>
            The year. The valid values for this member are 1601 through 30827. wYear.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Month">
            <summary>
            The month. (January = 1).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.DayOfWeek">
            <summary>
            The day of the week. (Sunday = 0)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Day">
            <summary>
            The day of the month. The valid values for this member are 1 through 31.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Hour">
            <summary>
            The hour. The valid values for this member are 0 through 23.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Minute">
            <summary>
            The minute. The valid values for this member are 0 through 59.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Second">
            <summary>
            The second. The valid values for this member are 0 through 59.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SystemTime.Milliseconds">
            <summary>
            The millisecond. The valid values for this member are 0 through 999.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SystemTime.ToDateTime">
            <summary>
            Creates a .Net DateTime structure from the SystemTime structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.SystemTime.FromDateTime(System.DateTime)">
            <summary>
            Creates a SystemTime structure based on the specified DateTime structure.
            </summary>
            <param name="value">The DateTime value to set.</param>
            <returns>The SystemTime equivalent to the specified value.</returns>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.WsaData">
            <summary>
            The WSADATA structure contains information about the Windows Sockets implementation.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.Version">
            <summary>
            The version of the Windows Sockets specification that the Ws2_32.dll expects the caller to use.
            The high-order byte specifies the minor version number; the low-order byte specifies the major version number.
            wVersion.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.HighVersion">
            <summary>
            The highest version of the Windows Sockets specification that the Ws2_32.dll can support. The high-order byte
            specifies the minor version number; the low-order byte specifies the major version number.
            This is the same value as the wVersion member when the version requested in the wVersionRequested parameter
            passed to the WSAStartup function is the highest version of the Windows Sockets specification that the Ws2_32.dll
            can support.  wHighVersion.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.Description">
            <summary>
            A NULL-terminated ASCII string into which the Ws2_32.dll copies a description of the Windows Sockets implementation.
            The text (up to 256 characters in length) can contain any characters except control and formatting characters.
            The most likely use that an application would have for this member is to display it (possibly truncated) in a status
            message.  szDescription.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.SystemStatus">
            <summary>
            A NULL-terminated ASCII string into which the Ws2_32.dll copies relevant status or configuration information.
            The Ws2_32.dll should use this parameter only if the information might be useful to the user or support staff.
            This member should not be considered as an extension of the szDescription parameter.  szSystemStatus.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.MaxSockets">
            <summary>
            The maximum number of sockets that may be opened. This member should be ignored for Windows Sockets version 2 and later.
            The iMaxSockets member is retained for compatibility with Windows Sockets specification 1.1, but should not be used when
            developing new applications. No single value can be appropriate for all underlying service providers. The architecture
            of Windows Sockets changed in version 2 to support multiple providers, and the WSADATA structure no longer applies to
            a single vendor's stack. iMaxSockets.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.MaximumMessageSize">
            <summary>
            The maximum datagram message size. This member is ignored for Windows Sockets version 2 and later.  iMaxUdpDg.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaData.VendorInfo">
            <summary>
            A pointer to vendor-specific information. This member should be ignored for Windows Sockets version 2 and later.
            lpVendorInfo
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions">
            <summary>
            WAS Lookup Control Options
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.None">
            <summary>
            None of the return options are active.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.Containers">
            <summary>
            Returns containers only. LUP_CONTAINERS.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ReturnName">
            <summary>
            Retrieves the name as lpszServiceInstanceName.  LUP_RETURN_NAME.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ReturnType">
            <summary>
            Retrieves the type as lpServiceClassId.  LUP_RETURN_TYPE.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ReturnVersion">
            <summary>
            Retrieves the version as lpVersion.  LUP_RETURN_VERSION.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ReturnComment">
            <summary>
            Retrieves the comment as lpszComment.  LUP_RETURN_COMMENT.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ReturnAddresses">
            <summary>
            Retrieves the addresses as lpcsaBuffer.  LUP_RETURN_ADDR.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ReturnBlob">
            <summary>
            Retrieves the private data as lpBlob.  LUP_RETURN_BLOB.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.FlushCache">
            <summary>
            If the provider has been caching information, ignores the cache, and queries the namespace itself.  LUP_FLUSHCACHE.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WasLookupControlOptions.ResService">
            <summary>
            This indicates whether prime response is in the remote or local part of CSADDR_INFO structure.
            The other part needs to be usable in either case.  LUP_RES_SERVICE.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.WsaQuerySet">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.ByteSize">
            <summary>
            Must be set to sizeof(WSAQUERYSET) in bytes. This is a versioning mechanism.  dwSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.ServiceInstanceName">
            <summary>
            (Optional) Referenced string contains service name. The semantics for using wildcards
            within the string are not defined, but can be supported by certain name space providers.
            lpszServiceInstanceName.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.ServiceClassId">
            <summary>
            (Required) The GUID corresponding to the service class.
            lpServiceClassId.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.Version">
            <summary>
            (Optional) References desired version number and provides version comparison semantics
            (that is, version must match exactly, or version must be not less than the value supplied).
            lpVersion.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.Comment">
            <summary>
            Ignored for queries.  lpszComment.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.NameSpace">
            <summary>
            Identifier of a single name space in which to constrain the search, or NS_ALL to include
            all name spaces.  dwNameSpace.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.ProviderId">
            <summary>
            (Optional) References the GUID of a specific name-space provider, and limits the query to
            this provider only.  lpNSProviderId.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.Context">
            <summary>
            (Optional) Specifies the starting point of the query in a hierarchical name space.
            lpszContext.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.NumberOfProtocols">
            <summary>
            Size of the protocol constraint array, can be zero.  dwNumberOfProtocols.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.Protocols">
            <summary>
            (Optional) References an array of AFPROTOCOLS structure. Only services that utilize
            these protocols will be returned.  lpafpProtocols.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.QueryString">
            <summary>
            (Optional)Some name spaces (such as Whois++) support enriched SQL-like queries that are
            contained in a simple text string. This parameter is used to specify that string.
            lpszQueryString.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.NumberOfCsAddrs">
            <summary>
            Ignored for queries.  dwNumberOfCsAddrs
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.Buffer">
            <summary>
            Ignored for queries.  lpcsaBuffer.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.OutputFlags">
            <summary>
            Ignored for queries. dwOutputFlags.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.EntityBlob">
            <summary>
            (Optional)This is a pointer to a provider-specific entity.  lbBlob.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NativeMethods2.WsaQuerySet.#ctor">
            <summary>
            Instantiates a new instance of the Wsaqueryset Class.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.SpDevinfoData">
            <summary>
            An SP_DEVINFO_DATA structure defines a device instance that is a member of a device information set.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDevinfoData.Size">
            <summary>
            The size, in bytes, of the SP_DEVINFO_DATA structure. For more information, see the
            following Remarks section.  cbSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDevinfoData.ClassGuid">
            <summary>
            The GUID of the device's setup class.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDevinfoData.DeviceInstance">
            <summary>
            An opaque handle to the device instance (also known as a handle to the devnode).
            Some functions, such as SetupDiXxx functions, take the whole SP_DEVINFO_DATA structure
            as input to identify a device in a device information set. Other functions, such as
            CM_Xxx functions like CM_Get_DevNode_Status, take this DevInst handle as input.
            DevInst.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDevinfoData.Reserved">
            <summary>
            Reserved. For internal use only.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData">
            <summary>
            An SP_DEVICE_INTERFACE_DATA structure defines a device interface in a device information set.
            </summary>
            <remarks>A SetupAPI function that takes an instance of the SP_DEVICE_INTERFACE_DATA structure as a parameter
            verifies whether the cbSize member of the supplied structure is equal to the size, in bytes, of the
            structure. If the cbSize member is not set correctly, the function will fail and set an error code
            of ERROR_INVALID_USER_BUFFER.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData.Size">
            <summary>
            The size, in bytes, of the SP_DEVICE_INTERFACE_DATA structure. For more information,
            see the Remarks section. cbSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData.InterfaceClassGuid">
            <summary>
            The GUID for the class to which the device interface belongs.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData.Flags">
            <summary>
            Can be one or more of the following:
            SPINT_ACTIVE - The interface is active (enabled).
            SPINT_DEFAULT - The interface is the default interface for the device class.
            SPINT_REMOVED - The interface is removed.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceData.Reserved">
            <summary>
            Reserved. Do not use.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceDetailData">
            <summary>
            An SP_DEVICE_INTERFACE_DETAIL_DATA structure contains the path for a device interface.
            </summary>
            <remarks>An SP_DEVICE_INTERFACE_DETAIL_DATA structure identifies the path for a device interface in a
            device information set.  SetupDiXxx functions that take an SP_DEVICE_INTERFACE_DETAIL_DATA
            structure as a parameter verify that the cbSize member of the supplied structure is equal
            to the size, in bytes, of the structure. If the cbSize member is not set correctly for an
            input parameter, the function will fail and set an error code of ERROR_INVALID_PARAMETER.
            If the cbSize member is not set correctly for an output parameter, the function will fail
            and set an error code of ERROR_INVALID_USER_BUFFER.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceDetailData.ByteSize">
            <summary>
            The size, in bytes, of the SP_DEVICE_INTERFACE_DETAIL_DATA structure.
            For more information, see the following Remarks section.  cbSize.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NativeMethods2.SpDeviceInterfaceDetailData.DevicePath">
            <summary>
            A NULL-terminated string that contains the device interface path. This path can be passed to Win32 functions such as CreateFile.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NmeaEmulator">
            <summary>
            Emultor for MNEA devices
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpggaLastSent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpgsaLastSent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpgllLastSent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpgsvLastSent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gprmcLastSent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpggaInterval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpgsaInterval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpgllInterval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gpgsvInterval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._gprmcInterval">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._horizontalDOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._verticalDOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._meanDOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._fixMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._fixStatus">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._fixMethod">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._magneticVariation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._minHdop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._maxHdop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._minVdop">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaEmulator._maxVdop">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.#ctor">
            <summary>
            Creates a generic NMEA-0183 Emulator
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.#ctor(System.String)">
            <summary>
            Creates a generic NMEA-0183 Emulator from the specified string name
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.Randomize">
            <summary>
            Randomizes the emulation by changing speed and direction
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.Randomize(DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Randomize
            </summary>
            <param name="maxHDOP">The max HDOP.</param>
            <param name="maxVDOP">The max VDOP.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.Randomize(DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Randomize
            </summary>
            <param name="minHDOP">The min HDOP.</param>
            <param name="maxHDOP">The max HDOP.</param>
            <param name="minVDOP">The min VDOP.</param>
            <param name="maxVDOP">The max VDOP.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.Randomize(System.Random,DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Randomize
            </summary>
            <param name="seed">The seed.</param>
            <param name="speedLow">The speed low.</param>
            <param name="speedHigh">The speed high.</param>
            <param name="bearingStart">The bearing start.</param>
            <param name="bearingArc">The bearing arc.</param>
            <param name="minHDOP">The min HDOP.</param>
            <param name="maxHDOP">The max HDOP.</param>
            <param name="minVDOP">The min VDOP.</param>
            <param name="maxVDOP">The max VDOP.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.OnEmulation">
            <summary>
            Generates actual data to send to the client.
            </summary>
            <remarks>Data is sent according to the behavior of a typical GPS device: $GPGGA,
            $GPGSA, $GPRMC, $GPGSV sentences are sent every second, and a $GPGSV sentence
            is sent every five seconds.
            Developers who want to emulate a specific model of GPS device should override this
            method and generate the sentences specific to that device.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.EmulatePositionError(DotSpatial.Positioning.Position)">
            <summary>
            Emulates the position error.
            </summary>
            <param name="truth">The truth.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.EmulateError(DotSpatial.Positioning.DilutionOfPrecision)">
            <summary>
            Emulates the error.
            </summary>
            <param name="dop">The dop.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaEmulator.WriteSentenceToClient(DotSpatial.Positioning.NmeaSentence)">
            <summary>
            Writes the sentence to client.
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.Interval">
            <summary>
            Sets the update intervals for the NMEA Emulator's sentence generation.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.HorizontalDilutiuonOfPrecision">
            <summary>
            Horizontal dilution of precision
            </summary>
            <value>The horizontal dilutiuon of precision.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.VerticalDilutiuonOfPrecision">
            <summary>
            Vertical dilution of precision
            </summary>
            <value>The vertical dilutiuon of precision.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.MeanDilutiuonOfPrecision">
            <summary>
            Mean Dilution of Precision
            </summary>
            <value>The mean dilutiuon of precision.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.EmulatedFixMode">
            <summary>
            Emulated Fix Mode
            </summary>
            <value>The emulated fix mode.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.EmulatedFixStatus">
            <summary>
            Emulated Fix Status
            </summary>
            <value>The emulated fix status.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.EmulatedFixMethod">
            <summary>
            Emulated Fix Method
            </summary>
            <value>The emulated fix method.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.EmulatedFixQuality">
            <summary>
            Emulated Fix Quality
            </summary>
            <value>The emulated fix quality.</value>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaEmulator.MagneticVariation">
            <summary>
            Magnetic Variation
            </summary>
            <value>The magnetic variation.</value>
        </member>
        <member name="T:DotSpatial.Positioning.NmeaInterpreter">
            <summary>
            Represents an interpreter for GPS data from the National Marine Electronics Association (NMEA).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaInterpreter._stream">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaInterpreter.DataChangeSyncRoot">
            <summary>
            Represents a synchronization object used to prevent changes to GPS data when reading multiple GPS values.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaInterpreter.#ctor">
            <summary>
            Creates an interpreter to read NMEA streams
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaInterpreter.OnSentenceRecorded(DotSpatial.Positioning.NmeaSentence)">
            <summary>
            Called when [sentence recorded].
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaInterpreter.Parse(DotSpatial.Positioning.NmeaSentence)">
            <summary>
            Translates the NmeaSentence
            </summary>
            <param name="sentence">The NMeaSentence to parse</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaInterpreter.OnDeviceChanged">
            <summary>
            Occurs when the interpreter is using a different device for raw data.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaInterpreter.OnReadPacket">
            <summary>
            Occurs when new data should be read from the underlying device.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaInterpreter.OnStopped">
            <summary>
            Occurs immediately after the interpreter has been shut down.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.NmeaInterpreter.SentenceRecorded">
            <summary>
            Occurs when a packet of data has been recorded to the recording stream.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NmeaReader">
            <summary>
            Represents a reader which deserializes raw data into NMEA sentences.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaReader.IDEAL_NMEA_BUFFER_SIZE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaReader._stream">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaReader._reader">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance using the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.IsNmea(System.IO.Stream)">
            <summary>
            Returns whether the specified stream contains valid NMEA data.
            </summary>
            <param name="stream">An open <strong>Stream</strong> object which supports read operations.</param>
            <returns>A <strong>Boolean</strong> value, <strong>True</strong> if valid NMEA data has been read from the stream.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadSentence">
            <summary>
            Reads the next available sentence, valid or invalid, from the underlying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadValidSentence">
            <summary>
            Reads a well-formed NMEA sentence (with a valid checksum) from the underlying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadTypedSentence">
            <summary>
            Reads a single NMEA sentence then attempts to convert it into an object-oriented form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadPosition">
            <summary>
            Reads the current latitude and longitude from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadUtcDateTime">
            <summary>
            Reads the UTC date and time from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadDateTime">
            <summary>
            Returns the current date and time from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadSpeed">
            <summary>
            Returns the current rate of travel from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadBearing">
            <summary>
            Reads the Bearing direction
            </summary>
            <returns>The direction as an azimuth angle</returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadFixQuality">
            <summary>
            Reads the current type of fix acquired from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadAltitude">
            <summary>
            Reads the current distance above sea level from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaReader.ReadHorizontalDilutionOfPrecision">
            <summary>
            Reads the current precision as it relates to latitude and longitude from the next available sentence.
            </summary>
            <returns></returns>
        </member>
        <member name="E:DotSpatial.Positioning.NmeaReader.ResolveSentence">
            <summary>
            Occurs when an unknown sentence type is encountered.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.NmeaSentenceResolverEventArgs">
            <summary>
            Represents information about an unknown NMEA sentence which has been encountered.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaSentenceResolverEventArgs._sentence">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.NmeaSentenceResolverEventArgs._result">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentenceResolverEventArgs.#ctor(DotSpatial.Positioning.NmeaSentence)">
            <summary>
            Creates a new instance of the Nmea Sentence Resolver Event arguments class
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentenceResolverEventArgs.Sentence">
            <summary>
            Returns the NMEA sentence which needs to be resolved.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentenceResolverEventArgs.Result">
            <summary>
            Controls a more-strongly-typed NMEA sentence if resolution is successful.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:DotSpatial.Positioning.NmeaSentenceEventArgs">
             <summary>
             Represents information about raw data received from a GPS device.
             </summary>
             <remarks>This object is used primarily by the SentenceReceived
             and UnrecognizedSentenceReceived events of
             the Receiver class to provide notification when raw data has been received
             from the GPS device.</remarks>
             <example>This example demonstrates how to use this class when raising an event.
             <code lang="VB">
             ' Declare a new event
             Dim MySentenceEvent As SentenceEventHandler
             ' Create an NMEA $GPGLL sentence
             Dim MySentence As String = "$GPGLL, 4122, N, 14628, W, 104243.00, A, D*7E"
            
             Sub Main()
               ' Raise our custom event, also indicating that the sentence was completely recognized
               RaiseEvent MySentenceEvent(Me, New SentenceEventArgs(MySentence, SentenceType.Recognized))
             End Sub
             </code>
             <code lang="C#">
             // Declare a new event
             SentenceEventHandler MySentenceEvent;
             // Create an NMEA $GPGLL sentence
             string MySentence = "$GPGLL, 4122, N, 14628, W, 104243.00, A, D*7E"
            
             void Main()
             {
               // Raise our custom event, also indicating that the sentence was completely recognized
               MySentenceEvent(this, New SentenceEventArgs(MySentence, SentenceType.Recognized));
             }
             </code>
             </example>
        </member>
        <member name="M:DotSpatial.Positioning.NmeaSentenceEventArgs.#ctor(DotSpatial.Positioning.NmeaSentence)">
            <summary>
            Creates a new instance with the specified block of raw GPS data and a flag indicating if the sentence was fully parsed.
            </summary>
            <param name="sentence">A <strong>String</strong> containing raw GPS data.</param>
            <seealso cref="T:System.Type">Type Property</seealso>
            <seealso cref="P:DotSpatial.Positioning.NmeaSentenceEventArgs.Sentence">Sentence Property</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.NmeaSentenceEventArgs.Sentence">
            <summary>
            Stores one line of raw GPS data.
            </summary>
            <value>A String containing one line of raw NMEA or Garmin® text data.</value>
            <remarks>When using the NMEA-0183 or Garmin® text protocols, this property stores text for one individual line.  For the Garmin® binary protocol, a signature such as "(Garmin waypoint data)" is stored instead of actual binary data.</remarks>
            <seealso cref="T:System.Type">Type Property</seealso>
        </member>
        <member name="T:DotSpatial.Positioning.PgrmfSentence">
            <summary>
            Represents a Garmin $PGRMF sentence.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._utcDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._fixMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._fixQuality">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._speed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PgrmfSentence._positionDop">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PgrmfSentence.#ctor(System.String,System.String,System.String[],System.String)">
            <summary>
            Creates a Garmin $PGRMF sentence from the specified parameters
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="commandWord">The command word.</param>
            <param name="words">The words.</param>
            <param name="validChecksum">The valid checksum.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PgrmfSentence.#ctor(System.String)">
            <summary>
            Creates a Garmin $PGRMF sentence from the specified string
            </summary>
            <param name="sentence">The sentence.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PgrmfSentence.OnSentenceChanged">
            <summary>
            OnSentanceChanged event handler
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.UtcDateTime">
            <summary>
            Represents an NMEA sentence which contains date and time in UTC.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.Position">
            <summary>
            Represents an NMEA sentence which contains a position.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.FixMode">
            <summary>
            Gets the fix mode
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.FixQuality">
            <summary>
            The Fix Quality
            </summary>
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.Speed">
            <summary>
            The Speed
            </summary>
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.Bearing">
            <summary>
            the Bearing
            </summary>
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Positioning.PgrmfSentence.PositionDilutionOfPrecision">
            <summary>
            The Position Dilution of Precision (PDOP)
            </summary>
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Positioning.PositionAverageFilter">
            <summary>
            Position averaging filter
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PositionAverageFilter._samples">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PositionAverageFilter._sampleTimes">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PositionAverageFilter._filteredPositon">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PositionAverageFilter._sampleCount">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.#ctor">
            <summary>
            Creates an uninitialized filter with a sample count of 4
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.#ctor(System.Int32)">
            <summary>
            Creates an uninitialized filter with a sample count.
            </summary>
            <param name="sampleCount">The sample count.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.#ctor(DotSpatial.Positioning.Position[])">
            <summary>
            Creates an initialized filter.
            </summary>
            <param name="positions">The positions.</param>
            <remarks>The sample count equals the number of positions passed in the positions argument.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.#ctor(System.Collections.Generic.IList{DotSpatial.Positioning.Position},System.Int32)">
            <summary>
            Creates an initialzed filter
            </summary>
            <param name="positions">The positions.</param>
            <param name="sampleCount">The sample count.</param>
            <remarks>If the number of positions supllied in the positions parameter and the sample
            count parameter are not equal, the filter is uninitialized.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Filter">
            <summary>
            Filters this instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Initialize(System.Collections.Generic.IList{DotSpatial.Positioning.Position})">
            <summary>
            Initializes the filter
            </summary>
            <param name="positions">The initial sample positions.</param>
            <remarks>This method updates the SampleCount property to the number of
            initialization positions providedand updates the FilteredLocation
            property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Initialize(System.Collections.Generic.IList{DotSpatial.Positioning.Position3D})">
            <summary>
            Initializes the filter
            </summary>
            <param name="positions">The initial sample positions.</param>
            <remarks>This method updates the SampleCount property to the number of
            initialization positions provided and updates the FilteredLocation
            property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Initialize(DotSpatial.Positioning.Position)">
            <summary>
            Adds an initialization position.
            </summary>
            <param name="gpsPosition">The initialization position to add.</param>
            <remarks>This method does not update the SampleCount or the FilteredLocation
            properties.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Initialize(DotSpatial.Positioning.Position3D)">
            <summary>
            Adds an initialization position.
            </summary>
            <param name="gpsPosition">The initialization position to add.</param>
            <remarks>This method does not update the SampleCount or the FilteredLocation
            properties.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Filter(DotSpatial.Positioning.Position)">
            <summary>
            Adds a new observation and applies the filter.
            </summary>
            <param name="gpsPosition">The new observation to add to the filter.</param>
            <returns>The filtered position.</returns>
            <remarks>This method updates the FilteredLocation property without consideration for SampleCount.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Filter(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Adds a new observation and applies the filter.
            </summary>
            <param name="gpsPosition">The new observation to add to the filter.</param>
            <param name="deviceError">A DeviceError, which does not currently affect position averaging.</param>
            <param name="horizontalDOP">A horizontal dilution of position, which does not currently affect position averaging.</param>
            <param name="verticalDOP">A vertical dilution of positoin which does not currently affect position averaging.</param>
            <param name="bearing">A directional bearing, which does not currently affect position averaging.</param>
            <param name="speed">A speed, which does not currently affect position averaging.</param>
            <returns></returns>
            <remarks>This method updates the FilteredLocation property without consideration for SampleCount.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Filter(DotSpatial.Positioning.Position3D)">
            <summary>
            Adds a new observation and applies the filter.
            </summary>
            <param name="gpsPosition">The new observation to add to the filter.</param>
            <returns>The filtered position.</returns>
            <remarks>This method updates the FilteredLocation property without consideration for SampleCount.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PositionAverageFilter.Filter(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Distance,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.DilutionOfPrecision,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Speed)">
            <summary>
            Adds a new observation and applies the filter.
            </summary>
            <param name="gpsPosition">The new observation to add to the filter.</param>
            <param name="deviceError">A DeviceError, which does not currently affect position averaging.</param>
            <param name="horizontalDOP">A horizontal dilution of position, which does not currently affect position averaging.</param>
            <param name="verticalDOP">A vertical dilution of positoin which does not currently affect position averaging.</param>
            <param name="bearing">A directional bearing, which does not currently affect position averaging.</param>
            <param name="speed">A speed, which does not currently affect position averaging.</param>
            <returns></returns>
            <remarks>This method updates the FilteredLocation property without consideration for SampleCount.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.PositionAverageFilter.SampleCount">
            <summary>
            Gets the number of samples required for a valid fintered value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PositionAverageFilter.ObservedLocations">
            <summary>
            Gets a list of the current observed locations
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PositionAverageFilter.ObservedLocation">
            <summary>
            Not implemented in the PrositionAverage filter. Use ObservedLocations to get a list
            of observed locations.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PositionAverageFilter.FilteredLocation">
            <summary>
            Gets the filtered location
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PositionAverageFilter.IsInitialized">
            <summary>
            Gets a value indicating the state of the filter.
            </summary>
            <remarks>The filter is considered initialized and thus reporting valid filtered
            locations, when the SampleCount property equals the number of values returned
            by the ObservedLocations property.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.PositionAverageFilter.Delay">
            <summary>
            Gets the time elapsed from the oldest to the most resent position sample.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.PositioningStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PositioningStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PositioningStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.RouteFileEmulator">
            <summary>
            This emulator follows a custom route defined in a text file.
            </summary>
            <remarks><para>
            This emulator is similar to the <see cref="T:DotSpatial.Positioning.TextFileEmulator"/>, except that it does not require real
            GPS data. Instead, it expects a text file that contains a <see cref="T:DotSpatial.Positioning.Position"/> value on each line
            (e.g. HH°MM'SS.SSSS, HH°MM'SS.SSSS).
              </para>
              <para>
            The <see cref="T:DotSpatial.Positioning.RouteFileEmulator"/> will move one point further along its route at each
              <see cref="P:DotSpatial.Positioning.Emulator.Interval"/> period, so the <see cref="P:DotSpatial.Positioning.Emulator.Speed"/> will automatically adjust
            as needed to move the required distance each time.
              </para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.RouteFileEmulator._myInterval">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.RouteFileEmulator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.RouteFileEmulator"/> class that reads
            its route from the specified file.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:DotSpatial.Positioning.RouteFileEmulator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.RouteFileEmulator"/> class that reads
            its route from the specified file in the specified direction.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
        </member>
        <member name="M:DotSpatial.Positioning.RouteFileEmulator.#ctor(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.RouteFileEmulator"/> class that reads
            its route from the specified file in the specified direction at the specified interval.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:DotSpatial.Positioning.RouteFileEmulator.OnEmulation">
            <summary>
            Moves to the next point in the route, and calls the base <see cref="T:DotSpatial.Positioning.NmeaEmulator"/>
            implementation to generate the appropriate NMEA sentences.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.RouteFileEmulator.ReadRoute(System.String,System.Boolean)">
            <summary>
            Reads the route file and populates the <see cref="P:DotSpatial.Positioning.Emulator.Route"/> property.
            </summary>
            <param name="filePath">The absolute or relative path of the file containing the route.</param>
            <param name="reverse">If <see langword="true"/>, the route file will be read in reverse order. That is, the last
            <see cref="T:DotSpatial.Positioning.Position"/> in the file will be the starting point of the route.</param>
        </member>
        <member name="P:DotSpatial.Positioning.RouteFileEmulator.Interval">
            <summary>
            Returns the amount of time the emulator waits before processing new data.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="T:DotSpatial.Positioning.Satellite">
            <summary>
            Represents information about a GPS satellite in orbit above Earth.
            </summary>
            <remarks><para>GPS devices are able to isolate information about GPS satellites in orbit. Each
            satellite's <see cref="P:DotSpatial.Positioning.Satellite.PseudorandomNumber">unique identifier</see>,
              <see cref="P:DotSpatial.Positioning.Satellite.SignalToNoiseRatio">radio signal strength</see>,
              <see cref="P:DotSpatial.Positioning.Satellite.Azimuth">azimuth</see> and
              <see cref="P:DotSpatial.Positioning.Satellite.Elevation">elevation</see> are available once its
            radio signal is detected.</para>
              <para>Properties in this class are updated automatically as new information is
            received from the GPS device.</para>
              <para><img src="Satellite.jpg"/></para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Satellite._pseudorandomNumber">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Satellite._azimuth">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Satellite._elevation">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Satellite._signalToNoiseRatio">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Satellite._isFixed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Satellite._lastSignalReceived">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.#ctor(System.Int32)">
            <summary>
            Creates a new instance using the specified unique identifier.
            </summary>
            <param name="pseudorandomNumber">The pseudorandom number.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.#ctor(System.Int32,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Elevation)">
            <summary>
            Creates a new instance using the specified unique identifier, location around the horizon, and elevation up from the horizon.
            </summary>
            <param name="pseudorandomNumber">The pseudorandom number.</param>
            <param name="azimuth">The azimuth.</param>
            <param name="elevation">The elevation.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.#ctor(System.Int32,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Elevation,DotSpatial.Positioning.SignalToNoiseRatio)">
            <summary>
            Creates a new instance using the specified unique identifier, location around the horizon, and elevation up from the horizon.
            </summary>
            <param name="pseudorandomNumber">The pseudorandom number.</param>
            <param name="azimuth">The azimuth.</param>
            <param name="elevation">The elevation.</param>
            <param name="signalToNoiseRatio">The signal to noise ratio.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.#ctor(System.Int32,DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Elevation,DotSpatial.Positioning.SignalToNoiseRatio,System.Boolean)">
            <summary>
            Creates a new instance using the specified unique identifier, location around the horizon, and elevation up from the horizon.
            </summary>
            <param name="pseudorandomNumber">The pseudorandom number.</param>
            <param name="azimuth">The azimuth.</param>
            <param name="elevation">The elevation.</param>
            <param name="signalToNoiseRatio">The signal to noise ratio.</param>
            <param name="isFixed">if set to <c>true</c> [is fixed].</param>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.ToString(System.String)">
            <summary>
            REturns the string equivalent of this object using ht ecurrent cul
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.GetFixedSatellites(System.Collections.Generic.List{DotSpatial.Positioning.Satellite})">
            <summary>
            Returns the satellites in the specified in the list which are marked as fixed.
            </summary>
            <param name="satellites">The satellites.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.Equals(DotSpatial.Positioning.Satellite)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Satellite.CompareTo(DotSpatial.Positioning.Satellite)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.PseudorandomNumber">
            <summary>
            Returns the unique identifier of the satellite.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.Azimuth">
            <summary>
            Returns the horizontal direction towards the satellite from the current location.
            </summary>
            <value>The azimuth.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.Elevation">
            <summary>
            Returns the vertical direction towards the satellite from the current
            location.
            </summary>
            <value>The elevation.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.SignalToNoiseRatio">
            <summary>
            Returns the strength of the satellite's radio signal as it is being
            received.
            </summary>
            <value>The signal to noise ratio.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.LastSignalReceived">
            <summary>
            Returns the date and time that the satellite's signal was detected.
            </summary>
            <value>The last signal received.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.IsFixed">
            <summary>
            Returns whether the satellite's signal is being used to calculate the current
            location.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.IsTracked">
            <summary>
            Returns whether the satellite's signal is currently being detected.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.SignalAge">
            <summary>
            Returns the amount of time elapsed since the signal was last received.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.IsActive">
            <summary>
            Returns whether the satellite's signal has recently been received.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.IsDifferentialGpsSatellite">
            <summary>
            Indicates whether the satellite is providing additional corrective
            signals to increase precision.
            </summary>
            <remarks>This property will return a value of <strong>True</strong>
            if the GPS satellite has been identified as a WAAS, EGNOS or MSAS satellite.
            These satellites are geostationary (unlike typical NAVSTAR GPS satellites)
            and re-broadcast correction signals from ground stations.  When this property
            is true, the GPS device has improved precision.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.Class">
            <summary>
            Returns the government project responsible for launching the satellite.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.AtomicClockType">
            <summary>
            Returns the atomic clock currently in service.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.Block">
            <summary>
            Returns the launch block of the satellite.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.DateLaunched">
            <summary>
            Returns the date the satellite was placed into orbit.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.DateCommissioned">
            <summary>
            Returns the date the satellite was placed into service.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.DateDecommissioned">
            <summary>
            Returns the date the satellite was removed from service.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Satellite.Name">
            <summary>
            Returns the friendly name of the satellite.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.SatelliteEventArgs">
             <summary>
             Represents information about a satellite when a satellite-related event is raised.
             </summary>
             <example>This example demonstrates how to use this class when raising an event.
               <code lang="VB">
             ' Start a new receiver
             Dim MyReceiver As New Receiver()
             ' Declare a new event
             Dim MySatelliteEvent As EventHandler
             ' Get a handle on the first satellite in the receiver's collection
             Dim MySatellite As Satellite = MyReceiver.Satellites(0)
             Sub Main()
             ' Raise our custom event
             RaiseEvent MySatelliteEvent(Me, New SatelliteEventArgs(MySatellite))
             End Sub
               </code>
               <code lang="C#">
             // Start a new receiver
             Receiver MyReceiver = new Receiver();
             // Declare a new event
             EventHandler MySatelliteEvent;
             // Create an Satellite of 90°
             Satellite MySatellite = new Satellite(90);
             void Main()
             {
             // Raise our custom event
             MySatelliteEvent(this, New SatelliteEventArgs(MySatellite));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.SatelliteEventArgs.Satellite">SatelliteCollection Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Azimuth">Azimuth Property (Satellite Class)</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Elevation">Elevation Property (Satellite Class)</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.SignalToNoiseRatio">SignalToNoiseRatio Property (Satellite Class)</seealso>
             <remarks>This object is used primarily by the <see cref="P:DotSpatial.Positioning.SatelliteEventArgs.Satellite">Satellite</see>
             class to provide notification when information such as <see cref="T:DotSpatial.Positioning.Azimuth">azimuth</see>,
             <see cref="T:DotSpatial.Positioning.Elevation">elevation</see>, or <see cref="T:DotSpatial.Positioning.SignalToNoiseRatio">radio signal strength</see>
             has changed.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteEventArgs._satellite">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SatelliteEventArgs.#ctor(DotSpatial.Positioning.Satellite)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="satellite">The satellite.</param>
        </member>
        <member name="P:DotSpatial.Positioning.SatelliteEventArgs.Satellite">
            <summary>
            Indicates which satellite is the target of the event.
            </summary>
            <value>A <strong>Satellite</strong> object containing modified information.</value>
        </member>
        <member name="T:DotSpatial.Positioning.SatelliteListEventArgs">
            <summary>
            The event args for a list of satellites
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteListEventArgs._satellites">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SatelliteListEventArgs.#ctor(System.Collections.Generic.IList{DotSpatial.Positioning.Satellite})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="satellites">The satellites.</param>
        </member>
        <member name="P:DotSpatial.Positioning.SatelliteListEventArgs.Satellites">
            <summary>
            Indicates which satellites are the target of the event.
            </summary>
            <value>A list of <strong>Satellite</strong> objects.</value>
        </member>
        <member name="T:DotSpatial.Positioning.SatelliteClass">
            <summary>
            Indicates the government project responsible for a GPS satellite.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteClass.Unknown">
            <summary>The satellite could not be identified.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteClass.Navstar">
            <summary>The satellite is part of the NAVSTAR project.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteClass.Waas">
            <summary>The satellite is part of the Wide Area Augmentation System (WAAS).</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteClass.Egnos">
            <summary>
            The satellite is part of the European Geostationary Navigation Overlay Service
            (EGNOS).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteClass.Msas">
            <summary>
            The satellite is pard of Japan's MTSAT Satellite Augmentation System
            (MSAS).
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.SatelliteBlock">
            <summary>
            Indicates the launch block of a group of NAVSTAR GPS satellites.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteBlock.Unknown">
            <summary>The block is unknown.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteBlock.I">
            <summary>Represents Block I.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteBlock.II">
            <summary>Represents Block II.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteBlock.IIA">
            <summary>Represents Block IIA</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteBlock.IIR">
            <summary>Represents Block IIR.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.SatelliteAtomicClockType">
            <summary>
            Indicates the main atomic clock in service aboard a GPS satellite.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteAtomicClockType.Unknown">
            <summary>The clock type is unknown.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteAtomicClockType.Cesium">
            <summary>The satellite's Cesium clock is currently in service.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SatelliteAtomicClockType.Rubidium">
            <summary>The satellite's Rubidium clock is currently in service.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.SafeBluetoothRadioFindHandle">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SafeBluetoothRadioFindHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SafeBluetoothRadioFindHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SafeBluetoothRadioFindHandle.BluetoothFindRadioClose(System.IntPtr)">
            <summary>
            Bluetoothes the find radio close.
            </summary>
            <param name="hFind">The h find.</param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Positioning.SerialDevice">
            <summary>
            Represents a serial (RS-232) device.
            </summary>
            <remarks><para>This class is used to connect to any device using the RS-232 protocol.  Desktop computers will typically
            have at least one serial port, and in some cases a "virtual" serial port is created to make a device emulate RS-232.  For
            example, since there is no USB standard for GPS devices, USB GPS device manufacturers typically provide a special "USB-to-serial"
            driver to make the device available for third-party applications.</para>
              <para>Each serial port on a computer has a unique name, typically beginning with "COM" followed by a number, then a colon
            (e.g. COM5:).  In some special circumstances, such as the GPS Intermediate Driver on Windows Mobile devices, a different prefix
            is used.  Each serial port includes other configuration settings, most importantly the baud rate, which controls the speed of
            communications.  GPS device manufacturers must support 4800 baud in order to comply with the NMEA-0183 standard, but many newer devices
            use faster speeds.  The baud rate of a connection must be specified precisely, otherwise all data from the device will be
            unrecognizable.</para>
              <para>Other settings for serial ports are the data bits, stop bits, and parity.  In the context of GPS, a vast majority of GPS
            devices use eight data bits, one stop bit, and no parity.  these settings are used if no settings are explicitly provided.</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.SerialDevice.ROOT_KEY_NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SerialDevice._port">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SerialDevice._lastSuccessfulBaudRate">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SerialDevice._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SerialDevice._maximumAllowedFailures">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SerialDevice._detectionBaudRates">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.#ctor(System.String)">
            <summary>
            Creates a new instance using the specified port.
            </summary>
            <param name="portName">Name of the port.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance using the specified port name and baud rate.
            </summary>
            <param name="portName">Name of the port.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.Reset">
            <summary>
            Forces a device to a closed state without disposing the underlying stream.
            </summary>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.OpenStream(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates a new Stream object for the device.
            </summary>
            <param name="access">The access.</param>
            <param name="sharing">The sharing.</param>
            <returns>A <strong>Stream</strong> object.</returns>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.OnDisconnecting">
            <summary>
            Occurs when an open connection is about to be closed.
            </summary>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.DetectProtocol">
            <summary>
            Performs a test on the device to confirm that it transmits GPS data.
            </summary>
            <returns>A <strong>Boolean</strong> value, <strong>True</strong> if the device is confirmed.</returns>
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.CancelDetection">
            <summary>
            Stops any GPS protocol detection in progress.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.Dispose(System.Boolean)">
            <summary>
            Disposes of any unmanaged (or optionally, managed) resources used by the device.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.OnCacheWrite">
            <summary>
            Records information about this device to the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.OnCacheRemove">
            <summary>
            Removes previously cached information for this device from the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.OnCacheRead">
            <summary>
            Reads information about this device from the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.GetCache">
            <summary>
            Returns a list of known Bluetooth devices.
            </summary>
            <returns></returns>
            <remarks><para>To maximize performance, GPS.NET will record information about each device it encounters for the purposes of organizing
            and speeding up the GPS device detection process.  This property returns a list of all known serial devices.</para>
              <para>Since this list is managed automatically, it should not be modified.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.SetName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.LoadCachedDevices(System.Collections.Generic.IList{DotSpatial.Positioning.SerialDevice})">
            <summary>
            Loads the serial devices that have been cached by GPS.Net. This list contains previously-detected GPS devices,
            along with devices which were tested but found to NOT be GPS devices. By keeping these statistics,
            the detection system can become faster over time by first testing devices which have a better success rate.
            </summary>
            <param name="devices">The list to which the cached devices are added.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.LoadVirtualDevices(System.Collections.Generic.IList{DotSpatial.Positioning.SerialDevice})">
            <summary>
            Loads any virtual serial devices that exist for other types of physical devices.
            This list includes non-GPS devices.
            </summary>
            <param name="devices">The list to which the cached devices are added.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.LoadWindowsDevices(System.Collections.Generic.IList{DotSpatial.Positioning.SerialDevice})">
            <summary>
            Loads the serial devices that have already been detected by Windows. This list includes non-GPS devices.
            </summary>
            <param name="devices">The list to which the devices are added.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialDevice.Equals(DotSpatial.Positioning.SerialDevice)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.Port">
            <summary>
            Returns the name of the port used to open a connection.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.PortNumber">
            <summary>
            Returns the numeric portion of the port name.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.BaudRate">
            <summary>
            Controls the speed of communications for this device.
            </summary>
            <value>The baud rate.</value>
            <remarks>This property controls the speed of read and write operations for the device.  The baud rate specified must precisely
            match a rate supported by the device, otherwise data will be unrecognizable.  GPS devices are required to support a minimum baud rate of 4800
            in order to comply with the NMEA-0183 standard (though not all devices do this).  A higher rate is preferable.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.Name">
            <summary>
            Returns a natural language name for the device.
            </summary>
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.AllowConnections">
            <summary>
            Controls whether the device can be queried for GPS data.
            </summary>
            <value><c>true</c> if [allow connections]; otherwise, <c>false</c>.</value>
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.DetectionBaudRates">
            <summary>
            Controls the baud rates tested during GPS protocol detection.
            </summary>
            <remarks><para>A GPS device may support any number of baud rates.  As a result, the GPS.NET device detection system
            needs to test multiple baud rates in order to find a match.  This collection controls the list of baud rates
            tested during detection.</para>
              <para>Advanced GPS developers can improve performance by trimming this list down to baud rates which will actually
            be used.</para></remarks>
        </member>
        <member name="P:DotSpatial.Positioning.SerialDevice.MaximumAllowedFailures">
            <summary>
            Controls the maximum allowed detection failures before a device is excluded from detection.
            </summary>
            <value>The maximum allowed failures.</value>
            <remarks>Some devices involved with device detection are not GPS devices.  For example, a serial device search
            could return a bar code scanner, an infrared port, or the neighbor's computer.  This property controls how many times a device will be
            tested before it is no longer included for searches.  If a device's failure count goes beyond this number, attempts
            will no longer be made to connect to the device.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.SerialPort">
            <summary>
            Wraps the .Net <see cref="T:System.IO.Ports.SerialPort"/> class and implements workarounds for some
            known bugs and limitations.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SerialPort._reader">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.Component"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SerialPort.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SerialPort"/> class.
            </summary>
            <param name="portName">Name of the port.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified port name, baud rate, parity bit, data bits, and stop bit.
            </summary>
            <param name="portName">The port to use (for example, COM1).</param>
            <param name="baudRate">The baud rate.</param>
            <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"/> values.</param>
            <param name="dataBits">The data bits value.</param>
            <param name="stopBits">One of the <see cref="P:System.IO.Ports.SerialPort.StopBits"/> values.</param>
            <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:DotSpatial.Positioning.SerialPort.Open">
             <summary>
             Opens a new serial port connection.
             </summary>
             <exception cref="T:System.InvalidOperationException">The specified port is open. </exception>
            
             <exception cref="T:System.ArgumentOutOfRangeException">One or more of the properties for this instance are invalid. For example, the <see cref="P:System.IO.Ports.SerialPort.Parity"/>, <see cref="P:System.IO.Ports.SerialPort.DataBits"/>, or <see cref="P:System.IO.Ports.SerialPort.Handshake"/> properties are not valid values; the <see cref="P:System.IO.Ports.SerialPort.BaudRate"/> is less than or equal to zero; the <see cref="P:System.IO.Ports.SerialPort.ReadTimeout"/> or <see cref="P:System.IO.Ports.SerialPort.WriteTimeout"/> property is less than zero and is not <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout"/>. </exception>
            
             <exception cref="T:System.ArgumentException">The port name does not begin with "COM". - or -The file type of the port is not supported.</exception>
            
             <exception cref="T:System.IO.IOException">The port is in an invalid state.  - or - An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"/> object were invalid.</exception>
            
             <exception cref="T:System.UnauthorizedAccessException">Access is denied to the port. </exception>
            
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
               </PermissionSet>
        </member>
        <member name="M:DotSpatial.Positioning.SerialPort.ReadLine">
             <summary>
             Reads up to the <see cref="P:System.IO.Ports.SerialPort.NewLine"/> value in the input buffer.
             </summary>
             <returns>The contents of the input buffer up to the first occurrence of a <see cref="P:System.IO.Ports.SerialPort.NewLine"/> value.</returns>
             <exception cref="T:System.InvalidOperationException">The specified port is not open. </exception>
            
             <exception cref="T:System.TimeoutException">The operation did not complete before the time-out period ended.- or -No bytes were read.</exception>
            
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
               </PermissionSet>
        </member>
        <member name="M:DotSpatial.Positioning.SerialPort.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Ports.SerialPort"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.  - or -An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"/> object were invalid.</exception>
        </member>
        <member name="T:DotSpatial.Positioning.SignalToNoiseRatio">
            <summary>
            Represents a measurement of the strength of a received radio signal.
            </summary>
            <remarks>Signal-to-Noise Ratios (or SNR for short) measure the clarity of
            a received signal versus the level at which the signal is being obscured.  For
            example, if a GPS device is operating in open sky on a clear day, no signals are
            obscured and the SNR will be high.  Conversely, if a device is activated in a room
            with no view of the sky, signals may be obscured, resulting in a low SNR.
            This class is used frequently by the <see cref="T:DotSpatial.Positioning.Satellite">Satellite</see>
            class to report on the quality of GPS satellite signals.  When three or more
            satellite SNR's are strong, the device is able to obtain a fix on the current location.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatio._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatio.NoSignal">
            <summary>
            Represents a value signifying a signal which is completely obscured.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatio.Empty">
            <summary>
            Represents a value of zero.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatio.HalfSignal">
            <summary>
            Represents a value signifying a signal which is partially obscured.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatio.FullSignal">
            <summary>
            Represents a value signifying a signal which is not being obscured.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing the specified string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by parsing the specified string using a specific culture.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <overloads>Outputs the current instance as a formatted string.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.GetHashCode">
            <summary>
            Returns a unique code for the current instance used in hash tables.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.Random">
            <summary>
            Returns a <strong>SignalToNoiseRatio</strong> object containing a random
            value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.Equals(DotSpatial.Positioning.SignalToNoiseRatio)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.Equals(DotSpatial.Positioning.SignalToNoiseRatioRating)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and
            culture.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatio.CompareTo(DotSpatial.Positioning.SignalToNoiseRatio)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.SignalToNoiseRatio.Value">
            <summary>
            Returns the numeric value of the signal strength.
            </summary>
            <value>An <strong>Integer</strong> value between 0 and 50, where 0 represents no signal and fifty represents a signal at full strength.</value>
            <remarks>This property indicates the strength of a received satellite signal.  GPS
            satellites always transmit signals at the same strength, but the signal is often
            obscured by the atmosphere, buildings and other obstacles such as trees.  A value
            must be at about 30 or greater for a satellite to be able to maintain a fix for long.
            In the <see cref="T:DotSpatial.Positioning.Satellite">Satellite</see> class, this property is updated automatically as new information is
            received from the GPS device.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.SignalToNoiseRatio.IsEmpty">
            <summary>
            Indicates if the value is zero.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SignalToNoiseRatio.Rating">
            <summary>
            Returns a subjective rating of the signal strength.
            </summary>
            <value>A value from the <strong>SignalToNoiseRatioRating</strong> enumeration.</value>
            <seealso cref="T:DotSpatial.Positioning.SignalToNoiseRatioRating">SignalToNoiseRatioRating Enumeration</seealso>
            <remarks>This property is frequently used to present an SNR reading in a readable format to the user.
            This property is updated automatically as new information is received from the GPS device.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.SignalToNoiseRatioRating">
            <summary>
            Indicates an in-English description of the a satellite's radio signal strength
            </summary>
            <remarks>This enumeration is used by the <see cref="P:DotSpatial.Positioning.SignalToNoiseRatio.Rating">Rating</see> property of the
            <see cref="T:DotSpatial.Positioning.SignalToNoiseRatio">SignalToNoiseRatio</see> class to give an in-English interpretation
            of satellite radio signal strength.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatioRating.None">
            <summary>Represents a value of 0. The radio signal is completely obscured.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatioRating.Poor">
            <summary>Represents a value between 1 and 15.  The radio signal is mostly obscured, such as by a building or tree, but might briefly be part of a fix.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatioRating.Moderate">
            <summary>Represents a value between 16 and 30.  The radio signal is partially obscured, but could be part of a sustained fix.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatioRating.Good">
            <summary>Represents a value between 31 and 40.  The radio signal is being received with little interferance and could maintain a reliable fix.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatioRating.Excellent">
            <summary>Represents a value of 41 or above.  The satellite is in direct line of sight from the receiver and can sustain a fix.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.SignalToNoiseRatioEventArgs">
            <summary>
            Signal to noise ratio event args
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SignalToNoiseRatioEventArgs._signalToNoiseRatio">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SignalToNoiseRatioEventArgs.#ctor(DotSpatial.Positioning.SignalToNoiseRatio)">
            <summary>
            Creates a new instance of the event args
            </summary>
            <param name="signalToNoiseRatio">The signal to noise ratio.</param>
        </member>
        <member name="P:DotSpatial.Positioning.SignalToNoiseRatioEventArgs.SignalToNoiseRatio">
            <summary>
            The signal to noise ratio
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.SquareMatrix3D">
            <summary>
            Represents a three-dimensional double-precision matrix.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m11">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m12">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m13">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m21">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m22">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m23">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m31">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m32">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._m33">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SquareMatrix3D._elements">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.#ctor">
            <summary>
            Creates a matrix as an identity matrix
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix with the indicated elements
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Elementary">
            <summary>
            Elementaries this instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Clone">
            <summary>
            Ctreates an exact copy of this matrix.
            </summary>
            <returns>A cloned matrix.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Multiply(DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Multiplies this matrix with the supplied matrix, using a prepended matrix order
            </summary>
            <param name="matrix">The matrix to multiply with this matrix.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Multiply(DotSpatial.Positioning.SquareMatrix3D,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Multiplies this matrix with the supplied matrix.
            </summary>
            <param name="matrix">The matrix to multiply with this matrix.</param>
            <param name="matrixOrder">The order in which to carry out the operation.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.TransformVector(DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Transforms the vector
            </summary>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.TransformVectors(DotSpatial.Positioning.CartesianPoint[])">
            <summary>
            Transform the array of vectors
            </summary>
            <param name="vectors">The vectors.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Invert">
            <summary>
            Inverts this matrix if it is invertable.
            </summary>
            <remarks>If the matrix is not invertable, this method throws an exception.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Determinant">
            <summary>
            Calculates the determinat of this matrix.
            </summary>
            <returns>The signed area of the parallelagram described by this matrix.</returns>
            <remarks>The determinant is a scalar value typically used to invert a matrix. As a signed area, it can also be used to
            identify "flipped" orientations, like mirroring. A negative determinant indicates that a matrix is "flipped".</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Reset">
            <summary>
            Resests the matrix to the identity matrix.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Transpose(DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Creates the transpose matrix of a matrix
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Invert(DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Square Matrix 3D Invert
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Default(System.Double)">
            <summary>
            Defaults the specified default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.op_Multiply(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.CartesianPoint)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">A.</param>
            <param name="v">The v.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.op_Multiply(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.op_Addition(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.op_Subtraction(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Multiply(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Multiplies the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Add(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Adds the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Subtract(DotSpatial.Positioning.SquareMatrix3D,DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Subtracts the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SquareMatrix3D.Equals(DotSpatial.Positioning.SquareMatrix3D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.SquareMatrix3D.Elements">
            <summary>
            Elements
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SquareMatrix3D.IsIdentity">
            <summary>
            Indicates whether or not this is an identity matrix
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SquareMatrix3D.IsInvertable">
            <summary>
            Indicates whether or not this matrix is invertable.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SquareMatrix3D.Identity">
            <summary>
            Returns an identity matrix.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.TextFileEmulator">
            <summary>
            Emulator that sources it's data from a text file
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.TextFileEmulator._filePath">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.TextFileEmulator._reader">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.TextFileEmulator._readInterval">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.TextFileEmulator.#ctor(System.String)">
            <summary>
            Creates a Text File Emulator from the specified file path with a default read interval of 400 seconds
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:DotSpatial.Positioning.TextFileEmulator.#ctor(System.String,System.TimeSpan)">
            <summary>
            Creates a Text File Emulator from the specified file path with the specified read interval
            </summary>
            <param name="filePath">The file path.</param>
            <param name="readInterval">The read interval.</param>
        </member>
        <member name="M:DotSpatial.Positioning.TextFileEmulator.OnEmulation">
            <summary>
            OnEmulation event handler
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.TextFileEmulator.ReadInterval">
            <summary>
            Gets or sets the ReadInterval for the Text File Emulator
            </summary>
            <value>The read interval.</value>
        </member>
        <member name="T:DotSpatial.Positioning.Velocity">
            <summary>
            Represents a measurement of an object's rate of travel in a particular direction.
            </summary>
            <remarks>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be changed via constructors).</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Velocity._speed">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Velocity._bearing">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Velocity.Empty">
            <summary>
            Represents a velocity with no speed or direction.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Velocity.Invalid">
            <summary>
            Represents a velocity with an invalid or unspecified speed and direction.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Azimuth)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Velocity"/> struct.
            </summary>
            <param name="speed">The speed.</param>
            <param name="bearing">The bearing.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(DotSpatial.Positioning.Speed,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Velocity"/> struct.
            </summary>
            <param name="speed">The speed.</param>
            <param name="bearingDegrees">The bearing degrees.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(System.Double,DotSpatial.Positioning.SpeedUnit,DotSpatial.Positioning.Azimuth)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Velocity"/> struct.
            </summary>
            <param name="speed">The speed.</param>
            <param name="speedUnits">The speed units.</param>
            <param name="bearing">The bearing.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(System.Double,DotSpatial.Positioning.SpeedUnit,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Velocity"/> struct.
            </summary>
            <param name="speed">The speed.</param>
            <param name="speedUnits">The speed units.</param>
            <param name="bearingDegrees">The bearing degrees.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by parsing speed and bearing from the specified strings.
            </summary>
            <param name="speed">The speed.</param>
            <param name="bearing">The bearing.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified strings using the specific culture.
            </summary>
            <param name="speed">The speed.</param>
            <param name="bearing">The bearing.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Velocity"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.op_Equality(DotSpatial.Positioning.Velocity,DotSpatial.Positioning.Velocity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.op_Inequality(DotSpatial.Positioning.Velocity,DotSpatial.Positioning.Velocity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> representing the current instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.Equals(DotSpatial.Positioning.Velocity)">
            <summary>
            Compares the current instance to the specified velocity.
            </summary>
            <param name="other">A <strong>Velocity</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.Equals(DotSpatial.Positioning.Velocity,System.Int32)">
            <summary>
            Compares the current instance to the specified velocity using the specified numeric precision.
            </summary>
            <param name="other">A <strong>Velocity</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Velocity.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.Velocity.Speed">
            <summary>
            Gets the objects rate of travel.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Velocity.Bearing">
            <summary>
            Gets the objects direction of travel.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Velocity.IsEmpty">
            <summary>
            Indicates whether the speed and bearing are both zero.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Velocity.IsInvalid">
            <summary>
            Indicates whether the speed or bearing is invalid or unspecified.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GeographicRectangle">
            <summary>
            Represents a rectangular shape on Earth's surface.
            </summary>
            <remarks><para>This class is used to represent a square (or close to a square) shape on
            Earth's surface. This class is typically used during mapping applications to zoom
            into a particular area on Earth. This class looks nearly identical to the Rectangle
            class in the .NET framework, except that it's bounding points are defined as
              <strong>Position</strong> objects instead of <strong>Point</strong> objects.</para>
              <para>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (it's properties can only be set via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle._top">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle._bottom">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle._left">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle._right">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle._center">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle.Empty">
            <summary>
            Represents a GeographicRectangle having no size.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicRectangle.Maximum">
            <summary>
            Represents a rectangle that encompasses all of Earth's surface.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(DotSpatial.Positioning.Position,DotSpatial.Positioning.GeographicSize)">
             <summary>
             Creates a new instance using the specified location and size.
             </summary>
             <param name="location">The location.</param>
             <param name="size">The size.</param>
             <returns>
             A <strong>GeographicRectangle</strong> set to the specified location and
             size.
               </returns>
            
             <example>
             This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
             105°W which is 2° wide and 5° tall.
               <code lang="VB" title="[New Example]">
             Dim NorthwestCorner As New Position("39N 105W")
             Dim RectangleSize As New GeographicSize(2, 5)
             Dim Rectangle As New GeographicRectangle(NorthwestCorner, RectangleSize)
               </code>
               <code lang="CS" title="[New Example]">
             Position NorthwestCorner = new Position("39N, 105W");
             GeographicSize RectangleSize = new GeographicSize(2, 5);
             GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, RectangleSize);
               </code>
               </example>
             <remarks>This constructor defines a rectangle which expands east and south of the
             specified location.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(DotSpatial.Positioning.Position,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
             <summary>
             Creates a new instance using the specified location, width, and height.
             </summary>
             <param name="location">The location.</param>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <example>
             This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
             105°W which is 2° wide and 5° tall.
               <code lang="VB" title="[New Example]">
             Dim NorthwestCorner As New Position("39N 105W")
             Dim RectangleWidth As Distance = Distance.FromKilometers(1)
             Dim RectangleHeight As Distance = Distance.FromKilometers(1)
             Dim Rectangle As New GeographicRectangle(NorthwestCorner, RectangleWidth, RectangleHeight)
               </code>
               <code lang="CS" title="[New Example]">
             Position NorthwestCorner = new Position("39N 105W");
             Distance RectangleWidth = Distance.FromKilometers(1);
             Distance RectangleHeight = Distance.FromKilometers(1);
             GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, RectangleWidth, RectangleHeight);
               </code>
               </example>
            
             <returns>
             A <strong>GeographicRectangle</strong> set to the specified location and
             size.
               </returns>
             <remarks>This constructor defines a rectangle which expands east and south of the
             specified location.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
             <summary>
             Creates a new instance using the specified northwest and southeast
             coordinates.
             </summary>
             <param name="northwest">The northwest.</param>
             <param name="southeast">The southeast.</param>
             <returns>A <strong>GeographicRectangle</strong> defined by the two endpoints.</returns>
            
             <example>
             This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
             105°W and ending at 37°N 100°W (2° wide and 5° tall).
               <code lang="VB" title="[New Example]">
             Dim NorthwestCorner As New Position("39N 105W")
             Dim SoutheastCorner As New Position("37N 100W")
             Dim Rectangle As New GeographicRectangle(NorthwestCorner, SoutheastCorner)
               </code>
               <code lang="CS" title="[New Example]">
             Position NorthwestCorner = new Position("39N 105W");
             Position SoutheastCorner = new Position("37N 100W");
             GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, SoutheastCorner);
               </code>
               </example>
             <remarks>This constructor takes the specified parameters and calculates the width and
             height of the rectangle. If the two points are backwards (meaning that the right-most
             point is west of the left-most point), they are automatically swapped before creating
             the rectangle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(System.String)">
             <summary>
             Creates a new instance by converting the specified string.
             </summary>
             <param name="value">The value.</param>
             <returns>
             A <strong>GeographicRectangle</strong> matching the specified string
             value.
               </returns>
            
             <example>
             This example creates a new rectangle at 39°N, 105° extending two degrees south and
             five degrees east to 37°N, 100°W.
               <code lang="VB" title="[New Example]">
             Dim Rectangle As New GeographicRectangle("39N, 105W, 37N, 100W")
               </code>
               <code lang="CS" title="[New Example]">
             GeographicRectangle Rectangle = new GeographicRectangle("39N, 105W, 37N, 100W");
               </code>
               </example>
             <remarks>This constructor attempts to parse the specified string into a rectangle. The
             current culture is used to interpret the string -- use the list separator of the
             current culture (which may not necessarily be a comma). This constructor can accept any
             output created via the <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(System.String,System.Globalization.CultureInfo)">
             <summary>
             Creates a new instance by converting the specified string in the given
             culture.
             </summary>
             <param name="value">The value.</param>
             <param name="culture">The culture.</param>
             <returns>
             This constructor attempts to parse the specified string into a rectangle. The
             specified culture is used to interpret the string. This constructor can accept any
             output created via the <strong>ToString</strong> method.
               </returns>
            
             <example>
             This example creates a new rectangle at 39°N, 105° extending two degrees south and
             five degrees east to 37°N, 100°W.
               <code lang="VB" title="[New Example]">
             Dim Rectangle As New GeographicRectangle("39N, 105W, 37N, 100W", CultureInfo.CurrentCulture)
               </code>
               <code lang="CS" title="[New Example]">
             GeographicRectangle Rectangle = new GeographicRectangle("39N, 105W, 37N, 100W", CultureInfo.CurrentCulture);
               </code>
               </example>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude)">
             <summary>
             Creates a new instance using the specified latitudes and longitudes.
             </summary>
             <param name="left">The left.</param>
             <param name="top">The top.</param>
             <param name="right">The right.</param>
             <param name="bottom">The bottom.</param>
             <example>
             This example creates a new <strong>GeographicRectangle</strong> by specifying each
             side individually.
               <code lang="VB" title="[New Example]">
             Dim Left As New Longitude(-105)
             Dim Top As New Latitude(39)
             Dim Right As New Longitude(-100)
             Dim Top As New Latitude(37)
             Dim Rectangle As New GeographicRectangle(Left, Top, Right, Bottom)
               </code>
               <code lang="CS" title="[New Example]">
             Longitude Left = new Longitude(-105);
             Latitude Top = new Latitude(39);
             Longitude Right = new Longitude(-100);
             Latitude Top = new Latitude(37);
             GeographicRectangle Rectangle = new GeographicRectangle(Left, Top, Right, Bottom);
               </code>
               </example>
            
             <returns>A <strong>GeographicRectangle</strong> bound by the specified values.</returns>
             <remarks>If the left and right, or top and bottom values are backwards, they are
             automatically swapped before creating the rectangle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude)">
             <summary>
             Creates a new instance using the specified latitudes and longitudes.
             </summary>
             <param name="top">The top.</param>
             <param name="left">The left.</param>
             <param name="bottom">The bottom.</param>
             <param name="right">The right.</param>
             <returns>A <strong>GeographicRectangle</strong> bound by the specified values.</returns>
            
             <example>
               <code lang="VB" title="[New Example]">
             Dim Left As New Longitude(-105)
             Dim Top As New Latitude(39)
             Dim Right As New Longitude(-100)
             Dim Top As New Latitude(37)
             Dim Rectangle As New GeographicRectangle(Left, Top, Right, Bottom)
               </code>
               <code lang="CS" title="[New Example]">
             Latitude Top = new Latitude(39);
             Longitude Left = new Longitude(-105);
             Latitude Bottom = new Latitude(37);
             Longitude Right = new Longitude(-100);
             GeographicRectangle Rectangle = new GeographicRectangle(Top, Left, Bottom, Right);
               </code>
               </example>
             <remarks>If the left and right, or top and bottom values are backwards, they are
             automatically swapped before creating the rectangle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.GeographicRectangle"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from a block of Geography Markup Language (GML).
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.TranslateTo(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Distance)">
            <summary>
            Moves the rectangle in the specified direction by the specified distance.
            </summary>
            <param name="direction">The direction.</param>
            <param name="distance">The distance.</param>
            <returns>A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.</returns>
            <example>
            This example defines a rectangle then shifts it Northeast by fifty kilometers.
              <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N, 105W, 1°, 5°")
            Rectangle = Rectangle.Translate(Azimuth.Northeast, New Distance(50, DistanceUnit.Kilometers))
              </code>
              <code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N, 105W, 1°, 5°");
            Rectangle = Rectangle.Translate(Azimuth.Northeast, New Distance(50, DistanceUnit.Kilometers));
              </code>
              </example>
            <remarks>This method is used to shift a rectangle to a new location while preserving its
            size.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.TranslateTo(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Distance)">
            <summary>
            Moves the rectangle in the specified direction by the specified distance.
            </summary>
            <param name="direction">The direction.</param>
            <param name="distance">The distance.</param>
            <returns>A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.</returns>
            <example>
            This example defines a rectangle then shifts it Northeast by fifty kilometers.
              <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N, 105W, 1°, 5°")
            Rectangle = Rectangle.Translate(new Angle(45), New Distance(50, DistanceUnit.Kilometers))
              </code>
              <code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N, 105W, 1°, 5°");
            Rectangle = Rectangle.Translate(new Angle(45), New Distance(50, DistanceUnit.Kilometers));
              </code>
              </example>
            <remarks>This method is used to shift a rectangle to a new location while preserving its
            size.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.TranslateTo(System.Double,DotSpatial.Positioning.Distance)">
            <summary>
            Moves the rectangle in the specified direction by the specified distance.
            </summary>
            <param name="direction">The direction.</param>
            <param name="distance">The distance.</param>
            <returns>A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.</returns>
            <example>
            This example defines a rectangle then shifts it Northeast by fifty kilometers.
              <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N, 105W, 1°, 5°")
            Rectangle = Rectangle.Translate(45, New Distance(50, DistanceUnit.Kilometers))
              </code>
              <code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N, 105W, 1°, 5°");
            Rectangle = Rectangle.Translate(45, New Distance(50, DistanceUnit.Kilometers));
              </code>
              </example>
            <remarks>This method is used to shift a rectangle to a new location while preserving its
            size.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.ToArray">
            <summary>
            Returns the points which form the rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IsDisjointedFrom(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Indicates if the rectangle does not intersect the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns><c>true</c> if [is disjointed from] [the specified rectangle]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IsEnclosing(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Indicates if the specified GeographicRectangle is entirely within the current GeographicRectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns><c>true</c> if the specified rectangle is enclosing; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IsEnclosing(DotSpatial.Positioning.Position)">
            <summary>
            Determines whether the specified position is enclosing.
            </summary>
            <param name="position">The position.</param>
            <returns><c>true</c> if the specified position is enclosing; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.CenterOn(DotSpatial.Positioning.Position)">
            <summary>
            Moves the GeographicRectangle so that the specified position is at its center.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.FromCenter(DotSpatial.Positioning.Position,DotSpatial.Positioning.GeographicSize)">
            <summary>
            Creates a new rectangle of the specified size, centered on the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.UnionWith(DotSpatial.Positioning.Position)">
            <summary>
            Expands the edges of the GeographicRectangle to contain the specified position.
            </summary>
            <param name="position">A <strong>Position</strong> object to surround.</param>
            <returns>A <strong>GeographicRectangle</strong> which contains the specified position.</returns>
            <remarks>If the specified position is already enclosed, the current instance will be returned.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Inflate(DotSpatial.Positioning.GeographicSize)">
            <summary>
            Increases the size of the rectangle while maintaining its center point.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Inflate(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Increases the width and height of the rectangle by the specified amount.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Inflate(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Increases the width and height of the rectangle by the specified amount.
            </summary>
            <param name="height">The latitudinal height.</param>
            <param name="width">The longitudinal width.</param>
            <returns>A geographic size rectangle for the height and width specified.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IntersectionOf(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Calculates the rectangle created by the intersection of this and another rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IsIntersectingWith(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Indicates if the rectangle's border crosses or shares the border of the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns><c>true</c> if [is intersecting with] [the specified rectangle]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IsOverlapping(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Indicates if the specified GeographicRectangle shares any of the same 2D space as the current instance.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns><c>true</c> if the specified rectangle is overlapping; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IsOverlapping(DotSpatial.Positioning.Position)">
            <summary>
            Indicates if the specified Position is within the current instance.
            </summary>
            <param name="position">A <strong>Position</strong> to test against the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the position is inside of the current rectangle.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.UnionWith(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Returns the combination of the current instance with the specified rectangle.
            </summary>
            <param name="rectangle">A <strong>GeographicRectangle</strong> to merge with the current instance.</param>
            <returns>A <strong>GeographicRectangle</strong> enclosing both rectangles.</returns>
            <remarks>This method returns the smallest possible rectangle which encloses the current instance as well as the specified rectangle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.GetHashCode">
            <summary>
            Returns a unique code of the rectangle for hash tables.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.UnionWith(DotSpatial.Positioning.GeographicRectangle,DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Returns a rectangle which encloses the two specified rectangles.
            </summary>
            <param name="first">A <strong>GeographicRectangle</strong> to merge with the second rectangle.</param>
            <param name="second">A <strong>GeographicRectangle</strong> to merge with the first rectangle.</param>
            <returns>A <strong>GeographicRectangle</strong> as a result of merging the two
            rectangles.</returns>
            <remarks>This method is typically used to combine two individual shapes into a single
            shape.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.IntersectionOf(DotSpatial.Positioning.GeographicRectangle,DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Returns the GeographicRectangle formed by the intersection of the two specified GeographicRectangles.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.FromArray(DotSpatial.Positioning.Position[])">
            <summary>
            Returns a rectangle which encloses the specified points.
            </summary>
            <param name="positions">An array of PointD objects to enclose.</param>
            <returns>A <strong>RectangleD</strong> object enclosing the specified points.</returns>
            <remarks>This method is typically used to calculate a rectangle surrounding
            points which have been rotated.  For example, if a rectangle is rotated by 45°, the
            total width it occupies is greater than it's own width.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Parse(System.String)">
            <summary>
            Parses a string into a GeographicRectangle object.
            </summary>
            <param name="value">A <string>String</string> specifying geographic coordinates defining a rectangle.</param>
            <returns>A <strong>GeographicRectangle</strong> object using the specified coordinates.</returns>
            <remarks>This powerful method will convert points defining a rectangle in the form of a string into
            a GeographicRectangle object.  The string can be</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.op_Explicit(System.String)~DotSpatial.Positioning.GeographicRectangle">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.GeographicRectangle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.op_Explicit(DotSpatial.Positioning.GeographicRectangle)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.GeographicRectangle"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.Equals(DotSpatial.Positioning.GeographicRectangle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicRectangle.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Top">
            <summary>
            Returns the southern-most side of the rectangle.
            </summary>
            <value>A <see cref="T:DotSpatial.Positioning.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Bottom">
            <summary>
            Returns the southern-most latitude of the rectangle.
            </summary>
            <value>A <see cref="T:DotSpatial.Positioning.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Left">
            <summary>
            Returns the western-most side of the rectangle.
            </summary>
            <value>A <strong>Longitude</strong> indicating the left side of the rectangle.</value>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Right">
            <summary>
            Returns the eastern-most side of the rectangle.
            </summary>
            <value>A <strong>Longitude</strong> indicating the right side of the rectangle.</value>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Center">
            <summary>
            Returns the geographic center of the rectangle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.AspectRatio">
            <summary>
            Returns the aspect ratio of the rectangle.
            </summary>
            <remarks>This property returns the ratio of the GeographicRectangles width to its height (width / height).  This
            property gives an indication of the GeographicRectangle's shape.  An aspect ratio of one indicates
            a square, whereas an aspect ratio of two indicates a GeographicRectangle which is twice as wide as
            it is high.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.IsEmpty">
            <summary>
            Indicates if the rectangle has any value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if a metor the size of Rhode
            Island is about to crash into the Pacific Ocean just off the coast of Nicaragua but
            there will be no casualties because everyone was warned plenty of time in
            advance.</value>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Hypotenuse">
            <summary>
            Returns the rectangle's hypotenuse.
            </summary>
            <remarks>The hypotenuse of a rectangle is a line connecting its northwest corner with its southeast corner.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Width">
            <summary>
            Returns the distance from the left to the right at the rectangle's middle latitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Height">
            <summary>
            Returns the distance from the top to the bottom at the rectangle's middle longitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.HeightDegrees">
            <summary>
            Gets the height degrees.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.WidthDegrees">
            <summary>
            Gets the width degrees.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Size">
            <summary>
            Returns the width and height of the rectangle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Northwest">
            <summary>
            Returns the northwestern corner of the rectangle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.NorthCenter">
            <summary>
            Returns a point on the northern side, centered horizontally.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.SouthCenter">
            <summary>
            Returns a point on the southern side, centered horizontally.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.WestCenter">
            <summary>
            Returns a point on the western side, centered vertically.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.EastCenter">
            <summary>
            Returns a point on the eastern side, centered vertically.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Northeast">
            <summary>
            Returns the northeastern corner of the rectangle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Southwest">
            <summary>
            Returns the southwestern corner of the rectangle.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicRectangle.Southeast">
            <summary>
            Returns the southeastern corner of the rectangle.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.PointD">
            <summary>
            Represents a highly-precise pixel coordinate.
            </summary>
            <remarks><para>This class behaves similar to the <strong>PointF</strong> structure in the
              <strong>System.Drawing</strong> namespace, except that it supports double-precision
            values and can be converted into a geographic coordinate. This structure is also
            supported on the Compact Framework version of the <strong>DotSpatial.Positioning</strong>,
            whereas <strong>PointF</strong> is not.</para>
              <para>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be changed via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.PointD._x">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PointD._y">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PointD.Empty">
            <summary>
            Returns a point with no value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PointD.Invalid">
            <summary>
            Represents an invalid coordinate.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance for the specified coordinates.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.PointD"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.PointD"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.PointD"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.DistanceTo(DotSpatial.Positioning.PointD)">
            <summary>
            Calculates the distance to another pixel.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.IsAbove(DotSpatial.Positioning.PointD)">
            <summary>
            Indicates if the current instance is closer to the top of the monitor than the
            specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is above; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.IsBelow(DotSpatial.Positioning.PointD)">
            <summary>
            Indicates if the current instance is closer to the bottom of the monitor than the
            specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is below; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.IsLeftOf(DotSpatial.Positioning.PointD)">
            <summary>
            Indicates if the current instance is closer to the left of the monitor than the
            specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is left of] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.IsRightOf(DotSpatial.Positioning.PointD)">
            <summary>
            Indicates if the current instance is closer to the right of the monitor than the
            specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is right of] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Mirror">
            <summary>
            Returns the current instance with its signs switched.
            </summary>
            <returns></returns>
            <remarks>This method returns a new point where the signs of X and Y are flipped.  For example, if
            a point, represents (20, 40), this function will return (-20, -40).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Rotate(DotSpatial.Positioning.Angle)">
            <summary>
            Returns the current instance rotated about (0, 0).
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Rotate(System.Double)">
            <summary>
            Returns the current instance rotated about (0, 0).
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.RotateAt(DotSpatial.Positioning.Angle,DotSpatial.Positioning.PointD)">
            <summary>
            Returns the current instance rotated about the specified point.
            </summary>
            <param name="angle">The angle.</param>
            <param name="center">The center.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.RotateAt(System.Double,DotSpatial.Positioning.PointD)">
            <summary>
            Rotates at.
            </summary>
            <param name="angle">The angle.</param>
            <param name="center">The center.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.GetHashCode">
            <summary>
            Returns a unique code used for hash tables.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Equality(DotSpatial.Positioning.PointD,DotSpatial.Positioning.PointD)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Inequality(DotSpatial.Positioning.PointD,DotSpatial.Positioning.PointD)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Addition(DotSpatial.Positioning.PointD,DotSpatial.Positioning.PointD)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Subtraction(DotSpatial.Positioning.PointD,DotSpatial.Positioning.PointD)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Multiply(DotSpatial.Positioning.PointD,DotSpatial.Positioning.PointD)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Division(DotSpatial.Positioning.PointD,DotSpatial.Positioning.PointD)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Add(DotSpatial.Positioning.PointD)">
            <summary>
            Returns the sum of two points by adding X and Y values together.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
            <remarks>This method adds the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Add(System.Double,System.Double)">
            <summary>
            Returns the sum of two points by adding X and Y values together.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
            <returns></returns>
            <remarks>This method adds the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Subtract(DotSpatial.Positioning.PointD)">
            <summary>
            Returns the difference of two points by subtracting the specified X and Y values.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
            <remarks>This method subtracts the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Subtract(System.Double,System.Double)">
            <summary>
            Returns the difference of two points by subtracting the specified X and Y values.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
            <returns></returns>
            <remarks>This method subtracts the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Multiply(DotSpatial.Positioning.PointD)">
            <summary>
            Returns the product of two points by multiplying X and Y values together.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
            <remarks>This method multiplies the X and Y coordinates together and returns a new point at that location.  This
            is typically used to scale a point from one coordinate system to another.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Multiply(System.Double,System.Double)">
            <summary>
            Multiplies the specified offset X.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Divide(DotSpatial.Positioning.PointD)">
            <summary>
            Divides the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Divide(System.Double,System.Double)">
            <summary>
            Divides the specified offset X.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.op_Explicit(DotSpatial.Positioning.PointD)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.PointD"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Equals(DotSpatial.Positioning.PointD)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.Equals(DotSpatial.Positioning.PointD,System.Int32)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="precision">The precision.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.PointD.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.PointD.X">
            <summary>
            Gets or sets the x-coordinate of this PointD.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:DotSpatial.Positioning.PointD.Lam">
            <summary>
            For projected coordinates, this is the factor Lamda or the longitude parameter.
            For readability only, the value is X.
            </summary>
            <value>The lam.</value>
        </member>
        <member name="P:DotSpatial.Positioning.PointD.Y">
            <summary>
            Gets or sets the x-coordinate of this PointD.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:DotSpatial.Positioning.PointD.Phi">
            <summary>
            For projected coordinates, this is the factor Phi or the latitude parameter.
            For readability only, the value is Y.
            </summary>
            <value>The phi.</value>
        </member>
        <member name="P:DotSpatial.Positioning.PointD.IsEmpty">
            <summary>
            Returns whether the current instance has no value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.PointD.IsInvalid">
            <summary>
            Returns whether the current instance has an invalid value.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Angle_ExtraCharactersWereEncountered">
            <summary>
              Looks up a localized string similar to Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Angle_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as an angular measurement..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Angle_InvalidInterval">
            <summary>
              Looks up a localized string similar to The interval must be a value greater than zero, between 0 and 60..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Angle_InvalidToStringFormat">
            <summary>
              Looks up a localized string similar to Invalid format for Angle.ToString() method..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Angle_OnlyRightmostIsDecimal">
            <summary>
              Looks up a localized string similar to Only the right-most number of a sexagesimal measurement can be a fractional value..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Angle_TypeMismatch">
            <summary>
              Looks up a localized string similar to An Angle can only be compared with Angle, Double, or String values..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Area_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as an area measurement..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Area_InvalidNumericPortion">
            <summary>
              Looks up a localized string similar to The numeric portion of the area measurement could not be recognized..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Area_InvalidUnitPortion">
            <summary>
              Looks up a localized string similar to The unit portion of the area measurement could not be recognized..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Azimuth_ConversionNotImplemented">
            <summary>
              Looks up a localized string similar to The azimuth cannot be converted to a because no conversion has been implemented internally.  Please contact info@DotSpatial.Positioning.com with the source and destination unit types..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Azimuth_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to An Azimuth can only be compared with another Azimuth, or a Double..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Common_Empty">
            <summary>
              Looks up a localized string similar to Empty.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Common_Infinity">
            <summary>
              Looks up a localized string similar to Infinity.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Distance_ConversionNotImplemented">
            <summary>
              Looks up a localized string similar to The distance cannot be converted because no conversion has been implemented internally.  Please contact info@DotSpatial.Positioning.com with the source and destination unit types..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Distance_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to Distance objects can only be compared with other Distance objects..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Distance_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a distance measurement..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Distance_InvalidNumericPortion">
            <summary>
              Looks up a localized string similar to The numeric portion of the distance measurement could not be recognized..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Distance_InvalidUnitPortion">
            <summary>
              Looks up a localized string similar to The unit portion of the distance measurement could not be recognized..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicense_InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to The specified license key is invalid.  Please contact DotSpatial.Positioning to look up license keys you have purchased: http://dotspatial.codeplex.com/Secured/LicenseKeys.aspx..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_AskToGoOnline">
            <summary>
              Looks up a localized string similar to Would you like to go online now to activate your trial?  An email address will not be required unless you&apos;re behind a proxy server..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_ExecutionStoppedDialogTitle">
            <summary>
              Looks up a localized string similar to {0} Stopped Execution.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_ExecutionStoppedNeedKeys">
            <summary>
              Looks up a localized string similar to Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided, or the reference the assembly has been removed..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_ExecutionStoppedVisitWebSite">
            <summary>
              Looks up a localized string similar to Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided.  Please visit http://dotspatial.codeplex.com/FreeTrialLicenseKeys.aspx to obtain free license keys for any of our products..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_GoOnlineForTrialKeys">
            <summary>
              Looks up a localized string similar to Do you want to go online to activate free trial license keys?.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to An invalid license key was encountered while attempting to grant a license to a DotSpatial.Positioning object.  The invalid key is &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_InvalidMajorVersion">
            <summary>
              Looks up a localized string similar to The license key for {0} is valid for a different major version of the software.  Please visit http://dotspatial.codeplex.com/Shop for pricing on products for this version.  Updates to DotSpatial.Positioning software are always free for each minor version change (e.g. versions 2.0 through 2.999).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_InvalidPlatform">
            <summary>
              Looks up a localized string similar to The license key for {0} is not valid for the current .NET platform.  Please contact support@DotSpatial.Positioning.com for assistance or visit http://dotspatial.codeplex.com/Shop for pricing on products for this platform..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_LicenseKeyDialogTitle">
            <summary>
              Looks up a localized string similar to A DotSpatial.Positioning License Key Is Required.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_LicenseKeyIsRequired">
            <summary>
              Looks up a localized string similar to A license key is required for this DotSpatial.Positioning assembly to function.  You can activate a free thirty-day trial online at http://dotspatial.codeplex.com..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_ValidOwnerLicense">
            <summary>
              Looks up a localized string similar to A valid owner license has been granted for {0}.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.DotSpatial_PositioningLicenseProvider_ValidTrialLicense">
            <summary>
              Looks up a localized string similar to A trial license has been granted for {0} until {1}.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.GeographicSize_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified value could not be parsed into a GeographicSize object because two delimited values are required (Width, Height)..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Latitude_DecimalOrSexagesimalRequired">
            <summary>
              Looks up a localized string similar to The Parse method requires a decimal or sexagesimal measurement..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Latitude_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to A Latitude can only be compared with another Latitude, Double or String..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Latitude_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a latitude..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Latitude_InvalidHemisphere">
            <summary>
              Looks up a localized string similar to The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;North&apos; or &apos;South&apos; is required..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Latitude_LatitudeHemisphereExpected">
            <summary>
              Looks up a localized string similar to The hemisphere specified indicates a longitude but a latitude is expected..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Latitude_OnlyRightmostIsDecimal">
            <summary>
              Looks up a localized string similar to Only the right-most number can be a floating-point value..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Longitude_DecimalOrSexagesimalRequired">
            <summary>
              Looks up a localized string similar to The Parse method requires a decimal or sexagesimal measurement..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Longitude_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to A Longitude can only be compared with another Longitude, Double or String..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Longitude_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a longitude..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Longitude_InvalidHemisphere">
            <summary>
              Looks up a localized string similar to The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;East&apos; or &apos;West&apos; is required..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Longitude_LongitudeHemisphereExpected">
            <summary>
              Looks up a localized string similar to The hemisphere specified indicates a latitude but a longitude is expected..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Longitude_OnlyRightmostIsDecimal">
            <summary>
              Looks up a localized string similar to Only the right-most number can be a floating-point value..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_DistanceTo_Null_Ellipsoid">
            <summary>
              Looks up a localized string similar to The Position.DistanceTo method requires a non-null ellipsoid parameter..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_DuplicateZoneInformation">
            <summary>
              Looks up a localized string similar to Duplicate UTM zone information was found when trying to parse a UTM coordinate..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a spherical or UTM coordinate..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_InvalidUTMCoordinate">
            <summary>
              Looks up a localized string similar to The specified string could not be recognized as a valid UTM coordinate..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_InvalidZoneLetter">
            <summary>
              Looks up a localized string similar to A UTM zone letter can only be one character long.  Multiple characters were encountered..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_InvalidZoneNumber">
            <summary>
              Looks up a localized string similar to A UTM zone number can only be one or two characters long.  Multiple characters were encountered..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_NoUTMZoneLetter">
            <summary>
              Looks up a localized string similar to No UTM zone letter could be located within the specified string..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Position_NoUTMZoneNumber">
            <summary>
              Looks up a localized string similar to No UTM zone number could be located within the specified string..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.PositionCollection_AreaError">
            <summary>
              Looks up a localized string similar to The total area could not be calculated..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.PositionCollection_DistanceError">
            <summary>
              Looks up a localized string similar to The total distance could not be calculated..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.PositionCollection_RangeMustBeAboveZero">
            <summary>
              Looks up a localized string similar to The range must be a distance greater than or equal to zero..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.RectangleD_HeightMustBeAboveZero">
            <summary>
              Looks up a localized string similar to Height must be a number greater than zero..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.RectangleD_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified value could not be parsed into a RectangleD object because four delimited values are required (Top, Left, Bottom, Right)..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.RectangleD_WidthMustBeAboveZero">
            <summary>
              Looks up a localized string similar to Width must be a number greater than zero..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.SizeD_InvalidFormat">
            <summary>
              Looks up a localized string similar to Two values must be supplied to create a SizeD object from a string.  Verify that the CultureInfo passed matches the delimiter used to separate the values..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Speed_InvalidFormat">
            <summary>
              Looks up a localized string similar to The specified format could not be fully recognized as a speed measurement..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Speed_InvalidNumericPortion">
            <summary>
              Looks up a localized string similar to The numeric portion of the speed measurement could not be recognized..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.Speed_InvalidUnitPortion">
            <summary>
              Looks up a localized string similar to The unit portion of the speed measurement could not be recognized..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.TrialLicense_ExpirationDate">
            <summary>
              Looks up a localized string similar to Trial License Expires {0} ({1} days remaining).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.TrialLicense_ExtendTrial">
            <summary>
              Looks up a localized string similar to Would you like to go online to try and extend your free trial now?.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.TrialLicense_InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to Purchased license keys cannot be used as trial license keys.  Please use another key or contact DotSpatial.Positioning for further assistance..
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.TrialLicense_LicenseExpired">
            <summary>
              Looks up a localized string similar to Sorry, the trial key for the following DotSpatial.Positioning assembly expired on {0}.  You can go online to try and extend your trial another month, or you can purchase a license key online.\r\n\r\n{1}.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Properties.Resources.TrialLicense_LicenseExpiredDialogTitle">
            <summary>
              Looks up a localized string similar to DotSpatial.Positioning Trial Has Expired.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Percent">
            <summary>
            Represents a number as a fraction of one hundred.
            </summary>
            <example>
            These examples create <strong>Percent</strong> objects using different
            constructors.
              <code lang="CS" description="This example creates a percentage of 25% using the decimal value 0.25.">
            // Create a percentage of 25%
            Percent twentyFivePercent = new Percent(0.25f);
              </code>
              <code lang="VB" description="This example creates a percentage of 25% using the decimal value 0.25.">
            ' Create a percentage of 25%
            Dim TwentyFivePercent As New Percent(0.25)
              </code>
              <code lang="CS" description="This example creates a percentage of 25.4% using a string. Since not all cultures use a period (.) as a separator, a CultureInfo object is passed.">
            // Create a percentage of 25%
            Percent twentyFivePercent = New Percent("25.4%", CultureInfo.InvariantCulture);
              </code>
              <code lang="VB" description="This example creates a percentage of 25.4% using a string. Since not all cultures use a period (.) as a separator, a CultureInfo object is passed.">
            ' Create a percentage of 25%
            Dim TwentyFivePercent As New Percent("25.5%", CultureInfo.InvariantCulture)
              </code>
              </example>
            <remarks><para>This class is used to express one quantity relative to another quantity.
            Percentage values are presented in string form using the percent symbol of the
            local culture (usually the percent symbol "%"). When percentage values are
            expressed in decimal form the value is divided by one hundred. In other words, the
            value "25%" is equivalent to 0.25.</para>
              <para>This class is culture-sensitive, meaning that both the percent symbol and the
            numeric format is interpreted and presented differently depending on the local
            culture. As a result, the <strong>CultureInfo</strong> object should be used any
            time a value is parsed from a <strong>String</strong> or output as a String using
            the <strong>ToString</strong> method.</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Percent._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.Zero">
            <summary>
            Represents a percentage value of zero.
            </summary>
            <value>
            A <strong>Percentage</strong> value, representing <strong>0%</strong> and
              <strong>0.0</strong>.
              </value>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.OneHundredPercent">
            <summary>
            Represents a value of one hundred percent.
            </summary>
            <value>
            A <strong>Percentage</strong> value, meaning <strong>100%</strong> or
              <strong>1.0</strong>.
              </value>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.FiftyPercent">
            <summary>
            Represents a percentage of fifty percent.
            </summary>
            <value>
            A <strong>Percentage</strong> value, representing <strong>50%</strong> or
              <strong>0.5</strong>.
              </value>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.TenPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.TwentyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.ThirtyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.FortyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.SixtyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.SeventyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.EightyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.NinetyPercent">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Percent.TwentyFivePercent">
            <summary>
            Represents a value of twenty-five percent.
            </summary>
            <value>
            A <strong>Percentage</strong> value, representing <strong>25%</strong> or
              <strong>0.25</strong>.
              </value>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.#ctor(System.Single)">
            <summary>
            Creates a new instance using the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Percent"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Percent"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.PercentageOf(System.Double)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.PercentageOf(System.Single)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.PercentageOf(System.Int32)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.ToString">
            <summary>
            Returns the percentage formatted as a <strong>String</strong>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Equality(DotSpatial.Positioning.Percent,DotSpatial.Positioning.Percent)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Equality(DotSpatial.Positioning.Percent,System.Single)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Inequality(DotSpatial.Positioning.Percent,DotSpatial.Positioning.Percent)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Inequality(DotSpatial.Positioning.Percent,System.Single)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Multiply(DotSpatial.Positioning.Percent,System.Double)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Multiply(DotSpatial.Positioning.Percent,System.Single)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Multiply(DotSpatial.Positioning.Percent,System.Int32)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.Multiply(System.Double)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.Multiply(System.Single)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.Multiply(System.Int32)">
            <summary>
            Returns the percentage of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Explicit(System.Single)~DotSpatial.Positioning.Percent">
            <summary>
            Converts the specified value to a <strong>Percent</strong> object.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Explicit(System.Double)~DotSpatial.Positioning.Percent">
            <summary>
            Converts the specified value to a <strong>Percent</strong> object.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Explicit(System.Int32)~DotSpatial.Positioning.Percent">
            <summary>
            Converts the specified value to a <strong>Percent</strong> object.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.op_Explicit(System.String)~DotSpatial.Positioning.Percent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.Percent"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the percentage formatted as a <strong>String</strong>.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.Equals(DotSpatial.Positioning.Percent)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Percent.CompareTo(DotSpatial.Positioning.Percent)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Percent.Value">
            <summary>
            Returns the decimal value of the percentage.
            </summary>
            <remarks>The value of a <strong>Percent</strong> object is 1/100th of the
            percentage.  In other words, if the percentage is "15%" then the <strong>Value</strong>
            property will return <strong>0.15</strong>, and a percentage of "100%" means a
            <strong>Value</strong> of <strong>1.0</strong>.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Percent.IsEmpty">
            <summary>
            Returns whether the value equals zero.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Datum">
            <summary>
            Represents a coordinate system based on interpretations of the Earth's shape and size.
            </summary>
            <seealso cref="P:DotSpatial.Positioning.Datum.Ellipsoid">Ellipsoid Class</seealso>
            <remarks><para>Over the course of history, advances in technology have given people the
            ability to more accurately measure the shape and size of the Earth. Since countries
            have built significant infrastructure based upon older coordinate systems, they
            cannot immediately abandon them in favor of new ones. As a result, there are now
            over fifty interpretations of Earth's shape and size in use all over the
            world.</para>
              <para>Some datums, such as World Geodetic System 1984 (or WGS84 for short) are
            becoming more widely used throughout the world, and this datum is used by nearly
            all GPS devices. However, while the world is slowly standardizing its datums, some
            datums will not be abandoned because they remain quite accurate for a specific,
            local area.</para>
              <para>A datum on its own is nothing more than a more granular interpretation of an
            ellipsoid. Typically, more specific coordinate transformation information is
            further associated with a datum to produce meaningful information. For example,
            Helmert and Molodensky coordinate conversion formulas use several local conversion
            parameters for each datum.</para>
              <para>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be set via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Datum._epsgNumber">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum._primeMeridian">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum._ellipsoid">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum._datums">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum._epsgDatums">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedAiry1830">
            <summary>
            Not specified (based on the Airy 1830 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedAiryModified1849">
            <summary>
            Not specified (based on the Airy Modified 1849 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedAustralianNationalSpheroid">
            <summary>
            Not specified (based on the Australian National Spheroid ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedBessel1841">
            <summary>
            Not specified (based on the Bessel 1841 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedBesselModified">
            <summary>
            Not specified (based on the Bessel Modified ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedBesselNamibiaGlm">
            <summary>
            Not specified (based on the Bessel Namibia (GLM) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1858">
            <summary>
            Not specified (based on the Clarke 1858 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1866">
            <summary>
            Not specified (based on the Clarke 1866 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1866Michigan">
            <summary>
            Not specified (based on the Clarke 1866 Michigan ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1880Benoit">
            <summary>
            Not specified (based on the Clarke 1880 (Benoit) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1880IGN">
            <summary>
            Not specified (based on the Clarke 1880 (IGN) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1880RGS">
            <summary>
            Not specified (based on the Clarke 1880 (RGS) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1880Arc">
            <summary>
            Not specified (based on the Clarke 1880 (Arc) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1880SGA1922">
            <summary>
            Not specified (based on the Clarke 1880 (SGA 1922) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedEverest1937Adjustment">
            <summary>
            Not specified (based on the Everest 1830 (1937 Adjustment) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedEverest1967Definition">
            <summary>
            Not specified (based on the Everest 1830 (1967 Definition) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedEverest1830Modified">
            <summary>
            Not specified (based on the Everest 1830 Modified ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedGrs1980">
            <summary>
            Not specified (based on the GRS 1980 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedHelmert1906">
            <summary>
            Not specified (based on the Helmert 1906 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedIndonesianNationalSpheroid">
            <summary>
            Not specified (based on the Indonesian National Spheroid ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedInternational1924">
            <summary>
            Not specified (based on the International 1924 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedKrassowsky1940">
            <summary>
            Not specified (based on the Krassowsky 1940 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedNwl9D">
            <summary>
            Not specified (based on the NWL 9D ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedPlessis1817">
            <summary>
            Not specified (based on the Plessis 1817 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedStruve1860">
            <summary>
            Not specified (based on the Struve 1860 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedWarOffice">
            <summary>
            Not specified (based on the War Office ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedWGS84">
            <summary>
            Not specified (based on the WGS 84 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedGem10C">
            <summary>
            Not specified (based on the GEM 10C ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedOsu86F">
            <summary>
            Not specified (based on the OSU86F ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedOsu91A">
            <summary>
            Not specified (based on the OSU91A ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1880">
            <summary>
            Not specified (based on the Clarke 1880 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedSphere">
            <summary>
            Not specified (based on the Sphere ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedGrs1967">
            <summary>
            Not specified (based on the GRS 1967 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedAverageTerrestrialSystem1977">
            <summary>
            Not specified (based on the Average Terrestrial System 1977 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedEverest1830Definition">
            <summary>
            Not specified (based on the Everest (1830 Definition) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedWGS72">
            <summary>
            Not specified (based on the WGS 72 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedEverest18301962Definition">
            <summary>
            Not specified (based on the Everest 1830 (1962 Definition) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedEverest1975Definition">
            <summary>
            Not specified (based on the Everest 1830 (1975 Definition) ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedGrs1980AuthalicSphere">
            <summary>
            Not specified (based on the GRS 1980 Authalic Sphere ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedClarke1866AuthalicSphere">
            <summary>
            Not specified (based on the Clarke 1866 Authalic Sphere ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedInternational1924AuthalicSphere">
            <summary>
            Not specified (based on the International 1924 Authalic Sphere ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.UnspecifiedHughes1980">
            <summary>
            Not specified (based on the Hughes 1980 ellipsoid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Greek">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GreekGeodeticReferenceSystem1987">
            <summary>
            Greek Geodetic Reference System 1987
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AverageTerrestrialSystem1977">
            <summary>
            Average Terrestrial System 1977
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kartastokoordinaattijarjestelma1966">
            <summary>
            Kartastokoordinaattijarjestelma (1966)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Riketskoordinatsystem1990">
            <summary>
            Rikets koordinatsystem 1990
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Samboja">
            <summary>
            Samboja
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lithuania1994Etrs89">
            <summary>
            Lithuania 1994 (ETRS89)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tete">
            <summary>
            Tete
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Madzansua">
            <summary>
            Madzansua
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Observatario">
            <summary>
            Observatario
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MoznetItrf94">
            <summary>
            Moznet (ITRF94)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Indian1960">
            <summary>
            Indian 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Indian">
            <summary>
            Represents the Indian datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.FinalDatum1958">
            <summary>
            Final Datum 1958
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Estonia1992">
            <summary>
            Estonia 1992
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PdoSurveyDatum1993">
            <summary>
            PDO Survey Datum 1993
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.OldHawaiian">
            <summary>
            Old Hawaiian
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StLawrenceIsland">
            <summary>
            St. Lawrence Island
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StPaulIsland">
            <summary>
            St. Paul Island
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StGeorgeIsland">
            <summary>
            St. George Island
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PuertoRico">
            <summary>
            Puerto Rico
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nad83CanadianSpatialReferenceSystem">
            <summary>
            NAD83 Canadian Spatial Reference System
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Israel">
            <summary>
            Israel
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Locodjo1965">
            <summary>
            Locodjo 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Abidjan1987">
            <summary>
            Abidjan 1987
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kalianpur1937">
            <summary>
            Kalianpur 1937
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kalianpur1962">
            <summary>
            Kalianpur 1962
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kalianpur1975">
            <summary>
            Kalianpur 1975
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Hanoi1972">
            <summary>
            Hanoi 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Hartebeesthoek94">
            <summary>
            Hartebeesthoek94
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ch1903">
            <summary>
            CH1903
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ch1903Plus">
            <summary>
            CH1903+
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SwissTerrestrialReferenceFrame1995">
            <summary>
            Swiss Terrestrial Reference Frame 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nad83HighAccuracyRegionalNetwork">
            <summary>
            NAD83 (High Accuracy Regional Network)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Rassadiran">
            <summary>
            Rassadiran
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EuropeanDatum1977">
            <summary>
            European Datum 1950(1977)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Dabola1981">
            <summary>
            Dabola 1981
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.JednotneTrigonometrickeSiteKatastralni">
            <summary>
            Jednotne Trigonometricke Site Katastralni
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MountDillon">
            <summary>
            Mount Dillon
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Naparima1955">
            <summary>
            Naparima 1955
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EuropeanLibyanDatum1979">
            <summary>
            European Libyan Datum 1979
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ChosMalal1914">
            <summary>
            Chos Malal 1914
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PampadelCastillo">
            <summary>
            Pampa del Castillo
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.KoreanDatum1985">
            <summary>
            Korean Datum 1985
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.YemenNationalGeodeticNetwork1996">
            <summary>
            Yemen National Geodetic Network 1996
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SouthYemen">
            <summary>
            South Yemen
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Bissau">
            <summary>
            Bissau
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.KoreanDatum1995">
            <summary>
            Korean Datum 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NewZealandGeodeticDatum2000">
            <summary>
            New Zealand Geodetic Datum 2000
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Accra">
            <summary>
            Accra
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AmericanSamoa1962">
            <summary>
            American Samoa 1962
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SistemadeReferenciaGeocentricoparaAmericadelSur1995">
            <summary>
            Sistema de Referencia Geocentrico para America del Sur 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauGeodesiqueFrancais1993">
            <summary>
            Reseau Geodesique Francais 1993
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PosicionesGeodesicasArgentinas">
            <summary>
            Posiciones Geodesicas Argentinas
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Irenet95">
            <summary>
            IRENET95
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SierraLeoneColony1924">
            <summary>
            Sierra Leone Colony 1924
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SierraLeone1968">
            <summary>
            Sierra Leone 1968
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AustralianAntarcticDatum1998">
            <summary>
            Australian Antarctic Datum 1998
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Pulkovo1983">
            <summary>
            Pulkovo 1942/83
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Pulkovo1958">
            <summary>
            Pulkovo 1942/58
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Estonia1997">
            <summary>
            Estonia 1997
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Luxembourg1930">
            <summary>
            Luxembourg 1930
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AzoresOccidentalIslands1939">
            <summary>
            Azores Occidental Islands 1939
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ObservatorioMeteorologico1939">
            <summary>
            Represents the Observatorio Meteorologico datum of 1939.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AzoresCentralIslands1948">
            <summary>
            Azores Central Islands 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GraciosaBaseSw1948">
            <summary>
            Represents the Graciosa Base SW datum of 1948.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AzoresOrientalIslands1940">
            <summary>
            Azores Oriental Islands 1940
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Madeira1936">
            <summary>
            Madeira 1936
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Osni1952">
            <summary>
            OSNI 1952
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.RedGeodesicaVenezolana">
            <summary>
            Red Geodesica Venezolana
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PosicionesGeodesicasArgentinas1998">
            <summary>
            Posiciones Geodesicas Argentinas 1998
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Albanian1987">
            <summary>
            Albanian 1987
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Douala1948">
            <summary>
            Douala 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Manoca1962">
            <summary>
            Manoca 1962
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Qornoq1927">
            <summary>
            Qornoq 1927
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Scoresbysund1952">
            <summary>
            Scoresbysund 1952
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ammassalik1958">
            <summary>
            Ammassalik 1958
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GarouaRGS">
            <summary>
            Garoua
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kousseri">
            <summary>
            Kousseri
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Egypt1930">
            <summary>
            Egypt 1930
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Pulkovo1995">
            <summary>
            Pulkovo 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Adindan">
            <summary>
            Adindan
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AustralianGeodeticDatum1966">
            <summary>
            Australian Geodetic Datum 1966
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AustralianGeodeticDatum1984">
            <summary>
            Australian Geodetic Datum 1984
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AinelAbd1970">
            <summary>
            Ain el Abd 1970
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Afgooye">
            <summary>
            Afgooye
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Agadez">
            <summary>
            Agadez
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lisbon1937">
            <summary>
            Lisbon 1937
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Aratu">
            <summary>
            Aratu
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Arc1950">
            <summary>
            Arc 1950
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Arc1960">
            <summary>
            Arc 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Batavia">
            <summary>
            Batavia
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Barbados1938">
            <summary>
            Barbados 1938
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Beduaram">
            <summary>
            Beduaram
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Beijing1954">
            <summary>
            Beijing 1954
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauNationalBelge1950">
            <summary>
            Reseau National Belge 1950
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Bermuda1957">
            <summary>
            Bermuda 1957
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Bogota1975">
            <summary>
            Bogota 1975
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.BukitRimpah">
            <summary>
            Bukit Rimpah
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Camacupa">
            <summary>
            Camacupa
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CampoInchauspe">
            <summary>
            Campo Inchauspe
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Cape">
            <summary>
            Cape
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Carthage">
            <summary>
            Carthage
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Chua">
            <summary>
            Chua
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CorregoAlegre">
            <summary>
            Corrego Alegre
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CotedIvoire">
            <summary>
            Cote d'Ivoire
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DeirezZor">
            <summary>
            Deir ez Zor
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Douala">
            <summary>
            Douala
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Egypt1907">
            <summary>
            Egypt 1907
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EuropeanDatum1950">
            <summary>
            European Datum 1950
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EuropeanDatum1987">
            <summary>
            European Datum 1987
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Fahud">
            <summary>
            Fahud
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Gandajika1970">
            <summary>
            Gandajika 1970
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GarouaIGN">
            <summary>
            Garoua
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GuyaneFrancaise">
            <summary>
            Guyane Francaise
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HuTzuShan">
            <summary>
            Hu Tzu Shan
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HungarianDatum1972">
            <summary>
            Hungarian Datum 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IndonesianDatum1974">
            <summary>
            Indonesian Datum 1974
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Indian1954">
            <summary>
            Indian 1954
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Indian1975">
            <summary>
            Indian 1975
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Jamaica1875">
            <summary>
            Jamaica 1875
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Jamaica1969">
            <summary>
            Jamaica 1969
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kalianpur1880">
            <summary>
            Kalianpur 1880
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kandawala">
            <summary>
            Kandawala
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kertau1968">
            <summary>
            Kertau 1968
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.KuwaitOilCompany">
            <summary>
            Kuwait Oil Company
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.LaCanoa">
            <summary>
            La Canoa
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ProvisionalSouthAmericanDatum1956">
            <summary>
            Provisional South American Datum 1956
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lake">
            <summary>
            Lake
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Leigon">
            <summary>
            Leigon
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Liberia1964">
            <summary>
            Liberia 1964
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lome">
            <summary>
            Lome
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Luzon1911">
            <summary>
            Luzon 1911
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HitoXviii1963">
            <summary>
            Hito XVIII 1963
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ProvisionalSouthChilean1963">
            <summary>
            Represents the Provisional South Chilean datum of 1963.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HeratNorth">
            <summary>
            Herat North
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Mahe1971">
            <summary>
            Mahe 1971
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Makassar">
            <summary>
            Makassar
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EuropeanTerrestrialReferenceSystem1989">
            <summary>
            European Terrestrial Reference System 1989
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Malongo1987">
            <summary>
            Malongo 1987
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Manoca">
            <summary>
            Manoca
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Merchich">
            <summary>
            Merchich
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Massawa">
            <summary>
            Massawa
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Minna">
            <summary>
            Minna
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Mhast">
            <summary>
            Mhast
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MonteMario">
            <summary>
            Monte Mario
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Mporaloko">
            <summary>
            M'poraloko
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NorthAmericanDatum1927">
            <summary>
            North American Datum 1927
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NadMichigan">
            <summary>
            NAD Michigan
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NorthAmericanDatum1983">
            <summary>
            North American Datum 1983
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nahrwan1967">
            <summary>
            Nahrwan 1967
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Naparima1972">
            <summary>
            Naparima 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NewZealandGeodeticDatum1949">
            <summary>
            New Zealand Geodetic Datum 1949
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GeodeticDatum1949">
            <summary>
            Represents the Geodetic Datum of 1949.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ngo1948">
            <summary>
            NGO 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Datum73">
            <summary>
            Datum 73
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NouvelleTriangulationFrancaise">
            <summary>
            Nouvelle Triangulation Francaise
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nswc9Z2">
            <summary>
            NSWC 9Z-2
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Osgb1936">
            <summary>
            OSGB 1936
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.OrdnanceSurveyGreatBritain1936">
            <summary>
            Represents the Ordnance Survey of Great Britain datum of 1936.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Osgb1970Sn">
            <summary>
            OSGB 1970 (SN)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.OsSn1980">
            <summary>
            OS (SN) 1980
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Padang1884">
            <summary>
            Padang 1884
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Palestine1923">
            <summary>
            Palestine 1923
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Congo1960PointeNoire">
            <summary>
            Congo 1960 Pointe Noire
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GeocentricDatumofAustralia1994">
            <summary>
            Geocentric Datum of Australia 1994
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Pulkovo1942">
            <summary>
            Pulkovo 1942
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Qatar1974">
            <summary>
            Qatar 1974
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Qatar1948">
            <summary>
            Qatar 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Qornoq">
            <summary>
            Qornoq
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.LomaQuintana">
            <summary>
            Loma Quintana
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Amersfoort">
            <summary>
            Amersfoort
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SouthAmericanDatum1969">
            <summary>
            South American Datum 1969
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SapperHill1943">
            <summary>
            Sapper Hill 1943
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Schwarzeck">
            <summary>
            Schwarzeck
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Segora">
            <summary>
            Segora
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Serindung">
            <summary>
            Serindung
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Sudan">
            <summary>
            Sudan
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tananarive1925">
            <summary>
            Tananarive 1925
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Timbalai1948">
            <summary>
            Timbalai 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tm65">
            <summary>
            TM65
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ireland1965">
            <summary>
            Represents the Ireland datum of 1965.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GeodeticDatumof1965">
            <summary>
            Geodetic Datum of 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tokyo">
            <summary>
            Tokyo
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Trinidad1903">
            <summary>
            Trinidad 1903
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.TrucialCoast1948">
            <summary>
            Trucial Coast 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Voirol1875">
            <summary>
            Voirol 1875
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Bern1938">
            <summary>
            Bern 1938
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NordSahara1959">
            <summary>
            Nord Sahara 1959
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Stockholm1938">
            <summary>
            Stockholm 1938
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Yacare">
            <summary>
            Yacare
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Yoff">
            <summary>
            Yoff
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Zanderij">
            <summary>
            Zanderij
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MilitarGeographischeInstitut">
            <summary>
            Militar-Geographische Institut
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HermannskogelDatum">
            <summary>
            Represents the Hermannskogel datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauNationalBelge1972">
            <summary>
            Reseau National Belge 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DeutschesHauptdreiecksnetz">
            <summary>
            Deutsches Hauptdreiecksnetz
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Conakry1905">
            <summary>
            Conakry 1905
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DealulPiscului1933">
            <summary>
            Dealul Piscului 1933
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DealulPiscului1970">
            <summary>
            Dealul Piscului 1970
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NationalGeodeticNetwork">
            <summary>
            National Geodetic Network
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.KuwaitUtility">
            <summary>
            Kuwait Utility
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WorldGeodeticSystem1972">
            <summary>
            World Geodetic System 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WGS72TransitBroadcastEphemeris">
            <summary>
            WGS 72 Transit Broadcast Ephemeris
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WorldGeodeticSystem1984">
            <summary>
            World Geodetic System 1984
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Anguilla1957">
            <summary>
            Anguilla 1957
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Antigua1943">
            <summary>
            Antigua 1943
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Dominica1945">
            <summary>
            Dominica 1945
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Grenada1953">
            <summary>
            Grenada 1953
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Montserrat1958">
            <summary>
            Montserrat 1958
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StKitts1955">
            <summary>
            St. Kitts 1955
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.FortThomas1955">
            <summary>
            Represents the Fort Thomas datum of 1955.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StLucia1955">
            <summary>
            St. Lucia 1955
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StVincent1945">
            <summary>
            St. Vincent 1945
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NorthAmericanDatum1976">
            <summary>
            North American Datum 1927 (1976)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NorthAmericanDatum1927Cgq77">
            <summary>
            North American Datum 1927 (CGQ77)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Xian1980">
            <summary>
            Xian 1980
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HongKong1980">
            <summary>
            Hong Kong 1980
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.JapaneseGeodeticDatum2000">
            <summary>
            Japanese Geodetic Datum 2000
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GunungSegara">
            <summary>
            Gunung Segara
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.QatarNationalDatum1995">
            <summary>
            Qatar National Datum 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PortoSanto1936">
            <summary>
            Porto Santo 1936
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SelvagemGrande">
            <summary>
            Selvagem Grande
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SouthAmericanDatum1969Sad69">
            <summary>
            South American Datum 1969
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Sweref99">
            <summary>
            SWEREF99
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Point58">
            <summary>
            Point 58
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.FortMarigot">
            <summary>
            Fort Marigot
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Guadeloupe1948">
            <summary>
            Guadeloupe 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CentreSpatialGuyanais1967">
            <summary>
            Centre Spatial Guyanais 1967
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauGeodesiqueFrancaisGuyane1995">
            <summary>
            Reseau Geodesique Francais Guyane 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Martinique1938">
            <summary>
            Martinique 1938
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Reunion1947">
            <summary>
            Reunion 1947
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauGeodesiquedelaReunion1992">
            <summary>
            Reseau Geodesique de la Reunion 1992
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tahiti52">
            <summary>
            Tahiti 52
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tahaa54">
            <summary>
            Tahaa 54
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGN72NukuHiva">
            <summary>
            IGN72 Nuku Hiva
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.K01949">
            <summary>
            K0 1949
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Combani1950">
            <summary>
            Combani 1950
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGN56Lifou">
            <summary>
            IGN56 Lifou
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGN72GrandeTerre">
            <summary>
            IGN72 Grande Terre
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.St87Ouvea1924">
            <summary>
            ST87 Ouvea
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Petrels1972">
            <summary>
            Petrels 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PointeGeologiePerroud1950">
            <summary>
            Pointe Geologie Perroud 1950
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SaintPierreetMiquelon1950">
            <summary>
            Saint Pierre et Miquelon 1950
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Mop78">
            <summary>
            MOP78
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseaudeReferencedesAntillesFrancaises1991">
            <summary>
            Reseau de Reference des Antilles Francaises 1991
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGN53Mare">
            <summary>
            IGN53 Mare
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.St84IledesPins">
            <summary>
            ST84 Ile des Pins
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.St71Belep">
            <summary>
            ST71 Belep
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nea74Noumea">
            <summary>
            NEA74 Noumea
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauGeodesiqueNouvelleCaledonie1991">
            <summary>
            Reseau Geodesique Nouvelle Caledonie 1991
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GrandComoros">
            <summary>
            Grand Comoros
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1988">
            <summary>
            International Terrestrial Reference Frame 1988
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1989">
            <summary>
            International Terrestrial Reference Frame 1989
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1990">
            <summary>
            International Terrestrial Reference Frame 1990
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1991">
            <summary>
            International Terrestrial Reference Frame 1991
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1992">
            <summary>
            International Terrestrial Reference Frame 1992
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1993">
            <summary>
            International Terrestrial Reference Frame 1993
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1994">
            <summary>
            International Terrestrial Reference Frame 1994
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1996">
            <summary>
            International Terrestrial Reference Frame 1996
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame1997">
            <summary>
            International Terrestrial Reference Frame 1997
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame2000">
            <summary>
            International Terrestrial Reference Frame 2000
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Reykjavik1900">
            <summary>
            Reykjavik 1900
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Hjorsey1955">
            <summary>
            Hjorsey 1955
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IslandsNetwork1993">
            <summary>
            Islands Network 1993
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Helle1954">
            <summary>
            Helle 1954
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Latvia1992">
            <summary>
            Latvia 1992
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PortoSanto1995">
            <summary>
            Porto Santo 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AzoresOrientalIslands1995">
            <summary>
            Azores Oriental Islands 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AzoresCentralIslands1995">
            <summary>
            Azores Central Islands 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lisbon1890">
            <summary>
            Lisbon 1890
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IraqKuwaitBoundaryDatum1992">
            <summary>
            Iraq-Kuwait Boundary Datum 1992
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EuropeanDatum1979">
            <summary>
            European Datum 1979
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IstitutoGeograficoMilitaire1995">
            <summary>
            Istituto Geografico Militaire 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Voirol1879">
            <summary>
            Voirol 1879
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ChathamIslandsDatum1971">
            <summary>
            Chatham Islands Datum 1971
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ChathamIslandsDatum1979">
            <summary>
            Chatham Islands Datum 1979
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SistemadeReferenciaGeocentricoparaAmericadelSur2000">
            <summary>
            Sistema de Referencia Geocentrico para America del Sur 2000
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Guam1963">
            <summary>
            Guam 1963
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Vientiane1982">
            <summary>
            Vientiane 1982
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lao1993">
            <summary>
            Lao 1993
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.LaoNationalDatum1997">
            <summary>
            Lao National Datum 1997
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Jouik1961">
            <summary>
            Jouik 1961
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nouakchott1965">
            <summary>
            Nouakchott 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Mauritania1999RGS">
            <summary>
            Mauritania 1999
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Gulshan303">
            <summary>
            Gulshan 303
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PhilippineReferenceSystem1992">
            <summary>
            Philippine Reference System 1992
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Gan1970">
            <summary>
            Gan 1970
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Gandajika">
            <summary>
            Gandajika
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MarcoGeocentricoNacionaldeReferencia">
            <summary>
            Marco Geocentrico Nacional de Referencia
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauGeodesiquedelaPolynesieFrancaise">
            <summary>
            Reseau Geodesique de la Polynesie Francaise
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.FatuIva72">
            <summary>
            Fatu Iva 72
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGN63HivaOa">
            <summary>
            IGN63 Hiva Oa
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tahiti79">
            <summary>
            Tahiti 79
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Moorea87">
            <summary>
            Moorea 87
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Maupiti83">
            <summary>
            Maupiti 83
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NakhlEGhanem">
            <summary>
            Nakhl-e Ghanem
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PosicionesGeodesicasArgentinas1994">
            <summary>
            Posiciones Geodesicas Argentinas 1994
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Katanga1955">
            <summary>
            Katanga 1955
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kasai1953">
            <summary>
            Kasai 1953
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Igc1962Arcofthe6ThParallelSouth">
            <summary>
            IGC 1962 Arc of the 6th Parallel South
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGN1962Kerguelen">
            <summary>
            IGN 1962 Kerguelen
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.LePouce1934">
            <summary>
            Le Pouce 1934
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IGNAstro1960">
            <summary>
            IGN Astro 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InstitutGeographiqueduCongoBelge1955">
            <summary>
            Institut Geographique du Congo Belge 1955
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Mauritania1999">
            <summary>
            Mauritania 1999
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MissaoHidrograficoAngolaySaoTome1951">
            <summary>
            Missao Hidrografico Angola y Sao Tome 1951
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MhastOnshore">
            <summary>
            Mhast (onshore)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MhastOffshore">
            <summary>
            Mhast (offshore)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EgyptGulfofSuezS650Tl">
            <summary>
            Egypt Gulf of Suez S-650 TL
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.TernIsland1961">
            <summary>
            Tern Island 1961
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CocosIslands1965">
            <summary>
            Cocos Islands 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Anna1Astro1965">
            <summary>
            Represents the Anna 1 Astro datum of 1965.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.IwoJima1945">
            <summary>
            Iwo Jima 1945
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AstroBeaconE1945">
            <summary>
            Represents the Astro Beacon "E" datum of 1945.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.StHelena1971">
            <summary>
            St. Helena 1971
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AstroDos714">
            <summary>
            Represents the Astro DOS 71/4 datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MarcusIsland1952">
            <summary>
            Marcus Island 1952
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AstronomicalStation1952">
            <summary>
            Represents the Astronomical Station datum of 1952.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AscensionIsland1958">
            <summary>
            Ascension Island 1958
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AyabelleLighthouse">
            <summary>
            Ayabelle Lighthouse
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Bellevue">
            <summary>
            Bellevue
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CampAreaAstro">
            <summary>
            Camp Area Astro
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PhoenixIslands1966">
            <summary>
            Phoenix Islands 1966
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CantonAstro1966">
            <summary>
            Represents the Canton Astro datum of 1966.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CapeCanaveral">
            <summary>
            Cape Canaveral
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Solomon1968">
            <summary>
            Solomon 1968
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Dos1968">
            <summary>
            Represents the DOS datum of 1968.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Gux1Astro">
            <summary>
            Represents the GUX 1 Astro datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EasterIsland1967">
            <summary>
            Easter Island 1967
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.FijiGeodeticDatum1986">
            <summary>
            Fiji Geodetic Datum 1986
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Fiji1956">
            <summary>
            Fiji 1956
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SouthGeorgia1968">
            <summary>
            South Georgia 1968
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ists061Astro1968">
            <summary>
            Represents the ISTS 061 Astro datum of 1968.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GrandCayman1959">
            <summary>
            Grand Cayman 1959
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DiegoGarcia1969">
            <summary>
            Diego Garcia 1969
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ists073Astro1969">
            <summary>
            Represents the ISTS 073 Astro datum of 1969.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.JohnstonIsland1961">
            <summary>
            Johnston Island 1961
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.LittleCayman1961">
            <summary>
            Little Cayman 1961
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lc5Astro1961">
            <summary>
            Represents the L. C. 5 Astro datum of 1961.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Midway1961">
            <summary>
            Midway 1961
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PicodelaNieves">
            <summary>
            Pico de la Nieves
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Pitcairn1967">
            <summary>
            Pitcairn 1967
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Santo1965">
            <summary>
            Santo 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.VitiLevu1916">
            <summary>
            Viti Levu 1916
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MarshallIslands1960">
            <summary>
            Marshall Islands 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WakeIsland1952">
            <summary>
            Wake Island 1952
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tristan1968">
            <summary>
            Tristan 1968
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kusaie1951">
            <summary>
            Kusaie 1951
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DeceptionIsland">
            <summary>
            Deception Island
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GeocentricdatumofKorea">
            <summary>
            Geocentric datum of Korea
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HongKong1963">
            <summary>
            Hong Kong 1963
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.HongKong1967">
            <summary>
            Hong Kong 1963(67)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ParametropZemp1990">
            <summary>
            Parametrop Zemp 1990
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.FaroeDatum1954">
            <summary>
            Faroe Datum 1954
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GeodeticDatumofMalaysia2000">
            <summary>
            Geodetic Datum of Malaysia 2000
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Karbala1979Polservice">
            <summary>
            Karbala 1979 (Polservice)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Nahrwan1934">
            <summary>
            Nahrwan 1934
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.RauenbergDatum83">
            <summary>
            Rauenberg Datum/83
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PotsdamDatum83">
            <summary>
            Potsdam Datum/83
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Greenland1996">
            <summary>
            Greenland 1996
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.VanuaLevu1915">
            <summary>
            Vanua Levu 1915
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauGeodesiquedeNouvelleCaledonie93">
            <summary>
            Reseau Geodesique de Nouvelle Caledonie 91-93
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.St87Ouvea">
            <summary>
            ST87 Ouvea
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.KertauRso">
            <summary>
            Kertau (RSO)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Kertau1948">
            <summary>
            Represents the Kertau datum of 1948.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.VitiLevu1912">
            <summary>
            Viti Levu 1912
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Fk89">
            <summary>
            fk89
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.LibyanGeodeticDatum2006">
            <summary>
            Libyan Geodetic Datum 2006
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.DatumGeodesiNasional1995">
            <summary>
            Datum Geodesi Nasional 1995
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Vietnam2000">
            <summary>
            Vietnam 2000
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Svy21">
            <summary>
            SVY21
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Jamaica2001">
            <summary>
            Jamaica 2001
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ch1903Bern">
            <summary>
            CH1903 (Bern)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Bogota1975Bogota">
            <summary>
            Bogota 1975 (Bogota)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lisbon1937Lisbon">
            <summary>
            Lisbon 1937 (Lisbon)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MakassarJakarta">
            <summary>
            Makassar (Jakarta)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MilitarGeographischeInstitutFerro">
            <summary>
            Militar-Geographische Institut (Ferro)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.MonteMarioRome">
            <summary>
            Monte Mario (Rome)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NouvelleTriangulationFrancaiseParis">
            <summary>
            Nouvelle Triangulation Francaise (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Padang1884Jakarta">
            <summary>
            Padang 1884 (Jakarta)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.ReseauNationalBelge1950Brussels">
            <summary>
            Reseau National Belge 1950 (Brussels)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Tananarive1925Paris">
            <summary>
            Tananarive 1925 (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Voirol1875Paris">
            <summary>
            Voirol 1875 (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.BataviaJakarta">
            <summary>
            Batavia (Jakarta)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Stockholm1938Stockholm">
            <summary>
            Stockholm 1938 (Stockholm)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GreekAthens">
            <summary>
            Greek (Athens)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.CarthageParis">
            <summary>
            Carthage (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Ngo1948Oslo">
            <summary>
            NGO 1948 (Oslo)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SJtskFerro">
            <summary>
            S-JTSK (Ferro)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NordSahara1959Paris">
            <summary>
            Nord Sahara 1959 (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.GunungSegaraJakarta">
            <summary>
            Gunung Segara (Jakarta)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Voirol1879Paris">
            <summary>
            Voirol 1879 (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.InternationalTerrestrialReferenceFrame2005">
            <summary>
            International Terrestrial Reference Frame 2005
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.AncienneTriangulationFrancaiseParis">
            <summary>
            Ancienne Triangulation Francaise (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.NorddeGuerreParis">
            <summary>
            Nord de Guerre (Paris)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Madrid1870Madrid">
            <summary>
            Madrid 1870 (Madrid)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Lisbon1890Lisbon">
            <summary>
            Lisbon 1890 (Lisbon)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.EstoniaLocalDatum1937">
            <summary>
            Represents the Estonia Coordinate System datum of 1937.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.OldEgyptian1907">
            <summary>
            Represents the Old Egyptian datum of 1907.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Oman">
            <summary>
            Represents the Oman datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.PointeNoire1948">
            <summary>
            Represents the Pointe Noire datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Rome1940">
            <summary>
            Represents the Rome datum of 1940.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SaoBraz">
            <summary>
            Represents the Sao Braz datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.SouthAsia">
            <summary>
            Represents the South Asia datum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Voirol1960">
            <summary>
            Represents the Voirol datum of 1960.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WakeEniwetok1960">
            <summary>
            Represents the Wake Eniwetok datum of 1960.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WorldGeodeticSystem1960">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.WorldGeodeticSystem1966">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Datum.Default">
            <summary>
            Represents the default datum used by the DotSpatial.Positioning, WGS1984.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.#ctor(System.String,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Creates a new instance using the specified name and reference ellipsoid.
            </summary>
            <param name="name">The name.</param>
            <param name="ellipsoid">The ellipsoid.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.#ctor(System.Int32,DotSpatial.Positioning.Ellipsoid,System.String)">
            <summary>
            Internal constructor for static list generation
            </summary>
            <param name="epsgNumber">The epsg number.</param>
            <param name="ellipsoid">The ellipsoid.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.#ctor(System.Int32,DotSpatial.Positioning.Ellipsoid,System.Double,System.String)">
            <summary>
            Internal constructor for static list generation
            </summary>
            <param name="epsgNumber">The epsg number.</param>
            <param name="ellipsoid">The ellipsoid.</param>
            <param name="meridian">The meridian.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.SanityCheck">
            <summary>
            Validates the datum. Called in the constructor.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.FromName(System.String)">
            <summary>
            Returns a Datum object matching the specified name.
            </summary>
            <param name="name">A <strong>String</strong> describing the name of an existing datum.</param>
            <returns>A <strong>Datum</strong> object matching the specified string, or null if no datum was found.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.FromEpsgNumber(System.Int32)">
            <summary>
            Returns the datum corresponding to the EPSG code
            </summary>
            <param name="epsgNumber">The epsg number.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Datum.Equals(DotSpatial.Positioning.Datum)">
            <summary>
            Compares the current instance to the specified datum object.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Datum.Name">
            <summary>
            Returns the name of the datum.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Datum.EpsgNumber">
            <summary>
            European Petroleum Survey Group number for this datum. The ESPG standards are now maintained by OGP
            (International Association of Oil and Gas Producers).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Datum.Ellipsoid">
             <summary>
             Returns the interpretation of Earth's shape associated with a datum.
             </summary>
             <value>Read only. An
             <see cref="P:DotSpatial.Positioning.Datum.Ellipsoid">Ellipsoid</see>
             object.</value>
             <example>
             This example gets information on the ellipsoid associated with the WGS84 datum.
               <code lang="VB">
             ' Get information about the NAD1983 datum
             Dim MyDatum As Datum = Geodesy.GetDatum(DatumType.NorthAmerican1983)
             ' Get the ellipsoid associated with this datum
             Dim MyEllipsoid As Ellipsoid = MyDatum.Ellipsoid
             ' Write the semi-major axis of the ellipsoid
             Debug.WriteLine(MyEllipsoid.SemiMajorAxis.ToString())
               </code>
               <code lang="CS">
             // Get information about the NAD1983 datum
             Datum MyDatum = Geodesy.GetDatum(DatumType.NorthAmerican1983);
             // Get the ellipsoid associated with this datum
             Ellipsoid MyEllipsoid = MyDatum.Ellipsoid;
             // Write the semi-major axis of the ellipsoid
             Debug.WriteLine(MyEllipsoid.SemiMajorAxis.ToString());
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.Datum.Ellipsoid">Ellipsoid Class</seealso>
             <remarks>Each datum is associated with an ellipsoid, which is an interpretation of Earth's shape and
             size.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Datum.PrimeMeridian">
            <summary>
            Returns the prime meridian assocated with this Datum.
            </summary>
            <remarks>Most datums use Greenwich as the prime meridian. However, several systems offset coordinates
            using a local meridian. This value reflects that usage.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.Distance">
            <summary>
            Represents the measurement of a straight line between between two points on
            Earth's surface.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.FEET_PER_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.FEET_PER_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.FEET_PER_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.FEET_PER_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.FEET_PER_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.FEET_PER_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.INCHES_PER_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.INCHES_PER_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.INCHES_PER_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.INCHES_PER_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.INCHES_PER_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.INCHES_PER_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.STATUTE_MILES_PER_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.STATUTE_MILES_PER_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.STATUTE_MILES_PER_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.STATUTE_MILES_PER_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.STATUTE_MILES_PER_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.STATUTE_MILES_PER_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.NAUTICAL_MILES_PER_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.NAUTICAL_MILES_PER_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.NAUTICAL_MILES_PER_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.NAUTICAL_MILES_PER_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.NAUTICAL_MILES_PER_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.NAUTICAL_MILES_PER_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.CENTIMETERS_PER_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.CENTIMETERS_PER_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.CENTIMETERS_PER_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.CENTIMETERS_PER_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.CENTIMETERS_PER_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.CENTIMETERS_PER_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.METERS_PER_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.METERS_PER_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.METERS_PER_KILOMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.METERS_PER_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.METERS_PER_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.METERS_PER_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.KILOMETERS_PER_METER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.KILOMETERS_PER_CENTIMETER">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.KILOMETERS_PER_STATUTE_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.KILOMETERS_PER_FOOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.KILOMETERS_PER_INCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.KILOMETERS_PER_NAUTICAL_MILE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance._units">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.EarthsEquatorialRadiusWgs1984">
             <summary>
             Returns the distance from the center of the Earth to the equator according to the
             WGS1984 ellipsoid.
             </summary>
             <seealso cref="F:DotSpatial.Positioning.Distance.EarthsPolarRadiusWgs1984">EarthsPolarRadiusWgs1984
             Field</seealso>
            
             <seealso cref="F:DotSpatial.Positioning.Distance.EarthsAverageRadius">EarthsAverageRadius Field</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.Infinity">
            <summary>
            Represents an infinite distance.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.EarthsPolarRadiusWgs1984">
             <summary>
             Returns the distance from the center of the Earth to a pole according to the
             WGS1984 ellipsoid.
             </summary>
             <seealso cref="F:DotSpatial.Positioning.Distance.EarthsEquatorialRadiusWgs1984">EarthsEquatorialRadiusWgs1984 Field</seealso>
            
             <seealso cref="F:DotSpatial.Positioning.Distance.EarthsAverageRadius">EarthsAverageRadius Field</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.EarthsAverageRadius">
             <summary>
             Returns the average radius of the Earth.
             </summary>
             <seealso cref="F:DotSpatial.Positioning.Distance.EarthsEquatorialRadiusWgs1984">EarthsEquatorialRadiusWgs1984 Field</seealso>
            
             <seealso cref="F:DotSpatial.Positioning.Distance.EarthsPolarRadiusWgs1984">EarthsPolarRadiusWgs1984 Field</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.Empty">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.SeaLevel">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.Maximum">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.Minimum">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Distance.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.#ctor(System.Double,DotSpatial.Positioning.DistanceUnit)">
            <summary>
            Creates a new instance using the specified value and unit type.
            </summary>
            <param name="value">The value.</param>
            <param name="units">The units.</param>
            <example>
            This example uses a constructor to create a new distance of 50km.
              <code lang="VB">
            Dim MyDistance As New Distance(50, DistanceUnit.Kilometers)
              </code>
              <code lang="C#">
            Distance MyDistance = new Distance(50, DistanceUnit.Kilometers);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.#ctor(System.String)">
             <summary>
             Creates a new instance from the the specified string.
             </summary>
             <param name="value">The value.</param>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid distance measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the distance measurement was not recognized.<br/>
             2. The distance unit type was not recognized or not specified.</exception>
            
             <example>
             This example demonstrates how the to use this constructor.
               <code lang="VB">
             Dim MyDistance As Distance
             ' Create a distance of 50 kilometers
             MyDistance = New Distance("50 km")
             ' Create a distance of 14, 387 miles, then convert it into inches
             MyDistance = New Distance("14, 387 statute miles").ToInches
             ' Parse an untrimmed measurement into 50 feet
             MyDistance = New Distance("	50 '	   ")
               </code>
               <code lang="C#">
             Distance MyDistance;
             // Create a distance of 50 kilometers
             MyDistance = new Distance("50 km");
             // Create a distance of 14, 387 miles, then convert it into inches
             MyDistance = new Distance("14, 387 statute miles").ToInches;
             // Parse an untrimmed measurement into 50 feet
             MyDistance = new Distance("	50 '	   ");
               </code>
               </example>
             <remarks>This powerful constructor is typically used to initialize an instance with a
             string-based distance measurement, such as one entered by a user or read from a file.
             This constructor can accept any output created via the
             <see cref="M:DotSpatial.Positioning.Distance.ToString">ToString</see> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Distance"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.GetMinimumTravelTime(DotSpatial.Positioning.Speed)">
            <summary>
            Returns the time required to travel the entire distance at the specified speed.
            </summary>
            <param name="speed">A <strong>Speed</strong> object representing a travel speed.</param>
            <returns>A <strong>TimeSpan</strong> object representing the total time required to travel the entire distance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.GetMinimumTravelSpeed(System.TimeSpan)">
            <summary>
            Returns the speed required to travel the entire distance in the specified time.
            </summary>
            <param name="time">A <strong>TimeSpan</strong> object representing the time to travel the entire distance.</param>
            <returns>A <strong>Speed</strong> object representing the speed required to travel the distance in exactly the time specified.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToFeet">
             <summary>
             Converts the current measurement into feet.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <seealso cref="M:DotSpatial.Positioning.Distance.ToInches">ToInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToKilometers">ToKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToMeters">ToMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
            
             <example>
             This example converts various distances into feet.  notice that the ToFeet method converts distances
             from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Inches)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Kilometers)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToFeet.ToString)
             Debug.WriteLine(Distance2.ToFeet.ToString)
             Debug.WriteLine(Distance3.ToFeet.ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Inches);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Kilometers);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToFeet().ToString());
             Debug.WriteLine(Distance2.ToFeet().ToString());
             Debug.WriteLine(Distance3.ToFeet().ToString());
               </code>
               </example>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToInches">
             <summary>
             Converts the current measurement into inches.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various distances into inches.  notice that the ToInches method converts distances
             from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Feet)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Kilometers)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToInches.ToString)
             Debug.WriteLine(Distance2.ToInches.ToString)
             Debug.WriteLine(Distance3.ToInches.ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Feet);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Kilometers);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToInches().ToString());
             Debug.WriteLine(Distance2.ToInches().ToString());
             Debug.WriteLine(Distance3.ToInches().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToFeet">ToFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToKilometers">ToKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToMeters">ToMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToKilometers">
             <summary>
             Converts the current measurement into kilometers.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various distances into kilometers. notice that the ToKilometers method converts
             distances from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Feet)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Inches)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToKilometers.ToString)
             Debug.WriteLine(Distance2.ToKilometers.ToString)
             Debug.WriteLine(Distance3.ToKilometers.ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Feet);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Inches);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToKilometers().ToString());
             Debug.WriteLine(Distance2.ToKilometers().ToString());
             Debug.WriteLine(Distance3.ToKilometers().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToFeet">ToFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToInches">ToInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToMeters">ToMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToMeters">
             <summary>
             Converts the current measurement into meters.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various distances into meters.  notice that the ToMeters method converts distances
             from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Feet)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Inches)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToMeters().ToString)
             Debug.WriteLine(Distance2.ToMeters().ToString)
             Debug.WriteLine(Distance3.ToMeters().ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Feet);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Inches);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToMeters().ToString());
             Debug.WriteLine(Distance2.ToMeters().ToString());
             Debug.WriteLine(Distance3.ToMeters().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToFeet">ToFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToInches">ToInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToKilometers">ToKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToCentimeters">
             <summary>
             Converts the current measurement into meters.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various distances into meters.  notice that the ToMeters method converts distances
             from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Feet)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Inches)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToMeters().ToString)
             Debug.WriteLine(Distance2.ToMeters().ToString)
             Debug.WriteLine(Distance3.ToMeters().ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Feet);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Inches);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToMeters().ToString());
             Debug.WriteLine(Distance2.ToMeters().ToString());
             Debug.WriteLine(Distance3.ToMeters().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToFeet">ToFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToInches">ToInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToKilometers">ToKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToNauticalMiles">
             <summary>
             Converts the current measurement into nautical miles.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various distances into nautical miles. notice that the ToNauticalMiles method
             converts distances from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Feet)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Inches)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToNauticalMiles.ToString)
             Debug.WriteLine(Distance2.ToNauticalMiles.ToString)
             Debug.WriteLine(Distance3.ToNauticalMiles.ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Feet);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Inches);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToNauticalMiles().ToString());
             Debug.WriteLine(Distance2.ToNauticalMiles().ToString());
             Debug.WriteLine(Distance3.ToNauticalMiles().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToFeet">ToFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToInches">ToInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToKilometers">ToKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToMeters">ToMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToStatuteMiles">
             <summary>
             Converts the current measurement into miles.
             </summary>
             <returns>A new <strong>Distance</strong> object containing the converted
             value.</returns>
             <example>
             This example converts various distances into statute miles.  notice that the ToStatuteMiles method
             converts distances from any source type.
               <code lang="VB">
             ' Create distances of different unit types
             Dim Distance1 As New Distance(10, DistanceUnit.Feet)
             Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
             Dim Distance3 As New Distance(50, DistanceUnit.Inches)
             ' Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToStatuteMiles.ToString)
             Debug.WriteLine(Distance2.ToStatuteMiles.ToString)
             Debug.WriteLine(Distance3.ToStatuteMiles.ToString)
               </code>
               <code lang="C#">
             // Create distances of different unit types
             Distance Distance1 = new Distance(10, DistanceUnit.Feet);
             Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
             Distance Distance3 = new Distance(50, DistanceUnit.Inches);
             // Convert the distance measurements to feet and output the result
             Debug.WriteLine(Distance1.ToStatuteMiles().ToString());
             Debug.WriteLine(Distance2.ToStatuteMiles().ToString());
             Debug.WriteLine(Distance3.ToStatuteMiles().ToString());
               </code>
               </example>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToFeet">ToFeet Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToInches">ToInches Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToKilometers">ToKilometers Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToMeters">ToMeters Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
             <remarks>This method will perform a conversion into feet regardless of the current unit
             type. You may convert from any unit type to any unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToUnitType(DotSpatial.Positioning.DistanceUnit)">
            <summary>
            Toes the type of the unit.
            </summary>
            <param name="newUnits">The new units.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToImperialUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest Imperial unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToMetricUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest metric unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToLocalUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            find the smallest unit type and convert the unit to the user's local
            numeric system (Imperial or Metric).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToSpeed(System.TimeSpan)">
            <summary>
            Returns the distance traveled at the current speed for the specified time.
            </summary>
            <param name="time">A length of time to travel.</param>
            <returns>A <strong>Distance</strong> representing the distance travelled at
            the current speed for the specified length of time.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Round(System.Int32)">
            <summary>
            Returns a new instance rounded to the specified number of digits.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <param name="format"><para>A combination of symbols, spaces, and any of the following case-insensitive
            letters: <strong>#</strong> or <strong>0</strong> for the value property, and <strong>U</strong> for
            distance units. Here are some examples:</para>
              <para>
              <table cellspacing="0" cols="3" cellpadding="2" width="100%">
              <tr>
              <td>##0.## uu</td>
              <td>## uuuu</td>
              <td># u</td>
              <td>###</td>
              </tr>
              </table>
              </para></param>
            <returns>A <strong>String</strong> containing the distance in the specified format.</returns>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement using a custom format.
              <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu")
              </code>
              <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu");
              </code>
              </example>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Add(DotSpatial.Positioning.Distance)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Add(System.Double)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Subtract(DotSpatial.Positioning.Distance)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Subtract(System.Double)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Multiply(DotSpatial.Positioning.Distance)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Multiply(System.Double)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Divide(DotSpatial.Positioning.Distance)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Divide(System.Double)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Increment">
            <summary>
            Increments this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Decrement">
            <summary>
            Decrements this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.IsLessThan(DotSpatial.Positioning.Distance)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.IsLessThanOrEqualTo(DotSpatial.Positioning.Distance)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.IsGreaterThan(DotSpatial.Positioning.Distance)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Distance)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="obj">An <strong>Object</strong> to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> containing the current distance in the default format.</returns>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement.
              <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString
              </code>
              <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString();
              </code>
              </example>
            <remarks>The default format used is "##0.## uu" where <strong>uu</strong> is the distance unit type.
            The numeric format may vary depending on the machine's local culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Random">
            <summary>
            Returns a random distance between 0 and 1, 000 meters.
            </summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Random(System.Random)">
            <summary>
            Returns a random distance between 0 and 1, 000 meters.
            </summary>
            <param name="generator">The generator.</param>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Random(DotSpatial.Positioning.Distance)">
            <summary>
            Returns a random distance between zero and the specified maximum.
            </summary>
            <param name="maximum">The maximum.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromCentimeters(System.Double)">
            <summary>
            Froms the centimeters.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromFeet(System.Double)">
            <summary>
            Froms the feet.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromInches(System.Double)">
            <summary>
            Froms the inches.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromKilometers(System.Double)">
            <summary>
            Froms the kilometers.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromMeters(System.Double)">
            <summary>
            Froms the meters.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromNauticalMiles(System.Double)">
            <summary>
            Froms the nautical miles.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromStatuteMiles(System.Double)">
            <summary>
            Froms the statute miles.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromCentimeters(System.Int32)">
            <summary>
            Froms the centimeters.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromFeet(System.Int32)">
            <summary>
            Froms the feet.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromInches(System.Int32)">
            <summary>
            Froms the inches.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromKilometers(System.Int32)">
            <summary>
            Froms the kilometers.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromMeters(System.Int32)">
            <summary>
            Froms the meters.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromNauticalMiles(System.Int32)">
            <summary>
            Froms the nautical miles.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.FromStatuteMiles(System.Int32)">
            <summary>
            Froms the statute miles.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ParseDistanceUnit(System.String)">
            <summary>
            Parses the distance unit.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Parse(System.String)">
             <summary>
             Converts a string-based distance measurement into a Distance object.
             </summary>
             <param name="value"><para>A <strong>String</strong> describing a case-insensitive distance measurement,
             in any of the following formats, where <strong>N</strong> represents a numeric
             value:</para>
               <list type="bullet">
               <item>N m</item>
               <item>N meters</item>
               <item>N meter</item>
               <item>N metre</item>
               <item>N metres</item>
               <item>N km</item>
               <item>N kilometers</item>
               <item>N kilometer</item>
               <item>N kilometre</item>
               <item>N kilometres</item>
               <item>N ft</item>
               <item>N'</item>
               <item>N foot</item>
               <item>N feet</item>
               <item>N in</item>
               <item>N"</item>
               <item>N inch</item>
               <item>N inches</item>
               <item>N mi</item>
               <item>N mile</item>
               <item>N miles</item>
               <item>N nm</item>
               <item>N nautical mile</item>
               <item>N nautical miles</item>
               </list></param>
             <returns>A new Distance object containing the parsed <see cref="P:DotSpatial.Positioning.Distance.Value">value</see> and
             <see cref="P:DotSpatial.Positioning.Distance.Units">unit</see> type.</returns>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid distance measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the distance measurement was not recognized.<br/>
             2. The distance unit type was not recognized or not specified.</exception>
            
             <example>
             This example demonstrates how the Parse method can convert several string formats into a Distance object.
               <code lang="VB">
             Dim NewDistance As Distance
             ' Create a distance of 50 kilometers
             NewDistance = Distance.Parse("50 km")
             ' Create a distance of 14, 387 miles, then convert it into inches
             NewDistance = Distance.Parse("14, 387 statute miles").ToInches
             ' Parse an untrimmed measurement into 50 feet
             NewDistance = Distance.Parse("	50 '	   ")
               </code>
               <code lang="C#">
             Distance NewDistance;
             // Create a distance of 50 kilometers
             NewDistance = Distance.Parse("50 km");
             // Create a distance of 14, 387 miles, then convert it into inches
             NewDistance = Distance.Parse("14, 387 statute miles").ToInches;
             // Parse an untrimmed measurement into 50 feet
             NewDistance = Distance.Parse("	50 '	   ");
               </code>
               </example>
             <remarks>This powerful constructor is typically used to convert a string-based distance
             measurement, such as one entered by a user or read from a file, into a
             <strong>Distance</strong> object. This method will accept any output created via the
             <see cref="M:DotSpatial.Positioning.Distance.ToString">ToString</see> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Addition(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Subtraction(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Multiply(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Division(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_LessThan(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_LessThanOrEqual(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Equality(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Inequality(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_GreaterThanOrEqual(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_GreaterThan(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Explicit(System.String)~DotSpatial.Positioning.Distance">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.Distance"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.op_Explicit(DotSpatial.Positioning.Distance)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Distance"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Equals(DotSpatial.Positioning.Distance)">
            <summary>
            Compares the current instance to the specified distance object.
            </summary>
            <param name="other">A <strong>Distance</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified object up to four digits of precision.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.Equals(DotSpatial.Positioning.Distance,System.Int32)">
            <summary>
            Compares the current instance to the specified value, distance units, and precision.
            </summary>
            <param name="other">A <strong>Distance</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified object at up to the specified number of digits of precision.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and local culture.
            </summary>
            <param name="format"><para>A combination of symbols, spaces, and any of the following case-insensitive
            letters: <strong>#</strong> or <strong>0</strong> for the value property, and <strong>U</strong> for
            distance units. Here are some examples:</para>
              <para>
              <table cellspacing="0" cols="3" cellpadding="2" width="100%">
              <tr>
              <td>##0.## uu</td>
              <td>## uuuu</td>
              <td># u</td>
              <td>###</td>
              </tr>
              </table>
              </para></param>
            <param name="formatProvider">Information about the culture to apply to the numeric format.</param>
            <returns>A <strong>String</strong> containing the distance in the specified format.</returns>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement using a custom format and culture information.
              <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu", CultureInfo.CurrentUICulture)
              </code>
              <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu", CultureInfo.CurrentUICulture);
              </code>
              </example>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.CompareTo(DotSpatial.Positioning.Distance)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Distance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Distance.Value">
             <summary>
             Returns the numeric portion of a distance measurement.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <example>
             This example demonstrates how to use the Value property to modify a distance object.  The object
             is then converted to kilometers.
               <code lang="VB">
             ' Declare a distance of 0 mi.
             Dim MyDistance As New Distance(0, DistanceUnit.StatuteMiles)
             ' Change the distance to 100 mi.
             MyDistance.Value = 100
             ' Change the distance to 12.3456 mi.
             MyDistance.Value = 12.3456
             ' Convert the measurement into kilometers
             MyDistance = MyDistance.ToKilometers
               </code>
               <code lang="C#">
             // Declare a distance of 0 mi.
             Distance MyDistance = new Distance(0, DistanceUnit.StatuteMiles);
             // Change the distance to 100 mi.
             MyDistance.Value = 100;
             // Change the distance to 12.3456 mi.
             MyDistance.Value = 12.3456;
             // Convert the measurement into kilometers
             MyDistance = MyDistance.ToKilometers;
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.Distance.Units">Units Property</seealso>
             <remarks>This property is paired with the <see cref="P:DotSpatial.Positioning.Distance.Units">Units</see> property to form a complete distance
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Distance.Units">
            <summary>
            Describes the unit portion of a distance measurement.
            </summary>
            <value>A value from the <see cref="T:DotSpatial.Positioning.DistanceUnit">DistanceUnit</see> enumeration. Default
            is <strong>DistanceUnit.Meters</strong>.</value>
            <seealso cref="P:DotSpatial.Positioning.Distance.Value">Value Property</seealso>
            <remarks><para>Each distance measurement is comprised of a numeric <see cref="P:DotSpatial.Positioning.Distance.Value">value</see>
            and a unit type.  This property describes the numeric value so that it may be
            explicitly identified. An instance of the <strong>Distance</strong> class may have a value
            of zero, but it is impossible to have an unspecified unit type.</para>
              <para><img src="BestPractice.jpg"/></para><para><strong>Use conversion methods instead of setting the
            Units property</strong></para>
              <para>When the Units property is changed, no conversion is performed on the
            Value property. This could lead to mathematical errors which are difficult to debug. Use
            conversion methods such as ToFeet or ToMeters instead.</para>
              <para>
            This example demonstrates poor programming when trying to add 100 feet to 100 meters
            by changing the Units property of the Distance2 object.
              <code lang="VB">
            ' Declare two distances
            Dim Distance1 As New Distance(50, DistanceUnit.Meters)
            Dim Distance2 As New Distance(100, DistanceUnit.Feet)
            ' Store their sum in another variable
            Dim Distance3 As New Distance(0, DistanceUnit.Meters)
            ' INCORRECT: Changing Units property does not convert Distance2!
            Distance2.Units = DistanceUnit.Meters
            Distance3.Value = Distance1.Value + Distance2.Value
              </code>
              <code lang="C#">
            // Declare two distances
            Distance Distance1 = new Distance(50, DistanceUnit.Meters);
            Distance Distance2 = new Distance(100, DistanceUnit.Feet);
            // Store their sum in another variable
            Distance Distance3 = new Distance(0, DistanceUnit.Meters);
            // INCORRECT: Changing Units property does not convert Distance2!
            Distance2.Units = DistanceUnit.Meters;
            Distance3.Value = Distance1.Value + Distance2.Value;
              </code>
            The correct technique is to use a conversion method to change the unit type instead
            of modifying the Units property.
              <code lang="VB">
            ' Declare two distances
            Dim Distance1 As New Distance(50, DistanceUnit.Meters)
            Dim Distance2 As New Distance(100, DistanceUnit.Feet)
            ' Store their sum in another variable
            Dim Distance3 As New Distance(0, DistanceUnit.Meters)
            ' CORRECT: The ToMeters method is used to standardize unit types
            Distance3.Value = Distance1.ToMeters().Value + Distance2.ToMeters().Value
              </code>
              <code lang="C#">
            // Declare two distances
            Distance Distance1 = new Distance(50, DistanceUnit.Meters);
            Distance Distance2 = new Distance(100, DistanceUnit.Feet);
            // Store their sum in another variable
            Distance Distance3 = new Distance(0, DistanceUnit.Meters);
            // CORRECT: The ToMeters method is used to standardize unit types
            Distance3.Value = Distance1.ToMeters().Value + Distance2.ToMeters().Value;
              </code>
              </para></remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Distance.IsInvalid">
            <summary>
            Returns whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Distance.IsEmpty">
            <summary>
            Returns whether the value is zero.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Distance.IsMetric">
            <summary>
            Returns whether the unit of measurement is metric.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Distance.IsInfinity">
            <summary>
            Returns whether the value is infinite.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DistanceUnit">
             <summary>
             Indicates the unit of measure for distance measurements.
             </summary>
             <seealso cref="P:DotSpatial.Positioning.Distance.Value">Value Property (Distance Class)</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Distance.Units">Units Property (Distance Class)</seealso>
             <remarks>This enumeration is most frequently used by the
             <see cref="P:DotSpatial.Positioning.Distance.Units">Units</see> property of the
             <see cref="T:DotSpatial.Positioning.Distance">Distance</see>
             class in conjunction with the <see cref="P:DotSpatial.Positioning.Distance.Value">Value</see>
             property to describe a straight-line distance.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.Kilometers">
            <summary>Metric System. Kilometers (thousands of meters).</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.Meters">
            <summary>Metric System. 1/1000th of a kilometer.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.Centimeters">
            <summary>Metric System. 1/100th of a meter.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.NauticalMiles">
            <summary>Nautical miles, also known as "sea miles".</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.StatuteMiles">
            <summary>Imperial System. A statute mile, most often referred to just as "mile."</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.Feet">
            <summary>Imperial System. Feet.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceUnit.Inches">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.Elevation">
             <summary>
             Represents a vertical angular measurement between -90° and 90°.
             </summary>
             <example>
             These examples create new instances of <strong>Elevation</strong> objects.
               </example>
            
             <seealso cref="T:DotSpatial.Positioning.Angle">Angle Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Azimuth">Azimuth Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Latitude">Latitude Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Longitude">Longitude Class</seealso>
            
             <example>
             These examples create new instances of Elevation objects.
               <code lang="VB" description="Create an angle of 90°">
             Dim MyElevation As New Elevation(90)
               </code>
               <code lang="CS" description="Create an angle of 90°">
             Elevation MyElevation = new Elevation(90);
               </code>
               <code lang="C++" description="Create an angle of 90°">
             Elevation MyElevation = new Elevation(90);
               </code>
               <code lang="VB" description="Create an angle of 105°30'21.4">
             Dim MyElevation1 As New Elevation(105, 30, 21.4)
               </code>
               <code lang="CS" description="Create an angle of 105°30'21.4">
             Elevation MyElevation = new Elevation(105, 30, 21.4);
               </code>
               <code lang="C++" description="Create an angle of 105°30'21.4">
             Elevation MyElevation = new Elevation(105, 30, 21.4);
               </code>
               </example>
             <remarks>This class is used to indicate a vertical angle where 90° represents a point
             directly overhead, 0° represents the horizon (striaght ahead), and -90° represents a
             point straight down. This class is typically combined with an <strong>Elevation</strong>
             object (which measures a horizontal angle) to form a three-dimensional direction to an
             object in space, such as a GPS satellite.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.MAXIMUM_PRECISION_DIGITS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation._decimalDegrees">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Minimum">
             <summary>
             Represents the minimum value of an angle in one turn of a circle.
             </summary>
             <example>
             This example creates an angle representing the minimum allowed value.
               <code lang="VB">
             Dim MyElevation As Elevation = Elevation.Minimum
               </code>
               <code lang="CS">
             Elevation MyElevation = Elevation.Minimum;
               </code>
               <code lang="C++">
             Elevation MyElevation = Elevation.Minimum;
               </code>
               </example>
            
             <value>An Elevation with a value of -359.999999°.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Empty">
             <summary>
             Represents an angle with no value.
             </summary>
             <value>An Elevation containing a value of zero (0°).</value>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Maximum">
            <summary>
            Represents the maximum value of an angle in one turn of a circle.
            </summary>
            <example>
            This example creates an angle representing the maximum allowed value of 359.9999°.
              <code lang="VB">
            Dim MyElevation As Elevation = Elevation.Maximum
              </code>
              <code lang="CS">
            Elevation MyElevation = Elevation.Maximum;
              </code>
              </example>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Zenith">
            <summary>
            Represents the point directly overhead.
            </summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.HalfwayAboveHorizon">
            <summary>
            Represents a vertical direction halfway up from the horizon.
            </summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.HalfwayBelowHorizon">
            <summary>
            Represents a vertical direction halfway below the horizon.
            </summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Horizon">
             <summary>
            
             </summary>
             <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:DotSpatial.Positioning.Elevation.Nadir">
            <summary>
            Represents the point directly below one's feet.
            </summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.Double)">
             <summary>
             Creates a new instance with the specified decimal degrees.
             </summary>
             <param name="decimalDegrees">The decimal degrees.</param>
             <example>
             This example demonstrates how to create an angle with a measurement of 90°.
               <code lang="VB">
             Dim MyElevation As New Elevation(90)
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation(90);
               </code>
               </example>
            
             <returns>An <strong>Elevation</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>An <strong>Elevation</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance with the specified hours and decimal minutes.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <example>
            This example demonstrates how an angle can be created when only the hours and
            minutes (in decimal form) are known. This creates a value of 12°42.345'.
              <code lang="VB">
            Dim MyElevation As New Elevation(12, 42.345)
              </code>
              <code lang="VB">
            Elevation MyElevation = new Elevation(12, 42.345);
              </code>
              </example>
            <remarks>An <strong>Elevation</strong> containing the specified value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.Int32,System.Int32,System.Double)">
             <summary>
             Creates a new instance with the specified hours, minutes and
             seconds.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <example>
             This example demonstrates how to create an angular measurement of 34°12'29.2 in
             hours, minutes and seconds.
               <code lang="VB">
             Dim MyElevation As New Elevation(34, 12, 29.2)
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation(34, 12, 29.2);
               </code>
               </example>
            
             <returns>An <strong>Elevation</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.String)">
             <summary>
             Creates a new instance by converting the specified string.
             </summary>
             <param name="value">The value.</param>
             <seealso cref="M:DotSpatial.Positioning.Elevation.Parse(System.String,System.Globalization.CultureInfo)">Parse Method</seealso>
            
             <example>
             This example creates a new instance by parsing a string. (notice The double-quote is
             doubled up to represent a single double-quote in the string.)
               <code lang="VB">
             Dim MyElevation As New Elevation("123°45'67.8""")
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation("123°45'67.8\"");
               </code>
               </example>
            
             <returns>An <strong>Elevation</strong> containing the specified value.</returns>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This constructor parses the specified string into an <strong>Elevation</strong>
             object using the current culture. This constructor can parse any strings created via
             the <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.String,System.Globalization.CultureInfo)">
             <summary>
             Creates a new instance by converting the specified string using the specified
             culture.
             </summary>
             <param name="value">The value.</param>
             <param name="culture">The culture.</param>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This constructor parses the specified string into an <strong>Elevation</strong>
             object using a specific culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns></returns>
            <overloads>Converts a measurement to its equivalent value between -90 and
            90 degrees.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Ceiling">
            <summary>
            Returns the smallest integer greater than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Floor">
            <summary>
            Returns the largest integer which is smaller than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.RoundSeconds">
            <summary>
            Returns a new instance whose Seconds property is evenly divisible by 15.
            </summary>
            <returns>An <strong>Elevation</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <param name="interval">A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.</param>
            <returns>An <strong>Elevation</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.LesserOf(DotSpatial.Positioning.Elevation)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value">An <strong>Elevation</strong> object to compare to the current instance.</param>
            <returns>The <strong>Elevation</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.GreaterOf(DotSpatial.Positioning.Elevation)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value">An <strong>Elevation</strong> object to compare to the current instance.</param>
            <returns>An <strong>Elevation</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Mirror">
            <summary>
            Returns an angle opposite of the current instance.
            </summary>
            <returns>An <strong>Elevation</strong> representing the mirrored value.</returns>
            <example>
            This example creates a new <strong>Elevation</strong> of 45° then calculates its mirror
            of 225°. (45 + 180)
              <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(45)
            Dim Elevation2 As Elevation = Elevation1.Mirror()
            Debug.WriteLine(Elevation2.ToString())
            ' Output: 225
              </code>
              <code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(45);
            Elevation Elevation2 = Elevation1.Mirror();
            Console.WriteLine(Elevation2.ToString());
            // Output: 225
              </code>
              </example>
            <remarks>This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToRadians">
             <summary>
             Converts the current instance into radians.
             </summary>
             <returns>A <see cref="T:DotSpatial.Positioning.Radian">Radian</see> object.</returns>
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <overloads>Converts an angular measurement into radians before further processing.</overloads>
            
             <example>
             This example converts a measurement of 90° into radians.
               <code lang="VB">
             Dim MyElevation As New Elevation(90)
             Dim MyRadians As Radian = MyElevation.ToRadians()
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation(90);
             Radian MyRadians = MyElevation.ToRadians();
               </code>
               </example>
             <remarks>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToString(System.String)">
             <summary>
             Outputs the angle as a string using the specified format.
             </summary>
             <param name="format">The format.</param>
             <returns>A <strong>String</strong> in the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Elevation.ToString(System.String,System.IFormatProvider)">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Elevation.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an angle in a
             custom format. The " <strong>h°</strong> " code represents hours along with a
             degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
             the minutes out to two decimals. Mmm.
               <code lang="VB">
             Dim MyElevation As New Elevation(45, 16.772)
             Debug.WriteLine(MyElevation.ToString("h°m.mm"))
             ' Output: 45°16.78
               </code>
               <code lang="CS">
             Dim MyElevation As New Elevation(45, 16.772);
             Debug.WriteLine(MyElevation.ToString("h°m.mm"));
             // Output: 45°16.78
               </code>
               </example>
             <remarks>This method returns the current instance output in a specific format. If no
             value for the format is specified, a default format of "d.dddd°" is used. Any
             string output by this method can be converted back into an Elevation object using the
             <strong>Parse</strong> method or <strong>Elevation(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Equals(System.Object)">
            <summary>
            Compares the current value to another Elevation object's value.
            </summary>
            <param name="obj">An <strong>Elevation</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.</returns>
            <remarks>This</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.GetHashCode">
            <summary>
            Returns a unique code for this instance.
            </summary>
            <returns>An <strong>Integer</strong> representing a unique code for the current
            instance.</returns>
            <remarks>Since the <strong>Elevation</strong> class is immutable, this property may be used
            safely with hash tables.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToString">
             <summary>
             Outputs the angle as a string using the default format.
             </summary>
             <returns>A <strong>String</strong> created using the default format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Elevation.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example outputs a value of 90 degrees in the default format of ###.#°.
               <code lang="VB">
             Dim MyElevation As New Elevation(90)
             Debug.WriteLine(MyElevation.ToString)
             ' Output: "90°"
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation(90);
             Debug.WriteLine(MyElevation.ToString());
             // Output: "90°"
               </code>
               </example>
             <remarks>This method formats the current instance using the default format of
             "d.dddd°." Any string output by this method can be converted back into an Elevation
             object using the <strong>Parse</strong> method or <strong>Elevation(string)</strong>
             constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Normalize(System.Double)">
            <summary>
            Normalizes the specified decimal degrees.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <returns></returns>
            <overloads>Converts a measurement to its equivalent value between -90 and
            90 degrees.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
             <summary>
             Converts arbitrary hour, minute and seconds into decimal degrees.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <returns>A <strong>Double</strong> containing the decimal degree version of the specified
             values.</returns>
             <seealso cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Latitude.Normalize">Normalize Method</seealso>
            
             <example>
             This example converts a value of 10°30'0" into decimal degrees (10.5).
               <code lang="VB" title="ToDecimalDegrees Example (VB)">
             Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
               </code>
               <code lang="CS" title="ToDecimalDegrees Example (C#)">
             double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
               </code>
               </example>
             <remarks>This function is used to convert three-part measurements into a single value. The
             result of this method is typically assigned to the
             <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
             DecimalDegrees</see> property. Values are rounded to thirteen decimal
             places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToDecimalDegrees(System.Int32)">
            <summary>
            Converts an hour value into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to a double value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Random">
            <summary>
            Returns a random angle between 0° and 360°.
            </summary>
            <returns>An <strong>Elevation</strong> containing a random value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Random(System.Random)">
            <summary>
            Returns a random Elevation between 0° and 360° using the specified random number
            seed.
            </summary>
            <param name="generator">A <strong>Random</strong> object used to ogenerate random values.</param>
            <returns>An <strong>Elevation</strong> containing a random value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.LesserOf(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value1">A <strong>Elevation</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Elevation</strong> object to compare to value1.</param>
            <returns>The <strong>Elevation</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.GreaterOf(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value1">A <strong>Elevation</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Elevation</strong> object to compare to value1.</param>
            <returns>A <strong>Elevation</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToRadians(DotSpatial.Positioning.Elevation)">
            <summary>
            Converts an angular measurement into radians.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:DotSpatial.Positioning.Radian"><strong>Radian</strong></see> object.</returns>
            <example>
            This example shows a quick way to convert an angle of 90° into radians.
              <code lang="VB">
            Dim MyRadian As Radian = Elevation.ToRadians(90)
              </code>
              <code lang="CS">
            Radian MyRadian = Elevation.ToRadians(90);
              </code>
              </example>
            <remarks>This function is typically used to convert an angular measurement into
            radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.FromRadians(DotSpatial.Positioning.Radian)">
             <summary>
             Converts a value in radians into an angular measurement.
             </summary>
             <param name="radians">The radians.</param>
             <returns></returns>
             <seealso cref="M:DotSpatial.Positioning.Elevation.ToRadians(DotSpatial.Positioning.Elevation)">ToRadians</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <example>
             This example uses the <strong>FromRadians</strong> method to convert a value of one
             radian into an <strong>Elevation</strong> of 57°.
               <code lang="VB">
             ' Create a new angle equal to one radian
             Dim MyRadians As New Radian(1)
             Dim MyElevation As Elevation = Elevation.FromRadians(MyRadians)
             Debug.WriteLine(MyElevation.ToString())
             ' Output: 57°
               </code>
               <code lang="CS">
             // Create a new angle equal to one radian
             Radian MyRadians = new Radian(1);
             Elevation MyElevation = Elevation.FromRadians(MyRadians);
             Console.WriteLine(MyElevation.ToString());
             // Output: 57°
               </code>
               </example>
             <remarks>This function is typically used in conjunction with the
             <see cref="M:DotSpatial.Positioning.Elevation.ToRadians">ToRadians</see>
             method after a trigonometric function has completed. The converted value is stored in
             the <see cref="P:DotSpatial.Positioning.Elevation.DecimalDegrees">DecimalDegrees</see> property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.FromRadians(System.Double)">
            <summary>
            Froms the radians.
            </summary>
            <param name="radians">The radians.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Parse(System.String)">
             <summary>
             Converts the specified string into an Elevation object.
             </summary>
             <param name="value">The value.</param>
             <returns>A new <strong>Elevation</strong> object populated with the specified
             values.</returns>
             <seealso cref="M:DotSpatial.Positioning.Elevation.ToString">ToString Method</seealso>
            
             <example>
             This example creates a new angular measurement using the <strong>Parse</strong>
             method.
               <code lang="VB">
             Dim NewElevation As Elevation = Elevation.Parse("123.45°")
               </code>
               <code lang="CS">
             Elevation NewElevation = Elevation.Parse("123.45°");
               </code>
               </example>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This method parses the specified string into an <strong>Elevation</strong> object
             using the current culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Elevation</strong> object using the
            specified culture.
            </summary>
            <param name="value">A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.</param>
            <returns>A new <strong>Elevation</strong> object equivalent to the specified string.</returns>
            <remarks>This powerful method is typically used to process data from a data store or a
            value input by the user in any culture. This function can accept any format which
            can be output by the ToString method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Addition(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Addition(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Subtraction(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Subtraction(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Multiply(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Multiply(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Division(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Division(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Equality(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Equality(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Inequality(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Inequality(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_GreaterThan(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_GreaterThan(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_GreaterThanOrEqual(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_GreaterThanOrEqual(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_LessThan(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_LessThan(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_LessThanOrEqual(DotSpatial.Positioning.Elevation,DotSpatial.Positioning.Elevation)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_LessThanOrEqual(DotSpatial.Positioning.Elevation,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns>An <strong>Elevation</strong> object.</returns>
            <example>
            This example uses the <strong>Increment</strong> method to increase an Elevation's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Increment</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Elevation1 As New Elevation(89)
            Elevation1 = Elevation1.Increment()
            ' Incorrect use of Increment
            Dim Elevation1 = New Elevation(89)
            Elevation1.Increment()
            'notice Elevation1 will still be 89°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Elevation Elevation1 = new Elevation(89);
            Elevation1 = Elevation1.Increment();
            // Incorrect use of Increment
            Elevation Elevation1 = new Elevation(89);
            Elevation1.Increment();
            //notice Elevation1 will still be 89°!
              </code>
              </example>
            <remarks><para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Elevation</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Add(System.Double)">
            <summary>
            Increases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
            <returns>A new <strong>Elevation</strong> containing the summed values.</returns>
            <example>
            This example adds 45° to the current instance of 45°, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(45)
            Elevation1 = Elevation1.Add(45)
              </code>
              <code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(45);
            Elevation1 = Elevation1.Add(45);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Add(DotSpatial.Positioning.Elevation)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns>An <strong>Elevation</strong> object.</returns>
            <example>
            This example uses the <strong>Decrement</strong> method to decrease an Elevation's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Decrement</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Elevation1 As New Elevation(91)
            Elevation1 = Elevation1.Decrement()
            ' Incorrect use of Decrement
            Dim Elevation1 = New Elevation(91)
            Elevation1.Increment()
            ' notice Elevation1 will still be 91°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Elevation Elevation1 = new Elevation(91);
            Elevation1 = Elevation1.Decrement();
            // Incorrect use of Decrement
            Elevation Elevation1 = new Elevation(91);
            Elevation1.Decrement();
            // notice Elevation1 will still be 91°!
              </code>
              </example>
            <remarks><para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Elevation</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Subtract(System.Double)">
            <summary>
            Decreases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
            <returns>A new <strong>Elevation</strong> containing the new value.</returns>
            <example>
            This example subtracts 30° from the current instance of 90°, returning 60°.
              <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(90)
            Elevation1 = Elevation1.Subtract(30)
              </code>
              <code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(90);
            Elevation1 = Elevation1.Subtract(30);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Subtract(DotSpatial.Positioning.Elevation)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Multiply(System.Double)">
            <summary>
            Multiplies the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
            <returns>A new <strong>Elevation</strong> containing the product of the two numbers.</returns>
            <example>
            This example multiplies 30° with three, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(30)
            Elevation1 = Elevation1.Multiply(3)
              </code>
              <code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(30);
            Elevation1 = Elevation1.Multiply(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Multiply(DotSpatial.Positioning.Elevation)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Divide(System.Double)">
            <summary>
            Divides the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
            <returns>An <strong>Elevation</strong> containing the new value.</returns>
            <example>
            This example divides 90° by three, returning 30°.
              <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(90)
            Elevation1 = Elevation1.Divide(3)
              </code>
              <code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(90);
            Elevation1 = Elevation1.Divide(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Divide(DotSpatial.Positioning.Elevation)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsLessThan(DotSpatial.Positioning.Elevation)">
            <summary>
            Indicates if the current instance is smaller than the specified value.
            </summary>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsLessThan(System.Double)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsLessThanOrEqualTo(DotSpatial.Positioning.Elevation)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.</returns>
            <remarks>This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsLessThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsGreaterThan(DotSpatial.Positioning.Elevation)">
            <summary>
            Indicates if the current instance is larger than the specified value.
            </summary>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsGreaterThan(System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Elevation)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Elevation</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Radian)~DotSpatial.Positioning.Elevation">
            <summary>
            Converts a measurement in Radians into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(System.Double)~DotSpatial.Positioning.Elevation">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(System.Single)~DotSpatial.Positioning.Elevation">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Elevation)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Elevation)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(System.Int32)~DotSpatial.Positioning.Elevation">
            <summary>
            Converts a measurement in degrees as an Integer into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Angle)~DotSpatial.Positioning.Elevation">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Angle"/> to <see cref="T:DotSpatial.Positioning.Elevation"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Azimuth)~DotSpatial.Positioning.Elevation">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Azimuth"/> to <see cref="T:DotSpatial.Positioning.Elevation"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Latitude)~DotSpatial.Positioning.Elevation">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Latitude"/> to <see cref="T:DotSpatial.Positioning.Elevation"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Longitude)~DotSpatial.Positioning.Elevation">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Longitude"/> to <see cref="T:DotSpatial.Positioning.Elevation"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(System.String)~DotSpatial.Positioning.Elevation">
            <summary>
            Converts a measurement in the form of a formatted String into an Elevation.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.op_Explicit(DotSpatial.Positioning.Elevation)~System.String">
            <summary>
            Converts an Elevation into a String.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>An <strong>Elevation</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ToString(System.String,System.IFormatProvider)">
             <summary>
             Outputs the angle as a string using the specified format.
             </summary>
             <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
             <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
             <returns>A <strong>String</strong> in the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Elevation.ToString">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Elevation.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an angle in a
             custom format. The " <strong>h°</strong> " code represents hours along with a
             degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
             the minutes out to two decimals. Mmm.
               <code lang="VB">
             Dim MyElevation As New Elevation(45, 16.772)
             Debug.WriteLine(MyElevation.ToString("h°m.mm", CultureInfo.CurrentCulture))
             ' Output: 45°16.78
               </code>
               <code lang="CS">
             Dim MyElevation As New Elevation(45, 16.772);
             Debug.WriteLine(MyElevation.ToString("h°m.mm", CultureInfo.CurrentCulture));
             // Output: 45°16.78
               </code>
               </example>
             <remarks>This method returns the current instance output in a specific format. If no
             value for the format is specified, a default format of "d.dddd" is used. Any string
             output by this method can be converted back into an Elevation object using the
             <strong>Parse</strong> method or <strong>Elevation(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Equals(DotSpatial.Positioning.Elevation,System.Int32)">
             <summary>
             Compares the current instance to another instance using the specified
             precision.
             </summary>
             <param name="value">The value.</param>
             <param name="decimals">The decimals.</param>
             <returns>A <strong>Boolean</strong>, <strong>True</strong> if the
             <strong>DecimalDegrees</strong> property of the current instance matches the
             specified instance's <strong>DecimalDegrees</strong> property.</returns>
             <seealso cref="M:DotSpatial.Positioning.Elevation.Equals(DotSpatial.Positioning.Elevation)">Equals Method</seealso>
            
             <example>
             These examples compare two fractional values using specific numbers of digits for
             comparison.
               <code lang="VB" title="[New Example]">
             ' Equals will return False
             Dim Elevation1 As New Elevation(90.15);
             Dim Elevation2 As New Elevation(90.12);
             If Elevation1.Equals(Elevation2, 2) Then
             Debug.WriteLine("The values are the same to two digits of precision.");
             ' Equals will return True
             Dim Elevation1 As New Elevation(90.15);
             Dim Elevation2 As New Elevation(90.12);
             If Elevation1.Equals(Elevation2, 1) Then
             Debug.WriteLine("The values are the same to one digit of precision.");
               </code>
               <code lang="CS" title="[New Example]">
             // Equals will return False
             Elevation Elevation1 = new Elevation(90.15);
             Elevation Elevation2 = new Elevation(90.12);
             if (Elevation1.Equals(Elevation2, 2))
             Console.WriteLine("The values are the same to two digits of precision.");
             // Equals will return True
             Elevation Elevation1 = new Elevation(90.15);
             Elevation Elevation2 = new Elevation(90.12);
             if (Elevation1.Equals(Elevation2, 1))
             Console.WriteLine("The values are the same to one digits of precision.");
               </code>
               </example>
             <remarks><para>This is typically used in cases where precision is only significant for a few
             digits and exact comparison is not necessary.</para>
               <para><em>notice This method compares objects by value, not by
             reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.Equals(DotSpatial.Positioning.Elevation)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether the two elevations are equivalent.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.CompareTo(DotSpatial.Positioning.Elevation)">
            <summary>
            Returns a value indicating the relative order of two objects.
            </summary>
            <param name="other">An <strong>Elevation</strong> object to compare with.</param>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>This method allows collections of <strong>Azimuth</strong> objects to be sorted.
            The <see cref="P:DotSpatial.Positioning.Elevation.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Elevation.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.DecimalDegrees">
             <summary>
             Returns the value of the angle as decimal degrees.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Elevation.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.Seconds">Seconds Property</seealso>
            
             <example>
             This example demonstrates how the
               <see cref="P:DotSpatial.Positioning.Elevation.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
             calculated automatically when creating an angle using hours, minutes and seconds.
               <code lang="VB">
             ' Create an angle of 20°30'
             Dim MyElevation As New Elevation(20, 30)
             ' Setting the DecimalMinutes recalculated other properties
             Debug.WriteLine(MyElevation.DecimalDegrees)
             ' Output: "20.5"  the same as 20°30'
               </code>
               <code lang="CS">
             // Create an angle of 20°30'
             Elevation MyElevation = New Elevation(20, 30);
             // Setting the DecimalMinutes recalculated other properties
             Console.WriteLine(MyElevation.DecimalDegrees)
             // Output: "20.5"  the same as 20°30'
               </code>
               </example>
             <remarks>This property returns the value of the angle as a single number.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.DecimalMinutes">
             <summary>
             Returns the minutes and seconds as a single numeric value.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Elevation.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <example>
             This example demonstrates how the <strong>DecimalMinutes</strong> property is
             automatically calculated when creating a new angle.
               <code lang="VB">
             ' Create an angle of 20°10'30"
             Dim MyElevation As New Elevation(20, 10, 30)
             ' The DecimalMinutes property is automatically calculated
             Debug.WriteLine(MyElevation.DecimalMinutes)
             ' Output: "10.5"
               </code>
               <code lang="CS">
             // Create an angle of 20°10'30"
             Elevation MyElevation = new Elevation(20, 10, 30);
             // The DecimalMinutes property is automatically calculated
             Console.WriteLine(MyElevation.DecimalMinutes)
             // Output: "10.5"
               </code>
               </example>
             <remarks>This property is used when minutes and seconds are represented as a single
             decimal value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.Hours">
             <summary>
             Returns the integer hours (degrees) portion of an angular
             measurement.
             </summary>
             <value>An <strong>Integer</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Elevation.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 60.5° then outputs the value of the
               <strong>Hours</strong> property, 60.
               <code lang="VB">
             Dim MyElevation As New Elevation(60.5)
             Debug.WriteLine(MyElevation.Hours)
             ' Output: 60
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation(60.5);
             Console.WriteLine(MyElevation.Hours);
             // Output: 60
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Elevation.Minutes">Minutes</see>
             and <see cref="P:DotSpatial.Positioning.Elevation.Seconds">Seconds</see> properties to create a full angular measurement.
             This property is the same as <strong>DecimalDegrees</strong> without any fractional
             value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.Minutes">
             <summary>
             Returns the integer minutes portion of an angular measurement.
             </summary>
             <value>An <strong>Integer</strong>.</value>
             <seealso cref="P:DotSpatial.Positioning.Elevation.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 45.5° then outputs the value of the
               <strong>Minutes</strong> property, 30.
               <code lang="VB">
             Dim MyElevation As New Elevation(45.5)
             Debug.WriteLine(MyElevation.Minutes)
             ' Output: 30
               </code>
               <code lang="CS">
             Elevation MyElevation = new Elevation(45.5);
             Console.WriteLine(MyElevation.Minutes);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Elevation.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Elevation.Seconds">Seconds</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.Seconds">
             <summary>
             Returns the seconds minutes portion of an angular measurement.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Elevation.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Elevation.Minutes">Minutes Property</seealso>
            
             <example>
             This example creates an angle of 45°10.5' then outputs the value of the
               <strong>Seconds</strong> property, 30.
               <code lang="VB">
             Dim MyElevation As New Elevation(45, 10.5)
             Debug.WriteLine(MyElevation.Seconds)
             ' Output: 30
               </code>
               <code lang="CS">
             Dim MyElevation As New Elevation(45, 10.5);
             Console.WriteLine(MyElevation.Seconds);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Elevation.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Elevation.Minutes">Minutes</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.IsEmpty">
            <summary>
            Indicates if the current instance has a non-zero value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.</value>
            <seealso cref="F:DotSpatial.Positioning.Elevation.Empty">Empty Field</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.IsInfinity">
            <summary>
            Indicates if the current instance represents an infinite value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.IsInvalid">
            <summary>
            Indicates if the current instance is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Elevation.IsNormalized">
            <summary>
            Indicates whether the current instance has been normalized and is within the
            allowed bounds of -90° and 90°.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Ellipsoid">
            <summary>
            Represents a flattened sphere which approximates Earth's size and shape.
            </summary>
            <remarks><para>Mathematics involving points on Earth's surface are difficult to perform with
            precision because the Earth's surface is rugged. In order to maximize precision,
            scientists developed "ellipsoids," smooth ellipsoidal shapes (known as "oblate
            spheriods" or flattened spheres) which attempt to approximate Earth's exact shape.
            Like datums, ellipsoids have been subject to frequent revisions thanks to advances
            in technology, yet countries cannot quickly abandon outdated ellipsoids because so
            much infrastructure is built upon them. As a result, multiple ellipsoids are
            tracked and utilized when converting coordinates from one locale to another. Today,
            there are approximately thirty known ellipsoids upon which an estimated 120
            individual coordinate systems are built.</para>
              <para>This class is typically used during coordinate conversion to convert from one
            interpretation of Earth's shape to another. All known worldwide ellipsoids such as
            WGS84 and Clarke 1880 are provided as static (Shared in Visual Basic) fields. Most
            developers will not have to use this class until coordinates must be plotted on a
            map. For most purposes, using the default ellipsoid of WGS84 is sufficient.</para>
              <para>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be set via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._epsgNumber">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._equatorialRadius">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._equatorialRadiusMeters">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._polarRadius">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._polarRadiusMeters">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._name">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._flattening">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._inverseFlattening">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._eccentricity">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._eccentricitySquared">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._ellipsoids">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid._epsgEllipsoids">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Airy1830">
            <summary>
            Represents the Airy ellipsoid of 1830.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.AiryModified1949">
            <summary>
            Represents the Modified Airy ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.AustralianNational1965">
            <summary>
            Represents the Australian National ellipsoid of 1965.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Bessel1841">
            <summary>
            Represents the Bessel ellipsoid of 1841.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Bessel1841Mod">
            <summary>
            Represents the Bessel Modified ellipsoid of 1841.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Bessel1841Namibia">
            <summary>
            Represents the Bessel (Namibia) ellipsoid of 1841.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1858">
            <summary>
            Represents the Clarke ellipsoid of 1858.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1866">
            <summary>
            Represents the Clarke ellipsoid of 1866.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1866Michigan">
            <summary>
            Represents the Clarke (Michigan) ellipsoid of 1866.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880Benoit">
            <summary>
            Represents the Clarke (Benoit) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880IGN">
            <summary>
            Represents the Clarke (IGN) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880RGS">
            <summary>
            Represents the Clarke (RGS) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880Arc">
            <summary>
            Represents the Clarke (Arc) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880SGA">
            <summary>
            Represents the Clarke (SGA 1822) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1937">
            <summary>
            Represents the Everest (1937 Adjustment) ellipsoid of 1830.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1967">
            <summary>
            Represents the Everest (1967 Definition) ellipsoid of 1830.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1830Modified">
            <summary>
            Represents the Everest (Modified 1948) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Grs80">
            <summary>
            Represents the Geodetic Reference System ellipsoid of 1980.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Helmert1906">
            <summary>
            Represents the Helmert ellipsoid of 1906.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Indonesian1974">
            <summary>
            Represents the Indonesian ellipsoid of 1974.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.International1909">
            <summary>
            Represents the International ellipsoid of 1909 (1924 alias).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.International1924">
            <summary>
            Represents the International ellipsoid of 1924.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Krassovsky1940">
            <summary>
            Represents the Krassovsky ellipsoid of 1940.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Nwl9D">
            <summary>
            Represents the Naval Weapons Lab ellipsoid of 1965.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Plessis1817">
            <summary>
            Represents the Plessis ellipsoid of 1817.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Struve1860">
            <summary>
            Represents the Struve ellipsoid of 1860.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.WarOffice">
            <summary>
            Represents the War Office ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Wgs1984">
            <summary>
            Represents the World Geodetic System ellipsoid of 1984.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Gem10C">
            <summary>
            Represents the GEM 10C Gravity Potential Model ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Osu86F">
            <summary>
            Represents the OSU86 gravity potential (geoidal) model ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Osu91A">
            <summary>
            Represents the OSU91 gravity potential (geoidal) model ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880">
            <summary>
            Represents the Clarke ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.AuthalicSphere">
            <summary>
            Represents the Authalic Sphere (r=6371000).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Grs67">
            <summary>
            Represents the Geodetic Reference System ellipsoid of 1967.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Ats1977">
            <summary>
            Represents the Average Terrestrial System ellipsoid of 1977.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1830">
            <summary>
            Represents the Everest (1830 Definition) ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Wgs1972">
            <summary>
            Represents the World Geodetic System ellipsoid of 1972.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1962">
            <summary>
            Represents the Everest (1962 Definition) ellipsoid of 1830.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1975">
            <summary>
            Represents the Everest (1975 Definition) ellipsoid of 1830.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Bessel1841Japan">
            <summary>
            Represents the Bessel (Japan) ellipsoid of 1841.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Grs1980AuthalicSphere">
            <summary>
            Represents the GRS 1980 Authalic Sphere (r=6371007).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Xian1980">
            <summary>
            Represents the Xian ellipsoid of 1980.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Iau76">
            <summary>
            Represents the IAU ellipsoid of 1976.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Grs67Sad69">
            <summary>
            Represents the Geodetic Reference System (SAD69) ellipsoid of 1967.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Danish1876">
            <summary>
            Represents the Danish ellipsoid of 1876.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Andrae">
            <summary>
            Represents the Andrae (Danish 1876 alternate) ellipsoid of 1876.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.NormalSphere">
            <summary>
            Represents the Common Sphere (Clarke 1866 Authalic Sphere alias).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1866AuthalicSphere">
            <summary>
            Represents the Clarke 1866 Authalic Sphere (r=6370997).
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Hough1960">
            <summary>
            Represents the Hough ellipsoid of 1960.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Pz1990">
            <summary>
            Represents the PZ90 ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Clarke1880InternationalFoot">
            <summary>
            Represents the Clarke (international foot) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Everest1880Rso">
            <summary>
            Represents the Everest (RSO 1969) ellipsoid of 1880.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.International1924AuthalicSphere">
            <summary>
            Represents the International 1924 Authalic Sphere.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Hughes1980">
            <summary>
            Represents the Hughes ellipsoid of 1980.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Apl49">
            <summary>
            Represents the Applied Physics ellipsoid of 1965.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Cpm">
            <summary>
            Represents the Comm. des Poids et Mesures ellipsoid of 1799.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Delmabre">
            <summary>
            Represents the Delambre (Belgium) ellipsoid of 1810.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Engelis">
            <summary>
            Represents the Engelis ellipsoid of 1985.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Fischer1960">
            <summary>
            Represents the Fisher ellipsoid of 1960.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.ModifiedFischer1960">
            <summary>
            Represents the Modified Fisher ellipsoid of 1960.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Fischer1968">
            <summary>
            Represents the Fisher ellipsoid of 1968.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.NewInternational1967">
            <summary>
            Represents the New International ellipsoid of 1967.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Kaula">
            <summary>
            Represents the Kaula ellipsoid of 1961.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Lerch">
            <summary>
            Represents the Lerch ellipsoid of 1979.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Merit">
            <summary>
            Represents the MERIT ellipsoid of 1983.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Maupertius">
            <summary>
            Represents the Maupertius ellipsoid of 1738.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.SoutheastAsia">
            <summary>
            Represents the Southeast Asia (Modified Fisher ellipsoid of 1960) ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Sgs1985">
            <summary>
            Represents the SGS ellipsoid of 1985.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.SouthAmerican1969">
            <summary>
            Represents the South American ellipsoid of 1969.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Walbeck">
            <summary>
            Represents the Walbeck ellipsoid.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Wgs1960">
            <summary>
            Represents the World Geodetic System ellipsoid of 1960.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Wgs1966">
            <summary>
            Represents the World Geodetic System ellipsoid of 1966.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Ellipsoid.Default">
            <summary>
            Represents the default ellipsoid, WGS1984.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.#ctor(System.String,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Creates a new instance with the specified type, name, equatorial raduis and polar radius.
            </summary>
            <param name="name">The name.</param>
            <param name="equatorialRadius">The equatorial radius.</param>
            <param name="polarRadius">The polar radius.</param>
            <remarks>This constructor allows user-defined ellipsoids to be created for specialized applications.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.#ctor(System.String,DotSpatial.Positioning.Distance,System.Double)">
            <summary>
            Internal contructor for static list generation
            </summary>
            <param name="name">The name.</param>
            <param name="equatorialRadius">The equatorial radius.</param>
            <param name="inverseFlattening">The inverse flattening.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.#ctor(System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Internal contructor for static list generation
            </summary>
            <param name="epsgNumber">The epsg number.</param>
            <param name="a">A.</param>
            <param name="invf">The invf.</param>
            <param name="b">The b.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.SanityCheck">
            <summary>
            Validates the ellipsoid. Called in the constructor.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.Calculate">
            <summary>
            Calculates the common ellipsoid properties. Called from the constructor
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.FromName(System.String)">
            <summary>
            Returns a Ellipsoid object matching the specified name.
            </summary>
            <param name="name">A <strong>String</strong> describing the name of an existing Ellipsoid.</param>
            <returns>A <strong>Ellipsoid</strong> object matching the specified string, or null if no Ellipsoid was found.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.FromEpsgNumber(System.Int32)">
            <summary>
            Returns the datum corresponding to the EPSG code
            </summary>
            <param name="epsgNumber">The epsg number.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.Equals(DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Returns whether the current ellipsoid has the same value as the specified ellipsoid.
            </summary>
            <param name="other">An <strong>Ellipsoid</strong> object to compare against.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the equatorial radius and polar radius
            of both ellipsoids are equal.  When both radii are equal, all other calculated properties will also
            be equal.  The name of the ellipsoid is not compared.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.Equals(DotSpatial.Positioning.Ellipsoid,System.Int32)">
            <summary>
            Returns whether the current ellipsoid has the same value as the specified ellipsoid.
            </summary>
            <param name="other">An <strong>Ellipsoid</strong> object to compare against.</param>
            <param name="decimals">An <strong>integer</strong> specifies the precision for the comparison.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the equatorial radius and polar radius
            of both ellipsoids are equal.  When both radii are equal, all other calculated properties will also
            be equal.  The name of the ellipsoid is not compared.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Ellipsoid.OnReadXml(System.Xml.XmlReader)">
            <summary>
            Called when [read XML].
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.EpsgNumber">
            <summary>
            European Petroleum Survey Group number for this ellipsoid. The ESPG standards are now maintained by OGP
            (International Association of Oil and Gas Producers).
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.Name">
            <summary>
            Indicates the descriptive name of the ellipsoid.
            </summary>
            <value>A <strong>String</strong> containing the name of the ellipsoid.</value>
            <remarks>This property is typically used to display ellipsoid information on a user interface.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadius">
            <summary>
            Represents the distance from Earth's center to the equator.
            </summary>
            <value>A <strong>Distance</strong> object.</value>
            <seealso cref="P:DotSpatial.Positioning.Ellipsoid.PolarRadius">PolarRadius Property</seealso>
            <remarks>This property defines the radius of the Earth from its center to the equator.
            This property is used in conjunction with the <strong>PolarRadius</strong> property
            to define an ellipsoidal shape. This property returns the same value as the
            <strong>SemiMajorAxis</strong> property.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.PolarRadius">
            <summary>
            Represents the distance from Earth's center to the North or South pole.
            </summary>
            <value>A <strong>Distance</strong> object.</value>
            <seealso cref="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
            <remarks>This property defines the radius of the Earth from its center to the equator.
            This property is used in conjunction with the <strong>EquatorialRadius</strong>
            property to define an ellipsoidal shape. This property returns the same value as
            the <strong>SemiMinorAxis</strong> property.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.SemiMajorAxis">
            <summary>
            Represents the distance from Earth's center to the equator.
            </summary>
            <value>A <strong>Distance</strong> containing Earth's equatorial radius.</value>
            <seealso cref="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
            <remarks>This property defines the radius of the Earth from its center to the equator.
            This property is used in conjunction with the <strong>SemiMinorAxis</strong>
            property to define an ellipsoidal shape. This property returns the same value as
            the <strong>EquatorialRadius</strong> property.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.SemiMinorAxis">
            <summary>
            Represents the distance from Earth's center to the North or South pole.
            </summary>
            <value>A <strong>Distance</strong> containing Earth's polar radius.</value>
            <seealso cref="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
            <remarks>This property defines the radius of the Earth from its center to the equator.
            This property is used in conjunction with the <strong>SemiMajorAxis</strong>
            property to define an ellipsoidal shape. This property returns the same value as
            the <strong>PolarRadius</strong> property.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.IsSpherical">
            <summary>
            Indicates if the ellipsoid is describing a perfect sphere.
            </summary>
            <remarks>Mathematical formulas such as map projection and coordinate conversion can be
            optimized if the ellipsoid they are working with is spherical. For more precise
            results, however, spherical ellipsoids should not be used. This property, when used
            correctly, can improve performance for mathematics when coordinate precision is less of
            a concern, such as viewing a map from a high altitude.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.InverseFlattening">
            <summary>
            Indicates the inverse of the shape of an ellipsoid relative to a sphere.
            </summary>
            <value>A <strong>Double</strong> containing the ellipsoid's flattening.</value>
            <seealso cref="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
            <remarks>This property is used frequently in equations. Inverse flattening is defined as
            one divided by the <strong>Flattening</strong> property.:</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.Flattening">
            <summary>
            Indicates the shape of the ellipsoid relative to a sphere.
            </summary>
            <value>A <strong>Double</strong> containing the ellipsoid's flattening.</value>
            <seealso cref="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
            <remarks>This property compares the equatorial radius with the polar radius to measure the
            amount that the ellipsoid is "squished" vertically.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.Eccentricity">
            <summary>
            Returns the rate of flattening of the ellipsoid.
            </summary>
            <value>A <strong>Double</strong> measuring how elongated the ellipsoid is.</value>
            <remarks>The eccentricity is a positive number less than 1, or 0 in the case of a circle.
            The greater the eccentricity is, the larger the ratio of the equatorial radius to the
            polar radius is, and therefore the more elongated the ellipse is.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.EccentricitySquared">
            <summary>
            Returns the square of the eccentricity.
            </summary>
            <remarks>This property returns the value of the <strong>Eccentricity</strong> property,
            squared. It is used frequently during coordinate conversion formulas.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.PolarRadiusMeters">
            <summary>
            Gets the polar radius meters.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.EquatorialRadiusMeters">
            <summary>
            Gets the equatorial radius meters.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.SemiMajorAxisMeters">
            <summary>
            Gets the semi major axis meters.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Ellipsoid.SemiMinorMeters">
            <summary>
            Gets the semi minor meters.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.AngleEventArgs">
             <summary>
             Represents information about an angle when an angle-related event is raised.
             </summary>
             <example>
             This example demonstrates how to use <strong>AngleEventArgs</strong> when raising
             an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyAngleEvent As AngleEventHandler
             Sub Main()
             ' Create an angle of 90°
             Dim MyAngle As New Angle(90);
             ' Raise our custom Event
             RaiseEvent MyAngleEvent(Me, New AngleEventArgs(MyAngle));
             End Sub
               </code>
               <code lang="CS">
             // Declare a new event
             AngleEventHandler MyAngleEvent;
             void Main()
             {
             // Create an angle of 90°
             Angle MyAngle = new Angle(90);
             // Raise our custom event
             if (MyAngleEvent != null)
             MyAngleEvent(this, new AngleEventArgs(MyAngle));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.AngleEventArgs.Angle">Angle Class</seealso>
             <remarks>This class is used for events which use an <strong>Angle</strong> as a
             parameter.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.AngleEventArgs._angle">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.AngleEventArgs.#ctor(DotSpatial.Positioning.Angle)">
            <summary>
            Creates a new instance containing the specified Angle object.
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:DotSpatial.Positioning.AngleEventArgs.Angle">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Angle</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.AngleEventArgs.Angle">Angle Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.AngleEventArgs.Angle">Angle</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.AreaEventArgs">
             <summary>
             Represents information about a area when an area-related event is raised.
             </summary>
             <example>
             This example demonstrates how to use the <strong>AreaEventArgs</strong> class when
             raising an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyAreaEvent As AreaEventHandler
             Sub Main()
             ' Create a Area of 125 kilometers
             Dim MyArea As New Area(125, AreaUnit.SquareKilometers)
             ' Raise our custom event
             RaiseEvent MyAreaEvent(Me, New AreaEventArgs(MyArea))
             End Sub
               </code>
               <code lang="CS">
             // Declare a new event
             AreaEventHandler MyAreaEvent;
             void Main()
             {
             // Create a Area of 125 kilometers
             Area MyArea = new Area(125, AreaUnit.SquareKilometers);
             // Raise our custom event
             if (MyAreaEvent != null)
             MyAreaEvent(this, New AreaEventArgs(MyArea));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.AreaEventArgs.Area">Area Class</seealso>
        </member>
        <member name="F:DotSpatial.Positioning.AreaEventArgs._area">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.AreaEventArgs.#ctor(DotSpatial.Positioning.Area)">
            <summary>
            Creates a new instance containing the specified Area object.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:DotSpatial.Positioning.AreaEventArgs.Area">
            <summary>
            Represents information about a Area measurement when an Area-related event is raised.
            </summary>
            <value>A <strong>Area</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.AreaEventArgs.Area">Area Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.AreaEventArgs.Area">Area</see> class to provide notification
            when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.AzimuthEventArgs">
             <summary>
             Represents information about an angle when an angle-related event is raised.
             </summary>
             <example>
             This example demonstrates how to use <strong>AzimuthEventArgs</strong> when raising
             an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyAzimuthEvent As AzimuthEventHandler
             Sub Main()
             ' Create an angle of 90°
             Dim MyAzimuth As New Azimuth(90);
             ' Raise our custom Event
             RaiseEvent MyAzimuthEvent(Me, New AzimuthEventArgs(MyAzimuth));
             End Sub
               </code>
               <code lang="CS">
             // Declare a new event
             AzimuthEventHandler MyAzimuthEvent;
             void Main()
             {
             // Create an angle of 90°
             Azimuth MyAzimuth = new Azimuth(90);
             // Raise our custom event
             if (MyAzimuthEvent != null)
             MyAzimuthEvent(this, new AzimuthEventArgs(MyAzimuth));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.AzimuthEventArgs.Azimuth">Azimuth Class</seealso>
             <remarks>This class is used for events which use an <strong>Azimuth</strong> as a
             parameter.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.AzimuthEventArgs._azimuth">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.AzimuthEventArgs.#ctor(DotSpatial.Positioning.Azimuth)">
            <summary>
            Creates a new instance containing the specified Azimuth object.
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:DotSpatial.Positioning.AzimuthEventArgs.Azimuth">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Azimuth</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.AzimuthEventArgs.Azimuth">Azimuth Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.AzimuthEventArgs.Azimuth">Azimuth</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.CancelableEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.CancelableEventArgs._canceled">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.CancelableEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.CancelableEventArgs"/> class.
            </summary>
            <param name="isCanceled">if set to <c>true</c> [is canceled].</param>
        </member>
        <member name="P:DotSpatial.Positioning.CancelableEventArgs.Canceled">
            <summary>
            Controls whether an operation is to be aborted.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
            <remarks>This property, when set to True will signal that a pending operation should not execute.  For example,
            an event which is raised immediately before connecting would check this property to determine whether to
            continue connecting, or exit.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.DistanceEventArgs">
             <summary>
             Represents information about a distance when an distance-related event is raised.
             </summary>
             <example>This example demonstrates how to use this class when raising an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyDistanceEvent As DistanceEventHandler
             ' Create a distance of 125 kilometers
             Dim MyDistance As New Distance(125, DistanceUnit.Kilometers)
             Sub Main()
             ' Raise our custom event
             RaiseEvent MyDistanceEvent(Me, New DistanceEventArgs(MyDistance))
             End Sub
               </code>
               <code lang="C#">
             // Declare a new event
             DistanceEventHandler MyDistanceEvent;
             // Create a distance of 125 kilometers
             Distance MyDistance = new Distance(125, DistanceUnit.Kilometers);
             void Main()
             {
             // Raise our custom event
             MyDistanceEvent(this, New DistanceEventArgs(MyDistance));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.DistanceEventArgs.Distance">Distance Class</seealso>
             <remarks>This class is typically used for events in the <see cref="P:DotSpatial.Positioning.DistanceEventArgs.Distance">Distance</see> class to
             provide notification when hours, minutes, decimal minutes or seconds properties have changed.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.DistanceEventArgs._distance">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DistanceEventArgs.#ctor(DotSpatial.Positioning.Distance)">
            <summary>
            Creates a new instance containing the specified Distance object.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:DotSpatial.Positioning.DistanceEventArgs.Distance">
            <summary>
            Represents information about a distance measurement when an distance-related event is raised.
            </summary>
            <value>A <strong>Distance</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.DistanceEventArgs.Distance">Distance Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.DistanceEventArgs.Distance">Distance</see> class to provide notification
            when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.ElevationEventArgs">
             <summary>
             Represents information about an angle when an angle-related event is raised.
             </summary>
             <example>
             This example demonstrates how to use <strong>ElevationEventArgs</strong> when raising
             an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyElevationEvent As ElevationEventHandler
             Sub Main()
             ' Create an angle of 90°
             Dim MyElevation As New Elevation(90);
             ' Raise our custom Event
             RaiseEvent MyElevationEvent(Me, New ElevationEventArgs(MyElevation));
             End Sub
               </code>
               <code lang="CS">
             // Declare a new event
             ElevationEventHandler MyElevationEvent;
             void Main()
             {
             // Create an angle of 90°
             Elevation MyElevation = new Elevation(90);
             // Raise our custom event
             if (MyElevationEvent != null)
             MyElevationEvent(this, new ElevationEventArgs(MyElevation));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.ElevationEventArgs.Elevation">Elevation Class</seealso>
             <remarks>This class is used for events which use an <strong>Elevation</strong> as a
             parameter.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.ElevationEventArgs._elevation">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.ElevationEventArgs.#ctor(DotSpatial.Positioning.Elevation)">
            <summary>
            Creates a new instance containing the specified Elevation object.
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:DotSpatial.Positioning.ElevationEventArgs.Elevation">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Elevation</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.ElevationEventArgs.Elevation">Elevation Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.ElevationEventArgs.Elevation">Elevation</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.LatitudeEventArgs">
             <summary>
             Represents information about an angle when an angle-related event is raised.
             </summary>
             <example>
             This example demonstrates how to use <strong>LatitudeEventArgs</strong> when raising
             an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyLatitudeEvent As LatitudeEventHandler
             Sub Main()
             ' Create an angle of 90°
             Dim MyLatitude As New Latitude(90);
             ' Raise our custom Event
             RaiseEvent MyLatitudeEvent(Me, New LatitudeEventArgs(MyLatitude));
             End Sub
               </code>
               <code lang="CS">
             // Declare a new event
             LatitudeEventHandler MyLatitudeEvent;
             void Main()
             {
             // Create an angle of 90°
             Latitude MyLatitude = new Latitude(90);
             // Raise our custom event
             if (MyLatitudeEvent != null)
             MyLatitudeEvent(this, new LatitudeEventArgs(MyLatitude));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.LatitudeEventArgs.Latitude">Latitude Class</seealso>
             <remarks>This class is used for events which use an <strong>Latitude</strong> as a
             parameter.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.LatitudeEventArgs._latitude">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.LatitudeEventArgs.#ctor(DotSpatial.Positioning.Latitude)">
            <summary>
            Creates a new instance containing the specified Latitude object.
            </summary>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:DotSpatial.Positioning.LatitudeEventArgs.Latitude">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Latitude</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.LatitudeEventArgs.Latitude">Latitude Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.LatitudeEventArgs.Latitude">Latitude</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.LongitudeEventArgs">
             <summary>
             Represents information about an angle when an angle-related event is raised.
             </summary>
             <example>
             This example demonstrates how to use <strong>LongitudeEventArgs</strong> when raising
             an event.
               <code lang="VB">
             ' Declare a new event
             Dim MyLongitudeEvent As LongitudeEventHandler
             Sub Main()
             ' Create an angle of 90°
             Dim MyLongitude As New Longitude(90);
             ' Raise our custom Event
             RaiseEvent MyLongitudeEvent(Me, New LongitudeEventArgs(MyLongitude));
             End Sub
               </code>
               <code lang="CS">
             // Declare a new event
             LongitudeEventHandler MyLongitudeEvent;
             void Main()
             {
             // Create an angle of 90°
             Longitude MyLongitude = new Longitude(90);
             // Raise our custom event
             if (MyLongitudeEvent != null)
             MyLongitudeEvent(this, new LongitudeEventArgs(MyLongitude));
             }
               </code>
               </example>
            
             <seealso cref="P:DotSpatial.Positioning.LongitudeEventArgs.Longitude">Longitude Class</seealso>
             <remarks>This class is used for events which use an <strong>Longitude</strong> as a
             parameter.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.LongitudeEventArgs._longitude">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.LongitudeEventArgs.#ctor(DotSpatial.Positioning.Longitude)">
            <summary>
            Creates a new instance containing the specified Longitude object.
            </summary>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="P:DotSpatial.Positioning.LongitudeEventArgs.Longitude">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Longitude</strong> object containing a property which has changed.</value>
            <seealso cref="P:DotSpatial.Positioning.LongitudeEventArgs.Longitude">Longitude Class</seealso>
            <remarks>This class is used by the <see cref="P:DotSpatial.Positioning.LongitudeEventArgs.Longitude">Longitude</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.PositionEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.PositionEventArgs._position">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.PositionEventArgs.#ctor(DotSpatial.Positioning.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.PositionEventArgs"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="P:DotSpatial.Positioning.PositionEventArgs.Position">
            <summary>
            Gets the position.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.RadianEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.RadianEventArgs._radians">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.RadianEventArgs.#ctor(DotSpatial.Positioning.Radian)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.RadianEventArgs"/> class.
            </summary>
            <param name="radian">The radian.</param>
        </member>
        <member name="P:DotSpatial.Positioning.RadianEventArgs.Radians">
            <summary>
            Gets the radians.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.SpeedEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedEventArgs._speed">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SpeedEventArgs.#ctor(DotSpatial.Positioning.Speed)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SpeedEventArgs"/> class.
            </summary>
            <param name="speed">The speed.</param>
        </member>
        <member name="P:DotSpatial.Positioning.SpeedEventArgs.Speed">
            <summary>
            Gets the speed.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.TimeSpanEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.TimeSpanEventArgs._timeSpan">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.TimeSpanEventArgs.#ctor(System.TimeSpan)">
             <summary>
             Creates a new instance containing the specified TimeSpan object.
             </summary>
             <param name="timeSpan">The time span.</param>
             <seealso cref="P:DotSpatial.Positioning.TimeSpanEventArgs.TimeSpan">TimeSpan Property</seealso>
            
             <seealso cref="T:System.TimeSpan">TimeSpan Structure</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.TimeSpanEventArgs.TimeSpan">
            <summary>
            Indicates a length of time which is the target of the event.
            </summary>
            <value>A <strong>TimeSpan</strong> object describing a length of time.</value>
            <seealso cref="T:System.TimeSpan">TimeSpan Structure</seealso>
        </member>
        <member name="T:DotSpatial.Positioning.DateTimeEventArgs">
            <summary>
            Represents information about the date and time reported by the GPS device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DateTimeEventArgs._dateTime">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DateTimeEventArgs._systemClockUpdated">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.DateTimeEventArgs.#ctor(System.DateTime)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:DotSpatial.Positioning.DateTimeEventArgs.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="systemClockUpdated">if set to <c>true</c> [system clock updated].</param>
        </member>
        <member name="P:DotSpatial.Positioning.DateTimeEventArgs.DateTime">
             <summary>
             A date and time value in UTC time (not adjusted for the local time zone).
             </summary>
             <value>A DateTime object containing a date and time reported by the GPS device.</value>
             <seealso cref="T:System.DateTime">DateTime Class</seealso>
            
             <seealso cref="M:System.DateTime.ToLocalTime">ToLocalTime Method (DateTime Class)</seealso>
             <remarks>This date and time value is not adjusted to the local time zone.  Use the
             <see cref="M:System.DateTime.ToLocalTime">ToLocalTime</see> method to adjust to local time.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.DateTimeEventArgs.SystemClockUpdated">
            <summary>
            Indicates whether the system clock updated to match the <see cref="P:DotSpatial.Positioning.DateTimeEventArgs.DateTime"/>.
            </summary>
            <value><see langword="true">True</see> if the system clock was updated; otherwise, <see langword="false"/>.
            The default is <see langword="false"/>.</value>
        </member>
        <member name="T:DotSpatial.Positioning.ExceptionEventArgs">
            <summary>
            Represents information about an exception when an error-related event is raised.
            </summary>
            <example>This example demonstrates how to use this class when raising an event.
              <code lang="VB">
            ' Create a new exception
            Dim MyException As New ApplicationException("The error was successfully created.")
            ' Declare a new event
            Dim MyErrorEvent As ExceptionEventHandler
            Sub Main()
            ' Raise our custom event
            RaiseEvent MyErrorEvent(Me, New ExceptionEventArgs(MyException))
            End Sub
              </code>
              <code lang="C#">
            // Create a new exception
            ApplicationException MyException = new ApplicationException("The error was successfully created.")
            // Declare a new event
            ExceptionEventHandler MyErrorEvent;
            void Main()
            {
            // Raise our custom event
            MySatelliteEvent(this, New ExceptionEventArgs(MyException));
            }
              </code>
              </example>
            <remarks>This object is used throughout the GPS.NET framework to provide notification when
            either of two situations occur:
            <list>
            		<item>An exception is thrown which cannot be trapped via a Try..Catch block (such as from a separate thread)</item>
            		<item>An exception is thrown which can be recovered from and should not halt the current operation.</item>
            	</list>
            Most frequently, this class is used when a parsing exception occurs via the Parse method or during automatic
            data collection.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.ExceptionEventArgs._exception">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance containing the specified exception object.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:DotSpatial.Positioning.ExceptionEventArgs.Exception">
            <summary>
            Indicates information about the error and its location within a module.
            </summary>
            <value>An <strong>ApplicationException</strong> object or derivitive describing the error.</value>
        </member>
        <member name="T:DotSpatial.Positioning.ProgressEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ProgressEventArgs._current">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ProgressEventArgs._total">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ProgressEventArgs.Empty">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.ProgressEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.ProgressEventArgs"/> class.
            </summary>
            <param name="total">The total.</param>
        </member>
        <member name="M:DotSpatial.Positioning.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.ProgressEventArgs"/> class.
            </summary>
            <param name="current">The current.</param>
            <param name="total">The total.</param>
        </member>
        <member name="P:DotSpatial.Positioning.ProgressEventArgs.Total">
            <summary>
            Gets the total.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.ProgressEventArgs.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.GeographicSize">
            <summary>
            Represents a two-dimensional rectangular area.
            </summary>
            <remarks>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (it's properties can only be set via constructors).</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicSize._width">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicSize._height">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicSize.Empty">
            <summary>
            Represents a size with no value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicSize.Minimum">
            <summary>
            Represents a size with no value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicSize.Maximum">
            <summary>
            Represents the largest possible size on Earth's surface.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.GeographicSize.Invalid">
            <summary>
            Represents an invalid geographic size.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.#ctor(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.#ctor(System.String)">
            <summary>
            Creates a new instance from the specified string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance from the specified string in the specified culture.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <remarks>This method will attempt to split the specified string into two values, then parse each value
            as an Distance object.  The string must contain two numbers separated by a comma (or other character depending
            on the culture).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.ToAspectRatio(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Distance)">
            <summary>
            Toes the aspect ratio.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.ToAspectRatio(System.Single)">
            <summary>
            Toes the aspect ratio.
            </summary>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Add(DotSpatial.Positioning.GeographicSize)">
            <summary>
            Adds the specified size to the current instance.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Subtract(DotSpatial.Positioning.GeographicSize)">
            <summary>
            Subtracts the specified size from the current instance.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Multiply(DotSpatial.Positioning.GeographicSize)">
            <summary>
            Multiplies the width and height by the specified size.
            </summary>
            <param name="size">A <strong>GeographicSize</strong> specifying how to much to multiply the width and height.</param>
            <returns>A <strong>GeographicSize</strong> representing the product of the current instance with the specified size.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Divide(DotSpatial.Positioning.GeographicSize)">
            <summary>
            Divides the width and height by the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.GetHashCode">
            <summary>
            Returns a unique code based on the object's value.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Parse(System.String)">
            <summary>
            Returns a GeographicSize whose value matches the specified string.
            </summary>
            <param name="value">A <strong>String</strong> describing a width, followed by a height.</param>
            <returns>A <strong>GeographicSize</strong> whose Width and Height properties match the specified string.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a GeographicSize whose value matches the specified string.
            </summary>
            <param name="value">A <strong>String</strong> describing a width, followed by a height.</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing how to parse the specified string.</param>
            <returns>A <strong>GeographicSize</strong> whose Width and Height properties match the specified string.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.op_Explicit(System.String)~DotSpatial.Positioning.GeographicSize">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.GeographicSize"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.op_Explicit(DotSpatial.Positioning.GeographicSize)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.GeographicSize"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Equals(DotSpatial.Positioning.GeographicSize)">
            <summary>
            Compares the value of the current instance to the specified GeographicSize.
            </summary>
            <param name="value">A <strong>GeographicSize</strong> object to compare against.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values of both objects are precisely the same.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.Equals(DotSpatial.Positioning.GeographicSize,System.Int32)">
            <summary>
            Compares the value of the current instance to the specified GeographicSize, to the specified number of decimals.
            </summary>
            <param name="value">A <strong>GeographicSize</strong> object to compare against.</param>
            <param name="decimals">An <strong>Integer</strong> describing how many decimals the values are rounded to before comparison.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values of both objects are the same out to the number of decimals specified.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.GeographicSize.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicSize.AspectRatio">
            <summary>
            Returns the ratio of the size's width to its height.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicSize.Width">
            <summary>
            Returns the left-to-right size.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicSize.Height">
            <summary>
            Returns the top-to-bottom size.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicSize.IsEmpty">
            <summary>
            Indicates if the size has zero values.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.GeographicSize.IsInvalid">
            <summary>
            Returns whether the current instance has invalid values.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.InterpolationMethod">
            <summary>
            Represents a collection of interpolated values using realistic acceleration and deceleration.
            </summary>
            <remarks>This enumeration is used by several DotSpatial.Positioning controls to smoothly transition from
            one value to another.  For example, the GPS SatelliteViewer uses acceleration to smoothly
            transition from one bearing to another, giving the appearance of a realistic compass.  This
            enumeration, when combined with the <see cref="T:DotSpatial.Positioning.Interpolator"></see> class lets you add smooth
            transitions to your own controls as well.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.Linear">
            <summary>
            The transition occurs at a steady rate.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.Snap">
            <summary>
            The transition is immediate; no interpolation takes place.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.QuadraticEaseIn">
            <summary>
            The transition starts at zero and accelerates to the end using a quadratic formula.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.QuadraticEaseOut">
            <summary>
            The transition starts at high speed and decelerates to zero.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.QuadraticEaseInAndOut">
            <summary>
            The transition accelerates to the halfway point, then decelerates to zero.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.CubicEaseIn">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.CubicEaseOut">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.CubicEaseInOut">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.QuarticEaseIn">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.ExponentialEaseIn">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.InterpolationMethod.ExponentialEaseOut">
             <summary>
            
             </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Interpolator">
            <summary>
            Calculates intermediate values between two bounding values.
            </summary>
            <remarks>This powerful class provides the ability to interpolate values based on varying
            interpolation techniques. This class is used primarily to simulate realistic motion by
            accelerating and decelerating. This class is also used to calculate intermediate values
            for features such as image georeferencing and estimating precision errors.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator._count">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator._minimum">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator._maximum">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator._interpolationMethod">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator._values">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator._syncRoot">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.#ctor(System.Int32,DotSpatial.Positioning.InterpolationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Interpolator"/> class.
            </summary>
            <param name="count">The count.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Interpolator"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.#ctor(System.Double,System.Double,System.Int32,DotSpatial.Positioning.InterpolationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Interpolator"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="count">The count.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.Swap">
            <summary>
            Reverses the interpolated sequence.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.Recalculate">
            <summary>
            Recalculates this instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator.CalculateValue(System.Double)">
            <summary>
            Calculates the value.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator.Minimum">
            <summary>
            Controls the smallest number in the sequence.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator.Maximum">
            <summary>
            Controls the largest number in the sequence.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator.InterpolationMethod">
            <summary>
            Controls the acceleration and/or deceleration technique used.
            </summary>
            <value>The interpolation method.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator.Count">
            <summary>
            Controls the number of interpolated values.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator.Item(System.Int32)">
            <summary>
            Returns a number from the interpolated sequence.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Interpolator2D">
            <summary>
            Represents a collection of interpolated coordinates using realistic acceleration and deceleration.
            </summary>
            <remarks><para>This class is used by several controls in the DotSpatial.Positioning namespace to give
            them a more realistic behavior. This class will interpolate coordinates between a
            given start and end point according to an interpolation technique, and return them
            as an array. Then, controls and other elements can be moved smoothly by applying
            the calculated values.</para>
              <para>Instances of this class are likely to be thread safe because the class uses
            thread synchronization when recalculating interpolated values.</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._minimum">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._maximum">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._count">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._interpolationMethod">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._values">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._xValues">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Interpolator2D._yValues">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator2D.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator2D.#ctor(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position,System.Int32)">
            <summary>
            Creates a new instance using the specified start and end points.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="count">The count.</param>
            <remarks>This constructor provides a way to define the bounds of the interpolator,
            as well as its number of points.  A higher level of points yield a smoother
            result but take longer to iterate through.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator2D.#ctor(System.Int32,DotSpatial.Positioning.InterpolationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Interpolator2D"/> class.
            </summary>
            <param name="count">The count.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator2D.#ctor(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position,System.Int32,DotSpatial.Positioning.InterpolationMethod)">
            <summary>
            Creates a new instance using the specified end points, count, and interpolation technique.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="count">The count.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator2D.Recalculate">
            <summary>
            Recalculates this instance.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Interpolator2D.Swap">
            <summary>
            Swaps this instance.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator2D.Minimum">
            <summary>
            Returns the starting point of the series.
            </summary>
            <value>The minimum.</value>
            <remarks>Interpolated values are calculated between this point and the end point
            stored in the <see cref="P:DotSpatial.Positioning.Interpolator2D.Maximum"></see> property.  Changing this property causes
            the series to be recalculated.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator2D.Maximum">
            <summary>
            Returns the ending point of the series.
            </summary>
            <value>The maximum.</value>
            <remarks>Interpolated values are calculated between this point and the start point
            stored in the <see cref="P:DotSpatial.Positioning.Interpolator2D.Minimum"></see> property.  Changing this property causes
            the series to be recalculated.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator2D.Item(System.Int32)">
            <summary>
            Returns a Position object from the interpolated series.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator2D.Count">
            <summary>
            Returns the number of calculated positions in the series.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:DotSpatial.Positioning.Interpolator2D.InterpolationMethod">
            <summary>
            Indicates the interpolation technique used to calculate intermediate points.
            </summary>
            <value>The interpolation method.</value>
            <remarks>This property controls the acceleration and deceleration techniques
            used when calculating intermediate points.  Changing this property causes the
            series to be recalculated.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.Latitude">
             <summary>
             Represents a line of constant distance north or south of the equator.
             </summary>
             <seealso cref="T:DotSpatial.Positioning.Longitude">Longitude Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Position">Position Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Azimuth">Azimuth Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Elevation">Elevation Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Angle">Angle Class</seealso>
            
             <example>
             These examples create new instances of Latitude objects.
               <code lang="VB" description="Create an angle of 90°">
             Dim MyLatitude As New Latitude(90)
               </code>
               <code lang="CS" description="Create an angle of 90°">
             Latitude MyLatitude = new Latitude(90);
               </code>
               <code lang="C++" description="Create an angle of 90°">
             Latitude MyLatitude = new Latitude(90);
               </code>
               <code lang="VB" description="Create an angle of 105°30'21.4">
             Dim MyLatitude1 As New Latitude(105, 30, 21.4)
               </code>
               <code lang="CS" description="Create an angle of 105°30'21.4">
             Latitude MyLatitude = new Latitude(105, 30, 21.4);
               </code>
               <code lang="C++" description="Create an angle of 105°30'21.4">
             Latitude MyLatitude = new Latitude(105, 30, 21.4);
               </code>
               </example>
             <remarks><para>Latitudes measure a distance North or South away from the equator. Latitudes
             can range from -90° (at the South pole) to 90° (the North pole), with 0°
             representing the equator. Latitudes are commonly paired with Longitudes to mark a
             specific location on Earth's surface.</para>
               <para>Latitudes are expressed in either of two major formats. The first format uses
             only positive numbers and the letter "N" or "S" to indicate the hemisphere (i.e.
             "45°N" or "60°S"). The second format allows negative numbers an omits the single
             character (i.e. 45 or -60).</para>
               <para>Instances of this class are guaranteed to be thread-safe because the class is
             immutable (its properties can only be changed via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.MAXIMUM_PRECISION_DIGITS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude._decimalDegrees">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.Equator">
            <summary>
            Represents a latitude of 0°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.Empty">
            <summary>
            Represents a latitude of 0°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.TropicOfCapricorn">
            <summary>
            Represents a latitude of 23.5°S.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.TropicOfCancer">
            <summary>
            Represents a latitude of 23.5°N.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.NorthPole">
            <summary>
            Represents a latitude of 90°N.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.SouthPole">
            <summary>
            Represents a latitude of 90°S.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.Minimum">
            <summary>
            Represents the minimum possible latitude -90°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.Maximum">
            <summary>
            Represents the maximum possible latitude of 90°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Latitude.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Double)">
             <summary>
             Creates a new instance with the specified decimal degrees.
             </summary>
             <param name="decimalDegrees">The decimal degrees.</param>
             <example>
             This example demonstrates how to create an angle with a measurement of 90°.
               <code lang="VB">
             Dim MyLatitude As New Latitude(90)
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude(90);
               </code>
               </example>
            
             <returns>An <strong>Latitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Double,DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Creates a new instance with the specified decimal degrees and hemisphere.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <param name="hemisphere">The hemisphere.</param>
            <example>
            This example creates a new latitude of 39°30' north.
              <code lang="VB">
            Dim MyLatitude As New Latitude(39.5, LatitudeHemisphere.North)
              </code>
              <code lang="C#">
            Latitude MyLatitude = new Latitude(39.5, LatitudeHemisphere.North);
              </code>
            This example creates a new latitude of 39°30 south.
              <code lang="VB">
            Dim MyLatitude As New Latitude(39.5, LatitudeHemisphere.South)
              </code>
              <code lang="C#">
            Latitude MyLatitude = new Latitude(39.5, LatitudeHemisphere.South);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>An <strong>Latitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Int32,System.Int32,System.Double)">
             <summary>
             Creates a new instance with the specified hours, minutes and
             seconds.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <example>
             This example demonstrates how to create an angular measurement of 34°12'29.2 in
             hours, minutes and seconds.
               <code lang="VB">
             Dim MyLatitude As New Latitude(34, 12, 29.2)
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude(34, 12, 29.2);
               </code>
               </example>
            
             <returns>An <strong>Latitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Int32,System.Int32,System.Double,DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Creates a new longitude with the specified hours, minutes, seconds, and hemisphere.
            </summary>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="hemisphere">The hemisphere.</param>
            <example>
            This example creates a new latitude of 39°12'10" north.
              <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12, 10, LatitudeHemisphere.North)
              </code>
              <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12, 10, LatitudeHemisphere.North);
              </code>
            This example creates a new latitude of 39°12'10" south.
              <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12, 10, LatitudeHemisphere.South)
              </code>
              <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12, 10, LatitudeHemisphere.South);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance with the specified hours and decimal minutes.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <example>
            This example demonstrates how an angle can be created when only the hours and
            minutes (in decimal form) are known. This creates a value of 12°42.345'.
              <code lang="VB">
            Dim MyLatitude As New Latitude(12, 42.345)
              </code>
              <code lang="VB">
            Latitude MyLatitude = new Latitude(12, 42.345);
              </code>
              </example>
            <remarks>An <strong>Latitude</strong> containing the specified value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Int32,System.Double,DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Creates a new instance with the specified hours, decimal minutes, and hemisphere.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <param name="hemisphere">The hemisphere.</param>
            <example>
            This example creates a new latitude of 39°12.34' north.
              <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34, LatitudeHemisphere.North)
              </code>
              <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12.34, LatitudeHemisphere.North);
              </code>
            This example creates a new latitude of 39°12.34 south.
              <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34, LatitudeHemisphere.South)
              </code>
              <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12.34, LatitudeHemisphere.South);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.String)">
             <summary>
             Creates a new instance by parsing the specified string value.
             </summary>
             <param name="value">The value.</param>
             <example>
             This example creates a new instance by parsing a string. (notice The double-quote is
             doubled up to represent a single double-quote in the string.)
               <code lang="VB">
             Dim MyLatitude As New Latitude("23°45'67.8""N")
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude("23°45'67.8\"N");
               </code>
               </example>
            
             <returns>An <strong>Latitude</strong> containing the specified value.</returns>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.String,System.Globalization.CultureInfo)">
             <summary>
             Creates a new instance by parsing the specified string value.
             </summary>
             <param name="value">The value.</param>
             <param name="culture">The culture.</param>
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <seealso cref="M:DotSpatial.Positioning.Latitude.Parse(System.String)">Parse</seealso>
            
             <example>
             This example creates a new instance by parsing a string. (notice: The double-quote is
             doubled up to represent a single double-quote in the string.)
               <code lang="VB">
             Dim MyLatitude As New Latitude("23°45'67.8""N")
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude("23°45'67.8\"N");
               </code>
               </example>
            
             <returns>An <strong>Latitude</strong> containing the specified value.</returns>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.LesserOf(DotSpatial.Positioning.Latitude)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value">A <strong>Latitude</strong> object to compare to the current instance.</param>
            <returns>The <strong>Latitude</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.GreaterOf(DotSpatial.Positioning.Latitude)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value">A <strong>Latitude</strong> object to compare to the current instance.</param>
            <returns>A <strong>Latitude</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Mirror">
            <summary>
            Returns an angle opposite of the current instance.
            </summary>
            <returns>An <strong>Latitude</strong> representing the mirrored value.</returns>
            <example>
            This example creates a new <strong>Latitude</strong> of 45° then calculates its mirror
            of 225°. (45 + 180)
              <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(45)
            Dim Latitude2 As Latitude = Latitude1.Mirror()
            Debug.WriteLine(Latitude2.ToString())
            ' Output: 225
              </code>
              <code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(45);
            Latitude Latitude2 = Latitude1.Mirror();
            Console.WriteLine(Latitude2.ToString());
            // Output: 225
              </code>
              </example>
            <remarks>This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToRadians">
             <summary>
             Converts the current instance into radians.
             </summary>
             <returns>A <see cref="T:DotSpatial.Positioning.Radian">Radian</see> object.</returns>
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <overloads>Converts an angular measurement into radians before further processing.</overloads>
            
             <example>
             This example converts a measurement of 90° into radians.
               <code lang="VB">
             Dim MyLatitude As New Latitude(90)
             Dim MyRadians As Radian = MyLatitude.ToRadians()
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude(90);
             Radian MyRadians = MyLatitude.ToRadians();
               </code>
               </example>
             <remarks>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Normalize">
            <summary>
            Causes the value to be adjusted to between -90 and +90.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsNorthOf(DotSpatial.Positioning.Latitude)">
            <summary>
            Indicates if the current instance is North of the specified latitude.
            </summary>
            <param name="latitude">A <strong>Latitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more North than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsSouthOf(DotSpatial.Positioning.Latitude)">
            <summary>
            Indicates if the current instance is South of the specified latitude.
            </summary>
            <param name="latitude">A <strong>Latitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more South than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToHemisphere(DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Converts the current instance to the northern or southern hemisphere.
            </summary>
            <param name="hemisphere">The hemisphere.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToString(System.String)">
            <summary>
            Outputs the angle as a string using the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <example>
            This example uses the <strong>ToString</strong> method to output an angle in a
            custom format. The " <strong>h°</strong> " code represents hours along with a
            degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
            the minutes out to two decimals. Mmm.
              <code lang="VB">
            Dim MyLatitude As New Latitude(45, 16.772)
            Debug.WriteLine(MyLatitude.ToString("h°m.mm"))
            ' Output: 45°16.78
              </code>
              <code lang="CS">
            Dim MyLatitude As New Latitude(45, 16.772);
            Debug.WriteLine(MyLatitude.ToString("h°m.mm"));
            // Output: 45°16.78
              </code>
              </example>
            <remarks>This method returns the current instance output in a specific format. If no
            value for the format is specified, a default format of "d.dddd°" is used. Any
            string output by this method can be converted back into an Latitude object using the
            <strong>Parse</strong> method or <strong>Latitude(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Ceiling">
            <summary>
            Returns the smallest integer greater than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Floor">
            <summary>
            Returns the largest integer which is smaller than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.RoundSeconds">
            <summary>
            Returns a new instance whose Seconds property is evenly divisible by 15.
            </summary>
            <returns>An <strong>Latitude</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <param name="interval">A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.</param>
            <returns>An <strong>Latitude</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Equals(System.Object)">
            <summary>
            Compares the current value to another Latitude object's value.
            </summary>
            <param name="obj">An <strong>Latitude</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.</returns>
            <remarks>This</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.GetHashCode">
            <summary>
            Returns a unique code for this instance.
            </summary>
            <returns>An <strong>Integer</strong> representing a unique code for the current
            instance.</returns>
            <remarks>Since the <strong>Latitude</strong> class is immutable, this property may be used
            safely with hash tables.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToString">
            <summary>
            Outputs the angle as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> created using the default format.</returns>
            <example>
            This example outputs a value of 90 degrees in the default format of ###.#°.
              <code lang="VB">
            Dim MyLatitude As New Latitude(90)
            Debug.WriteLine(MyLatitude.ToString)
            ' Output: "90°"
              </code>
              <code lang="CS">
            Latitude MyLatitude = new Latitude(90);
            Debug.WriteLine(MyLatitude.ToString());
            // Output: "90°"
              </code>
              </example>
            <remarks>This method formats the current instance using the default format of
            "d.dddd°." Any string output by this method can be converted back into an Latitude
            object using the <strong>Parse</strong> method or <strong>Latitude(string)</strong>
            constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Normalize(System.Double)">
            <summary>
            Normalizes the specified decimal degrees.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <returns></returns>
            <overloads>Converts a measurement to its equivalent value between -90 and
            90 degrees.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Random">
            <summary>
            Returns a random latitude.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Random(System.Random)">
            <summary>
            Returns a random latitude based on the specified seed.
            </summary>
            <param name="generator">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Random(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Returns a random latitude using the specified northern and southern boundaries.
            </summary>
            <param name="northernmost">The northernmost.</param>
            <param name="southernmost">The southernmost.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Random(System.Random,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Returns a random latitude between the specified minimum and maximum.
            </summary>
            <param name="generator">a <strong>Random</strong> object used to generate random values.</param>
            <param name="northernmost">A <strong>Latitude</strong> specifying the northern-most allowed latitude.</param>
            <param name="southernmost">A <strong>Latitude</strong> specifying the southern-most allowed latitude.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
             <summary>
             Converts arbitrary hour, minute and seconds into decimal degrees.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <returns>A <strong>Double</strong> containing the decimal degree version of the specified
             values.</returns>
             <seealso cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <example>
             This example converts a value of 10°30'0" into decimal degrees (10.5).
               <code lang="VB" title="ToDecimalDegrees Example (VB)">
             Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
               </code>
               <code lang="CS" title="ToDecimalDegrees Example (C#)">
             double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
               </code>
               </example>
             <remarks>This function is used to convert three-part measurements into a single value. The
             result of this method is typically assigned to the
             <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
             DecimalDegrees</see> property. Values are rounded to thirteen decimal
             places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToDecimalDegrees(System.Int32)">
            <summary>
            Converts an hour value into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to a double value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToDecimalDegrees(System.Int32,System.Double,DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <param name="hemisphere">The hemisphere.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to decimal degrees, then rounded to thirteen digits, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToDecimalDegrees(System.Double,DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Converts arbitrary decrees into well-formed decimal degrees.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <param name="hemisphere">The hemisphere.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be rounded to thirteen digits, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double,DotSpatial.Positioning.LatitudeHemisphere)">
            <summary>
            Converts arbitrary hour, minute and seconds into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="hemisphere">The hemisphere.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.LesserOf(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value1">The first <strong>Latitude</strong> object.</param>
            <param name="value2">The second <strong>Latitude</strong> object.</param>
            <returns>The <strong>Latitude</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.GreaterOf(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value1">The first <strong>Latitude</strong> object.</param>
            <param name="value2">The second <strong>Latitude</strong> object.</param>
            <returns>A <strong>Latitude</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToRadians(DotSpatial.Positioning.Latitude)">
            <summary>
            Converts an angular measurement into radians.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:DotSpatial.Positioning.Radian"><strong>Radian</strong></see> object.</returns>
            <example>
            This example shows a quick way to convert an angle of 90° into radians.
              <code lang="VB">
            Dim MyRadian As Radian = Latitude.ToRadians(90)
              </code>
              <code lang="CS">
            Radian MyRadian = Latitude.ToRadians(90);
              </code>
              </example>
            <remarks>This function is typically used to convert an angular measurement into
            radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.FromRadians(DotSpatial.Positioning.Radian)">
             <summary>
             Converts a value in radians into an angular measurement.
             </summary>
             <param name="radians">The radians.</param>
             <returns></returns>
             <seealso cref="M:DotSpatial.Positioning.Latitude.ToRadians">ToRadians</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <example>
             This example uses the <strong>FromRadians</strong> method to convert a value of one
             radian into an <strong>Latitude</strong> of 57°.
               <code lang="VB">
             ' Create a new angle equal to one radian
             Dim MyRadians As New Radian(1)
             Dim MyLatitude As Latitude = Latitude.FromRadians(MyRadians)
             Debug.WriteLine(MyLatitude.ToString())
             ' Output: 57°
               </code>
               <code lang="CS">
             // Create a new angle equal to one radian
             Radian MyRadians = new Radian(1);
             Latitude MyLatitude = Latitude.FromRadians(MyRadians);
             Console.WriteLine(MyLatitude.ToString());
             // Output: 57°
               </code>
               </example>
             <remarks>This function is typically used in conjunction with the
             <see cref="M:DotSpatial.Positioning.Latitude.ToRadians">ToRadians</see>
             method after a trigonometric function has completed. The converted value is stored in
             the <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees</see> property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.FromRadians(System.Double)">
            <summary>
            Froms the radians.
            </summary>
            <param name="radians">The radians.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Parse(System.String)">
             <summary>
             Converts the specified string into an Latitude object.
             </summary>
             <param name="value">The value.</param>
             <returns>A new <strong>Latitude</strong> object populated with the specified
             values.</returns>
             <example>
             This example creates a new angular measurement using the <strong>Parse</strong>
             method.
               <code lang="VB">
             Dim NewLatitude As Latitude = Latitude.Parse("123.45°")
               </code>
               <code lang="CS">
             Latitude NewLatitude = Latitude.Parse("123.45°");
               </code>
               </example>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This method parses the specified string into an <strong>Latitude</strong> object
             using the current culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Latitude</strong> object using the
            specified culture.
            </summary>
            <param name="value">A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.</param>
            <returns>A new <strong>Latitude</strong> object equivalent to the specified string.</returns>
            <remarks>This powerful method is typically used to process data from a data store or a
            value input by the user in any culture. This function can accept any format which
            can be output by the ToString method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Addition(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Addition(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Subtraction(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Subtraction(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Multiply(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Multiply(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Division(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Division(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Equality(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Equality(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Inequality(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Inequality(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_GreaterThan(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_GreaterThan(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_GreaterThanOrEqual(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_GreaterThanOrEqual(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_LessThan(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_LessThan(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_LessThanOrEqual(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_LessThanOrEqual(DotSpatial.Positioning.Latitude,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns>An <strong>Latitude</strong> object.</returns>
            <example>
            This example uses the <strong>Increment</strong> method to increase an Latitude's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Increment</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Latitude1 As New Latitude(89)
            Latitude1 = Latitude1.Increment()
            ' Incorrect use of Increment
            Dim Latitude1 = New Latitude(89)
            Latitude1.Increment()
            ' notice: Latitude1 will still be 89°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Latitude Latitude1 = new Latitude(89);
            Latitude1 = Latitude1.Increment();
            // Incorrect use of Increment
            Latitude Latitude1 = new Latitude(89);
            Latitude1.Increment();
            // notice: Latitude1 will still be 89°!
              </code>
              </example>
            <remarks><para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Latitude</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Add(System.Double)">
            <summary>
            Increases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
            <returns>A new <strong>Latitude</strong> containing the summed values.</returns>
            <example>
            This example adds 45° to the current instance of 45°, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(45)
            Latitude1 = Latitude1.Add(45)
              </code>
              <code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(45);
            Latitude1 = Latitude1.Add(45);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Add(DotSpatial.Positioning.Latitude)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns>An <strong>Latitude</strong> object.</returns>
            <example>
            This example uses the <strong>Decrement</strong> method to decrease an Latitude's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Decrement</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Latitude1 As New Latitude(91)
            Latitude1 = Latitude1.Decrement()
            ' Incorrect use of Decrement
            Dim Latitude1 = New Latitude(91)
            Latitude1.Increment()
            ' notice Latitude1 will still be 91°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Latitude Latitude1 = new Latitude(91);
            Latitude1 = Latitude1.Decrement();
            // Incorrect use of Decrement
            Latitude Latitude1 = new Latitude(91);
            Latitude1.Decrement();
            // notice Latitude1 will still be 91°!
              </code>
              </example>
            <remarks><para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Latitude</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Subtract(System.Double)">
            <summary>
            Decreases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
            <returns>A new <strong>Latitude</strong> containing the new value.</returns>
            <example>
            This example subtracts 30° from the current instance of 90°, returning 60°.
              <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(90)
            Latitude1 = Latitude1.Subtract(30)
              </code>
              <code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(90);
            Latitude1 = Latitude1.Subtract(30);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Subtract(DotSpatial.Positioning.Latitude)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Multiply(System.Double)">
            <summary>
            Multiplies the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
            <returns>A new <strong>Latitude</strong> containing the product of the two numbers.</returns>
            <example>
            This example multiplies 30° with three, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(30)
            Latitude1 = Latitude1.Multiply(3)
              </code>
              <code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(30);
            Latitude1 = Latitude1.Multiply(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Multiply(DotSpatial.Positioning.Latitude)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Divide(System.Double)">
            <summary>
            Divides the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
            <returns>An <strong>Latitude</strong> containing the new value.</returns>
            <example>
            This example divides 90° by three, returning 30°.
              <code lang="VB" title="[New Example]">
            Dim Latitude1 As New Latitude(90)
            Latitude1 = Latitude1.Divide(3)
              </code>
              <code lang="CS" title="[New Example]">
            Latitude Latitude1 = new Latitude(90);
            Latitude1 = Latitude1.Divide(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Divide(DotSpatial.Positioning.Latitude)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsLessThan(DotSpatial.Positioning.Latitude)">
            <summary>
            Indicates if the current instance is smaller than the specified value.
            </summary>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsLessThan(System.Double)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsLessThanOrEqualTo(DotSpatial.Positioning.Latitude)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.</returns>
            <remarks>This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsLessThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsGreaterThan(DotSpatial.Positioning.Latitude)">
            <summary>
            Indicates if the current instance is larger than the specified value.
            </summary>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsGreaterThan(System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Latitude)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Latitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Radian)~DotSpatial.Positioning.Latitude">
            <summary>
            Converts a measurement in Radians into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(System.Double)~DotSpatial.Positioning.Latitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(System.Single)~DotSpatial.Positioning.Latitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Latitude)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Latitude)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(System.Int32)~DotSpatial.Positioning.Latitude">
            <summary>
            Converts a measurement in degrees as an Integer into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Angle)~DotSpatial.Positioning.Latitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Angle"/> to <see cref="T:DotSpatial.Positioning.Latitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Azimuth)~DotSpatial.Positioning.Latitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Azimuth"/> to <see cref="T:DotSpatial.Positioning.Latitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Elevation)~DotSpatial.Positioning.Latitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Elevation"/> to <see cref="T:DotSpatial.Positioning.Latitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Longitude)~DotSpatial.Positioning.Latitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Longitude"/> to <see cref="T:DotSpatial.Positioning.Latitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(System.String)~DotSpatial.Positioning.Latitude">
            <summary>
            Converts a measurement in the form of a formatted String into an Latitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.op_Explicit(DotSpatial.Positioning.Latitude)~System.String">
            <summary>
            Converts an Latitude into a String.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>An <strong>Latitude</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Equals(DotSpatial.Positioning.Latitude,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <param name="value">The value.</param>
            <param name="decimals">The decimals.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property of the current instance matches the
            specified instance's <strong>DecimalDegrees</strong> property.</returns>
            <example>
            These examples compare two fractional values using specific numbers of digits for
            comparison.
              <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Latitude1 As New Latitude(90.15);
            Dim Latitude2 As New Latitude(90.12);
            If Latitude1.Equals(Latitude2, 2) Then
            Debug.WriteLine("The values are the same to two digits of precision.");
            ' Equals will return True
            Dim Latitude1 As New Latitude(90.15);
            Dim Latitude2 As New Latitude(90.12);
            If Latitude1.Equals(Latitude2, 1) Then
            Debug.WriteLine("The values are the same to one digit of precision.");
              </code>
              <code lang="CS" title="[New Example]">
            // Equals will return False
            Latitude Latitude1 = new Latitude(90.15);
            Latitude Latitude2 = new Latitude(90.12);
            if (Latitude1.Equals(Latitude2, 2))
            Console.WriteLine("The values are the same to two digits of precision.");
            // Equals will return True
            Latitude Latitude1 = new Latitude(90.15);
            Latitude Latitude2 = new Latitude(90.12);
            if (Latitude1.Equals(Latitude2, 1))
            Console.WriteLine("The values are the same to one digits of precision.");
              </code>
              </example>
            <remarks><para>This is typically used in cases where precision is only significant for a few
            digits and exact comparison is not necessary.</para>
              <para><em>notice This method compares objects by value, not by
            reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.Equals(DotSpatial.Positioning.Latitude)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.CompareTo(DotSpatial.Positioning.Latitude)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the angle as a string using the specified format.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <example>
            This example uses the <strong>ToString</strong> method to output an angle in a
            custom format. The " <strong>h°</strong> " code represents hours along with a
            degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
            the minutes out to two decimals. Mmm.
              <code lang="VB">
            Dim MyLatitude As New Latitude(45, 16.772)
            Debug.WriteLine(MyLatitude.ToString("h°m.mm", CultureInfo.CurrentCulture))
            ' Output: 45°16.78
              </code>
              <code lang="CS">
            Dim MyLatitude As New Latitude(45, 16.772);
            Debug.WriteLine(MyLatitude.ToString("h°m.mm", CultureInfo.CurrentCulture));
            // Output: 45°16.78
              </code>
              </example>
            <remarks>This method returns the current instance output in a specific format. If no
            value for the format is specified, a default format of "d.dddd" is used. Any string
            output by this method can be converted back into an Latitude object using the
            <strong>Parse</strong> method or <strong>Latitude(string)</strong> constructor.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Latitude.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
             <summary>
             Returns the value of the angle as decimal degrees.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Latitude.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Latitude.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Latitude.Seconds">Seconds Property</seealso>
            
             <example>
             This example demonstrates how the
               <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
             calculated automatically when creating an angle using hours, minutes and seconds.
               <code lang="VB">
             ' Create an angle of 20°30'
             Dim MyLatitude As New Latitude(20, 30)
             ' Setting the DecimalMinutes recalculated other properties
             Debug.WriteLine(MyLatitude.DecimalDegrees)
             ' Output: "20.5"  the same as 20°30'
               </code>
               <code lang="CS">
             // Create an angle of 20°30'
             Latitude MyLatitude = New Latitude(20, 30);
             // Setting the DecimalMinutes recalculated other properties
             Console.WriteLine(MyLatitude.DecimalDegrees)
             // Output: "20.5"  the same as 20°30'
               </code>
               </example>
             <remarks>This property returns the value of the angle as a single number.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.DecimalMinutes">
             <summary>
             Returns the minutes and seconds as a single numeric value.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Latitude.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <example>
             This example demonstrates how the <strong>DecimalMinutes</strong> property is
             automatically calculated when creating a new angle.
               <code lang="VB">
             ' Create an angle of 20°10'30"
             Dim MyLatitude As New Latitude(20, 10, 30)
             ' The DecimalMinutes property is automatically calculated
             Debug.WriteLine(MyLatitude.DecimalMinutes)
             ' Output: "10.5"
               </code>
               <code lang="CS">
             // Create an angle of 20°10'30"
             Latitude MyLatitude = new Latitude(20, 10, 30);
             // The DecimalMinutes property is automatically calculated
             Console.WriteLine(MyLatitude.DecimalMinutes)
             // Output: "10.5"
               </code>
               </example>
             <remarks>This property is used when minutes and seconds are represented as a single
             decimal value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.Hours">
             <summary>
             Returns the integer hours (degrees) portion of an angular
             measurement.
             </summary>
             <value>An <strong>Integer</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Latitude.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Latitude.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 60.5° then outputs the value of the
               <strong>Hours</strong> property, 60.
               <code lang="VB">
             Dim MyLatitude As New Latitude(60.5)
             Debug.WriteLine(MyLatitude.Hours)
             ' Output: 60
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude(60.5);
             Console.WriteLine(MyLatitude.Hours);
             // Output: 60
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Latitude.Minutes">Minutes</see>
             and <see cref="P:DotSpatial.Positioning.Latitude.Seconds">Seconds</see> properties to create a full angular measurement.
             This property is the same as <strong>DecimalDegrees</strong> without any fractional
             value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.Minutes">
             <summary>
             Returns the integer minutes portion of an angular measurement.
             </summary>
             <value>An <strong>Integer</strong>.</value>
             <seealso cref="P:DotSpatial.Positioning.Latitude.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Latitude.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 45.5° then outputs the value of the
               <strong>Minutes</strong> property, 30.
               <code lang="VB">
             Dim MyLatitude As New Latitude(45.5)
             Debug.WriteLine(MyLatitude.Minutes)
             ' Output: 30
               </code>
               <code lang="CS">
             Latitude MyLatitude = new Latitude(45.5);
             Console.WriteLine(MyLatitude.Minutes);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Latitude.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Latitude.Seconds">Seconds</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.Seconds">
             <summary>
             Returns the seconds minutes portion of an angular measurement.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Latitude.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Latitude.Minutes">Minutes Property</seealso>
            
             <example>
             This example creates an angle of 45°10.5' then outputs the value of the
               <strong>Seconds</strong> property, 30.
               <code lang="VB">
             Dim MyLatitude As New Latitude(45, 10.5)
             Debug.WriteLine(MyLatitude.Seconds)
             ' Output: 30
               </code>
               <code lang="CS">
             Dim MyLatitude As New Latitude(45, 10.5);
             Console.WriteLine(MyLatitude.Seconds);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Latitude.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Latitude.Minutes">Minutes</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.Hemisphere">
            <summary>
            Indicates if the latitude is north or south of the equator.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.IsEmpty">
            <summary>
            Indicates if the current instance has a non-zero value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.</value>
            <seealso cref="F:DotSpatial.Positioning.Latitude.Empty">Empty Field</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.IsInfinity">
            <summary>
            Indicates if the current instance represents an infinite value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Latitude.IsNormalized">
            <summary>
            Indicates whether the value has been normalized and is within the
            allowed bounds of -90° and 90°.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.LatitudeHemisphere">
             <summary>
             Indicates the position of a latitude measurement relative to the equator.
             </summary>
             <seealso cref="P:DotSpatial.Positioning.Longitude.Hemisphere">Hemisphere Property (Longitude Class)</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.LongitudeHemisphere">LongitudeHemisphere Enumeration</seealso>
             <remarks><para>This enumeration is used by the <see cref="P:DotSpatial.Positioning.Latitude.Hemisphere">Hemisphere</see>
             property of the <see cref="T:DotSpatial.Positioning.Latitude">Latitude</see> class. If a latitude is south of the
             equator, it's value is displayed as a negative number, or with a single letter (but not
             both). For example, 39 degrees south of the equator can be expressed in either of these
             ways:</para>
               <list type="bullet">
               <item>39°S</item>
               <item>-39°</item>
               </list></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.LatitudeHemisphere.None">
            <summary>Missing latitude information.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.LatitudeHemisphere.North">
            <summary>The latitude is north of the equator.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.LatitudeHemisphere.South">
            <summary>The latitude is south of the equator.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.Longitude">
             <summary>
             Represents a line of constant distance east or west from the Prime Meridian.
             </summary>
             <seealso cref="T:DotSpatial.Positioning.Azimuth">Azimuth Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Elevation">Elevation Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Latitude">Latitude Class</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Longitude">Longitude Class</seealso>
            
             <example>
             These examples create new instances of Longitude objects.
               <code lang="VB" description="Create an angle of 90°">
             Dim MyLongitude As New Longitude(90)
               </code>
               <code lang="CS" description="Create an angle of 90°">
             Longitude MyLongitude = new Longitude(90);
               </code>
               <code lang="C++" description="Create an angle of 90°">
             Longitude MyLongitude = new Longitude(90);
               </code>
               <code lang="VB" description="Create an angle of 105°30'21.4">
             Dim MyLongitude1 As New Longitude(105, 30, 21.4)
               </code>
               <code lang="CS" description="Create an angle of 105°30'21.4">
             Longitude MyLongitude = new Longitude(105, 30, 21.4);
               </code>
               <code lang="C++" description="Create an angle of 105°30'21.4">
             Longitude MyLongitude = new Longitude(105, 30, 21.4);
               </code>
               </example>
             <remarks><para>Longitudes measure a distance either East or West from the Prime Meridian, an
             imaginary line which passes from the North Pole, through the
               <see href="http://www.nmm.ac.uk/">Royal Observatory in Greenwich, England, and on
             to the South Pole</see>. Longitudes can range from -180 to 180°, with the Prime
             Meridian at 0°. Latitudes are commonly paired with Longitudes to mark a specific
             location on Earth's surface.</para>
               <para>Latitudes are expressed in either of two major formats. The first format uses
             only positive numbers and the letter "E" or "W" to indicate the hemisphere (i.e.
             "94°E" or "32°W"). The second format allows negative numbers an omits the single
             character (i.e. 94 or -32).</para>
               <para>Instances of this class are guaranteed to be thread-safe because the class is
             immutable (its properties can only be changed via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.MAXIMUM_PRECISION_DIGITS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude._decimalDegrees">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.PrimeMeridian">
            <summary>
            Represents a longitude of 0°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.InternationalDateline">
            <summary>
            Represents a longitude 180°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.Empty">
            <summary>
            Represents a longitude of 0°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.Minimum">
            <summary>
            Represents the minimum possible longitude of -180°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.Maximum">
            <summary>
            Represents the maximum possible longitude of 180°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Longitude.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Double)">
             <summary>
             Creates a new instance with the specified decimal degrees.
             </summary>
             <param name="decimalDegrees">The decimal degrees.</param>
             <example>
             This example demonstrates how to create an angle with a measurement of 90°.
               <code lang="VB">
             Dim MyLongitude As New Longitude(90)
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude(90);
               </code>
               </example>
            
             <returns>An <strong>Longitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Double,DotSpatial.Positioning.LongitudeHemisphere)">
            <summary>
            Creates a new instance with the specified decimal degrees and hemisphere.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <param name="hemisphere">The hemisphere.</param>
            <example>
            This example creates a new Longitude of 39°30' north.
              <code lang="VB">
            Dim MyLongitude As New Longitude(39.5, LongitudeHemisphere.North)
              </code>
              <code lang="C#">
            Longitude MyLongitude = new Longitude(39.5, LongitudeHemisphere.North);
              </code>
            This example creates a new Longitude of 39°30 south.
              <code lang="VB">
            Dim MyLongitude As New Longitude(39.5, LongitudeHemisphere.South)
              </code>
              <code lang="C#">
            Longitude MyLongitude = new Longitude(39.5, LongitudeHemisphere.South);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>An <strong>Longitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Int32,System.Int32,System.Double)">
             <summary>
             Creates a new instance with the specified hours, minutes and
             seconds.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <example>
             This example demonstrates how to create an angular measurement of 34°12'29.2 in
             hours, minutes and seconds.
               <code lang="VB">
             Dim MyLongitude As New Longitude(34, 12, 29.2)
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude(34, 12, 29.2);
               </code>
               </example>
            
             <returns>An <strong>Longitude</strong> containing the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Int32,System.Int32,System.Double,DotSpatial.Positioning.LongitudeHemisphere)">
            <summary>
            Creates a new instance using the specified decimal degrees and
            hemisphere.
            </summary>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="hemisphere">The hemisphere.</param>
            <remarks><para>This constructor is typically used to create a longitude when decimal degrees
            are always expressed as a positive number. Since the hemisphere property is set
              <em>after</em> the DecimalDegrees property is set, the DecimalDegrees is adjusted
            automatically to be positive for the eastern hemisphere and negative for the
            western hemisphere.</para>
              <para>If the parameters conflict with each other, the <strong>Hemisphere</strong>
            parameter takes precedence. Therefore, a value of "-19°E" will become "19°E"
            (without the negative sign) with no exception being thrown.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance with the specified hours and decimal minutes.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <example>
            This example demonstrates how an angle can be created when only the hours and
            minutes (in decimal form) are known. This creates a value of 12°42.345'.
              <code lang="VB">
            Dim MyLongitude As New Longitude(12, 42.345)
              </code>
              <code lang="VB">
            Longitude MyLongitude = new Longitude(12, 42.345);
              </code>
              </example>
            <remarks>An <strong>Longitude</strong> containing the specified value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Int32,System.Double,DotSpatial.Positioning.LongitudeHemisphere)">
            <summary>
            Creates a new instance with the specified hours, decimal minutes, and hemisphere.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <param name="hemisphere">The hemisphere.</param>
            <example>
            This example creates a new Longitude of 39°12.34' north.
              <code lang="VB">
            Dim MyLongitude As New Longitude(39, 12.34, LongitudeHemisphere.North)
              </code>
              <code lang="C#">
            Longitude MyLongitude = new Longitude(39, 12.34, LongitudeHemisphere.North);
              </code>
            This example creates a new Longitude of 39°12.34 south.
              <code lang="VB">
            Dim MyLongitude As New Longitude(39, 12.34, LongitudeHemisphere.South)
              </code>
              <code lang="C#">
            Longitude MyLongitude = new Longitude(39, 12.34, LongitudeHemisphere.South);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.String)">
             <summary>
             Creates a new instance using the specified string-based measurement.
             </summary>
             <param name="value">The value.</param>
             <seealso cref="M:DotSpatial.Positioning.Longitude.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example creates a new instance by parsing a string. notice: The double-quote is
             doubled up to represent a single double-quote in the string.)
               <code lang="VB">
             Dim MyLongitude As New Longitude("123°45'67.8""")
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude("123°45'67.8\"");
               </code>
               </example>
            
             <returns>An <strong>Longitude</strong> containing the specified value.</returns>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks><para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
               <para>
               <table cellspacing="0" cols="4" cellpadding="2" width="100%">
               <tbody>
               <tr>
               <td>hh</td>
               <td>hh.h</td>
               <td>hh mm</td>
               <td>hh mm.mm</td>
               </tr>
               <tr>
               <td>hh mm ss</td>
               <td>hh mm ss.sss</td>
               <td>hhi</td>
               <td>hh.hi</td>
               </tr>
               <tr>
               <td>hh mmi</td>
               <td>hh mm i</td>
               <td>hh mm.mi</td>
               <td>hh mm.m i</td>
               </tr>
               <tr>
               <td>hh mm ssi</td>
               <td>hh mm ss i</td>
               <td>hh mm ss.si</td>
               <td>hh mm ss.s i</td>
               </tr>
               <tr>
               <td>hhhmmssi</td>
               <td></td>
               <td></td>
               <td></td>
               </tr>
               </tbody>
               </table>
               </para>
               <para>Where <strong>h</strong> represents hours, <strong>m</strong> represents
             minutes, <strong>s</strong> represents seconds, and <strong>i</strong> represents a
             one-letter hemisphere indicator of "E" or "W." Any non-numeric character between
             numbers is considered a delimiter. Thus, a value of <strong>12°34'56.78"</strong>
             or even <strong>12A34B56.78C</strong> is treated the same as <strong>12 34
             56.78</strong>.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.String,System.Globalization.CultureInfo)">
             <summary>
             Creates a new instance using the specified string-based measurement.
             </summary>
             <param name="value">The value.</param>
             <param name="culture">The culture.</param>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks><para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
               <para>
               <table cellspacing="0" cols="4" cellpadding="2" width="100%">
               <tbody>
               <tr>
               <td>hh</td>
               <td>hh.h</td>
               <td>hh mm</td>
               <td>hh mm.mm</td>
               </tr>
               <tr>
               <td>hh mm ss</td>
               <td>hh mm ss.sss</td>
               <td>hhi</td>
               <td>hh.hi</td>
               </tr>
               <tr>
               <td>hh mmi</td>
               <td>hh mm i</td>
               <td>hh mm.mi</td>
               <td>hh mm.m i</td>
               </tr>
               <tr>
               <td>hh mm ssi</td>
               <td>hh mm ss i</td>
               <td>hh mm ss.si</td>
               <td>hh mm ss.s i</td>
               </tr>
               <tr>
               <td>hhhmmssi</td>
               <td></td>
               <td></td>
               <td></td>
               </tr>
               </tbody>
               </table>
               </para>
               <para>Where <strong>h</strong> represents hours, <strong>m</strong> represents
             minutes, <strong>s</strong> represents seconds, and <strong>i</strong> represents a
             one-letter hemisphere indicator of "E" or "W." Any non-numeric character between
             numbers is considered a delimiter. Thus, a value of <strong>12°34'56.78"</strong>
             or even <strong>12A34B56.78C</strong> is treated the same as <strong>12 34
             56.78</strong>.</para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.LesserOf(DotSpatial.Positioning.Longitude)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value">An <strong>Longitude</strong> object to compare to the current instance.</param>
            <returns>The <strong>Longitude</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.GreaterOf(DotSpatial.Positioning.Longitude)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value">An <strong>Longitude</strong> object to compare to the current instance.</param>
            <returns>An <strong>Longitude</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Compare(System.Double)">
            <summary>
            Returns a value indicating the relative order of two objects.
            </summary>
            <param name="value">An <strong>Longitude</strong> object to compare with.</param>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>This method allows collections of <strong>Longitude</strong> objects to be sorted.
            The <see cref="P:DotSpatial.Positioning.Longitude.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Mirror">
            <summary>
            Returns an angle opposite of the current instance.
            </summary>
            <returns>An <strong>Longitude</strong> representing the mirrored value.</returns>
            <example>
            This example creates a new <strong>Longitude</strong> of 45° then calculates its mirror
            of 225°. (45 + 180)
              <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(45)
            Dim Longitude2 As Longitude = Longitude1.Mirror()
            Debug.WriteLine(Longitude2.ToString())
            ' Output: 225
              </code>
              <code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(45);
            Longitude Longitude2 = Longitude1.Mirror();
            Console.WriteLine(Longitude2.ToString());
            // Output: 225
              </code>
              </example>
            <remarks>This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToRadians">
             <summary>
             Converts the current instance into radians.
             </summary>
             <returns>A <see cref="T:DotSpatial.Positioning.Radian">Radian</see> object.</returns>
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <overloads>Converts an angular measurement into radians before further processing.</overloads>
            
             <example>
             This example converts a measurement of 90° into radians.
               <code lang="VB">
             Dim MyLongitude As New Longitude(90)
             Dim MyRadians As Radian = MyLongitude.ToRadians()
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude(90);
             Radian MyRadians = MyLongitude.ToRadians();
               </code>
               </example>
             <remarks>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsEastOf(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates if the current instance is East of the specified longitude.
            </summary>
            <param name="longitude">A <strong>Longitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more East than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsWestOf(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates if the current instance is West of the specified longitude.
            </summary>
            <param name="longitude">A <strong>Longitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more West than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToString(System.String)">
             <summary>
             Outputs the current instance as a string using the specified format.
             </summary>
             <param name="format"><para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
               <para>
               <table cellspacing="0" cols="3" cellpadding="2" width="100%">
               <tbody>
               <tr>
               <td>HH°MM'SS.SS"</td>
               <td>HHH.H°</td>
               <td>HH MM.MM</td>
               <td>HHHMMSS</td>
               </tr>
               <tr>
               <td>HH°MM'SS.SS"I</td>
               <td>HHH.H°I</td>
               <td>HH MM.MMI</td>
               <td>HHHMMSSI</td>
               </tr>
               </tbody>
               </table>
               </para></param>
             <returns>A <strong>String</strong> matching the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Longitude.ToString">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Longitude.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an angle in a
             custom format. The " <strong>h°</strong> " code represents hours along with a
             degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
             the minutes out to two decimals. Mmm.
               <code lang="VB">
             Dim MyLongitude As New Longitude(45, 16.772)
             Debug.WriteLine(MyLongitude.ToString("h°m.mm"))
             ' Output: 45°16.78
               </code>
               <code lang="CS">
             Dim MyLongitude As New Longitude(45, 16.772);
             Debug.WriteLine(MyLongitude.ToString("h°m.mm"));
             // Output: 45°16.78
               </code>
               </example>
             <remarks>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Ceiling">
            <summary>
            Returns the smallest integer greater than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Floor">
            <summary>
            Returns the largest integer which is smaller than the specified value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Round(System.Int32)">
            <summary>
            Returns a new instance whose value is rounded the specified number of decimals.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of decimals to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.RoundSeconds">
            <summary>
            Returns a new instance whose Seconds property is evenly divisible by 15.
            </summary>
            <returns>An <strong>Longitude</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <param name="interval">A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.</param>
            <returns>An <strong>Longitude</strong> containing the rounded value.</returns>
            <remarks>This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>A <strong>Longitude</strong> containing the normalized value.</returns>
            <remarks>This function is used to ensure that an angular measurement is within the
            allowed bounds of 0° and 180°. If a value of 360° or 720° is passed, a value of 0°
            is returned since traveling around the Earth 360° or 720° brings you to the same
            place you started.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Equals(System.Object)">
            <summary>
            Compares the current value to another Longitude object's value.
            </summary>
            <param name="obj">An <strong>Longitude</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.</returns>
            <remarks>This</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.GetHashCode">
            <summary>
            Returns a unique code for this instance.
            </summary>
            <returns>An <strong>Integer</strong> representing a unique code for the current
            instance.</returns>
            <remarks>Since the <strong>Longitude</strong> class is immutable, this property may be used
            safely with hash tables.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToString">
             <summary>
             Outputs the current instance as a string using the specified format.
             </summary>
             <returns>A <strong>String</strong> matching the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Longitude.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example outputs a value of 90 degrees in the default format of ###.#°.
               <code lang="VB">
             Dim MyLongitude As New Longitude(90)
             Debug.WriteLine(MyLongitude.ToString)
             ' Output: "90°"
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude(90);
             Debug.WriteLine(MyLongitude.ToString());
             // Output: "90°"
               </code>
               </example>
             <remarks>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Normalize(System.Double)">
            <summary>
            Normalizes the specified decimal degrees.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <returns></returns>
            <remarks>This function is used to ensure that an angular measurement is within the
            allowed bounds of -180° and 180°. If a value of 360° or 720° is passed, a value of 0°
            is returned since traveling around the Earth 360° or 720° brings you to the same
            place you started.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.LesserOf(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Returns the object with the smallest value.
            </summary>
            <param name="value1">A <strong>Longitude</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Longitude</strong> object to compare to value1.</param>
            <returns>The <strong>Longitude</strong> containing the smallest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.GreaterOf(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Returns the object with the largest value.
            </summary>
            <param name="value1">A <strong>Longitude</strong> object to compare to value2.</param>
            <param name="value2">A <strong>Longitude</strong> object to compare to value1.</param>
            <returns>A <strong>Longitude</strong> containing the largest value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToRadians(DotSpatial.Positioning.Longitude)">
            <summary>
            Converts an angular measurement into radians.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:DotSpatial.Positioning.Radian"><strong>Radian</strong></see> object.</returns>
            <example>
            This example shows a quick way to convert an angle of 90° into radians.
              <code lang="VB">
            Dim MyRadian As Radian = Longitude.ToRadians(90)
              </code>
              <code lang="CS">
            Radian MyRadian = Longitude.ToRadians(90);
              </code>
              </example>
            <remarks>This function is typically used to convert an angular measurement into
            radians before performing a trigonometric function.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.FromRadians(DotSpatial.Positioning.Radian)">
             <summary>
             Converts a value in radians into an angular measurement.
             </summary>
             <param name="radians">The radians.</param>
             <returns></returns>
             <seealso cref="M:DotSpatial.Positioning.Longitude.ToRadians">ToRadians</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Radian">Radian Class</seealso>
            
             <example>
             This example uses the <strong>FromRadians</strong> method to convert a value of one
             radian into an <strong>Longitude</strong> of 57°.
               <code lang="VB">
             ' Create a new angle equal to one radian
             Dim MyRadians As New Radian(1)
             Dim MyLongitude As Longitude = Longitude.FromRadians(MyRadians)
             Debug.WriteLine(MyLongitude.ToString())
             ' Output: 57°
               </code>
               <code lang="CS">
             // Create a new angle equal to one radian
             Radian MyRadians = new Radian(1);
             Longitude MyLongitude = Longitude.FromRadians(MyRadians);
             Console.WriteLine(MyLongitude.ToString());
             // Output: 57°
               </code>
               </example>
             <remarks>This function is typically used in conjunction with the
             <see cref="M:DotSpatial.Positioning.Longitude.ToRadians">ToRadians</see>
             method after a trigonometric function has completed. The converted value is stored in
             the <see cref="P:DotSpatial.Positioning.Longitude.DecimalDegrees">DecimalDegrees</see> property.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.FromRadians(System.Double)">
            <summary>
            Froms the radians.
            </summary>
            <param name="radians">The radians.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Random">
            <summary>
            Returns a random longitude.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Random(System.Random)">
            <summary>
            Returns a random longitude based on the specified seed.
            </summary>
            <param name="generator">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Random(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Returns a random longitude using the specified eastern and western boundaries.
            </summary>
            <param name="easternmost">A <strong>Longitude</strong> specifying the eastern-most allowed longitude.</param>
            <param name="westernmost">A <strong>Longitude</strong> specifying the western-most allowed longitude.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Random(System.Random,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Returns a random longitude between the specified minimum and maximum.
            </summary>
            <param name="generator">A <strong>Random</strong> object used to generate random values.</param>
            <param name="easternmost">A <strong>Longitude</strong> specifying the eastern-most allowed longitude.</param>
            <param name="westernmost">A <strong>Longitude</strong> specifying the western-most allowed longitude.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
             <summary>
             Converts arbitrary hour, minute and seconds into decimal degrees.
             </summary>
             <param name="hours">The hours.</param>
             <param name="minutes">The minutes.</param>
             <param name="seconds">The seconds.</param>
             <returns>A <strong>Double</strong> containing the decimal degree version of the specified
             values.</returns>
             <seealso cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Latitude.Normalize">Normalize Method</seealso>
            
             <example>
             This example converts a value of 10°30'0" into decimal degrees (10.5).
               <code lang="VB" title="ToDecimalDegrees Example (VB)">
             Dim MyValue As Double = Latitude.ToDecimalDegrees(10, 30, 0)
               </code>
               <code lang="CS" title="ToDecimalDegrees Example (C#)">
             double MyValue = Latitude.ToDecimalDegrees(10, 30, 0);
               </code>
               </example>
             <remarks>This function is used to convert three-part measurements into a single value. The
             result of this method is typically assigned to the
             <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
             DecimalDegrees</see> property. Values are rounded to thirteen decimal
             places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToDecimalDegrees(System.Int32,System.Double)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToDecimalDegrees(System.Int32)">
            <summary>
            Converts an hour value into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to a double value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToDecimalDegrees(System.Int32,System.Double,DotSpatial.Positioning.LongitudeHemisphere)">
            <summary>
            Converts arbitrary hour and decimal minutes into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="decimalMinutes">The decimal minutes.</param>
            <param name="hemisphere">The hemisphere.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be converted to decimal degrees, then rounded to thirteen digits, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToDecimalDegrees(System.Double,DotSpatial.Positioning.LongitudeHemisphere)">
            <summary>
            Converts arbitrary decrees into well-formed decimal degrees.
            </summary>
            <param name="decimalDegrees">The decimal degrees.</param>
            <param name="hemisphere">The hemisphere.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>The specified value will be rounded to thirteen digits, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToDecimalDegrees(System.Int32,System.Int32,System.Double,DotSpatial.Positioning.LongitudeHemisphere)">
            <summary>
            Converts arbitrary hour, minute and seconds into decimal degrees.
            </summary>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="hemisphere">The hemisphere.</param>
            <returns>A <strong>Double</strong> containing the decimal degree version of the specified
            values.</returns>
            <remarks>This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:DotSpatial.Positioning.Latitude.DecimalDegrees">
            DecimalDegrees</see> property. Values are rounded to thirteen decimal
            places, the maximum precision allowed by this type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Parse(System.String)">
             <summary>
             Converts the specified string into an Longitude object.
             </summary>
             <param name="value">The value.</param>
             <returns>A new <strong>Longitude</strong> object populated with the specified
             values.</returns>
             <seealso cref="M:DotSpatial.Positioning.Longitude.ToString">ToString Method</seealso>
            
             <example>
             This example creates a new angular measurement using the <strong>Parse</strong>
             method.
               <code lang="VB">
             Dim NewLongitude As Longitude = Longitude.Parse("123.45°")
               </code>
               <code lang="CS">
             Longitude NewLongitude = Longitude.Parse("123.45°");
               </code>
               </example>
            
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            
             <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
             <remarks>This method parses the specified string into an <strong>Longitude</strong> object
             using the current culture. This constructor can parse any strings created via the
             <strong>ToString</strong> method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Longitude</strong> object using the
            specified culture.
            </summary>
            <param name="value">A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.</param>
            <param name="culture">A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.</param>
            <returns>A new <strong>Longitude</strong> object equivalent to the specified string.</returns>
            <remarks>This powerful method is typically used to process data from a data store or a
            value input by the user in any culture. This function can accept any format which
            can be output by the ToString method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Addition(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Addition(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Subtraction(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Subtraction(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Multiply(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Multiply(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Division(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Division(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Equality(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Equality(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Inequality(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Inequality(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_GreaterThan(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_GreaterThan(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_GreaterThanOrEqual(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_GreaterThanOrEqual(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_LessThan(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_LessThan(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_LessThanOrEqual(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_LessThanOrEqual(DotSpatial.Positioning.Longitude,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns>An <strong>Longitude</strong> object.</returns>
            <example>
            This example uses the <strong>Increment</strong> method to increase an Longitude's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Increment</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Longitude1 As New Longitude(89)
            Longitude1 = Longitude1.Increment()
            ' Incorrect use of Increment
            Dim Longitude1 = New Longitude(89)
            Longitude1.Increment()
            ' notice: Longitude1 will still be 89°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Increment
            Longitude Longitude1 = new Longitude(89);
            Longitude1 = Longitude1.Increment();
            // Incorrect use of Increment
            Longitude Longitude1 = new Longitude(89);
            Longitude1.Increment();
            // notice: Longitude1 will still be 89°!
              </code>
              </example>
            <remarks><para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Longitude</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Add(System.Double)">
            <summary>
            Increases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
            <returns>A new <strong>Longitude</strong> containing the summed values.</returns>
            <example>
            This example adds 45° to the current instance of 45°, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(45)
            Longitude1 = Longitude1.Add(45)
              </code>
              <code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(45);
            Longitude1 = Longitude1.Add(45);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Add(DotSpatial.Positioning.Longitude)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns>An <strong>Longitude</strong> object.</returns>
            <example>
            This example uses the <strong>Decrement</strong> method to decrease an Longitude's
            value. It also demonstrates the subtle error which can be caused if
              <strong>Decrement</strong> is called while ignoring the return value.
              <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Longitude1 As New Longitude(91)
            Longitude1 = Longitude1.Decrement()
            ' Incorrect use of Decrement
            Dim Longitude1 = New Longitude(91)
            Longitude1.Increment()
            ' notice Longitude1 will still be 91°!
              </code>
              <code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Longitude Longitude1 = new Longitude(91);
            Longitude1 = Longitude1.Decrement();
            // Incorrect use of Decrement
            Longitude Longitude1 = new Longitude(91);
            Longitude1.Decrement();
            // notice: Longitude1 will still be 91°!
              </code>
              </example>
            <remarks><para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
            returned as a new instance.</para>
              <para><font color="red">Since the <strong>Longitude</strong> class is immutable, this
            method cannot be used to modify an existing instance.</font></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Subtract(System.Double)">
            <summary>
            Decreases the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
            <returns>A new <strong>Longitude</strong> containing the new value.</returns>
            <example>
            This example subtracts 30° from the current instance of 90°, returning 60°.
              <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(90)
            Longitude1 = Longitude1.Subtract(30)
              </code>
              <code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(90);
            Longitude1 = Longitude1.Subtract(30);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Subtract(DotSpatial.Positioning.Longitude)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Multiply(System.Double)">
            <summary>
            Multiplies the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
            <returns>A new <strong>Longitude</strong> containing the product of the two numbers.</returns>
            <example>
            This example multiplies 30° with three, returning 90°.
              <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(30)
            Longitude1 = Longitude1.Multiply(3)
              </code>
              <code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(30);
            Longitude1 = Longitude1.Multiply(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Multiply(DotSpatial.Positioning.Longitude)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Divide(System.Double)">
            <summary>
            Divides the current instance by the specified value.
            </summary>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
            <returns>An <strong>Longitude</strong> containing the new value.</returns>
            <example>
            This example divides 90° by three, returning 30°.
              <code lang="VB" title="[New Example]">
            Dim Longitude1 As New Longitude(90)
            Longitude1 = Longitude1.Divide(3)
              </code>
              <code lang="CS" title="[New Example]">
            Longitude Longitude1 = new Longitude(90);
            Longitude1 = Longitude1.Divide(3);
              </code>
              </example>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Divide(DotSpatial.Positioning.Longitude)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsLessThan(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates if the current instance is smaller than the specified value.
            </summary>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsLessThan(System.Double)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsLessThanOrEqualTo(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.</returns>
            <remarks>This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsLessThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsGreaterThan(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates if the current instance is larger than the specified value.
            </summary>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsGreaterThan(System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <param name="value">An <strong>Longitude</strong> to compare with the current instance.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Radian)~DotSpatial.Positioning.Longitude">
            <summary>
            Converts a measurement in Radians into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(System.Double)~DotSpatial.Positioning.Longitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(System.Single)~DotSpatial.Positioning.Longitude">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Longitude)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Longitude)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(System.Int32)~DotSpatial.Positioning.Longitude">
            <summary>
            Converts a measurement in degrees as an Integer into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Angle)~DotSpatial.Positioning.Longitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Angle"/> to <see cref="T:DotSpatial.Positioning.Longitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Azimuth)~DotSpatial.Positioning.Longitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Azimuth"/> to <see cref="T:DotSpatial.Positioning.Longitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Elevation)~DotSpatial.Positioning.Longitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Elevation"/> to <see cref="T:DotSpatial.Positioning.Longitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Latitude)~DotSpatial.Positioning.Longitude">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Latitude"/> to <see cref="T:DotSpatial.Positioning.Longitude"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(System.String)~DotSpatial.Positioning.Longitude">
            <summary>
            Converts a measurement in the form of a formatted String into an Longitude.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.op_Explicit(DotSpatial.Positioning.Longitude)~System.String">
            <summary>
            Converts an Longitude into a String.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>An <strong>Longitude</strong> of the same value as the current instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Equals(DotSpatial.Positioning.Longitude,System.Int32)">
             <summary>
             Compares the current instance to another instance using the specified
             precision.
             </summary>
             <param name="other">The other.</param>
             <param name="decimals">The decimals.</param>
             <returns>A <strong>Boolean</strong>, <strong>True</strong> if the
             <strong>DecimalDegrees</strong> property of the current instance matches the
             specified instance's <strong>DecimalDegrees</strong> property.</returns>
             <seealso cref="M:DotSpatial.Positioning.Longitude.Equals(DotSpatial.Positioning.Longitude)">Equals Method</seealso>
            
             <example>
             These examples compare two fractional values using specific numbers of digits for
             comparison.
               <code lang="VB" title="[New Example]">
             ' Equals will return False
             Dim Longitude1 As New Longitude(90.15);
             Dim Longitude2 As New Longitude(90.12);
             If Longitude1.Equals(Longitude2, 2) Then
             Debug.WriteLine("The values are the same to two digits of precision.");
             ' Equals will return True
             Dim Longitude1 As New Longitude(90.15);
             Dim Longitude2 As New Longitude(90.12);
             If Longitude1.Equals(Longitude2, 1) Then
             Debug.WriteLine("The values are the same to one digit of precision.");
               </code>
               <code lang="CS" title="[New Example]">
             // Equals will return False
             Longitude Longitude1 = new Longitude(90.15);
             Longitude Longitude2 = new Longitude(90.12);
             if (Longitude1.Equals(Longitude2, 2))
             Console.WriteLine("The values are the same to two digits of precision.");
             // Equals will return True
             Longitude Longitude1 = new Longitude(90.15);
             Longitude Longitude2 = new Longitude(90.12);
             if (Longitude1.Equals(Longitude2, 1))
             Console.WriteLine("The values are the same to one digits of precision.");
               </code>
               </example>
             <remarks><para>This is typically used in cases where precision is only significant for a few
             digits and exact comparison is not necessary.</para>
               <para><em>notice: This method compares objects by value, not by
             reference.</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.Equals(DotSpatial.Positioning.Longitude)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.CompareTo(DotSpatial.Positioning.Longitude)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ToString(System.String,System.IFormatProvider)">
             <summary>
             Outputs the current instance as a string using the specified format.
             </summary>
             <param name="format"><para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
               <para>
               <table cellspacing="0" cols="3" cellpadding="2" width="100%">
               <tbody>
               <tr>
               <td>HH°MM'SS.SS"</td>
               <td>HHH.H°</td>
               <td>HH MM.MM</td>
               <td>HHHMMSS</td>
               </tr>
               <tr>
               <td>HH°MM'SS.SS"I</td>
               <td>HHH.H°I</td>
               <td>HH MM.MMI</td>
               <td>HHHMMSSI</td>
               </tr>
               </tbody>
               </table>
               </para></param>
             <param name="formatProvider">A <strong>CultureInfo</strong> object used to properly format the string information.</param>
             <returns>A <strong>String</strong> matching the specified format.</returns>
             <seealso cref="M:DotSpatial.Positioning.Longitude.ToString">ToString Method</seealso>
            
             <seealso cref="M:DotSpatial.Positioning.Longitude.Parse(System.String)">Parse Method</seealso>
            
             <example>
             This example uses the <strong>ToString</strong> method to output an angle in a
             custom format. The " <strong>h°</strong> " code represents hours along with a
             degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
             the minutes out to two decimals. Mmm.
               <code lang="VB">
             Dim MyLongitude As New Longitude(45, 16.772)
             Debug.WriteLine(MyLongitude.ToString("h°m.mm", CultureInfo.CurrentCulture))
             ' Output: 45°16.78
               </code>
               <code lang="CS">
             Dim MyLongitude As New Longitude(45, 16.772);
             Debug.WriteLine(MyLongitude.ToString("h°m.mm", CultureInfo.CurrentCulture));
             // Output: 45°16.78
               </code>
               </example>
             <remarks>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Longitude.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.DecimalDegrees">
             <summary>
             Returns the value of the angle as decimal degrees.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Longitude.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Longitude.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Longitude.Seconds">Seconds Property</seealso>
            
             <example>
             This example demonstrates how the
               <see cref="P:DotSpatial.Positioning.Longitude.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
             calculated automatically when creating an angle using hours, minutes and seconds.
               <code lang="VB">
             ' Create an angle of 20°30'
             Dim MyLongitude As New Longitude(20, 30)
             ' Setting the DecimalMinutes recalculated other properties
             Debug.WriteLine(MyLongitude.DecimalDegrees)
             ' Output: "20.5"  the same as 20°30'
               </code>
               <code lang="CS">
             // Create an angle of 20°30'
             Longitude MyLongitude = New Longitude(20, 30);
             // Setting the DecimalMinutes recalculated other properties
             Console.WriteLine(MyLongitude.DecimalDegrees)
             // Output: "20.5"  the same as 20°30'
               </code>
               </example>
             <remarks>This property returns the value of the angle as a single number.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.DecimalMinutes">
             <summary>
             Returns the minutes and seconds as a single numeric value.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Longitude.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Longitude.DecimalDegrees">DecimalDegrees Property</seealso>
            
             <example>
             This example demonstrates how the <strong>DecimalMinutes</strong> property is
             automatically calculated when creating a new angle.
               <code lang="VB">
             ' Create an angle of 20°10'30"
             Dim MyLongitude As New Longitude(20, 10, 30)
             ' The DecimalMinutes property is automatically calculated
             Debug.WriteLine(MyLongitude.DecimalMinutes)
             ' Output: "10.5"
               </code>
               <code lang="CS">
             // Create an angle of 20°10'30"
             Longitude MyLongitude = new Longitude(20, 10, 30);
             // The DecimalMinutes property is automatically calculated
             Console.WriteLine(MyLongitude.DecimalMinutes)
             // Output: "10.5"
               </code>
               </example>
             <remarks>This property is used when minutes and seconds are represented as a single
             decimal value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.Hours">
             <summary>
             Returns the integer hours (degrees) portion of an angular
             measurement.
             </summary>
             <value>An <strong>Integer</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Longitude.Minutes">Minutes Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Longitude.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 60.5° then outputs the value of the
               <strong>Hours</strong> property, 60.
               <code lang="VB">
             Dim MyLongitude As New Longitude(60.5)
             Debug.WriteLine(MyLongitude.Hours)
             ' Output: 60
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude(60.5);
             Console.WriteLine(MyLongitude.Hours);
             // Output: 60
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Longitude.Minutes">Minutes</see>
             and <see cref="P:DotSpatial.Positioning.Longitude.Seconds">Seconds</see> properties to create a full angular measurement.
             This property is the same as <strong>DecimalDegrees</strong> without any fractional
             value.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.Minutes">
             <summary>
             Returns the integer minutes portion of an angular measurement.
             </summary>
             <value>An <strong>Integer</strong>.</value>
             <seealso cref="P:DotSpatial.Positioning.Longitude.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Longitude.Seconds">Seconds Property</seealso>
            
             <example>
             This example creates an angle of 45.5° then outputs the value of the
               <strong>Minutes</strong> property, 30.
               <code lang="VB">
             Dim MyLongitude As New Longitude(45.5)
             Debug.WriteLine(MyLongitude.Minutes)
             ' Output: 30
               </code>
               <code lang="CS">
             Longitude MyLongitude = new Longitude(45.5);
             Console.WriteLine(MyLongitude.Minutes);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Longitude.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Longitude.Seconds">Seconds</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.Seconds">
             <summary>
             Returns the seconds minutes portion of an angular measurement.
             </summary>
             <value>A <strong>Double</strong> value.</value>
             <seealso cref="P:DotSpatial.Positioning.Longitude.Hours">Hours Property</seealso>
            
             <seealso cref="P:DotSpatial.Positioning.Longitude.Minutes">Minutes Property</seealso>
            
             <example>
             This example creates an angle of 45°10.5' then outputs the value of the
               <strong>Seconds</strong> property, 30.
               <code lang="VB">
             Dim MyLongitude As New Longitude(45, 10.5)
             Debug.WriteLine(MyLongitude.Seconds)
             ' Output: 30
               </code>
               <code lang="CS">
             Dim MyLongitude As New Longitude(45, 10.5);
             Console.WriteLine(MyLongitude.Seconds);
             // Output: 30
               </code>
               </example>
             <remarks>This property is used in conjunction with the <see cref="P:DotSpatial.Positioning.Longitude.Hours">Hours</see> and
             <see cref="P:DotSpatial.Positioning.Longitude.Minutes">Minutes</see> properties to create a sexagesimal
             measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.Hemisphere">
            <summary>
            Returns whether the longitude is east or west of the Prime Meridian.
            </summary>
            <remarks>When this property changes, the DecimalDegrees property is adjusted: if the
            hemisphere is <strong>West</strong>, a negative sign is placed in front of the
            DecimalDegrees value, and vice versa.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.UtmZoneNumber">
            <summary>
            Returns the Universal Transverse Mercator zone number for this longitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.IsEmpty">
            <summary>
            Indicates if the current instance has a non-zero value.
            </summary>
            <value>A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.</value>
            <seealso cref="F:DotSpatial.Positioning.Longitude.Empty">Empty Field</seealso>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.IsInfinity">
            <summary>
            Indicates if the current instance represents an infinite value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.IsInvalid">
            <summary>
            Indicates whether the value is invalid or unspecified.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Longitude.IsNormalized">
            <summary>
            Indicates whether the value has been normalized and is within the
            allowed bounds of -180° and 180°.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.LongitudeHemisphere">
             <summary>
             Indicates the position of a longitude measurement relative to the <a href="http://www.greenwichmeridian.com/">Prime Meridian</a>.
             </summary>
             <seealso cref="P:DotSpatial.Positioning.Latitude.Hemisphere">Hemisphere Property (Latitude Class)</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.LatitudeHemisphere">LatitudeHemisphere Enumeration</seealso>
             <remarks><para>This enumeration is used by the <see cref="P:DotSpatial.Positioning.Longitude.Hemisphere">Hemisphere</see>
             property of the <see cref="T:DotSpatial.Positioning.Longitude">Latitude</see> class. If a longitude is west of the
             Prime Meridian, it's value is displayed as a negative number, or with a single letter (but not
             both). For example, 105 degrees west can be expressed in either of these
             ways:</para>
               <list type="bullet">
               <item>105°W</item>
               <item>-105°</item>
               </list></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.LongitudeHemisphere.None">
            <summary>Missing longitude information.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.LongitudeHemisphere.East">
            <summary>The longitude is east of the Prime Meridian.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.LongitudeHemisphere.West">
            <summary>The longitude is west of the Prime Meridian.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.HostPlatformID">
            <summary>
            Indicates the current host operating system.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.HostPlatformID.Unknown">
            <summary>
            The current platform has not yet been determined.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.HostPlatformID.Desktop">
            <summary>
            The current plarform is a desktop computer.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.HostPlatformID.WindowsCe">
            <summary>
            The current platform is Windows CE 4.2
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.HostPlatformID.PocketPc">
            <summary>
            The current platform is PocketPC (Windows Mobile 2003)
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.HostPlatformID.Smartphone">
            <summary>
            The current platform is Smartphone
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.DotNetFrameworkID">
            <summary>
            Indicates the current .NET framework being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.Unknown">
            <summary>
            The .NET framework version has not been determined.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.DesktopFramework10">
            <summary>
            .NET framework version 1.0 (Visual Studio 2002) is being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.DesktopFramework11">
            <summary>
            .NET framework version 1.1 (Visual Studio 2003) is being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.DesktopFramework20">
            <summary>
            .NET framework version 2.0 (Visual Studio 2005) is being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.DesktopFramework30">
            <summary>
            .NET framework version 3.0 (Visual Studio 2008) is being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.DesktopFramework40">
            <summary>
            .NET framework version 4.0 (Visual Studio 2010) is being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.CompactFramework10">
            <summary>
            .NET Compact Framework version 1.0 (Visual Studio 2003) is being used.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.DotNetFrameworkID.CompactFramework20">
            <summary>
            .NET Compact Framework version 2.0 (Visual Studio 2005) is being used.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Platform">
            <summary>
            Provides features for determining the current host platform.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Platform.DOT_NET_FRAMEWORK_ID">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Platform._hostPlatformID">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Platform.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Platform.HostPlatformID">
            <summary>
            Returns the current host platform.
            </summary>
            <remarks>This property is used to determine the current host platform: Windows CE 4.2,
            PocketPC / Windows Mobile 2003, Smartphone, or Desktop.  This property is typically
            used to adjust the performance and behavior of an application to work on a specific platform.
            For example, thread priorities are more sensitive on the Smartphone platform than the
            PocketPC platform.  This can also be used to determine correct locations of system folders
            and installed system software such as Bluetooth stacks.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Platform.DotNetFrameworkID">
            <summary>
            Returns the current version of the .NET Framework currently in use.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Position">
            <summary>
            Represents a specific location on Earth's surface.
            </summary>
            <remarks>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be changed via constructors).</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Position.TARGET_ACCURACY">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position._latitude">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position._longitude">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position.Empty">
            <summary>
            Represents the location at 0°, 0°.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position.Minimum">
            <summary>
            Represents the smallest possible location of 90°S, 180°W.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position.Maximum">
            <summary>
            Represents the largest possible location of 90°N, 180°E.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position.NorthPole">
            <summary>
            Represents the single point at the top of Earth: 90°N, 0°E.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position.SouthPole">
            <summary>
            Represents the single point at the bottom of Earth: 90°S, 0°E.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Creates a new instance from the specified longitude and latitude.
            </summary>
            <param name="longitude">The longitude.</param>
            <param name="latitude">The latitude.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Creates a new instance from the specified latitude and longitude.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, add a CultureInfo parameter.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="culture">The culture.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, a CultureInfo parameter should be specified to indicate how numbers should
            be parsed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specific culture.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(DotSpatial.Positioning.Position)">
            <summary>
            Creates a copy of the specified object.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new position by deserializing the specified XML content.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <overloads>Outputs the current instance as a formatted string.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ToCartesianPoint">
            <summary>
            Converts the current instance into an Earth-centered, Earth-fixed (ECEF) Cartesian point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ToCartesianPoint(DotSpatial.Positioning.Ellipsoid,DotSpatial.Positioning.Distance)">
            <summary>
            Toes the cartesian point.
            </summary>
            <param name="ellipsoid">The ellipsoid.</param>
            <param name="altitude">The altitude.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.BearingTo(DotSpatial.Positioning.Position)">
            <summary>
            Calculates the direction of travel to the specified destination.
            </summary>
            <param name="destination">A <strong>Position</strong> object to which the bearing is calculated.</param>
            <returns>An <strong>Azimuth</strong> object representing the calculated distance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.BearingTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Calculates the direction of travel to the specified destination using the specified interpretation of Earth's shape.
            </summary>
            <param name="destination">A <strong>Position</strong> object to which the bearing is calculated.</param>
            <param name="ellipsoid">An <strong>Ellipsoid</strong> object used to fine-tune bearing calculations.</param>
            <returns>An <strong>Azimuth</strong> object representing the calculated distance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.SpeedTo(DotSpatial.Positioning.Position,System.TimeSpan)">
            <summary>
            Returns the minimum speed required to travel from the current location to the
            specified destination within the specified period of time.
            </summary>
            <param name="destination">The destination.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IsNorthOf(DotSpatial.Positioning.Position)">
            <summary>
            Indicates if the current instance is North of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more North than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IsSouthOf(DotSpatial.Positioning.Position)">
            <summary>
            Indicates if the current instance is South of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more South than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IsEastOf(DotSpatial.Positioning.Position)">
            <summary>
            Indicates if the current instance is East of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more East than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IsWestOf(DotSpatial.Positioning.Position)">
            <summary>
            Indicates if the current instance is West of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more West than the specified instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TimeTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Speed)">
            <summary>
            Returns the minimum time required to travel to the given destination at the
            specified constant speed.
            </summary>
            <param name="destination">The destination.</param>
            <param name="speed">The speed.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The TimeTo method expects a value for Speed greater than zero.</exception>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position)">
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <param name="destination">The ending point of a segment.</param>
            <returns>A <strong>Distance</strong> object containing the calculated distance in
            kilometers.</returns>
            <overloads>Calculates the great circle distance between any two points on
            Earth.</overloads>
            <remarks>This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:DotSpatial.Positioning.Distance">Distance</see>
            class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position,System.Boolean)">
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <param name="destination">The ending point of a segment.</param>
            <param name="isApproximated">if set to <c>true</c> [is approximated].</param>
            <returns>A <strong>Distance</strong> object containing the calculated distance in
            kilometers.</returns>
            <overloads>Calculates the great circle distance between any two points on
            Earth.</overloads>
            <remarks>This method uses a high-speed formula to determine the Great Circle distance from one
            point to another.  This method is typically used in situations where hundreds of distance
            measurements must be made in a short period of time.  The <strong>DistanceTo</strong> method
            produces accuracy to one millimeter, but its formula is about a hundred times slower than this
            method.
            <see cref="T:DotSpatial.Positioning.Distance">Distance</see>
            class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Ellipsoid,System.Boolean)">
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <param name="destination">The ending point of a segment.</param>
            <param name="ellipsoid">The model of the Earth to use for the distance calculation.</param>
            <param name="isApproximated">if set to <c>true</c> [is approximated].</param>
            <returns>A <strong>Distance</strong> object containing the calculated distance in
            kilometers.</returns>
            <overloads>Calculates the great circle distance between any two points on
            Earth.</overloads>
            <remarks>This method uses a high-speed formula to determine the Great Circle distance from one
            point to another.  This method is typically used in situations where hundreds of distance
            measurements must be made in a short period of time.  The <strong>DistanceTo</strong> method
            produces accuracy to one millimeter, but its formula is about a hundred times slower than this
            method.
            <see cref="T:DotSpatial.Positioning.Distance">Distance</see>
            class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <param name="destination">The ending point of a segment.</param>
            <param name="ellipsoid">The model of the Earth to use for the distance calculation.</param>
            <returns>A <strong>Distance</strong> object containing the calculated distance in
            kilometers.</returns>
            <overloads>Calculates the great circle distance between any two points on
            Earth using a specific model of Earth's shape.</overloads>
            <remarks>This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:DotSpatial.Positioning.Distance">Distance</see>
            class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Speed,System.TimeSpan)">
            <summary>
            Returns the remaining travel distance if traveling for a certain speed for a certain period of time.
            </summary>
            <param name="destination">A <strong>Position</strong> marking the destination location.</param>
            <param name="speed">A <strong>Speed</strong> travelled from the current instance.</param>
            <param name="time">A <strong>TimeSpan</strong> representing the time already elapsed during transit to the destination.</param>
            <returns>A <strong>Distance</strong> measuring the remaining distance to travel.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IntersectionOf(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Position,DotSpatial.Positioning.Azimuth)">
            <summary>
            Calculates the intersection of two lines created by the current instance, another point, and a direction of travel from each point.
            </summary>
            <param name="firstBearing">An <strong>Angle</strong> specifying a travel direction from the current instance.</param>
            <param name="secondPosition">A <strong>Position</strong> specifying the start of the second line of intersection.</param>
            <param name="secondBearing">An <strong>Angle</strong> specifying a travel direction from the second position.</param>
            <returns>A <strong>Position</strong> representing the point of intersection, if one exists.</returns>
            <remarks>This method is typically used to determine the point where two objects in motion would meet.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IntersectionOf(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Position,DotSpatial.Positioning.Angle)">
            <summary>
            Intersections the of.
            </summary>
            <param name="firstBearing">The first bearing.</param>
            <param name="secondPosition">The second position.</param>
            <param name="secondBearing">The second bearing.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IntersectionOf(System.Double,DotSpatial.Positioning.Position,System.Double)">
            <summary>
            Intersections the of.
            </summary>
            <param name="firstBearing">The first bearing.</param>
            <param name="secondPosition">The second position.</param>
            <param name="secondBearing">The second bearing.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Angle</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(DotSpatial.Positioning.Angle,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Translates to.
            </summary>
            <param name="bearing">The bearing.</param>
            <param name="distance">The distance.</param>
            <param name="ellipsoid">The ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Azimuth</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Azimuth</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <param name="ellipsoid">The model of the Earth to use for the translation calculation.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(System.Double,DotSpatial.Positioning.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">A <strong>Double</strong> specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(System.Double,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">A <strong>Double</strong> specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <param name="ellipsoid">The model of the Earth to use for the translation calculation.</param>
            <returns>A <strong>Position</strong> representing the calculated position.</returns>
            <remarks>This function is designed to calculate positions for any location on Earth, with
            the exception of coordinates which lie at the poles (e.g. 90°N or 90°S).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Random">
            <summary>
            Returns a random location using the specified random number seed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Random(System.Random)">
            <summary>
            Returns a random location.
            </summary>
            <param name="generator">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Random(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Returns a random location within the specified geographic rectangle.
            </summary>
            <param name="southernmost">The southernmost.</param>
            <param name="westernmost">The westernmost.</param>
            <param name="northernmost">The northernmost.</param>
            <param name="easternmost">The easternmost.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Random(System.Random,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Returns a random location within the specified geographic rectangle.
            </summary>
            <param name="generator">A <strong>Random</strong> object used to generate random values.</param>
            <param name="southernmost">A <strong>Latitude</strong> specifying the southern-most allowed latitude.</param>
            <param name="westernmost">A <strong>Longitude</strong> specifying the western-most allowed longitude.</param>
            <param name="northernmost">A <strong>Latitude</strong> specifying the northern-most allowed latitude.</param>
            <param name="easternmost">A <strong>Longitude</strong> specifying the eastern-most allowed longitude.</param>
            <returns>The randomly created position.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.BearingTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Bearings to.
            </summary>
            <param name="start">The start.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
            <overloads>Returns the direction of travel from one position to another.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TranslateTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Angle,DotSpatial.Positioning.Distance)">
             <summary>
             Returns a new instance shifted by the specified direction and
             distance.
             </summary>
             <param name="start">The start.</param>
             <param name="bearing">The bearing.</param>
             <param name="distance">The distance.</param>
             <returns>A new <strong>Position</strong> object adjusted by the specified
             amount.</returns>
             <overloads>
             Returns the position shifted by the specified bearing and distance as new
             Position object.
               </overloads>
            
             <example>
               <code lang="VB" title="[New Example]" description="This example creates a destination point ten miles northwest of the
                            current location.">
             ' Create a distance of ten miles
             Dim TravelDistance As New Distance(10, DistanceUnit.StatuteMiles)
             ' Calculate the point
             Dim DestinationPoint As Position
             DestinationPoint = Position.CurrentPosition.TranslateTo(Azimuth.Northwest,
             TravelDistance)
               </code>
               </example>
             <remarks><para>This method is typically used to create an destination point relative to an
             existing location. For example, this method could be used to create a point ten
             miles northeast of the current location.</para>
               <para><em>notice: The trigonometric formula used for this method is subject to errors
             when the distance to translate falls below a quarter mile (approximately 433
             meters).</em></para></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.IntersectionOf(DotSpatial.Positioning.Position,DotSpatial.Positioning.Angle,DotSpatial.Positioning.Position,DotSpatial.Positioning.Angle)">
            <summary>
            Calculates the point (if any) at which two imaginary lines
            intersect.
            </summary>
            <param name="firstPosition">A <strong>Position</strong> specifying a position which marks the start of a line.</param>
            <param name="firstBearing">An <strong>Angle</strong> specifying a direction from the first Position.</param>
            <param name="secondPosition">A <strong>Position</strong> specifying the second position, marking the start of a second line.</param>
            <param name="secondBearing">An <strong>Angle</strong> specifying a direction from the second Position.</param>
            <returns>A <strong>Position</strong> object specifying the intersection
            point.</returns>
            <overloads>Calculates a position which marks the intersection of two
            vectors.</overloads>
            <remarks>This method uses trigonometry to calculate the point at which two lines intersect
            on Earth's surface. This method is typically used to see where two objects in motion
            would meet given their current directions of travel.  This method does not take the speed
            of each object into account.
            <img src="IntersectionOf.jpg"/></remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position,DotSpatial.Positioning.Speed,System.TimeSpan)">
            <summary>
            Returns the remaining travel distance if traveling for a certain speed for a certain period of time.
            </summary>
            <param name="start">A <strong>Position</strong> marking the starting location from which to calculate.</param>
            <param name="destination">A <strong>Position</strong> marking the destination location.</param>
            <param name="speed">A <strong>Speed</strong> travelled from the current instance.</param>
            <param name="time">A <strong>TimeSpan</strong> representing the time already elapsed during transit to the destination.</param>
            <returns>A <strong>Distance</strong> measuring the remaining distance to travel.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.DistanceTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <param name="start">A beginning point from which to calculate distance.</param>
            <param name="destination">The ending point of a segment.</param>
            <returns>A <strong>Distance</strong> object containing the calculated distance in
            kilometers.</returns>
            <overloads>Calculates the great circle distance between any two points on
            Earth.</overloads>
            <remarks>This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:DotSpatial.Positioning.Distance">Distance</see>
            class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.TimeTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position,DotSpatial.Positioning.Speed)">
            <summary>
            Returns the minimum amount of time required to reach the specified destination at
            the specified speed.
            </summary>
            <param name="start">The start.</param>
            <param name="destination">The destination.</param>
            <param name="speed">The speed.</param>
            <returns></returns>
            <overloads>
            Calculates the time required to arrive at a destination when traveling at the
            specified speed.
              </overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Position.SpeedTo(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position,System.TimeSpan)">
            <summary>
            Returns the minimum speed required to travel over land from the given starting
            point to the specified destination within the specified period of time.
            </summary>
            <param name="start">The beginning point from which calculations are based.</param>
            <param name="destination">The ending point to which speed is calculated.</param>
            <param name="time">The amount of time allowed to reach the destination.</param>
            <returns>A <strong>Speed</strong> object containing the required minimum travel
            speed.</returns>
            <overloads>
            Calculates the minimum speed required to arrive at a destination in the given
            time.
              </overloads>
            <remarks>This method is typically used to compare the current speed with the minimum
            required speed. For example, if the current rate of travel is 30MPH and the minimum
            speed is 60MPH, it can be derived that the speed must be doubled to arrive at the
            destination on time. Of course, care must be taken when making any suggestion to
            increase driving speed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Parse(System.String)">
            <summary>
            Converts a string-based positional measurement into a Position
            object.
            </summary>
            <param name="value">A <strong>String</strong> containing both latitude and longitude in the form of a string.</param>
            <returns></returns>
            <remarks>This powerful method will analyze a string containing latitude and longitude and
            create a Position object matching the specified values.  The latitude and longitude
            must be separated by a non-space delimiter such as a comma.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ParseAsLatLong(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses as lat long.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Equality(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Inequality(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Addition(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Subtraction(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Multiply(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Division(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Add(DotSpatial.Positioning.Position)">
            <summary>
            Adds the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Subtract(DotSpatial.Positioning.Position)">
            <summary>
            Subtracts the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Multiply(DotSpatial.Positioning.Position)">
            <summary>
            Multiplies the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Divide(DotSpatial.Positioning.Position)">
            <summary>
            Divides the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Explicit(System.String)~DotSpatial.Positioning.Position">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.Position"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.op_Explicit(DotSpatial.Positioning.Position)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Position"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Equals(DotSpatial.Positioning.Position)">
            <summary>
            Compares the current instance to the specified position.
            </summary>
            <param name="other">A <strong>Position</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>The two objects are compared at up to four digits of precision.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.Equals(DotSpatial.Positioning.Position,System.Int32)">
            <summary>
            Compares the current instance to the specified position using the specified numeric precision.
            </summary>
            <param name="other">A <strong>Position</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>This method is typically used when positions do not mark the same location unless they are
            extremely close to one another.  Conversely, a low or even negative value for <strong>Precision</strong>
            allows positions to be considered equal even when they do not precisely match.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Position.Latitude">
            <summary>
            Represents the vertical North/South portion of the location.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position.Longitude">
            <summary>
            Represents the horizontal East/West portion of the location.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position.IsEmpty">
            <summary>
            Indicates if the position has no value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position.IsInvalid">
            <summary>
            Indicates if the position has an invalid or unspecified value.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position.IsNormalized">
            <summary>
            Indicates whether the position has been normalized and is within the
            allowed bounds of -90° and 90° latitude and -180° and 180° longitude.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.ZoneLetter">
            <summary>
            Indicates a vertical slice of the Earth used as a starting point for UTM positions.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.Unknown">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.Z">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.C">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.D">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.E">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.F">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.G">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.H">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.J">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.K">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.L">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.M">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.N">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.P">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.Q">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.R">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.S">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.T">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.U">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.V">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.W">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.ZoneLetter.X">
             <summary>
            
             </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Position3D">
            <summary>
            Represents a position on Earth marked by latitude, longitude, and altitude.
            </summary>
            <remarks>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be changed via constructors).</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Position3D._position">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Position3D._altitude">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Position3D"/> struct.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Position3D"/> struct.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="latitude">The latitude.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(DotSpatial.Positioning.Distance,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Position3D"/> struct.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <overloads>Creates a new instance.</overloads>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Distance)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Position3D"/> struct.
            </summary>
            <param name="longitude">The longitude.</param>
            <param name="latitude">The latitude.</param>
            <param name="altitude">The altitude.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(DotSpatial.Positioning.Latitude,DotSpatial.Positioning.Longitude,DotSpatial.Positioning.Distance)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Position3D"/> struct.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="altitude">The altitude.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, add a CultureInfo parameter.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(System.String,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by interpreting the specified latitude and longitude.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="culture">The culture.</param>
            <remarks>Latitude and longitude values are parsed using the current local culture.  For better support
            of international cultures, a CultureInfo parameter should be specified to indicate how numbers should
            be parsed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specific culture.
            </summary>
            <param name="altitude">The altitude.</param>
            <param name="location">The location.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(DotSpatial.Positioning.Position)">
            <summary>
            Upgrades a Position object to a Position3D object.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Position3D"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.ToCartesianPoint">
            <summary>
            Toes the cartesian point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.ToCartesianPoint(DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Toes the cartesian point.
            </summary>
            <param name="ellipsoid">The ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Equality(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Position3D)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Inequality(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Position3D)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Addition(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Position3D)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Subtraction(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Position3D)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Multiply(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Position3D)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Division(DotSpatial.Positioning.Position3D,DotSpatial.Positioning.Position3D)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Add(DotSpatial.Positioning.Position3D)">
            <summary>
            Adds the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Subtract(DotSpatial.Positioning.Position3D)">
            <summary>
            Subtracts the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Multiply(DotSpatial.Positioning.Position3D)">
            <summary>
            Multiplies the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Divide(DotSpatial.Positioning.Position3D)">
            <summary>
            Divides the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Explicit(DotSpatial.Positioning.CartesianPoint)~DotSpatial.Positioning.Position3D">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.CartesianPoint"/> to <see cref="T:DotSpatial.Positioning.Position3D"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.op_Explicit(DotSpatial.Positioning.Position3D)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Position3D"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Equals(DotSpatial.Positioning.Position3D)">
            <summary>
            Compares the current instance to the specified position.
            </summary>
            <param name="other">A <strong>Position</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>The two objects are compared at up to four digits of precision.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Equals(DotSpatial.Positioning.Position3D,System.Int32)">
            <summary>
            Compares the current instance to the specified position using the specified numeric precision.
            </summary>
            <param name="other">A <strong>Position</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>This method is typically used when positions do not mark the same location unless they are
            extremely close to one another.  Conversely, a low or even negative value for <strong>Precision</strong>
            allows positions to be considered equal even when they do not precisely match.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.TranslateTo(DotSpatial.Positioning.Azimuth,DotSpatial.Positioning.Distance,DotSpatial.Positioning.Ellipsoid)">
            <summary>
            Returns a coordinate which has been shifted the specified bearing and distance.
            </summary>
            <param name="bearing">The bearing.</param>
            <param name="distance">The distance.</param>
            <param name="ellipsoid">The ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Position3D.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Positioning.Position3D.Altitude">
            <summary>
            Returns the location's distance above sea level.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position3D.Latitude">
            <summary>
            Gets the latitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position3D.Longitude">
            <summary>
            Gets the longitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Position3D.IsEmpty">
            <summary>
            Returns whether the latitude, longitude and altitude are zero.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Radian">
            <summary>
            Represents a unit of angular measurement used during trigonometric
            equations.
            </summary>
            <remarks><para>A radian is a unit of measure of an angle formed by an arc whose length is
            the same as the circle's radius, making a shape similar to a slice of pizza.
            Radians are typically used during trigonometric calculations such as calculating
            the distance between two points on Earth's curved surface.</para>
              <para>Instances of this class are guaranteed to be thread-safe because the class is
            immutable (its properties can only be changed during constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Radian.RADIANS_PER_DEGREE">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Radian.DEGREES_PER_RADIAN">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Radian._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Radian.Empty">
            <summary>
            Represents a radian with a value of zero.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.#ctor(System.Double)">
            <summary>
            Creates a new instance with the specified value.
            </summary>
            <param name="value">The value.</param>
            <remarks>this constructor is typically used to initialize an instance when the radian
            value is already known.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Radian"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Radian"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Radian"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance by deserializing the specified XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Cosine">
            <summary>
            Returns the cosine of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Sine">
            <summary>
            Sines this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Tangent">
            <summary>
            Tangents this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.SquareRoot">
            <summary>
            Squares the root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.AbsoluteValue">
            <summary>
            Returns the absolute value of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ArcCosine">
            <summary>
            Returns the arccosine of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ArcSine">
            <summary>
            Returns the arcsine of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ArcTangent">
            <summary>
            Returns the arctangent of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Logarithm(System.Double)">
            <summary>
            Logarithms the specified new base.
            </summary>
            <param name="newBase">The new base.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.LogarithmBase10">
            <summary>
            Logarithms the base10.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToDegrees">
            <summary>
            Converts the current instance into an <strong>Angle</strong> object.
            </summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToAngle">
            <summary>
            Converts the current instance into an <strong>Angle</strong> object.
            </summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToLatitude">
            <summary>
            Converts the current instance to a latitude.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToLongitude">
            <summary>
            Converts the current instance to a longitude.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToString(System.String)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified
            format.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.GetHashCode">
            <summary>
            Returns the unique code for this instance used in hash tables.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.FromDegrees(System.Double)">
            <summary>
            Converts the specified value in degrees into radians.
            </summary>
            <param name="value">A <strong>Double</strong> containing the value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.FromAngle(DotSpatial.Positioning.Angle)">
            <summary>
            Converts the specified value in degrees into radians.
            </summary>
            <param name="value">An <strong>Angle</strong> containing the value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToDegrees(System.Double)">
            <summary>
            Converts the specified value from radians to degrees.
            </summary>
            <param name="radians">The radians.</param>
            <returns>A <strong>Double</strong> measuring degrees.</returns>
            <remarks>This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToAngle(DotSpatial.Positioning.Radian)">
            <summary>
            Converts a Radian object into decimal degrees.
            </summary>
            <param name="value">A <strong>Radian</strong> object to convert to an <strong>Angle</strong>.</param>
            <returns>An <strong>Angle</strong> object containing the converted value.</returns>
            <remarks>This method is typically used for trigonometric functions which work with values expressed as radians.  Then the formula has completed, results are converted from radians to decimal degrees to make them easier to use.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Addition(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Subtraction(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Multiply(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Division(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_LessThan(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_LessThanOrEqual(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Equality(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Inequality(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_GreaterThanOrEqual(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_GreaterThan(DotSpatial.Positioning.Radian,DotSpatial.Positioning.Radian)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Addition(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Subtraction(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Multiply(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Division(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_LessThan(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_LessThanOrEqual(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Equality(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Inequality(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_GreaterThanOrEqual(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_GreaterThan(DotSpatial.Positioning.Radian,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Add(DotSpatial.Positioning.Radian)">
            <summary>
            Adds the current instance to the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Add(System.Double)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Subtract(DotSpatial.Positioning.Radian)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Subtract(System.Double)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Multiply(DotSpatial.Positioning.Radian)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Multiply(System.Double)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Divide(DotSpatial.Positioning.Radian)">
            <summary>
            Returns the current value divided by the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Divide(System.Double)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Increment">
            <summary>
            Increments this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Decrement">
            <summary>
            Returns the current value decreased by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsLessThan(DotSpatial.Positioning.Radian)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsLessThan(System.Double)">
            <summary>
            Determines whether [is less than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsLessThanOrEqualTo(DotSpatial.Positioning.Radian)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsLessThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsGreaterThan(DotSpatial.Positioning.Radian)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsGreaterThan(System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Radian)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(DotSpatial.Positioning.Radian)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Radian"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(DotSpatial.Positioning.Longitude)~DotSpatial.Positioning.Radian">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Longitude"/> to <see cref="T:DotSpatial.Positioning.Radian"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(DotSpatial.Positioning.Latitude)~DotSpatial.Positioning.Radian">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Latitude"/> to <see cref="T:DotSpatial.Positioning.Radian"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(DotSpatial.Positioning.Azimuth)~DotSpatial.Positioning.Radian">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Azimuth"/> to <see cref="T:DotSpatial.Positioning.Radian"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(DotSpatial.Positioning.Angle)~DotSpatial.Positioning.Radian">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Angle"/> to <see cref="T:DotSpatial.Positioning.Radian"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(System.Double)~DotSpatial.Positioning.Radian">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:DotSpatial.Positioning.Radian"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.op_Explicit(System.String)~DotSpatial.Positioning.Radian">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.Radian"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Equals(DotSpatial.Positioning.Radian)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.Equals(DotSpatial.Positioning.Radian,System.Int32)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="decimals">The decimals.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.CompareTo(DotSpatial.Positioning.Radian)">
            <summary>
            Compares the current instance with the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified format
            and culture information.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Radian.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Radian.Value">
            <summary>
            Represents the numeric portion of a radian measurement.
            </summary>
            <value>A <strong>Double</strong> value indicating an angular measurement expressed in
            radians.</value>
            <remarks>This property stores the numeric radian measurement. A radian can be converted into a degree
            measurements via the <see cref="M:DotSpatial.Positioning.Radian.ToAngle(DotSpatial.Positioning.Radian)">ToAngle</see> method.</remarks>
        </member>
        <member name="T:DotSpatial.Positioning.Segment">
            <summary>
            Represents a line connected by two points on Earth's surface.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Segment._start">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Segment._end">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Segment.Empty">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Segment.#ctor(DotSpatial.Positioning.Position,DotSpatial.Positioning.Position)">
            <summary>
            Creates a new instance using the specified end points.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Segment.DistanceTo(DotSpatial.Positioning.Position)">
            <summary>
            Returns the distance from the segment to the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
            <remarks>This method analyzes the relative position of the segment to the line to determine the
            best mathematical approach.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Segment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Segment.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.Segment.Distance">
            <summary>
            Returns the distance from the starting point to the end point.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Segment.Bearing">
            <summary>
            Returns the bearing from the start to the end of the line.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Segment.Start">
            <summary>
            Returns the starting point of the segment.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Segment.End">
            <summary>
            Returns the end point of the segment.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Segment.Midpoint">
            <summary>
            Returns the location halfway from the start to the end point.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.SizeD">
            <summary>
            Represents a highly-precise two-dimensional size.
            </summary>
            <remarks><para>This structure is a <em>DotSpatial.Positioning</em> "parseable type" whose value can
            be freely converted to and from <strong>String</strong> objects via the
              <strong>ToString</strong> and <strong>Parse</strong> methods.</para>
              <para>Instances of this structure are guaranteed to be thread-safe because it is
            immutable (its properties can only be modified via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.SizeD._width">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SizeD._height">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SizeD.Empty">
            <summary>
            Represents a size with no value.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SizeD.Infinity">
            <summary>
            Represents an infinite size.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SizeD.Minimum">
            <summary>
            Represents the smallest possible size.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.SizeD.Maximum">
            <summary>
            Represents the largest possible size.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.#ctor(DotSpatial.Positioning.PointD)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SizeD"/> struct.
            </summary>
            <param name="pt">The pt.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.#ctor(DotSpatial.Positioning.SizeD)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SizeD"/> struct.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SizeD"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SizeD"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.SizeD"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.ToAspectRatio(DotSpatial.Positioning.SizeD)">
            <summary>
            Toes the aspect ratio.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.ToAspectRatio(System.Double)">
            <summary>
            Toes the aspect ratio.
            </summary>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Clone">
            <summary>
            Returns a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="obj">An <strong>Object</strong> to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.op_Equality(DotSpatial.Positioning.SizeD,DotSpatial.Positioning.SizeD)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.op_Inequality(DotSpatial.Positioning.SizeD,DotSpatial.Positioning.SizeD)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.op_Addition(DotSpatial.Positioning.SizeD,DotSpatial.Positioning.SizeD)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.op_Subtraction(DotSpatial.Positioning.SizeD,DotSpatial.Positioning.SizeD)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.op_Multiply(DotSpatial.Positioning.SizeD,DotSpatial.Positioning.SizeD)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.op_Division(DotSpatial.Positioning.SizeD,DotSpatial.Positioning.SizeD)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Add(DotSpatial.Positioning.SizeD)">
            <summary>
            Returns the sum of the current instance with the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Subtract(DotSpatial.Positioning.SizeD)">
            <summary>
            Returns the current instance decreased by the specified value.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Multiply(DotSpatial.Positioning.SizeD)">
            <summary>
            Returns the product of the current instance with the specified value.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Divide(DotSpatial.Positioning.SizeD)">
            <summary>
            Returns the current instance divided by the specified value.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.Equals(DotSpatial.Positioning.SizeD)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="other">A <strong>SizeD</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.SizeD.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.SizeD.Width">
            <summary>
            Returns the horizontal size.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SizeD.Height">
            <summary>
            Returns the vertical size.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SizeD.AspectRatio">
            <summary>
            Returns the ratio width to height.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.SizeD.IsEmpty">
            <summary>
            Indicates if the instance has any value.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Speed">
            <summary>
            Represents a measurement of an object's rate of travel.
            </summary>
            <remarks><para>This structure is used to measure the rate at which something moves in a
            given period of time. This structure supports several different unit types in both
            Imperial and Metric measurement systems. A speed is measured in two parts: a
            numeric value and a label indicating the units of measurement.</para>
              <para>Speed measurements can be converted to their equivalent values in other unit
            types through the use of several conversion methods such as ToMetersPerSecond,
              <strong>ToFeetPerSecond</strong>, <strong>ToKilometersPerHour</strong>, and others.
            Three methods, <strong>ToImperialUnitType</strong>,
              <strong>ToMetricUnitType</strong> and <strong>ToLocalUnitType</strong> also exist
            for converting a speed measurement to the most readable unit type (i.e. 1 meter vs.
            0.0001 kilometers) in any local culture.</para>
              <para>This structure is a <em>DotSpatial.Positioning</em> "parseable type" whose value can
            be freely converted to and from <strong>String</strong> objects via the
              <strong>ToString</strong> and <strong>Parse</strong> methods.</para>
              <para>Instances of this structure are guaranteed to be thread-safe because it is
            immutable (its properties can only be modified via constructors).</para></remarks>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.STATUTE_MPH_PER_KNOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPH_PER_KNOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.FPS_PER_KNOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.MPS_PER_KNOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPS_PER_KNOT">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KNOTS_PER_STATUTE_MPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPH_PER_STATUTE_MPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.FPS_PER_STATUTE_MPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.MPS_PER_STATUTE_MPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPS_PER_STATUTE_MPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KNOTS_PER_KPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.STATUTE_MPH_PER_KPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.FPS_PER_KPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.MPS_PER_KPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPS_PER_KPH">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KNOTS_PER_KPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.STATUTE_MPH_PER_KPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.FPS_PER_KPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.MPS_PER_KPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPH_PER_KPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KNOTS_PER_FPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.STATUTE_MPH_PER_FPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPH_PER_FPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.MPS_PER_FPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPS_PER_FPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KNOTS_PER_MPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.STATUTE_MPH_PER_MPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.FPS_PER_MPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPH_PER_MPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.KPS_PER_MPS">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed._value">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed._units">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.Empty">
            <summary>
            Represents a speed of zero.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.AtRest">
            <summary>
            Represents a speed of zero.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.SpeedOfLight">
            <summary>
            Returns the rate of travel of light in a vacuum.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.Maximum">
            <summary>
            Represents the largest possible speed.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.Minimum">
            <summary>
            Represents the smallest possible speed.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.SpeedOfSoundAtSeaLevel">
            <summary>
            Returns the rate of travel of sound waves at sea level.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.Infinity">
            <summary>
            Represents an infinite speed.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Speed.Invalid">
            <summary>
            Represents an invalid or unspecified value.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.#ctor(System.Double,DotSpatial.Positioning.SpeedUnit)">
            <summary>
            Creates a new instance using the specified value and unit type.
            </summary>
            <param name="value">The value.</param>
            <param name="units">The units.</param>
            <remarks>This is the most frequently used constructor of the speed class.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Speed"/> struct.
            </summary>
            <param name="value">The value.</param>
            <remarks>This powerful method is designed to simplify the process of parsing values read
            from a data store or typed in by the user.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Speed"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Positioning.Speed"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Clone">
            <summary>
            Returns a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Round(System.Int32)">
            <summary>
            Returns a new instance rounded to the specified number of digits.
            </summary>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to round off to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToFeetPerSecond">
            <summary>
            Returns the current instance converted to feet per second.
            </summary>
            <returns></returns>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToKilometersPerHour">
            <summary>
            Converts the current measurement into kilometers per hour.
            </summary>
            <returns></returns>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToKilometersPerSecond">
            <summary>
            Converts the current measurement into kilometers per second.
            </summary>
            <returns></returns>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToKnots">
            <summary>
            Returns the current instance converted to knots.
            </summary>
            <returns></returns>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToMetersPerSecond">
            <summary>
            Returns the current instance converted to meters per second.
            </summary>
            <returns></returns>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToStatuteMilesPerHour">
            <summary>
            Returns the current instance converted to miles per hours (MPH).
            </summary>
            <returns></returns>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToUnitType(DotSpatial.Positioning.SpeedUnit)">
            <summary>
            Returns the current instance converted to the specified unit type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToImperialUnitType">
            <summary>
            Returns the current instance converted to the most readable Imperial unit
            type.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest Imperial unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToMetricUnitType">
            <summary>
            Returns the current instance converted to the most readable Metric unit
            type.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers per second might be better expressed as 1 meter per second.  This method will
            determine the smallest metric unit type.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToLocalUnitType">
            <summary>
            Returns the current instance converted to the most readable Imperial or Metric
            unit type depending on the local culture.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            find the smallest unit type and convert the unit to the user's local
            numeric system (Imperial or Metric).</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToString(System.String)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified
            format.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToDistance(System.TimeSpan)">
            <summary>
            Returns the total distance traveled at the current speed for the specified
            time.
            </summary>
            <param name="time">The time.</param>
            <returns>A <strong>Distance</strong> representing the distance travelled at
            the current speed for the specified length of time.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified arbitrary value.
            </summary>
            <param name="obj">An <strong>Object</strong> representing a value to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are equivalent.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.GetHashCode">
            <summary>
            Returns a unique code for the current instance used in hash tables.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToString">
            <summary>
            Outputs the speed measurement as a formatted string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Parse(System.String)">
            <summary>
            Creates a speed measurement based on a string value.
            </summary>
            <param name="value"><para>A <strong>String</strong> in any of the following formats (or variation
            depending on the local culture):</para>
              <para>
              <table cellspacing="0" cols="4" cellpadding="2" width="100%">
              <tbody>
              <tr>
              <td>vu</td>
              <td>vv.vu</td>
              <td>v u</td>
              </tr>
              </tbody>
              </table>
              </para>
              <para>where <strong>vv.v</strong> is a decimal value and <strong>u</strong> is a
            unit type made from words in the following list:</para>
              <para>
              <table cellspacing="0" cols="3" cellpadding="2" width="100%">
              <tbody>
              <tr>
              <td>FEET</td>
              <td>FOOT</td>
              <td>METER</td>
              </tr>
              <tr>
              <td>METERS</td>
              <td>METRE</td>
              <td>METRES</td>
              </tr>
              <tr>
              <td>KILOMETER</td>
              <td>KILOMETRE</td>
              <td>KILOMETERS</td>
              </tr>
              <tr>
              <td>KILOMETRES</td>
              <td>KNOT</td>
              <td>KNOTS</td>
              </tr>
              <tr>
              <td>MILE</td>
              <td>MILES</td>
              <td>STATUTE MILE</td>
              </tr>
              <tr>
              <td>STATUTE MILES</td>
              <td>F</td>
              <td>FT</td>
              </tr>
              <tr>
              <td>M</td>
              <td>KM</td>
              <td>K</td>
              </tr>
              <tr>
              <td>PER</td>
              <td>-PER-</td>
              <td>/</td>
              </tr>
              <tr>
              <td>SECOND</td>
              <td>SEC</td>
              <td>S</td>
              </tr>
              <tr>
              <td>HOUR</td>
              <td>HR</td>
              <td>H</td>
              </tr>
              </tbody>
              </table>
              </para>
              <para>For example, "12 miles per hour" is acceptable because the words "miles,"
            "per," and "hour" are found in the above list. Some combinations are not supported,
            such as "feet/hour." The word combination should look similar to a value from the
              <see cref="T:DotSpatial.Positioning.SpeedUnit">SpeedUnit</see> enumeration.</para></param>
            <returns>A new <strong>Speed</strong> object with the specified value and
            units.</returns>
            <remarks>This powerful method simplifies the process of processing values read from a data
            store or entered via the user. This method even supports some natural language
            processing ability by understanding words (see list above). This method can parse any
            value created via the ToString method.</remarks>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.FromKnots(System.Double)">
            <summary>
            Froms the knots.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.FromStatuteMilesPerHour(System.Double)">
            <summary>
            Froms the statute miles per hour.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.FromKilometersPerHour(System.Double)">
            <summary>
            Froms the kilometers per hour.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.FromKilometersPerSecond(System.Double)">
            <summary>
            Froms the kilometers per second.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.FromFeetPerSecond(System.Double)">
            <summary>
            Froms the feet per second.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.FromMetersPerSecond(System.Double)">
            <summary>
            Froms the meters per second.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ParseSpeedUnit(System.String)">
            <summary>
            Parses the speed unit.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Random">
            <summary>
            Returns a random distance between 0 and 200 kilometers per hour.
            </summary>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Random(System.Random)">
            <summary>
            Returns a random distance between 0 and 200 kilometers per hour.
            </summary>
            <param name="generator">A <strong>Random</strong> object used to generate random values.</param>
            <returns>A <strong>Distance</strong> containing a random value, converted to local units.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Addition(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Subtraction(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Multiply(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Division(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_LessThan(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_LessThanOrEqual(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Equality(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Inequality(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_GreaterThanOrEqual(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_GreaterThan(DotSpatial.Positioning.Speed,DotSpatial.Positioning.Speed)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Add(DotSpatial.Positioning.Speed)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Add(System.Double)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Subtract(DotSpatial.Positioning.Speed)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Subtract(System.Double)">
            <summary>
            Subtracts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Multiply(DotSpatial.Positioning.Speed)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Multiply(System.Double)">
            <summary>
            Multiplies the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Divide(DotSpatial.Positioning.Speed)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Divide(System.Double)">
            <summary>
            Divides the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Increment">
            <summary>
            Returns the current instance increased by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Decrement">
            <summary>
            Returns the current instance decreased by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.IsLessThan(DotSpatial.Positioning.Speed)">
            <summary>
            Indicates if the current instance is smaller than the specified speed.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.IsLessThanOrEqualTo(DotSpatial.Positioning.Speed)">
            <summary>
            Indicates if the current instance is smaller or equivalent to than the specified
            speed.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.IsGreaterThan(DotSpatial.Positioning.Speed)">
            <summary>
            Indicates if the current instance is larger than the specified speed.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.IsGreaterThanOrEqualTo(DotSpatial.Positioning.Speed)">
            <summary>
            Indicates if the current instance is larger or equivalent to than the specified
            speed.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Explicit(System.String)~DotSpatial.Positioning.Speed">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:DotSpatial.Positioning.Speed"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.op_Explicit(DotSpatial.Positioning.Speed)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:DotSpatial.Positioning.Speed"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Equals(DotSpatial.Positioning.Speed)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.Equals(DotSpatial.Positioning.Speed,System.Int32)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <param name="decimals">The decimals.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.CompareTo(DotSpatial.Positioning.Speed)">
            <summary>
            Compares the current instance to the specified speed.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified format
            and culture information.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.</returns>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:DotSpatial.Positioning.Speed.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="P:DotSpatial.Positioning.Speed.Value">
            <summary>
            Returns the numeric portion of the speed measurement.
            </summary>
            <remarks>This property is combined with the
            <see cref="P:DotSpatial.Positioning.Speed.Units">Units</see> property to form a complete
            speed measurement.</remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Speed.Units">
            <summary>
            Returns the units portion of the speed measurement.
            </summary>
            <value>A value from the <see cref="T:DotSpatial.Positioning.SpeedUnit">SpeedUnits</see> enumeration.</value>
            <remarks><para>Following proper scientific practices, speed measurements are always made
            using a value paired with a unit type. </para>
              <para><img src="BestPractice.jpg"/></para><para><strong>Always explicitly
            convert to a specific speed unit type before performing
            mathematics.</strong></para>
              <para>Since the Units property of the Speed class can be modified, it is not
            safe to assume that a speed measurement will always be of a certain unit type.
            Therefore, use a conversion method such as <see cref="M:DotSpatial.Positioning.Speed.ToKilometersPerHour">
            ToKilometersPerHour</see> or <see cref="M:DotSpatial.Positioning.Speed.ToStatuteMilesPerHour">
            ToStatuteMilesPerHour</see> to ensure that the speed is in the correct unit
            type before perfoming mathematics.</para></remarks>
        </member>
        <member name="P:DotSpatial.Positioning.Speed.IsEmpty">
            <summary>
            Indicates if the measurement is zero.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Speed.IsMetric">
            <summary>
            Indicates if the unit of measurement is a Metric unit type.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Speed.IsInfinity">
            <summary>
            Indicates if the measurement is infinite.
            </summary>
        </member>
        <member name="P:DotSpatial.Positioning.Speed.IsInvalid">
            <summary>
            Indicates if the current instance is invalid or unspecified.
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.SpeedUnit">
             <summary>
             Indicates the unit of measure for speed measurements.
             </summary>
             <seealso cref="P:DotSpatial.Positioning.Speed.Units">Units Property (Speed Class)</seealso>
            
             <seealso cref="T:DotSpatial.Positioning.Speed">Speed Class</seealso>
             <remarks>This enumeration is used by the
             <see cref="P:DotSpatial.Positioning.Speed.Units">Units</see> property of the
             <see cref="T:DotSpatial.Positioning.Speed">Speed</see>
             class in conjunction with the <see cref="P:DotSpatial.Positioning.Speed.Value">Value</see>
             property to describe a speed measurement.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedUnit.Knots">
            <summary>The number of nautical miles travelled in one hour.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedUnit.StatuteMilesPerHour">
            <summary>The number of statute miles travelled in one hour, also known as MPH.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedUnit.KilometersPerHour">
            <summary>The number of kilometers travelled in one hour, also known as KPH.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedUnit.KilometersPerSecond">
            <summary>The number of kilometers travelled in one second, also known as
            KM/S.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedUnit.FeetPerSecond">
            <summary>The number of feet travelled in one second, also known as FT/S.</summary>
        </member>
        <member name="F:DotSpatial.Positioning.SpeedUnit.MetersPerSecond">
            <summary>The number of meters travelled in one hour, also known as M/S.</summary>
        </member>
        <member name="T:DotSpatial.Positioning.StaticFinalizer">
            <summary>
            Serves as a notification to dispose of static objects.
            </summary>
            <example lang="cs">
            private static StaticFinalizer MyStaticFinalizer = new StaticFinalizer();
            private static Brush UnmanagedResource = new SolidBrush(Color.Blue);
            void Constructor()
            {
            MyStaticFinalizer.Disposed += new EventHandler(StaticFinalize);
            }
            void StaticFinalize(object sender, EventArgs e)
            {
            UnmanagedResource.Dispose();
            }
              </example>
            <remarks>It is not uncommon for static variables to contain unmanaged resources.  Yet,
            the .NET Garbage Collector does not allow for finalizers on static objects.  The StaticFinalizer
            class serves to work around this problem.  To use this class, declare an instance as a
            private, static variable.  Then, hook into its Disposed event.  The event will be raised
            during the StaticFinalizer's own finalizer, allowing you to safely dispose of static resources.</remarks>
        </member>
        <member name="F:DotSpatial.Positioning.StaticFinalizer.Current">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.StaticFinalizer.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:DotSpatial.Positioning.StaticFinalizer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="E:DotSpatial.Positioning.StaticFinalizer.Disposed">
            <summary>
            Occurs when [disposed].
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.VirtualDevice">
            <summary>
            Represents a simulated GPS device.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.VirtualDevice._emulator">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Positioning.VirtualDevice.#ctor(DotSpatial.Positioning.Emulator)">
            <summary>
            Creates a new instance using the specified emulator.
            </summary>
            <param name="emulator">The emulator.</param>
        </member>
        <member name="M:DotSpatial.Positioning.VirtualDevice.OnCacheRemove">
            <summary>
            Overrides OnChaceRemove
            Since emulators don't qualify as detected devices, this
            method has no behavior.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.VirtualDevice.OnCacheWrite">
            <summary>
            Records information about this device to the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.VirtualDevice.OnCacheRead">
            <summary>
            Reads information about this device from the registry.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.VirtualDevice.OpenStream(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates a new Stream object for the device.
            </summary>
            <param name="access">The access.</param>
            <param name="sharing">The sharing.</param>
            <returns>A <strong>Stream</strong> object.</returns>
        </member>
        <member name="P:DotSpatial.Positioning.VirtualDevice.Name">
            <summary>
            Gets the Name of the Virtual Device
            </summary>
        </member>
        <member name="T:DotSpatial.Positioning.Xml">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Xml.GML_XML_NAMESPACE">
            <summary>
            Returns the XML namespace for GML documents.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Xml.GML_XML_PREFIX">
            <summary>
            Returns the prefix applied to all GML XML elements.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Xml.DOT_SPATIAL_POSITIONING_XML_NAMESPACE">
            <summary>
            Returns the XML namespace for DotSpatial.Positioning documents.
            </summary>
        </member>
        <member name="F:DotSpatial.Positioning.Xml.DOT_SPATIAL_POSITIONING_XML_PREFIX">
            <summary>
            Returns the prefix applied to all DotSpatial.Positioning XML elements.
            </summary>
        </member>
        <member name="M:DotSpatial.Positioning.Xml.Serialize``1(``0)">
            <summary>
            Used to test the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> implementations of DotSpatial.Positioning types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Positioning.Xml.Deserialize``1(System.String)">
            <summary>
            Used to test the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> implementations of DotSpatial.Positioning types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
    </members>
</doc>
